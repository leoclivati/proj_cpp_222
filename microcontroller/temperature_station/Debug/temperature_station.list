
temperature_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040c0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004258  08004258  00014258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004288  08004288  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004288  08004288  00014288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004290  08004290  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004290  08004290  00014290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004298  08004298  00014298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800429c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000074  08004310  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08004310  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebf0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a18  00000000  00000000  0002ec94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  000316b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac0  00000000  00000000  00032270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191aa  00000000  00000000  00032d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f9d6  00000000  00000000  0004beda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000898f2  00000000  00000000  0005b8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e51a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000349c  00000000  00000000  000e51f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000074 	.word	0x20000074
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004240 	.word	0x08004240

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000078 	.word	0x20000078
 80001d4:	08004240 	.word	0x08004240

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_d2f>:
 8000550:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000554:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000558:	bf24      	itt	cs
 800055a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800055e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000562:	d90d      	bls.n	8000580 <__aeabi_d2f+0x30>
 8000564:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000568:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800056c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000570:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000574:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000578:	bf08      	it	eq
 800057a:	f020 0001 	biceq.w	r0, r0, #1
 800057e:	4770      	bx	lr
 8000580:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000584:	d121      	bne.n	80005ca <__aeabi_d2f+0x7a>
 8000586:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800058a:	bfbc      	itt	lt
 800058c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000590:	4770      	bxlt	lr
 8000592:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000596:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800059a:	f1c2 0218 	rsb	r2, r2, #24
 800059e:	f1c2 0c20 	rsb	ip, r2, #32
 80005a2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005a6:	fa20 f002 	lsr.w	r0, r0, r2
 80005aa:	bf18      	it	ne
 80005ac:	f040 0001 	orrne.w	r0, r0, #1
 80005b0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005b4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005b8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005bc:	ea40 000c 	orr.w	r0, r0, ip
 80005c0:	fa23 f302 	lsr.w	r3, r3, r2
 80005c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005c8:	e7cc      	b.n	8000564 <__aeabi_d2f+0x14>
 80005ca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005ce:	d107      	bne.n	80005e0 <__aeabi_d2f+0x90>
 80005d0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005d4:	bf1e      	ittt	ne
 80005d6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005da:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005de:	4770      	bxne	lr
 80005e0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__aeabi_uldivmod>:
 80005f0:	b953      	cbnz	r3, 8000608 <__aeabi_uldivmod+0x18>
 80005f2:	b94a      	cbnz	r2, 8000608 <__aeabi_uldivmod+0x18>
 80005f4:	2900      	cmp	r1, #0
 80005f6:	bf08      	it	eq
 80005f8:	2800      	cmpeq	r0, #0
 80005fa:	bf1c      	itt	ne
 80005fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000600:	f04f 30ff 	movne.w	r0, #4294967295
 8000604:	f000 b974 	b.w	80008f0 <__aeabi_idiv0>
 8000608:	f1ad 0c08 	sub.w	ip, sp, #8
 800060c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000610:	f000 f806 	bl	8000620 <__udivmoddi4>
 8000614:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000618:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800061c:	b004      	add	sp, #16
 800061e:	4770      	bx	lr

08000620 <__udivmoddi4>:
 8000620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000624:	9d08      	ldr	r5, [sp, #32]
 8000626:	4604      	mov	r4, r0
 8000628:	468e      	mov	lr, r1
 800062a:	2b00      	cmp	r3, #0
 800062c:	d14d      	bne.n	80006ca <__udivmoddi4+0xaa>
 800062e:	428a      	cmp	r2, r1
 8000630:	4694      	mov	ip, r2
 8000632:	d969      	bls.n	8000708 <__udivmoddi4+0xe8>
 8000634:	fab2 f282 	clz	r2, r2
 8000638:	b152      	cbz	r2, 8000650 <__udivmoddi4+0x30>
 800063a:	fa01 f302 	lsl.w	r3, r1, r2
 800063e:	f1c2 0120 	rsb	r1, r2, #32
 8000642:	fa20 f101 	lsr.w	r1, r0, r1
 8000646:	fa0c fc02 	lsl.w	ip, ip, r2
 800064a:	ea41 0e03 	orr.w	lr, r1, r3
 800064e:	4094      	lsls	r4, r2
 8000650:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000654:	0c21      	lsrs	r1, r4, #16
 8000656:	fbbe f6f8 	udiv	r6, lr, r8
 800065a:	fa1f f78c 	uxth.w	r7, ip
 800065e:	fb08 e316 	mls	r3, r8, r6, lr
 8000662:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000666:	fb06 f107 	mul.w	r1, r6, r7
 800066a:	4299      	cmp	r1, r3
 800066c:	d90a      	bls.n	8000684 <__udivmoddi4+0x64>
 800066e:	eb1c 0303 	adds.w	r3, ip, r3
 8000672:	f106 30ff 	add.w	r0, r6, #4294967295
 8000676:	f080 811f 	bcs.w	80008b8 <__udivmoddi4+0x298>
 800067a:	4299      	cmp	r1, r3
 800067c:	f240 811c 	bls.w	80008b8 <__udivmoddi4+0x298>
 8000680:	3e02      	subs	r6, #2
 8000682:	4463      	add	r3, ip
 8000684:	1a5b      	subs	r3, r3, r1
 8000686:	b2a4      	uxth	r4, r4
 8000688:	fbb3 f0f8 	udiv	r0, r3, r8
 800068c:	fb08 3310 	mls	r3, r8, r0, r3
 8000690:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000694:	fb00 f707 	mul.w	r7, r0, r7
 8000698:	42a7      	cmp	r7, r4
 800069a:	d90a      	bls.n	80006b2 <__udivmoddi4+0x92>
 800069c:	eb1c 0404 	adds.w	r4, ip, r4
 80006a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80006a4:	f080 810a 	bcs.w	80008bc <__udivmoddi4+0x29c>
 80006a8:	42a7      	cmp	r7, r4
 80006aa:	f240 8107 	bls.w	80008bc <__udivmoddi4+0x29c>
 80006ae:	4464      	add	r4, ip
 80006b0:	3802      	subs	r0, #2
 80006b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006b6:	1be4      	subs	r4, r4, r7
 80006b8:	2600      	movs	r6, #0
 80006ba:	b11d      	cbz	r5, 80006c4 <__udivmoddi4+0xa4>
 80006bc:	40d4      	lsrs	r4, r2
 80006be:	2300      	movs	r3, #0
 80006c0:	e9c5 4300 	strd	r4, r3, [r5]
 80006c4:	4631      	mov	r1, r6
 80006c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ca:	428b      	cmp	r3, r1
 80006cc:	d909      	bls.n	80006e2 <__udivmoddi4+0xc2>
 80006ce:	2d00      	cmp	r5, #0
 80006d0:	f000 80ef 	beq.w	80008b2 <__udivmoddi4+0x292>
 80006d4:	2600      	movs	r6, #0
 80006d6:	e9c5 0100 	strd	r0, r1, [r5]
 80006da:	4630      	mov	r0, r6
 80006dc:	4631      	mov	r1, r6
 80006de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006e2:	fab3 f683 	clz	r6, r3
 80006e6:	2e00      	cmp	r6, #0
 80006e8:	d14a      	bne.n	8000780 <__udivmoddi4+0x160>
 80006ea:	428b      	cmp	r3, r1
 80006ec:	d302      	bcc.n	80006f4 <__udivmoddi4+0xd4>
 80006ee:	4282      	cmp	r2, r0
 80006f0:	f200 80f9 	bhi.w	80008e6 <__udivmoddi4+0x2c6>
 80006f4:	1a84      	subs	r4, r0, r2
 80006f6:	eb61 0303 	sbc.w	r3, r1, r3
 80006fa:	2001      	movs	r0, #1
 80006fc:	469e      	mov	lr, r3
 80006fe:	2d00      	cmp	r5, #0
 8000700:	d0e0      	beq.n	80006c4 <__udivmoddi4+0xa4>
 8000702:	e9c5 4e00 	strd	r4, lr, [r5]
 8000706:	e7dd      	b.n	80006c4 <__udivmoddi4+0xa4>
 8000708:	b902      	cbnz	r2, 800070c <__udivmoddi4+0xec>
 800070a:	deff      	udf	#255	; 0xff
 800070c:	fab2 f282 	clz	r2, r2
 8000710:	2a00      	cmp	r2, #0
 8000712:	f040 8092 	bne.w	800083a <__udivmoddi4+0x21a>
 8000716:	eba1 010c 	sub.w	r1, r1, ip
 800071a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800071e:	fa1f fe8c 	uxth.w	lr, ip
 8000722:	2601      	movs	r6, #1
 8000724:	0c20      	lsrs	r0, r4, #16
 8000726:	fbb1 f3f7 	udiv	r3, r1, r7
 800072a:	fb07 1113 	mls	r1, r7, r3, r1
 800072e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000732:	fb0e f003 	mul.w	r0, lr, r3
 8000736:	4288      	cmp	r0, r1
 8000738:	d908      	bls.n	800074c <__udivmoddi4+0x12c>
 800073a:	eb1c 0101 	adds.w	r1, ip, r1
 800073e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000742:	d202      	bcs.n	800074a <__udivmoddi4+0x12a>
 8000744:	4288      	cmp	r0, r1
 8000746:	f200 80cb 	bhi.w	80008e0 <__udivmoddi4+0x2c0>
 800074a:	4643      	mov	r3, r8
 800074c:	1a09      	subs	r1, r1, r0
 800074e:	b2a4      	uxth	r4, r4
 8000750:	fbb1 f0f7 	udiv	r0, r1, r7
 8000754:	fb07 1110 	mls	r1, r7, r0, r1
 8000758:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800075c:	fb0e fe00 	mul.w	lr, lr, r0
 8000760:	45a6      	cmp	lr, r4
 8000762:	d908      	bls.n	8000776 <__udivmoddi4+0x156>
 8000764:	eb1c 0404 	adds.w	r4, ip, r4
 8000768:	f100 31ff 	add.w	r1, r0, #4294967295
 800076c:	d202      	bcs.n	8000774 <__udivmoddi4+0x154>
 800076e:	45a6      	cmp	lr, r4
 8000770:	f200 80bb 	bhi.w	80008ea <__udivmoddi4+0x2ca>
 8000774:	4608      	mov	r0, r1
 8000776:	eba4 040e 	sub.w	r4, r4, lr
 800077a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800077e:	e79c      	b.n	80006ba <__udivmoddi4+0x9a>
 8000780:	f1c6 0720 	rsb	r7, r6, #32
 8000784:	40b3      	lsls	r3, r6
 8000786:	fa22 fc07 	lsr.w	ip, r2, r7
 800078a:	ea4c 0c03 	orr.w	ip, ip, r3
 800078e:	fa20 f407 	lsr.w	r4, r0, r7
 8000792:	fa01 f306 	lsl.w	r3, r1, r6
 8000796:	431c      	orrs	r4, r3
 8000798:	40f9      	lsrs	r1, r7
 800079a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800079e:	fa00 f306 	lsl.w	r3, r0, r6
 80007a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80007a6:	0c20      	lsrs	r0, r4, #16
 80007a8:	fa1f fe8c 	uxth.w	lr, ip
 80007ac:	fb09 1118 	mls	r1, r9, r8, r1
 80007b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007b4:	fb08 f00e 	mul.w	r0, r8, lr
 80007b8:	4288      	cmp	r0, r1
 80007ba:	fa02 f206 	lsl.w	r2, r2, r6
 80007be:	d90b      	bls.n	80007d8 <__udivmoddi4+0x1b8>
 80007c0:	eb1c 0101 	adds.w	r1, ip, r1
 80007c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80007c8:	f080 8088 	bcs.w	80008dc <__udivmoddi4+0x2bc>
 80007cc:	4288      	cmp	r0, r1
 80007ce:	f240 8085 	bls.w	80008dc <__udivmoddi4+0x2bc>
 80007d2:	f1a8 0802 	sub.w	r8, r8, #2
 80007d6:	4461      	add	r1, ip
 80007d8:	1a09      	subs	r1, r1, r0
 80007da:	b2a4      	uxth	r4, r4
 80007dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80007e0:	fb09 1110 	mls	r1, r9, r0, r1
 80007e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007ec:	458e      	cmp	lr, r1
 80007ee:	d908      	bls.n	8000802 <__udivmoddi4+0x1e2>
 80007f0:	eb1c 0101 	adds.w	r1, ip, r1
 80007f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80007f8:	d26c      	bcs.n	80008d4 <__udivmoddi4+0x2b4>
 80007fa:	458e      	cmp	lr, r1
 80007fc:	d96a      	bls.n	80008d4 <__udivmoddi4+0x2b4>
 80007fe:	3802      	subs	r0, #2
 8000800:	4461      	add	r1, ip
 8000802:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000806:	fba0 9402 	umull	r9, r4, r0, r2
 800080a:	eba1 010e 	sub.w	r1, r1, lr
 800080e:	42a1      	cmp	r1, r4
 8000810:	46c8      	mov	r8, r9
 8000812:	46a6      	mov	lr, r4
 8000814:	d356      	bcc.n	80008c4 <__udivmoddi4+0x2a4>
 8000816:	d053      	beq.n	80008c0 <__udivmoddi4+0x2a0>
 8000818:	b15d      	cbz	r5, 8000832 <__udivmoddi4+0x212>
 800081a:	ebb3 0208 	subs.w	r2, r3, r8
 800081e:	eb61 010e 	sbc.w	r1, r1, lr
 8000822:	fa01 f707 	lsl.w	r7, r1, r7
 8000826:	fa22 f306 	lsr.w	r3, r2, r6
 800082a:	40f1      	lsrs	r1, r6
 800082c:	431f      	orrs	r7, r3
 800082e:	e9c5 7100 	strd	r7, r1, [r5]
 8000832:	2600      	movs	r6, #0
 8000834:	4631      	mov	r1, r6
 8000836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800083a:	f1c2 0320 	rsb	r3, r2, #32
 800083e:	40d8      	lsrs	r0, r3
 8000840:	fa0c fc02 	lsl.w	ip, ip, r2
 8000844:	fa21 f303 	lsr.w	r3, r1, r3
 8000848:	4091      	lsls	r1, r2
 800084a:	4301      	orrs	r1, r0
 800084c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000850:	fa1f fe8c 	uxth.w	lr, ip
 8000854:	fbb3 f0f7 	udiv	r0, r3, r7
 8000858:	fb07 3610 	mls	r6, r7, r0, r3
 800085c:	0c0b      	lsrs	r3, r1, #16
 800085e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000862:	fb00 f60e 	mul.w	r6, r0, lr
 8000866:	429e      	cmp	r6, r3
 8000868:	fa04 f402 	lsl.w	r4, r4, r2
 800086c:	d908      	bls.n	8000880 <__udivmoddi4+0x260>
 800086e:	eb1c 0303 	adds.w	r3, ip, r3
 8000872:	f100 38ff 	add.w	r8, r0, #4294967295
 8000876:	d22f      	bcs.n	80008d8 <__udivmoddi4+0x2b8>
 8000878:	429e      	cmp	r6, r3
 800087a:	d92d      	bls.n	80008d8 <__udivmoddi4+0x2b8>
 800087c:	3802      	subs	r0, #2
 800087e:	4463      	add	r3, ip
 8000880:	1b9b      	subs	r3, r3, r6
 8000882:	b289      	uxth	r1, r1
 8000884:	fbb3 f6f7 	udiv	r6, r3, r7
 8000888:	fb07 3316 	mls	r3, r7, r6, r3
 800088c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000890:	fb06 f30e 	mul.w	r3, r6, lr
 8000894:	428b      	cmp	r3, r1
 8000896:	d908      	bls.n	80008aa <__udivmoddi4+0x28a>
 8000898:	eb1c 0101 	adds.w	r1, ip, r1
 800089c:	f106 38ff 	add.w	r8, r6, #4294967295
 80008a0:	d216      	bcs.n	80008d0 <__udivmoddi4+0x2b0>
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d914      	bls.n	80008d0 <__udivmoddi4+0x2b0>
 80008a6:	3e02      	subs	r6, #2
 80008a8:	4461      	add	r1, ip
 80008aa:	1ac9      	subs	r1, r1, r3
 80008ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008b0:	e738      	b.n	8000724 <__udivmoddi4+0x104>
 80008b2:	462e      	mov	r6, r5
 80008b4:	4628      	mov	r0, r5
 80008b6:	e705      	b.n	80006c4 <__udivmoddi4+0xa4>
 80008b8:	4606      	mov	r6, r0
 80008ba:	e6e3      	b.n	8000684 <__udivmoddi4+0x64>
 80008bc:	4618      	mov	r0, r3
 80008be:	e6f8      	b.n	80006b2 <__udivmoddi4+0x92>
 80008c0:	454b      	cmp	r3, r9
 80008c2:	d2a9      	bcs.n	8000818 <__udivmoddi4+0x1f8>
 80008c4:	ebb9 0802 	subs.w	r8, r9, r2
 80008c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008cc:	3801      	subs	r0, #1
 80008ce:	e7a3      	b.n	8000818 <__udivmoddi4+0x1f8>
 80008d0:	4646      	mov	r6, r8
 80008d2:	e7ea      	b.n	80008aa <__udivmoddi4+0x28a>
 80008d4:	4620      	mov	r0, r4
 80008d6:	e794      	b.n	8000802 <__udivmoddi4+0x1e2>
 80008d8:	4640      	mov	r0, r8
 80008da:	e7d1      	b.n	8000880 <__udivmoddi4+0x260>
 80008dc:	46d0      	mov	r8, sl
 80008de:	e77b      	b.n	80007d8 <__udivmoddi4+0x1b8>
 80008e0:	3b02      	subs	r3, #2
 80008e2:	4461      	add	r1, ip
 80008e4:	e732      	b.n	800074c <__udivmoddi4+0x12c>
 80008e6:	4630      	mov	r0, r6
 80008e8:	e709      	b.n	80006fe <__udivmoddi4+0xde>
 80008ea:	4464      	add	r4, ip
 80008ec:	3802      	subs	r0, #2
 80008ee:	e742      	b.n	8000776 <__udivmoddi4+0x156>

080008f0 <__aeabi_idiv0>:
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop

080008f4 <_ZN7MPU60504initEv>:
 */


#include "MPU6050.h"

void MPU6050::init(){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b088      	sub	sp, #32
 80008f8:	af04      	add	r7, sp, #16
 80008fa:	6078      	str	r0, [r7, #4]
	uint8_t check, data;

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 80008fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000900:	9302      	str	r3, [sp, #8]
 8000902:	2301      	movs	r3, #1
 8000904:	9301      	str	r3, [sp, #4]
 8000906:	f107 030f 	add.w	r3, r7, #15
 800090a:	9300      	str	r3, [sp, #0]
 800090c:	2301      	movs	r3, #1
 800090e:	2275      	movs	r2, #117	; 0x75
 8000910:	21d0      	movs	r1, #208	; 0xd0
 8000912:	4815      	ldr	r0, [pc, #84]	; (8000968 <_ZN7MPU60504initEv+0x74>)
 8000914:	f001 fcfa 	bl	800230c <HAL_I2C_Mem_Read>

	if(check == 104){
 8000918:	7bfb      	ldrb	r3, [r7, #15]
 800091a:	2b68      	cmp	r3, #104	; 0x68
 800091c:	d11f      	bne.n	800095e <_ZN7MPU60504initEv+0x6a>
			data = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	73bb      	strb	r3, [r7, #14]
			HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_REG, 1, &data, 1, 1000);
 8000922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000926:	9302      	str	r3, [sp, #8]
 8000928:	2301      	movs	r3, #1
 800092a:	9301      	str	r3, [sp, #4]
 800092c:	f107 030e 	add.w	r3, r7, #14
 8000930:	9300      	str	r3, [sp, #0]
 8000932:	2301      	movs	r3, #1
 8000934:	226b      	movs	r2, #107	; 0x6b
 8000936:	21d0      	movs	r1, #208	; 0xd0
 8000938:	480b      	ldr	r0, [pc, #44]	; (8000968 <_ZN7MPU60504initEv+0x74>)
 800093a:	f001 fbed 	bl	8002118 <HAL_I2C_Mem_Write>
			data = 0x01;
 800093e:	2301      	movs	r3, #1
 8000940:	73bb      	strb	r3, [r7, #14]
			HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_REG, 1, &data, 1, 1000);
 8000942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000946:	9302      	str	r3, [sp, #8]
 8000948:	2301      	movs	r3, #1
 800094a:	9301      	str	r3, [sp, #4]
 800094c:	f107 030e 	add.w	r3, r7, #14
 8000950:	9300      	str	r3, [sp, #0]
 8000952:	2301      	movs	r3, #1
 8000954:	2219      	movs	r2, #25
 8000956:	21d0      	movs	r1, #208	; 0xd0
 8000958:	4803      	ldr	r0, [pc, #12]	; (8000968 <_ZN7MPU60504initEv+0x74>)
 800095a:	f001 fbdd 	bl	8002118 <HAL_I2C_Mem_Write>
	}
}
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000090 	.word	0x20000090
 800096c:	00000000 	.word	0x00000000

08000970 <_ZN7MPU605015readTemperatureEv>:

void MPU6050::readTemperature(){
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af04      	add	r7, sp, #16
 8000976:	6078      	str	r0, [r7, #4]
	uint8_t data[2];
	int16_t temp_raw;

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, TEMP_REG, 1, data, 2, 1000);
 8000978:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097c:	9302      	str	r3, [sp, #8]
 800097e:	2302      	movs	r3, #2
 8000980:	9301      	str	r3, [sp, #4]
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2301      	movs	r3, #1
 800098a:	2241      	movs	r2, #65	; 0x41
 800098c:	21d0      	movs	r1, #208	; 0xd0
 800098e:	4816      	ldr	r0, [pc, #88]	; (80009e8 <_ZN7MPU605015readTemperatureEv+0x78>)
 8000990:	f001 fcbc 	bl	800230c <HAL_I2C_Mem_Read>

	temp_raw = (int16_t)(data[0]<<8 | data[1]);
 8000994:	7b3b      	ldrb	r3, [r7, #12]
 8000996:	021b      	lsls	r3, r3, #8
 8000998:	b21a      	sxth	r2, r3
 800099a:	7b7b      	ldrb	r3, [r7, #13]
 800099c:	b21b      	sxth	r3, r3
 800099e:	4313      	orrs	r3, r2
 80009a0:	81fb      	strh	r3, [r7, #14]
	temperature = (temp_raw/340) + 36.53;
 80009a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009a6:	4a11      	ldr	r2, [pc, #68]	; (80009ec <_ZN7MPU605015readTemperatureEv+0x7c>)
 80009a8:	fb82 1203 	smull	r1, r2, r2, r3
 80009ac:	11d2      	asrs	r2, r2, #7
 80009ae:	17db      	asrs	r3, r3, #31
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	b21b      	sxth	r3, r3
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fd61 	bl	800047c <__aeabi_i2d>
 80009ba:	a309      	add	r3, pc, #36	; (adr r3, 80009e0 <_ZN7MPU605015readTemperatureEv+0x70>)
 80009bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009c0:	f7ff fc10 	bl	80001e4 <__adddf3>
 80009c4:	4602      	mov	r2, r0
 80009c6:	460b      	mov	r3, r1
 80009c8:	4610      	mov	r0, r2
 80009ca:	4619      	mov	r1, r3
 80009cc:	f7ff fdc0 	bl	8000550 <__aeabi_d2f>
 80009d0:	4602      	mov	r2, r0
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	601a      	str	r2, [r3, #0]
}
 80009d6:	bf00      	nop
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	0a3d70a4 	.word	0x0a3d70a4
 80009e4:	404243d7 	.word	0x404243d7
 80009e8:	20000090 	.word	0x20000090
 80009ec:	60606061 	.word	0x60606061

080009f0 <_ZN7MPU605014getTemperatureEv>:

float MPU6050::getTemperature(){
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	return temperature;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	ee07 3a90 	vmov	s15, r3
}
 8000a00:	eeb0 0a67 	vmov.f32	s0, s15
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <_ZN5ClockC1Ehhhb>:
 *  Created on: 30 de nov de 2022
 *      Author: leocl
 */
#include "clockcalendar.h"

Clock::Clock(uint8_t h, uint8_t s, uint8_t m, bool pm){
 8000a0e:	b480      	push	{r7}
 8000a10:	b083      	sub	sp, #12
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
 8000a16:	4608      	mov	r0, r1
 8000a18:	4611      	mov	r1, r2
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	70fb      	strb	r3, [r7, #3]
 8000a20:	460b      	mov	r3, r1
 8000a22:	70bb      	strb	r3, [r7, #2]
 8000a24:	4613      	mov	r3, r2
 8000a26:	707b      	strb	r3, [r7, #1]
			hr = h;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	78fa      	ldrb	r2, [r7, #3]
 8000a2c:	701a      	strb	r2, [r3, #0]
			min = m;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	787a      	ldrb	r2, [r7, #1]
 8000a32:	705a      	strb	r2, [r3, #1]
			sec = s;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	78ba      	ldrb	r2, [r7, #2]
 8000a38:	709a      	strb	r2, [r3, #2]
			is_pm = pm;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	7c3a      	ldrb	r2, [r7, #16]
 8000a3e:	70da      	strb	r2, [r3, #3]
		}
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4618      	mov	r0, r3
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <_ZN5ClockC1Ev>:

Clock::Clock(){
 8000a4e:	b480      	push	{r7}
 8000a50:	b083      	sub	sp, #12
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
	hr = 0;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
	min = 0;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	705a      	strb	r2, [r3, #1]
	sec = 0;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2200      	movs	r2, #0
 8000a66:	709a      	strb	r2, [r3, #2]
	is_pm = 0;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	70da      	strb	r2, [r3, #3]
}
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4618      	mov	r0, r3
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <_ZN5Clock9getSecondEv>:
			s = sec;
			m = min;
			pm = is_pm;
		}

uint8_t Clock::getSecond(){
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	return sec;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	789b      	ldrb	r3, [r3, #2]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <_ZN5Clock9getMinuteEv>:

uint8_t Clock::getMinute(){
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	return min;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	785b      	ldrb	r3, [r3, #1]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <_ZN5Clock7getHourEv>:

uint8_t Clock::getHour(){
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	return hr;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	781b      	ldrb	r3, [r3, #0]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <_ZN5Clock7getPMAMEv>:

bool Clock::getPMAM(){
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	return is_pm;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	78db      	ldrb	r3, [r3, #3]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <_ZN5Clock7advanceEv>:

void Clock::advance(){
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
			sec++;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	789b      	ldrb	r3, [r3, #2]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	709a      	strb	r2, [r3, #2]
			if(sec == 60){
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	789b      	ldrb	r3, [r3, #2]
 8000af4:	2b3c      	cmp	r3, #60	; 0x3c
 8000af6:	d108      	bne.n	8000b0a <_ZN5Clock7advanceEv+0x2e>
				sec = 0;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2200      	movs	r2, #0
 8000afc:	709a      	strb	r2, [r3, #2]
				min++;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	785b      	ldrb	r3, [r3, #1]
 8000b02:	3301      	adds	r3, #1
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	705a      	strb	r2, [r3, #1]
			}
			if(min == 60){
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	785b      	ldrb	r3, [r3, #1]
 8000b0e:	2b3c      	cmp	r3, #60	; 0x3c
 8000b10:	d108      	bne.n	8000b24 <_ZN5Clock7advanceEv+0x48>
				min = 0;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	705a      	strb	r2, [r3, #1]
				hr++;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	701a      	strb	r2, [r3, #0]
			}
			if(hr > 12){
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b0c      	cmp	r3, #12
 8000b2a:	d909      	bls.n	8000b40 <_ZN5Clock7advanceEv+0x64>
				hr = 1;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2201      	movs	r2, #1
 8000b30:	701a      	strb	r2, [r3, #0]
				is_pm = !(is_pm);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	78db      	ldrb	r3, [r3, #3]
 8000b36:	f083 0301 	eor.w	r3, r3, #1
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	70da      	strb	r2, [r3, #3]
			}
		}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <_ZN8CalendarC1Ehhh>:


//Calendar

Calendar::Calendar(uint8_t m, uint8_t d, uint8_t y){
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	4608      	mov	r0, r1
 8000b56:	4611      	mov	r1, r2
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	70fb      	strb	r3, [r7, #3]
 8000b5e:	460b      	mov	r3, r1
 8000b60:	70bb      	strb	r3, [r7, #2]
 8000b62:	4613      	mov	r3, r2
 8000b64:	707b      	strb	r3, [r7, #1]
			mo = m;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	78fa      	ldrb	r2, [r7, #3]
 8000b6a:	701a      	strb	r2, [r3, #0]
			day = d;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	78ba      	ldrb	r2, [r7, #2]
 8000b70:	705a      	strb	r2, [r3, #1]
			yr = y;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	787a      	ldrb	r2, [r7, #1]
 8000b76:	709a      	strb	r2, [r3, #2]
		}
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <_ZN8CalendarC1Ev>:

Calendar::Calendar(){
 8000b86:	b480      	push	{r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
	mo = 0;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
	day = 0;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2200      	movs	r2, #0
 8000b98:	705a      	strb	r2, [r3, #1]
	yr = 0;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	709a      	strb	r2, [r3, #2]
}
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <_ZN8Calendar7advanceEv>:
			m = mo;
			d = day;
			y = yr;
		}

void Calendar::advance(){
 8000bae:	b480      	push	{r7}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
			day++;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	785b      	ldrb	r3, [r3, #1]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	705a      	strb	r2, [r3, #1]
			if(day >= 30){
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	785b      	ldrb	r3, [r3, #1]
 8000bc6:	2b1d      	cmp	r3, #29
 8000bc8:	d908      	bls.n	8000bdc <_ZN8Calendar7advanceEv+0x2e>
				day = 1;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2201      	movs	r2, #1
 8000bce:	705a      	strb	r2, [r3, #1]
				mo++;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	701a      	strb	r2, [r3, #0]
			}
			if(mo > 12){
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b0c      	cmp	r3, #12
 8000be2:	d908      	bls.n	8000bf6 <_ZN8Calendar7advanceEv+0x48>
				mo = 1;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2201      	movs	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]
				yr++;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	789b      	ldrb	r3, [r3, #2]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	709a      	strb	r2, [r3, #2]
			}
		}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <_ZN8Calendar6getDayEv>:

uint8_t Calendar::getDay(){
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
	return day;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	785b      	ldrb	r3, [r3, #1]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <_ZN8Calendar8getMonthEv>:

uint8_t Calendar::getMonth(){
 8000c1a:	b480      	push	{r7}
 8000c1c:	b083      	sub	sp, #12
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
	return mo;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	781b      	ldrb	r3, [r3, #0]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <_ZN8Calendar7getYearEv>:

uint8_t Calendar::getYear(){
 8000c32:	b480      	push	{r7}
 8000c34:	b083      	sub	sp, #12
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
	return yr;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	789b      	ldrb	r3, [r3, #2]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <_ZN13ClockCalendar7advanceEv>:

//ClockCalendar

void ClockCalendar::advance(){
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b084      	sub	sp, #16
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
	bool wasPm = is_pm;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	78db      	ldrb	r3, [r3, #3]
 8000c56:	73fb      	strb	r3, [r7, #15]
	Clock::advance();
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ff3e 	bl	8000adc <_ZN5Clock7advanceEv>
	if(wasPm && !is_pm) Calendar::advance();
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d00b      	beq.n	8000c7e <_ZN13ClockCalendar7advanceEv+0x34>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	78db      	ldrb	r3, [r3, #3]
 8000c6a:	f083 0301 	eor.w	r3, r3, #1
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d004      	beq.n	8000c7e <_ZN13ClockCalendar7advanceEv+0x34>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3304      	adds	r3, #4
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff98 	bl	8000bae <_ZN8Calendar7advanceEv>
}
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <_ZN13Communication14addDataToQueueEP4Data>:
 *      Author: leocl
 */

#include "communication.h"

void Communication::addDataToQueue(Data* data){
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	6039      	str	r1, [r7, #0]
	q.insert(data);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3304      	adds	r3, #4
 8000c94:	6839      	ldr	r1, [r7, #0]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 fba6 	bl	80013e8 <_ZN5Queue6insertEP4Data>
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <_ZN13Communication10applyModelEv>:

bool Communication::applyModel(){
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	return true;
 8000cac:	2301      	movs	r3, #1
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
	...

08000cbc <_ZN6Serial8sendDataEv>:

void Serial::sendData(){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	uint32_t i, length;
	Data* aux;
	uint8_t txbuffer[12];

	length = q.getLength();
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3304      	adds	r3, #4
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 fc06 	bl	80014da <_ZN5Queue9getLengthEv>
 8000cce:	61b8      	str	r0, [r7, #24]

	for(i = 0; i<length; i++){
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
 8000cd4:	69fa      	ldr	r2, [r7, #28]
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d269      	bcs.n	8000db0 <_ZN6Serial8sendDataEv+0xf4>
		aux = q.remove();
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3304      	adds	r3, #4
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f000 fbb9 	bl	8001458 <_ZN5Queue6removeEv>
 8000ce6:	6178      	str	r0, [r7, #20]
		txbuffer[0] = aux->id;
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	723b      	strb	r3, [r7, #8]
		txbuffer[1] = aux->datetime.getMonth();
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	3305      	adds	r3, #5
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff ff91 	bl	8000c1a <_ZN8Calendar8getMonthEv>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	727b      	strb	r3, [r7, #9]
		txbuffer[2] = aux->datetime.getDay();
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	3305      	adds	r3, #5
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff7e 	bl	8000c02 <_ZN8Calendar6getDayEv>
 8000d06:	4603      	mov	r3, r0
 8000d08:	72bb      	strb	r3, [r7, #10]
		txbuffer[3] = aux->datetime.getYear();
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	3305      	adds	r3, #5
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff ff8f 	bl	8000c32 <_ZN8Calendar7getYearEv>
 8000d14:	4603      	mov	r3, r0
 8000d16:	72fb      	strb	r3, [r7, #11]
		txbuffer[4] = aux->datetime.getHour();
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fec5 	bl	8000aac <_ZN5Clock7getHourEv>
 8000d22:	4603      	mov	r3, r0
 8000d24:	733b      	strb	r3, [r7, #12]
		txbuffer[5] = aux->datetime.getMinute();
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff feb2 	bl	8000a94 <_ZN5Clock9getMinuteEv>
 8000d30:	4603      	mov	r3, r0
 8000d32:	737b      	strb	r3, [r7, #13]
		txbuffer[6] = aux->datetime.getSecond();
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	3301      	adds	r3, #1
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fe9f 	bl	8000a7c <_ZN5Clock9getSecondEv>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	73bb      	strb	r3, [r7, #14]
		txbuffer[7] = aux->datetime.getPMAM();
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	3301      	adds	r3, #1
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff febc 	bl	8000ac4 <_ZN5Clock7getPMAMEv>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	73fb      	strb	r3, [r7, #15]
		txbuffer[8] = (uint8_t)aux->temperature;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d5a:	edc7 7a00 	vstr	s15, [r7]
 8000d5e:	783b      	ldrb	r3, [r7, #0]
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	743b      	strb	r3, [r7, #16]
		txbuffer[9] = (uint8_t)((aux->temperature - txbuffer[8])*100);
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	ed93 7a02 	vldr	s14, [r3, #8]
 8000d6a:	7c3b      	ldrb	r3, [r7, #16]
 8000d6c:	ee07 3a90 	vmov	s15, r3
 8000d70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d78:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000db8 <_ZN6Serial8sendDataEv+0xfc>
 8000d7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d84:	edc7 7a00 	vstr	s15, [r7]
 8000d88:	783b      	ldrb	r3, [r7, #0]
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	747b      	strb	r3, [r7, #17]
		txbuffer[10] = aux->pred_is_Correct;
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	7b1b      	ldrb	r3, [r3, #12]
 8000d92:	74bb      	strb	r3, [r7, #18]
		txbuffer[11] = 0xFE;
 8000d94:	23fe      	movs	r3, #254	; 0xfe
 8000d96:	74fb      	strb	r3, [r7, #19]

		HAL_UART_Transmit(&huart2, txbuffer, 12, 1000);
 8000d98:	f107 0108 	add.w	r1, r7, #8
 8000d9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da0:	220c      	movs	r2, #12
 8000da2:	4806      	ldr	r0, [pc, #24]	; (8000dbc <_ZN6Serial8sendDataEv+0x100>)
 8000da4:	f002 fd19 	bl	80037da <HAL_UART_Transmit>
	for(i = 0; i<length; i++){
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	3301      	adds	r3, #1
 8000dac:	61fb      	str	r3, [r7, #28]
 8000dae:	e791      	b.n	8000cd4 <_ZN6Serial8sendDataEv+0x18>
	}
}
 8000db0:	bf00      	nop
 8000db2:	3720      	adds	r7, #32
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	42c80000 	.word	0x42c80000
 8000dbc:	20000104 	.word	0x20000104

08000dc0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	4b31      	ldr	r3, [pc, #196]	; (8000ea0 <MX_GPIO_Init+0xe0>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a30      	ldr	r2, [pc, #192]	; (8000ea0 <MX_GPIO_Init+0xe0>)
 8000de0:	f043 0304 	orr.w	r3, r3, #4
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b2e      	ldr	r3, [pc, #184]	; (8000ea0 <MX_GPIO_Init+0xe0>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0304 	and.w	r3, r3, #4
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	4b2a      	ldr	r3, [pc, #168]	; (8000ea0 <MX_GPIO_Init+0xe0>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a29      	ldr	r2, [pc, #164]	; (8000ea0 <MX_GPIO_Init+0xe0>)
 8000dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b27      	ldr	r3, [pc, #156]	; (8000ea0 <MX_GPIO_Init+0xe0>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	4b23      	ldr	r3, [pc, #140]	; (8000ea0 <MX_GPIO_Init+0xe0>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a22      	ldr	r2, [pc, #136]	; (8000ea0 <MX_GPIO_Init+0xe0>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b20      	ldr	r3, [pc, #128]	; (8000ea0 <MX_GPIO_Init+0xe0>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <MX_GPIO_Init+0xe0>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a1b      	ldr	r2, [pc, #108]	; (8000ea0 <MX_GPIO_Init+0xe0>)
 8000e34:	f043 0302 	orr.w	r3, r3, #2
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <MX_GPIO_Init+0xe0>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2120      	movs	r1, #32
 8000e4a:	4816      	ldr	r0, [pc, #88]	; (8000ea4 <MX_GPIO_Init+0xe4>)
 8000e4c:	f000 ffee 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e56:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4619      	mov	r1, r3
 8000e66:	4810      	ldr	r0, [pc, #64]	; (8000ea8 <MX_GPIO_Init+0xe8>)
 8000e68:	f000 fe5c 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e6c:	2320      	movs	r3, #32
 8000e6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e70:	2301      	movs	r3, #1
 8000e72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e74:	2301      	movs	r3, #1
 8000e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4619      	mov	r1, r3
 8000e82:	4808      	ldr	r0, [pc, #32]	; (8000ea4 <MX_GPIO_Init+0xe4>)
 8000e84:	f000 fe4e 	bl	8001b24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	2028      	movs	r0, #40	; 0x28
 8000e8e:	f000 fe12 	bl	8001ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e92:	2028      	movs	r0, #40	; 0x28
 8000e94:	f000 fe2b 	bl	8001aee <HAL_NVIC_EnableIRQ>

}
 8000e98:	bf00      	nop
 8000e9a:	3728      	adds	r7, #40	; 0x28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020000 	.word	0x40020000
 8000ea8:	40020800 	.word	0x40020800

08000eac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <MX_I2C1_Init+0x50>)
 8000eb2:	4a13      	ldr	r2, [pc, #76]	; (8000f00 <MX_I2C1_Init+0x54>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000eb6:	4b11      	ldr	r3, [pc, #68]	; (8000efc <MX_I2C1_Init+0x50>)
 8000eb8:	4a12      	ldr	r2, [pc, #72]	; (8000f04 <MX_I2C1_Init+0x58>)
 8000eba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <MX_I2C1_Init+0x50>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <MX_I2C1_Init+0x50>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <MX_I2C1_Init+0x50>)
 8000eca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ece:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <MX_I2C1_Init+0x50>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <MX_I2C1_Init+0x50>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000edc:	4b07      	ldr	r3, [pc, #28]	; (8000efc <MX_I2C1_Init+0x50>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <MX_I2C1_Init+0x50>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ee8:	4804      	ldr	r0, [pc, #16]	; (8000efc <MX_I2C1_Init+0x50>)
 8000eea:	f000 ffd1 	bl	8001e90 <HAL_I2C_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ef4:	f000 f9ae 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000090 	.word	0x20000090
 8000f00:	40005400 	.word	0x40005400
 8000f04:	000186a0 	.word	0x000186a0

08000f08 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a19      	ldr	r2, [pc, #100]	; (8000f8c <HAL_I2C_MspInit+0x84>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d12c      	bne.n	8000f84 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <HAL_I2C_MspInit+0x88>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a17      	ldr	r2, [pc, #92]	; (8000f90 <HAL_I2C_MspInit+0x88>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <HAL_I2C_MspInit+0x88>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f4c:	2312      	movs	r3, #18
 8000f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f50:	2301      	movs	r3, #1
 8000f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f54:	2303      	movs	r3, #3
 8000f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f58:	2304      	movs	r3, #4
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	4619      	mov	r1, r3
 8000f62:	480c      	ldr	r0, [pc, #48]	; (8000f94 <HAL_I2C_MspInit+0x8c>)
 8000f64:	f000 fdde 	bl	8001b24 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <HAL_I2C_MspInit+0x88>)
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <HAL_I2C_MspInit+0x88>)
 8000f72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f76:	6413      	str	r3, [r2, #64]	; 0x40
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <HAL_I2C_MspInit+0x88>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f84:	bf00      	nop
 8000f86:	3728      	adds	r7, #40	; 0x28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40005400 	.word	0x40005400
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020400 	.word	0x40020400

08000f98 <_ZN13ClockCalendarC1Ehhhhhhb>:
		void advance();
};

class ClockCalendar: public Clock, public Calendar{
	public:
		ClockCalendar(uint8_t mt, uint8_t d, uint8_t y, uint8_t h, uint8_t m, uint8_t s, bool pm):Clock(h, s, m, pm), Calendar(mt, d, y){};
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	70fb      	strb	r3, [r7, #3]
 8000faa:	460b      	mov	r3, r1
 8000fac:	70bb      	strb	r3, [r7, #2]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	707b      	strb	r3, [r7, #1]
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	7f3c      	ldrb	r4, [r7, #28]
 8000fb6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000fba:	7e39      	ldrb	r1, [r7, #24]
 8000fbc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	4623      	mov	r3, r4
 8000fc4:	f7ff fd23 	bl	8000a0e <_ZN5ClockC1Ehhhb>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	1d18      	adds	r0, r3, #4
 8000fcc:	787b      	ldrb	r3, [r7, #1]
 8000fce:	78ba      	ldrb	r2, [r7, #2]
 8000fd0:	78f9      	ldrb	r1, [r7, #3]
 8000fd2:	f7ff fdbb 	bl	8000b4c <_ZN8CalendarC1Ehhh>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd90      	pop	{r4, r7, pc}

08000fe0 <_ZN13CommunicationC1Ev>:
#define INC_COMMUNICATION_H_

#include "usart.h"
#include "queue.h"

class Communication{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	4a06      	ldr	r2, [pc, #24]	; (8001004 <_ZN13CommunicationC1Ev+0x24>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f9c2 	bl	800137c <_ZN5QueueC1Ev>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	0800426c 	.word	0x0800426c

08001008 <_ZN6SerialC1Ev>:
		void addDataToQueue(Data* data);
		bool applyModel();
		virtual void sendData() = 0;
};

class Serial: public Communication{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff ffe4 	bl	8000fe0 <_ZN13CommunicationC1Ev>
 8001018:	4a03      	ldr	r2, [pc, #12]	; (8001028 <_ZN6SerialC1Ev+0x20>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	08004260 	.word	0x08004260

0800102c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800102c:	b590      	push	{r4, r7, lr}
 800102e:	b087      	sub	sp, #28
 8001030:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001032:	f000 fbcf 	bl	80017d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001036:	f000 f883 	bl	8001140 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103a:	f7ff fec1 	bl	8000dc0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800103e:	f7ff ff35 	bl	8000eac <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001042:	f000 fb1b 	bl	800167c <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  mpu.init();
 8001046:	4838      	ldr	r0, [pc, #224]	; (8001128 <main+0xfc>)
 8001048:	f7ff fc54 	bl	80008f4 <_ZN7MPU60504initEv>
  comm = new Serial();
 800104c:	2010      	movs	r0, #16
 800104e:	f002 ff3b 	bl	8003ec8 <_Znwj>
 8001052:	4603      	mov	r3, r0
 8001054:	461c      	mov	r4, r3
 8001056:	4622      	mov	r2, r4
 8001058:	2300      	movs	r3, #0
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	6053      	str	r3, [r2, #4]
 800105e:	6093      	str	r3, [r2, #8]
 8001060:	60d3      	str	r3, [r2, #12]
 8001062:	4620      	mov	r0, r4
 8001064:	f7ff ffd0 	bl	8001008 <_ZN6SerialC1Ev>
 8001068:	4b30      	ldr	r3, [pc, #192]	; (800112c <main+0x100>)
 800106a:	601c      	str	r4, [r3, #0]
  uint8_t deviceID = 2;
 800106c:	2302      	movs	r3, #2
 800106e:	73bb      	strb	r3, [r7, #14]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t i;
	  for(i = 0; i<10; i++){
 8001070:	2300      	movs	r3, #0
 8001072:	73fb      	strb	r3, [r7, #15]
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	2b09      	cmp	r3, #9
 8001078:	d813      	bhi.n	80010a2 <main+0x76>
		  mpu.readTemperature();
 800107a:	482b      	ldr	r0, [pc, #172]	; (8001128 <main+0xfc>)
 800107c:	f7ff fc78 	bl	8000970 <_ZN7MPU605015readTemperatureEv>
		  temperature += mpu.getTemperature();
 8001080:	4829      	ldr	r0, [pc, #164]	; (8001128 <main+0xfc>)
 8001082:	f7ff fcb5 	bl	80009f0 <_ZN7MPU605014getTemperatureEv>
 8001086:	eeb0 7a40 	vmov.f32	s14, s0
 800108a:	4b29      	ldr	r3, [pc, #164]	; (8001130 <main+0x104>)
 800108c:	edd3 7a00 	vldr	s15, [r3]
 8001090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001094:	4b26      	ldr	r3, [pc, #152]	; (8001130 <main+0x104>)
 8001096:	edc3 7a00 	vstr	s15, [r3]
	  for(i = 0; i<10; i++){
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	3301      	adds	r3, #1
 800109e:	73fb      	strb	r3, [r7, #15]
 80010a0:	e7e8      	b.n	8001074 <main+0x48>

	  }
	  temperature = temperature/10;
 80010a2:	4b23      	ldr	r3, [pc, #140]	; (8001130 <main+0x104>)
 80010a4:	ed93 7a00 	vldr	s14, [r3]
 80010a8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80010ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010b0:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <main+0x104>)
 80010b2:	edc3 7a00 	vstr	s15, [r3]

	  predIsCorrect = comm->applyModel();
 80010b6:	4b1d      	ldr	r3, [pc, #116]	; (800112c <main+0x100>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fdf2 	bl	8000ca4 <_ZN13Communication10applyModelEv>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <main+0x108>)
 80010c6:	701a      	strb	r2, [r3, #0]

	  pd = new Data(deviceID, cc, temperature, predIsCorrect);
 80010c8:	4a1b      	ldr	r2, [pc, #108]	; (8001138 <main+0x10c>)
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010d0:	6018      	str	r0, [r3, #0]
 80010d2:	3304      	adds	r3, #4
 80010d4:	8019      	strh	r1, [r3, #0]
 80010d6:	3302      	adds	r3, #2
 80010d8:	0c0a      	lsrs	r2, r1, #16
 80010da:	701a      	strb	r2, [r3, #0]
 80010dc:	2010      	movs	r0, #16
 80010de:	f002 fef3 	bl	8003ec8 <_Znwj>
 80010e2:	4603      	mov	r3, r0
 80010e4:	461c      	mov	r4, r3
 80010e6:	4b12      	ldr	r3, [pc, #72]	; (8001130 <main+0x104>)
 80010e8:	edd3 7a00 	vldr	s15, [r3]
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <main+0x108>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	7bb9      	ldrb	r1, [r7, #14]
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	eeb0 0a67 	vmov.f32	s0, s15
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	cb0c      	ldmia	r3, {r2, r3}
 80010fc:	4620      	mov	r0, r4
 80010fe:	f000 f8eb 	bl	80012d8 <_ZN4DataC1Eh13ClockCalendarfb>
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <main+0x110>)
 8001104:	601c      	str	r4, [r3, #0]

	  comm->addDataToQueue(pd);
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <main+0x100>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a0c      	ldr	r2, [pc, #48]	; (800113c <main+0x110>)
 800110c:	6812      	ldr	r2, [r2, #0]
 800110e:	4611      	mov	r1, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fdb8 	bl	8000c86 <_ZN13Communication14addDataToQueueEP4Data>
	  cc.advance();
 8001116:	4808      	ldr	r0, [pc, #32]	; (8001138 <main+0x10c>)
 8001118:	f7ff fd97 	bl	8000c4a <_ZN13ClockCalendar7advanceEv>

	  HAL_Delay(1000);
 800111c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001120:	f000 fbca 	bl	80018b8 <HAL_Delay>

    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
  }
 8001124:	e7a4      	b.n	8001070 <main+0x44>
 8001126:	bf00      	nop
 8001128:	200000e4 	.word	0x200000e4
 800112c:	200000e8 	.word	0x200000e8
 8001130:	200000fc 	.word	0x200000fc
 8001134:	200000f8 	.word	0x200000f8
 8001138:	200000ec 	.word	0x200000ec
 800113c:	200000f4 	.word	0x200000f4

08001140 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b094      	sub	sp, #80	; 0x50
 8001144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001146:	f107 0320 	add.w	r3, r7, #32
 800114a:	2230      	movs	r2, #48	; 0x30
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f002 ff2c 	bl	8003fac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	4b2e      	ldr	r3, [pc, #184]	; (8001224 <_Z18SystemClock_Configv+0xe4>)
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	4a2d      	ldr	r2, [pc, #180]	; (8001224 <_Z18SystemClock_Configv+0xe4>)
 800116e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001172:	6413      	str	r3, [r2, #64]	; 0x40
 8001174:	4b2b      	ldr	r3, [pc, #172]	; (8001224 <_Z18SystemClock_Configv+0xe4>)
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001180:	2300      	movs	r3, #0
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	4b28      	ldr	r3, [pc, #160]	; (8001228 <_Z18SystemClock_Configv+0xe8>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800118c:	4a26      	ldr	r2, [pc, #152]	; (8001228 <_Z18SystemClock_Configv+0xe8>)
 800118e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	4b24      	ldr	r3, [pc, #144]	; (8001228 <_Z18SystemClock_Configv+0xe8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011a0:	2302      	movs	r3, #2
 80011a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a4:	2301      	movs	r3, #1
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a8:	2310      	movs	r3, #16
 80011aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ac:	2302      	movs	r3, #2
 80011ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011b0:	2300      	movs	r3, #0
 80011b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011b4:	2310      	movs	r3, #16
 80011b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011be:	2304      	movs	r3, #4
 80011c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011c2:	2307      	movs	r3, #7
 80011c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c6:	f107 0320 	add.w	r3, r7, #32
 80011ca:	4618      	mov	r0, r3
 80011cc:	f001 fe20 	bl	8002e10 <HAL_RCC_OscConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	bf14      	ite	ne
 80011d6:	2301      	movne	r3, #1
 80011d8:	2300      	moveq	r3, #0
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 80011e0:	f000 f838 	bl	8001254 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e4:	230f      	movs	r3, #15
 80011e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e8:	2302      	movs	r3, #2
 80011ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011fa:	f107 030c 	add.w	r3, r7, #12
 80011fe:	2102      	movs	r1, #2
 8001200:	4618      	mov	r0, r3
 8001202:	f002 f87d 	bl	8003300 <HAL_RCC_ClockConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	bf14      	ite	ne
 800120c:	2301      	movne	r3, #1
 800120e:	2300      	moveq	r3, #0
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8001216:	f000 f81d 	bl	8001254 <Error_Handler>
  }
}
 800121a:	bf00      	nop
 800121c:	3750      	adds	r7, #80	; 0x50
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	40007000 	.word	0x40007000

0800122c <HAL_GPIO_EXTI_Callback>:
  * @retval None
  */

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	80fb      	strh	r3, [r7, #6]
	comm->sendData();
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HAL_GPIO_EXTI_Callback+0x24>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	4b05      	ldr	r3, [pc, #20]	; (8001250 <HAL_GPIO_EXTI_Callback+0x24>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4610      	mov	r0, r2
 8001244:	4798      	blx	r3
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200000e8 	.word	0x200000e8

08001254 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001258:	b672      	cpsid	i
}
 800125a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800125c:	e7fe      	b.n	800125c <Error_Handler+0x8>
	...

08001260 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af04      	add	r7, sp, #16
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d112      	bne.n	8001296 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001276:	4293      	cmp	r3, r2
 8001278:	d10d      	bne.n	8001296 <_Z41__static_initialization_and_destruction_0ii+0x36>
ClockCalendar cc(11, 30, 22, 10, 9, 59, 1);
 800127a:	2301      	movs	r3, #1
 800127c:	9303      	str	r3, [sp, #12]
 800127e:	233b      	movs	r3, #59	; 0x3b
 8001280:	9302      	str	r3, [sp, #8]
 8001282:	2309      	movs	r3, #9
 8001284:	9301      	str	r3, [sp, #4]
 8001286:	230a      	movs	r3, #10
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	2316      	movs	r3, #22
 800128c:	221e      	movs	r2, #30
 800128e:	210b      	movs	r1, #11
 8001290:	4803      	ldr	r0, [pc, #12]	; (80012a0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001292:	f7ff fe81 	bl	8000f98 <_ZN13ClockCalendarC1Ehhhhhhb>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200000ec 	.word	0x200000ec

080012a4 <_GLOBAL__sub_I_mpu>:
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80012ac:	2001      	movs	r0, #1
 80012ae:	f7ff ffd7 	bl	8001260 <_Z41__static_initialization_and_destruction_0ii>
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <_ZN13ClockCalendarC1Ev>:
		ClockCalendar():Clock(), Calendar(){};
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fbc5 	bl	8000a4e <_ZN5ClockC1Ev>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3304      	adds	r3, #4
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fc5c 	bl	8000b86 <_ZN8CalendarC1Ev>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <_ZN4DataC1Eh13ClockCalendarfb>:
 *      Author: leocl
 */

#include "node.h"

Data::Data(uint8_t i, ClockCalendar dat, float t, bool c){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6178      	str	r0, [r7, #20]
 80012e0:	4608      	mov	r0, r1
 80012e2:	f107 0108 	add.w	r1, r7, #8
 80012e6:	e881 000c 	stmia.w	r1, {r2, r3}
 80012ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80012ee:	4603      	mov	r3, r0
 80012f0:	74fb      	strb	r3, [r7, #19]
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	3301      	adds	r3, #1
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ffdc 	bl	80012b4 <_ZN13ClockCalendarC1Ev>
		id = i;
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	7cfa      	ldrb	r2, [r7, #19]
 8001300:	701a      	strb	r2, [r3, #0]
		datetime = dat;
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	3301      	adds	r3, #1
 8001306:	f107 0208 	add.w	r2, r7, #8
 800130a:	6810      	ldr	r0, [r2, #0]
 800130c:	6018      	str	r0, [r3, #0]
 800130e:	8891      	ldrh	r1, [r2, #4]
 8001310:	7992      	ldrb	r2, [r2, #6]
 8001312:	8099      	strh	r1, [r3, #4]
 8001314:	719a      	strb	r2, [r3, #6]
		temperature = t;
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	609a      	str	r2, [r3, #8]
		pred_is_Correct = c;
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001322:	731a      	strb	r2, [r3, #12]
	}
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	4618      	mov	r0, r3
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <_ZN4DataC1Ev>:

Data::Data(){
 800132e:	b580      	push	{r7, lr}
 8001330:	b084      	sub	sp, #16
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3301      	adds	r3, #1
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ffba 	bl	80012b4 <_ZN13ClockCalendarC1Ev>
	id = 0;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	701a      	strb	r2, [r3, #0]
	datetime = ClockCalendar();
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ffb2 	bl	80012b4 <_ZN13ClockCalendarC1Ev>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3301      	adds	r3, #1
 8001354:	f107 0208 	add.w	r2, r7, #8
 8001358:	6810      	ldr	r0, [r2, #0]
 800135a:	6018      	str	r0, [r3, #0]
 800135c:	8891      	ldrh	r1, [r2, #4]
 800135e:	7992      	ldrb	r2, [r2, #6]
 8001360:	8099      	strh	r1, [r3, #4]
 8001362:	719a      	strb	r2, [r3, #6]
	temperature = 0;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f04f 0200 	mov.w	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
	pred_is_Correct = 0;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	731a      	strb	r2, [r3, #12]
}
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <_ZN5QueueC1Ev>:
 *  Created on: 30 de nov de 2022
 *      Author: leocl
 */
#include "queue.h"

Queue::Queue() {
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
   head = 0;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
   tail = 0;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	605a      	str	r2, [r3, #4]
   length = 0;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
}
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4618      	mov	r0, r3
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <_ZN5Queue4LinkC1EP4DataPS0_S3_>:
  head = 0; // Officially empty
  tail = 0;
  length = 0;
}

Queue::Link::Link(Data* dat, Link* prv, Link* nxt) {
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
 80013b0:	603b      	str	r3, [r7, #0]
  data = dat;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	68ba      	ldr	r2, [r7, #8]
 80013b6:	601a      	str	r2, [r3, #0]
  prev = prv;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	605a      	str	r2, [r3, #4]
  next = nxt;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	609a      	str	r2, [r3, #8]
}
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4618      	mov	r0, r3
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <_ZN5Queue4LinkD1Ev>:

Queue::Link::~Link() {
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
//  delete prev;
}
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <_ZN5Queue6insertEP4Data>:

void Queue::insert(Data* dat) {
 80013e8:	b590      	push	{r4, r7, lr}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  if (head == 0){
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d111      	bne.n	800141e <_ZN5Queue6insertEP4Data+0x36>
     tail = new Link(dat, 0, 0);
 80013fa:	200c      	movs	r0, #12
 80013fc:	f002 fd64 	bl	8003ec8 <_Znwj>
 8001400:	4603      	mov	r3, r0
 8001402:	461c      	mov	r4, r3
 8001404:	2300      	movs	r3, #0
 8001406:	2200      	movs	r2, #0
 8001408:	6839      	ldr	r1, [r7, #0]
 800140a:	4620      	mov	r0, r4
 800140c:	f7ff ffca 	bl	80013a4 <_ZN5Queue4LinkC1EP4DataPS0_S3_>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	605c      	str	r4, [r3, #4]
     head = tail;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	e013      	b.n	8001446 <_ZN5Queue6insertEP4Data+0x5e>
  } else {
     tail->next = new Link(dat, tail, 0);
 800141e:	200c      	movs	r0, #12
 8001420:	f002 fd52 	bl	8003ec8 <_Znwj>
 8001424:	4603      	mov	r3, r0
 8001426:	461c      	mov	r4, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	2300      	movs	r3, #0
 800142e:	6839      	ldr	r1, [r7, #0]
 8001430:	4620      	mov	r0, r4
 8001432:	f7ff ffb7 	bl	80013a4 <_ZN5Queue4LinkC1EP4DataPS0_S3_>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	609c      	str	r4, [r3, #8]
     tail = tail->next;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	605a      	str	r2, [r3, #4]
  }
  length++;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	1c5a      	adds	r2, r3, #1
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	609a      	str	r2, [r3, #8]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bd90      	pop	{r4, r7, pc}

08001458 <_ZN5Queue6removeEv>:

Data* Queue::remove() {
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
   Data* result;
   if(length == 0){
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d109      	bne.n	800147c <_ZN5Queue6removeEv+0x24>
      result = new Data();
 8001468:	2010      	movs	r0, #16
 800146a:	f002 fd2d 	bl	8003ec8 <_Znwj>
 800146e:	4603      	mov	r3, r0
 8001470:	461c      	mov	r4, r3
 8001472:	4620      	mov	r0, r4
 8001474:	f7ff ff5b 	bl	800132e <_ZN4DataC1Ev>
 8001478:	60fc      	str	r4, [r7, #12]
      }
      length--;
      if (length == 0) tail = 0;
      return result;
   }
}
 800147a:	e02a      	b.n	80014d2 <_ZN5Queue6removeEv+0x7a>
      result = head->data;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	60fb      	str	r3, [r7, #12]
      Link* oldHead = head;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	60bb      	str	r3, [r7, #8]
      head = head->next;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	601a      	str	r2, [r3, #0]
      if (head != 0){
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d00d      	beq.n	80014b8 <_ZN5Queue6removeEv+0x60>
         head->prev = 0;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2200      	movs	r2, #0
 80014a2:	605a      	str	r2, [r3, #4]
         delete oldHead;
 80014a4:	68bc      	ldr	r4, [r7, #8]
 80014a6:	2c00      	cmp	r4, #0
 80014a8:	d006      	beq.n	80014b8 <_ZN5Queue6removeEv+0x60>
 80014aa:	4620      	mov	r0, r4
 80014ac:	f7ff ff91 	bl	80013d2 <_ZN5Queue4LinkD1Ev>
 80014b0:	210c      	movs	r1, #12
 80014b2:	4620      	mov	r0, r4
 80014b4:	f002 fd06 	bl	8003ec4 <_ZdlPvj>
      length--;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	1e5a      	subs	r2, r3, #1
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	609a      	str	r2, [r3, #8]
      if (length == 0) tail = 0;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d102      	bne.n	80014d0 <_ZN5Queue6removeEv+0x78>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	605a      	str	r2, [r3, #4]
      return result;
 80014d0:	68fb      	ldr	r3, [r7, #12]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd90      	pop	{r4, r7, pc}

080014da <_ZN5Queue9getLengthEv>:
//
//Data* Queue::getTail() {
//   return tail->data;
//}

uint32_t Queue::getLength() {
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
	return length;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689b      	ldr	r3, [r3, #8]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <HAL_MspInit+0x4c>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	4a0f      	ldr	r2, [pc, #60]	; (8001540 <HAL_MspInit+0x4c>)
 8001504:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001508:	6453      	str	r3, [r2, #68]	; 0x44
 800150a:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <HAL_MspInit+0x4c>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	603b      	str	r3, [r7, #0]
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <HAL_MspInit+0x4c>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	4a08      	ldr	r2, [pc, #32]	; (8001540 <HAL_MspInit+0x4c>)
 8001520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001524:	6413      	str	r3, [r2, #64]	; 0x40
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_MspInit+0x4c>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152e:	603b      	str	r3, [r7, #0]
 8001530:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001532:	2007      	movs	r0, #7
 8001534:	f000 fab4 	bl	8001aa0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40023800 	.word	0x40023800

08001544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <NMI_Handler+0x4>

0800154a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154e:	e7fe      	b.n	800154e <HardFault_Handler+0x4>

08001550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <MemManage_Handler+0x4>

08001556 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155a:	e7fe      	b.n	800155a <BusFault_Handler+0x4>

0800155c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001560:	e7fe      	b.n	8001560 <UsageFault_Handler+0x4>

08001562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001590:	f000 f972 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}

08001598 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800159c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015a0:	f000 fc5e 	bl	8001e60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
	return 1;
 80015ac:	2301      	movs	r3, #1
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <_kill>:

int _kill(int pid, int sig)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015c2:	f002 fcb9 	bl	8003f38 <__errno>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2216      	movs	r2, #22
 80015ca:	601a      	str	r2, [r3, #0]
	return -1;
 80015cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <_exit>:

void _exit (int status)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015e0:	f04f 31ff 	mov.w	r1, #4294967295
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff ffe7 	bl	80015b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80015ea:	e7fe      	b.n	80015ea <_exit+0x12>

080015ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f4:	4a14      	ldr	r2, [pc, #80]	; (8001648 <_sbrk+0x5c>)
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <_sbrk+0x60>)
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <_sbrk+0x64>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d102      	bne.n	800160e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <_sbrk+0x64>)
 800160a:	4a12      	ldr	r2, [pc, #72]	; (8001654 <_sbrk+0x68>)
 800160c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <_sbrk+0x64>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	429a      	cmp	r2, r3
 800161a:	d207      	bcs.n	800162c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800161c:	f002 fc8c 	bl	8003f38 <__errno>
 8001620:	4603      	mov	r3, r0
 8001622:	220c      	movs	r2, #12
 8001624:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001626:	f04f 33ff 	mov.w	r3, #4294967295
 800162a:	e009      	b.n	8001640 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <_sbrk+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001632:	4b07      	ldr	r3, [pc, #28]	; (8001650 <_sbrk+0x64>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	4a05      	ldr	r2, [pc, #20]	; (8001650 <_sbrk+0x64>)
 800163c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800163e:	68fb      	ldr	r3, [r7, #12]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20018000 	.word	0x20018000
 800164c:	00000400 	.word	0x00000400
 8001650:	20000100 	.word	0x20000100
 8001654:	20000160 	.word	0x20000160

08001658 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <SystemInit+0x20>)
 800165e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001662:	4a05      	ldr	r2, [pc, #20]	; (8001678 <SystemInit+0x20>)
 8001664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <MX_USART2_UART_Init+0x4c>)
 8001682:	4a12      	ldr	r2, [pc, #72]	; (80016cc <MX_USART2_UART_Init+0x50>)
 8001684:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <MX_USART2_UART_Init+0x4c>)
 8001688:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800168c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <MX_USART2_UART_Init+0x4c>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <MX_USART2_UART_Init+0x4c>)
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <MX_USART2_UART_Init+0x4c>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016a0:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <MX_USART2_UART_Init+0x4c>)
 80016a2:	220c      	movs	r2, #12
 80016a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <MX_USART2_UART_Init+0x4c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <MX_USART2_UART_Init+0x4c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016b2:	4805      	ldr	r0, [pc, #20]	; (80016c8 <MX_USART2_UART_Init+0x4c>)
 80016b4:	f002 f844 	bl	8003740 <HAL_UART_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016be:	f7ff fdc9 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000104 	.word	0x20000104
 80016cc:	40004400 	.word	0x40004400

080016d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a21      	ldr	r2, [pc, #132]	; (8001774 <HAL_UART_MspInit+0xa4>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d13b      	bne.n	800176a <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	4b20      	ldr	r3, [pc, #128]	; (8001778 <HAL_UART_MspInit+0xa8>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	4a1f      	ldr	r2, [pc, #124]	; (8001778 <HAL_UART_MspInit+0xa8>)
 80016fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001700:	6413      	str	r3, [r2, #64]	; 0x40
 8001702:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <HAL_UART_MspInit+0xa8>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	4b19      	ldr	r3, [pc, #100]	; (8001778 <HAL_UART_MspInit+0xa8>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a18      	ldr	r2, [pc, #96]	; (8001778 <HAL_UART_MspInit+0xa8>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b16      	ldr	r3, [pc, #88]	; (8001778 <HAL_UART_MspInit+0xa8>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800172a:	2304      	movs	r3, #4
 800172c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001736:	2303      	movs	r3, #3
 8001738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800173a:	2307      	movs	r3, #7
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4619      	mov	r1, r3
 8001744:	480d      	ldr	r0, [pc, #52]	; (800177c <HAL_UART_MspInit+0xac>)
 8001746:	f000 f9ed 	bl	8001b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART_RX_Pin;
 800174a:	2308      	movs	r3, #8
 800174c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800175a:	2307      	movs	r3, #7
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	4619      	mov	r1, r3
 8001764:	4805      	ldr	r0, [pc, #20]	; (800177c <HAL_UART_MspInit+0xac>)
 8001766:	f000 f9dd 	bl	8001b24 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800176a:	bf00      	nop
 800176c:	3728      	adds	r7, #40	; 0x28
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40004400 	.word	0x40004400
 8001778:	40023800 	.word	0x40023800
 800177c:	40020000 	.word	0x40020000

08001780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001784:	480d      	ldr	r0, [pc, #52]	; (80017bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001786:	490e      	ldr	r1, [pc, #56]	; (80017c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001788:	4a0e      	ldr	r2, [pc, #56]	; (80017c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800178a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800178c:	e002      	b.n	8001794 <LoopCopyDataInit>

0800178e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800178e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001792:	3304      	adds	r3, #4

08001794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001798:	d3f9      	bcc.n	800178e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179a:	4a0b      	ldr	r2, [pc, #44]	; (80017c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800179c:	4c0b      	ldr	r4, [pc, #44]	; (80017cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a0:	e001      	b.n	80017a6 <LoopFillZerobss>

080017a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a4:	3204      	adds	r2, #4

080017a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a8:	d3fb      	bcc.n	80017a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017aa:	f7ff ff55 	bl	8001658 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ae:	f002 fbc9 	bl	8003f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017b2:	f7ff fc3b 	bl	800102c <main>
  bx  lr    
 80017b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80017c4:	0800429c 	.word	0x0800429c
  ldr r2, =_sbss
 80017c8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80017cc:	20000160 	.word	0x20000160

080017d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d0:	e7fe      	b.n	80017d0 <ADC_IRQHandler>
	...

080017d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017d8:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <HAL_Init+0x40>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0d      	ldr	r2, [pc, #52]	; (8001814 <HAL_Init+0x40>)
 80017de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017e4:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <HAL_Init+0x40>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <HAL_Init+0x40>)
 80017ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <HAL_Init+0x40>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a07      	ldr	r2, [pc, #28]	; (8001814 <HAL_Init+0x40>)
 80017f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fc:	2003      	movs	r0, #3
 80017fe:	f000 f94f 	bl	8001aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001802:	2000      	movs	r0, #0
 8001804:	f000 f808 	bl	8001818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001808:	f7ff fe74 	bl	80014f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023c00 	.word	0x40023c00

08001818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_InitTick+0x54>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_InitTick+0x58>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001832:	fbb2 f3f3 	udiv	r3, r2, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f967 	bl	8001b0a <HAL_SYSTICK_Config>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e00e      	b.n	8001864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b0f      	cmp	r3, #15
 800184a:	d80a      	bhi.n	8001862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800184c:	2200      	movs	r2, #0
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	f000 f92f 	bl	8001ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001858:	4a06      	ldr	r2, [pc, #24]	; (8001874 <HAL_InitTick+0x5c>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	e000      	b.n	8001864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000000 	.word	0x20000000
 8001870:	20000008 	.word	0x20000008
 8001874:	20000004 	.word	0x20000004

08001878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_IncTick+0x20>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_IncTick+0x24>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a04      	ldr	r2, [pc, #16]	; (800189c <HAL_IncTick+0x24>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000008 	.word	0x20000008
 800189c:	20000148 	.word	0x20000148

080018a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <HAL_GetTick+0x14>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20000148 	.word	0x20000148

080018b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c0:	f7ff ffee 	bl	80018a0 <HAL_GetTick>
 80018c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d0:	d005      	beq.n	80018de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <HAL_Delay+0x44>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4413      	add	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018de:	bf00      	nop
 80018e0:	f7ff ffde 	bl	80018a0 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d8f7      	bhi.n	80018e0 <HAL_Delay+0x28>
  {
  }
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000008 	.word	0x20000008

08001900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800191c:	4013      	ands	r3, r2
 800191e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800192c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001932:	4a04      	ldr	r2, [pc, #16]	; (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	60d3      	str	r3, [r2, #12]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800194c:	4b04      	ldr	r3, [pc, #16]	; (8001960 <__NVIC_GetPriorityGrouping+0x18>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	0a1b      	lsrs	r3, r3, #8
 8001952:	f003 0307 	and.w	r3, r3, #7
}
 8001956:	4618      	mov	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	2b00      	cmp	r3, #0
 8001974:	db0b      	blt.n	800198e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	f003 021f 	and.w	r2, r3, #31
 800197c:	4907      	ldr	r1, [pc, #28]	; (800199c <__NVIC_EnableIRQ+0x38>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	095b      	lsrs	r3, r3, #5
 8001984:	2001      	movs	r0, #1
 8001986:	fa00 f202 	lsl.w	r2, r0, r2
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000e100 	.word	0xe000e100

080019a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	6039      	str	r1, [r7, #0]
 80019aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	db0a      	blt.n	80019ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	490c      	ldr	r1, [pc, #48]	; (80019ec <__NVIC_SetPriority+0x4c>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	0112      	lsls	r2, r2, #4
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	440b      	add	r3, r1
 80019c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c8:	e00a      	b.n	80019e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4908      	ldr	r1, [pc, #32]	; (80019f0 <__NVIC_SetPriority+0x50>)
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	3b04      	subs	r3, #4
 80019d8:	0112      	lsls	r2, r2, #4
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	440b      	add	r3, r1
 80019de:	761a      	strb	r2, [r3, #24]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000e100 	.word	0xe000e100
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	; 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f1c3 0307 	rsb	r3, r3, #7
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	bf28      	it	cs
 8001a12:	2304      	movcs	r3, #4
 8001a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d902      	bls.n	8001a24 <NVIC_EncodePriority+0x30>
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3b03      	subs	r3, #3
 8001a22:	e000      	b.n	8001a26 <NVIC_EncodePriority+0x32>
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43da      	mvns	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	401a      	ands	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa01 f303 	lsl.w	r3, r1, r3
 8001a46:	43d9      	mvns	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	4313      	orrs	r3, r2
         );
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3724      	adds	r7, #36	; 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a6c:	d301      	bcc.n	8001a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00f      	b.n	8001a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a72:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <SysTick_Config+0x40>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a80:	f7ff ff8e 	bl	80019a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <SysTick_Config+0x40>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8a:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <SysTick_Config+0x40>)
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	e000e010 	.word	0xe000e010

08001aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ff29 	bl	8001900 <__NVIC_SetPriorityGrouping>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac8:	f7ff ff3e 	bl	8001948 <__NVIC_GetPriorityGrouping>
 8001acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	f7ff ff8e 	bl	80019f4 <NVIC_EncodePriority>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff5d 	bl	80019a0 <__NVIC_SetPriority>
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff31 	bl	8001964 <__NVIC_EnableIRQ>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ffa2 	bl	8001a5c <SysTick_Config>
 8001b18:	4603      	mov	r3, r0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
 8001b3e:	e159      	b.n	8001df4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b40:	2201      	movs	r2, #1
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	4013      	ands	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	f040 8148 	bne.w	8001dee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d005      	beq.n	8001b76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d130      	bne.n	8001bd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	2203      	movs	r2, #3
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bac:	2201      	movs	r2, #1
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	091b      	lsrs	r3, r3, #4
 8001bc2:	f003 0201 	and.w	r2, r3, #1
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d017      	beq.n	8001c14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	2203      	movs	r2, #3
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d123      	bne.n	8001c68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	08da      	lsrs	r2, r3, #3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3208      	adds	r2, #8
 8001c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	220f      	movs	r2, #15
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	691a      	ldr	r2, [r3, #16]
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	08da      	lsrs	r2, r3, #3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3208      	adds	r2, #8
 8001c62:	69b9      	ldr	r1, [r7, #24]
 8001c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	2203      	movs	r2, #3
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 0203 	and.w	r2, r3, #3
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 80a2 	beq.w	8001dee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	4b57      	ldr	r3, [pc, #348]	; (8001e0c <HAL_GPIO_Init+0x2e8>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	4a56      	ldr	r2, [pc, #344]	; (8001e0c <HAL_GPIO_Init+0x2e8>)
 8001cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cba:	4b54      	ldr	r3, [pc, #336]	; (8001e0c <HAL_GPIO_Init+0x2e8>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cc6:	4a52      	ldr	r2, [pc, #328]	; (8001e10 <HAL_GPIO_Init+0x2ec>)
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	089b      	lsrs	r3, r3, #2
 8001ccc:	3302      	adds	r3, #2
 8001cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	220f      	movs	r2, #15
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a49      	ldr	r2, [pc, #292]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d019      	beq.n	8001d26 <HAL_GPIO_Init+0x202>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a48      	ldr	r2, [pc, #288]	; (8001e18 <HAL_GPIO_Init+0x2f4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d013      	beq.n	8001d22 <HAL_GPIO_Init+0x1fe>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a47      	ldr	r2, [pc, #284]	; (8001e1c <HAL_GPIO_Init+0x2f8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d00d      	beq.n	8001d1e <HAL_GPIO_Init+0x1fa>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a46      	ldr	r2, [pc, #280]	; (8001e20 <HAL_GPIO_Init+0x2fc>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d007      	beq.n	8001d1a <HAL_GPIO_Init+0x1f6>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a45      	ldr	r2, [pc, #276]	; (8001e24 <HAL_GPIO_Init+0x300>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d101      	bne.n	8001d16 <HAL_GPIO_Init+0x1f2>
 8001d12:	2304      	movs	r3, #4
 8001d14:	e008      	b.n	8001d28 <HAL_GPIO_Init+0x204>
 8001d16:	2307      	movs	r3, #7
 8001d18:	e006      	b.n	8001d28 <HAL_GPIO_Init+0x204>
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e004      	b.n	8001d28 <HAL_GPIO_Init+0x204>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e002      	b.n	8001d28 <HAL_GPIO_Init+0x204>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <HAL_GPIO_Init+0x204>
 8001d26:	2300      	movs	r3, #0
 8001d28:	69fa      	ldr	r2, [r7, #28]
 8001d2a:	f002 0203 	and.w	r2, r2, #3
 8001d2e:	0092      	lsls	r2, r2, #2
 8001d30:	4093      	lsls	r3, r2
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d38:	4935      	ldr	r1, [pc, #212]	; (8001e10 <HAL_GPIO_Init+0x2ec>)
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	089b      	lsrs	r3, r3, #2
 8001d3e:	3302      	adds	r3, #2
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d46:	4b38      	ldr	r3, [pc, #224]	; (8001e28 <HAL_GPIO_Init+0x304>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4013      	ands	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d6a:	4a2f      	ldr	r2, [pc, #188]	; (8001e28 <HAL_GPIO_Init+0x304>)
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d70:	4b2d      	ldr	r3, [pc, #180]	; (8001e28 <HAL_GPIO_Init+0x304>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d94:	4a24      	ldr	r2, [pc, #144]	; (8001e28 <HAL_GPIO_Init+0x304>)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d9a:	4b23      	ldr	r3, [pc, #140]	; (8001e28 <HAL_GPIO_Init+0x304>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	43db      	mvns	r3, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4013      	ands	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dbe:	4a1a      	ldr	r2, [pc, #104]	; (8001e28 <HAL_GPIO_Init+0x304>)
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dc4:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <HAL_GPIO_Init+0x304>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001de8:	4a0f      	ldr	r2, [pc, #60]	; (8001e28 <HAL_GPIO_Init+0x304>)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3301      	adds	r3, #1
 8001df2:	61fb      	str	r3, [r7, #28]
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	2b0f      	cmp	r3, #15
 8001df8:	f67f aea2 	bls.w	8001b40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	bf00      	nop
 8001e00:	3724      	adds	r7, #36	; 0x24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40013800 	.word	0x40013800
 8001e14:	40020000 	.word	0x40020000
 8001e18:	40020400 	.word	0x40020400
 8001e1c:	40020800 	.word	0x40020800
 8001e20:	40020c00 	.word	0x40020c00
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40013c00 	.word	0x40013c00

08001e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	807b      	strh	r3, [r7, #2]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e3c:	787b      	ldrb	r3, [r7, #1]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e42:	887a      	ldrh	r2, [r7, #2]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e48:	e003      	b.n	8001e52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e4a:	887b      	ldrh	r3, [r7, #2]
 8001e4c:	041a      	lsls	r2, r3, #16
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	619a      	str	r2, [r3, #24]
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e6a:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e6c:	695a      	ldr	r2, [r3, #20]
 8001e6e:	88fb      	ldrh	r3, [r7, #6]
 8001e70:	4013      	ands	r3, r2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d006      	beq.n	8001e84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e76:	4a05      	ldr	r2, [pc, #20]	; (8001e8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e78:	88fb      	ldrh	r3, [r7, #6]
 8001e7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e7c:	88fb      	ldrh	r3, [r7, #6]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff f9d4 	bl	800122c <HAL_GPIO_EXTI_Callback>
  }
}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40013c00 	.word	0x40013c00

08001e90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e12b      	b.n	80020fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d106      	bne.n	8001ebc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff f826 	bl	8000f08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2224      	movs	r2, #36	; 0x24
 8001ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0201 	bic.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ee2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ef2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ef4:	f001 fbfc 	bl	80036f0 <HAL_RCC_GetPCLK1Freq>
 8001ef8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	4a81      	ldr	r2, [pc, #516]	; (8002104 <HAL_I2C_Init+0x274>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d807      	bhi.n	8001f14 <HAL_I2C_Init+0x84>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4a80      	ldr	r2, [pc, #512]	; (8002108 <HAL_I2C_Init+0x278>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	bf94      	ite	ls
 8001f0c:	2301      	movls	r3, #1
 8001f0e:	2300      	movhi	r3, #0
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	e006      	b.n	8001f22 <HAL_I2C_Init+0x92>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4a7d      	ldr	r2, [pc, #500]	; (800210c <HAL_I2C_Init+0x27c>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	bf94      	ite	ls
 8001f1c:	2301      	movls	r3, #1
 8001f1e:	2300      	movhi	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e0e7      	b.n	80020fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	4a78      	ldr	r2, [pc, #480]	; (8002110 <HAL_I2C_Init+0x280>)
 8001f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f32:	0c9b      	lsrs	r3, r3, #18
 8001f34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	4a6a      	ldr	r2, [pc, #424]	; (8002104 <HAL_I2C_Init+0x274>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d802      	bhi.n	8001f64 <HAL_I2C_Init+0xd4>
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	3301      	adds	r3, #1
 8001f62:	e009      	b.n	8001f78 <HAL_I2C_Init+0xe8>
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f6a:	fb02 f303 	mul.w	r3, r2, r3
 8001f6e:	4a69      	ldr	r2, [pc, #420]	; (8002114 <HAL_I2C_Init+0x284>)
 8001f70:	fba2 2303 	umull	r2, r3, r2, r3
 8001f74:	099b      	lsrs	r3, r3, #6
 8001f76:	3301      	adds	r3, #1
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	430b      	orrs	r3, r1
 8001f7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	495c      	ldr	r1, [pc, #368]	; (8002104 <HAL_I2C_Init+0x274>)
 8001f94:	428b      	cmp	r3, r1
 8001f96:	d819      	bhi.n	8001fcc <HAL_I2C_Init+0x13c>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	1e59      	subs	r1, r3, #1
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fa6:	1c59      	adds	r1, r3, #1
 8001fa8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001fac:	400b      	ands	r3, r1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00a      	beq.n	8001fc8 <HAL_I2C_Init+0x138>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	1e59      	subs	r1, r3, #1
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc6:	e051      	b.n	800206c <HAL_I2C_Init+0x1dc>
 8001fc8:	2304      	movs	r3, #4
 8001fca:	e04f      	b.n	800206c <HAL_I2C_Init+0x1dc>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d111      	bne.n	8001ff8 <HAL_I2C_Init+0x168>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	1e58      	subs	r0, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6859      	ldr	r1, [r3, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	440b      	add	r3, r1
 8001fe2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	bf0c      	ite	eq
 8001ff0:	2301      	moveq	r3, #1
 8001ff2:	2300      	movne	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	e012      	b.n	800201e <HAL_I2C_Init+0x18e>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	1e58      	subs	r0, r3, #1
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6859      	ldr	r1, [r3, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	0099      	lsls	r1, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	fbb0 f3f3 	udiv	r3, r0, r3
 800200e:	3301      	adds	r3, #1
 8002010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002014:	2b00      	cmp	r3, #0
 8002016:	bf0c      	ite	eq
 8002018:	2301      	moveq	r3, #1
 800201a:	2300      	movne	r3, #0
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_I2C_Init+0x196>
 8002022:	2301      	movs	r3, #1
 8002024:	e022      	b.n	800206c <HAL_I2C_Init+0x1dc>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10e      	bne.n	800204c <HAL_I2C_Init+0x1bc>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1e58      	subs	r0, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6859      	ldr	r1, [r3, #4]
 8002036:	460b      	mov	r3, r1
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	440b      	add	r3, r1
 800203c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002040:	3301      	adds	r3, #1
 8002042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800204a:	e00f      	b.n	800206c <HAL_I2C_Init+0x1dc>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	1e58      	subs	r0, r3, #1
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6859      	ldr	r1, [r3, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	0099      	lsls	r1, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002062:	3301      	adds	r3, #1
 8002064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002068:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	6809      	ldr	r1, [r1, #0]
 8002070:	4313      	orrs	r3, r2
 8002072:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69da      	ldr	r2, [r3, #28]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800209a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6911      	ldr	r1, [r2, #16]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	68d2      	ldr	r2, [r2, #12]
 80020a6:	4311      	orrs	r1, r2
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	430b      	orrs	r3, r1
 80020ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695a      	ldr	r2, [r3, #20]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0201 	orr.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2220      	movs	r2, #32
 80020e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	000186a0 	.word	0x000186a0
 8002108:	001e847f 	.word	0x001e847f
 800210c:	003d08ff 	.word	0x003d08ff
 8002110:	431bde83 	.word	0x431bde83
 8002114:	10624dd3 	.word	0x10624dd3

08002118 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af02      	add	r7, sp, #8
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	4608      	mov	r0, r1
 8002122:	4611      	mov	r1, r2
 8002124:	461a      	mov	r2, r3
 8002126:	4603      	mov	r3, r0
 8002128:	817b      	strh	r3, [r7, #10]
 800212a:	460b      	mov	r3, r1
 800212c:	813b      	strh	r3, [r7, #8]
 800212e:	4613      	mov	r3, r2
 8002130:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002132:	f7ff fbb5 	bl	80018a0 <HAL_GetTick>
 8002136:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b20      	cmp	r3, #32
 8002142:	f040 80d9 	bne.w	80022f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	2319      	movs	r3, #25
 800214c:	2201      	movs	r2, #1
 800214e:	496d      	ldr	r1, [pc, #436]	; (8002304 <HAL_I2C_Mem_Write+0x1ec>)
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 fc7f 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800215c:	2302      	movs	r3, #2
 800215e:	e0cc      	b.n	80022fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <HAL_I2C_Mem_Write+0x56>
 800216a:	2302      	movs	r3, #2
 800216c:	e0c5      	b.n	80022fa <HAL_I2C_Mem_Write+0x1e2>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b01      	cmp	r3, #1
 8002182:	d007      	beq.n	8002194 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0201 	orr.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2221      	movs	r2, #33	; 0x21
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2240      	movs	r2, #64	; 0x40
 80021b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6a3a      	ldr	r2, [r7, #32]
 80021be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80021c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4a4d      	ldr	r2, [pc, #308]	; (8002308 <HAL_I2C_Mem_Write+0x1f0>)
 80021d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021d6:	88f8      	ldrh	r0, [r7, #6]
 80021d8:	893a      	ldrh	r2, [r7, #8]
 80021da:	8979      	ldrh	r1, [r7, #10]
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	9301      	str	r3, [sp, #4]
 80021e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	4603      	mov	r3, r0
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 fab6 	bl	8002758 <I2C_RequestMemoryWrite>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d052      	beq.n	8002298 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e081      	b.n	80022fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f000 fd00 	bl	8002c00 <I2C_WaitOnTXEFlagUntilTimeout>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00d      	beq.n	8002222 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	2b04      	cmp	r3, #4
 800220c:	d107      	bne.n	800221e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800221c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e06b      	b.n	80022fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002226:	781a      	ldrb	r2, [r3, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223c:	3b01      	subs	r3, #1
 800223e:	b29a      	uxth	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002248:	b29b      	uxth	r3, r3
 800224a:	3b01      	subs	r3, #1
 800224c:	b29a      	uxth	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b04      	cmp	r3, #4
 800225e:	d11b      	bne.n	8002298 <HAL_I2C_Mem_Write+0x180>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002264:	2b00      	cmp	r3, #0
 8002266:	d017      	beq.n	8002298 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	781a      	ldrb	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	1c5a      	adds	r2, r3, #1
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002282:	3b01      	subs	r3, #1
 8002284:	b29a      	uxth	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228e:	b29b      	uxth	r3, r3
 8002290:	3b01      	subs	r3, #1
 8002292:	b29a      	uxth	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1aa      	bne.n	80021f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 fcec 	bl	8002c82 <I2C_WaitOnBTFFlagUntilTimeout>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00d      	beq.n	80022cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	d107      	bne.n	80022c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e016      	b.n	80022fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2220      	movs	r2, #32
 80022e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022f4:	2300      	movs	r3, #0
 80022f6:	e000      	b.n	80022fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80022f8:	2302      	movs	r3, #2
  }
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	00100002 	.word	0x00100002
 8002308:	ffff0000 	.word	0xffff0000

0800230c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08c      	sub	sp, #48	; 0x30
 8002310:	af02      	add	r7, sp, #8
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	4608      	mov	r0, r1
 8002316:	4611      	mov	r1, r2
 8002318:	461a      	mov	r2, r3
 800231a:	4603      	mov	r3, r0
 800231c:	817b      	strh	r3, [r7, #10]
 800231e:	460b      	mov	r3, r1
 8002320:	813b      	strh	r3, [r7, #8]
 8002322:	4613      	mov	r3, r2
 8002324:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002326:	f7ff fabb 	bl	80018a0 <HAL_GetTick>
 800232a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b20      	cmp	r3, #32
 8002336:	f040 8208 	bne.w	800274a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	2319      	movs	r3, #25
 8002340:	2201      	movs	r2, #1
 8002342:	497b      	ldr	r1, [pc, #492]	; (8002530 <HAL_I2C_Mem_Read+0x224>)
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 fb85 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002350:	2302      	movs	r3, #2
 8002352:	e1fb      	b.n	800274c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <HAL_I2C_Mem_Read+0x56>
 800235e:	2302      	movs	r3, #2
 8002360:	e1f4      	b.n	800274c <HAL_I2C_Mem_Read+0x440>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b01      	cmp	r3, #1
 8002376:	d007      	beq.n	8002388 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0201 	orr.w	r2, r2, #1
 8002386:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002396:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2222      	movs	r2, #34	; 0x22
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2240      	movs	r2, #64	; 0x40
 80023a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80023b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023be:	b29a      	uxth	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4a5b      	ldr	r2, [pc, #364]	; (8002534 <HAL_I2C_Mem_Read+0x228>)
 80023c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023ca:	88f8      	ldrh	r0, [r7, #6]
 80023cc:	893a      	ldrh	r2, [r7, #8]
 80023ce:	8979      	ldrh	r1, [r7, #10]
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	4603      	mov	r3, r0
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 fa52 	bl	8002884 <I2C_RequestMemoryRead>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e1b0      	b.n	800274c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d113      	bne.n	800241a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023f2:	2300      	movs	r3, #0
 80023f4:	623b      	str	r3, [r7, #32]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	623b      	str	r3, [r7, #32]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	623b      	str	r3, [r7, #32]
 8002406:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	e184      	b.n	8002724 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241e:	2b01      	cmp	r3, #1
 8002420:	d11b      	bne.n	800245a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002430:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	61fb      	str	r3, [r7, #28]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	e164      	b.n	8002724 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800245e:	2b02      	cmp	r3, #2
 8002460:	d11b      	bne.n	800249a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002470:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002480:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002482:	2300      	movs	r3, #0
 8002484:	61bb      	str	r3, [r7, #24]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	61bb      	str	r3, [r7, #24]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	61bb      	str	r3, [r7, #24]
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	e144      	b.n	8002724 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	617b      	str	r3, [r7, #20]
 80024ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80024b0:	e138      	b.n	8002724 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	f200 80f1 	bhi.w	800269e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d123      	bne.n	800250c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 fc1b 	bl	8002d04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e139      	b.n	800274c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	691a      	ldr	r2, [r3, #16]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f4:	3b01      	subs	r3, #1
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002500:	b29b      	uxth	r3, r3
 8002502:	3b01      	subs	r3, #1
 8002504:	b29a      	uxth	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	855a      	strh	r2, [r3, #42]	; 0x2a
 800250a:	e10b      	b.n	8002724 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002510:	2b02      	cmp	r3, #2
 8002512:	d14e      	bne.n	80025b2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800251a:	2200      	movs	r2, #0
 800251c:	4906      	ldr	r1, [pc, #24]	; (8002538 <HAL_I2C_Mem_Read+0x22c>)
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 fa98 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d008      	beq.n	800253c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e10e      	b.n	800274c <HAL_I2C_Mem_Read+0x440>
 800252e:	bf00      	nop
 8002530:	00100002 	.word	0x00100002
 8002534:	ffff0000 	.word	0xffff0000
 8002538:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800254a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691a      	ldr	r2, [r3, #16]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002574:	b29b      	uxth	r3, r3
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	691a      	ldr	r2, [r3, #16]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259a:	3b01      	subs	r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025b0:	e0b8      	b.n	8002724 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b8:	2200      	movs	r2, #0
 80025ba:	4966      	ldr	r1, [pc, #408]	; (8002754 <HAL_I2C_Mem_Read+0x448>)
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 fa49 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0bf      	b.n	800274c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002604:	b29b      	uxth	r3, r3
 8002606:	3b01      	subs	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002614:	2200      	movs	r2, #0
 8002616:	494f      	ldr	r1, [pc, #316]	; (8002754 <HAL_I2C_Mem_Read+0x448>)
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 fa1b 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e091      	b.n	800274c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002636:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691a      	ldr	r2, [r3, #16]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002654:	3b01      	subs	r3, #1
 8002656:	b29a      	uxth	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002660:	b29b      	uxth	r3, r3
 8002662:	3b01      	subs	r3, #1
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002686:	3b01      	subs	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002692:	b29b      	uxth	r3, r3
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800269c:	e042      	b.n	8002724 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800269e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f000 fb2e 	bl	8002d04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e04c      	b.n	800274c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	691a      	ldr	r2, [r3, #16]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026da:	b29b      	uxth	r3, r3
 80026dc:	3b01      	subs	r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	f003 0304 	and.w	r3, r3, #4
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d118      	bne.n	8002724 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	691a      	ldr	r2, [r3, #16]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270e:	3b01      	subs	r3, #1
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271a:	b29b      	uxth	r3, r3
 800271c:	3b01      	subs	r3, #1
 800271e:	b29a      	uxth	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002728:	2b00      	cmp	r3, #0
 800272a:	f47f aec2 	bne.w	80024b2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2220      	movs	r2, #32
 8002732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002746:	2300      	movs	r3, #0
 8002748:	e000      	b.n	800274c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800274a:	2302      	movs	r3, #2
  }
}
 800274c:	4618      	mov	r0, r3
 800274e:	3728      	adds	r7, #40	; 0x28
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	00010004 	.word	0x00010004

08002758 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b088      	sub	sp, #32
 800275c:	af02      	add	r7, sp, #8
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	4608      	mov	r0, r1
 8002762:	4611      	mov	r1, r2
 8002764:	461a      	mov	r2, r3
 8002766:	4603      	mov	r3, r0
 8002768:	817b      	strh	r3, [r7, #10]
 800276a:	460b      	mov	r3, r1
 800276c:	813b      	strh	r3, [r7, #8]
 800276e:	4613      	mov	r3, r2
 8002770:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002780:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	2200      	movs	r2, #0
 800278a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 f960 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00d      	beq.n	80027b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027a8:	d103      	bne.n	80027b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e05f      	b.n	8002876 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027b6:	897b      	ldrh	r3, [r7, #10]
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	461a      	mov	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	6a3a      	ldr	r2, [r7, #32]
 80027ca:	492d      	ldr	r1, [pc, #180]	; (8002880 <I2C_RequestMemoryWrite+0x128>)
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 f998 	bl	8002b02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e04c      	b.n	8002876 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f4:	6a39      	ldr	r1, [r7, #32]
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 fa02 	bl	8002c00 <I2C_WaitOnTXEFlagUntilTimeout>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00d      	beq.n	800281e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	2b04      	cmp	r3, #4
 8002808:	d107      	bne.n	800281a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002818:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e02b      	b.n	8002876 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800281e:	88fb      	ldrh	r3, [r7, #6]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d105      	bne.n	8002830 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002824:	893b      	ldrh	r3, [r7, #8]
 8002826:	b2da      	uxtb	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	611a      	str	r2, [r3, #16]
 800282e:	e021      	b.n	8002874 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002830:	893b      	ldrh	r3, [r7, #8]
 8002832:	0a1b      	lsrs	r3, r3, #8
 8002834:	b29b      	uxth	r3, r3
 8002836:	b2da      	uxtb	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800283e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002840:	6a39      	ldr	r1, [r7, #32]
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 f9dc 	bl	8002c00 <I2C_WaitOnTXEFlagUntilTimeout>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00d      	beq.n	800286a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	2b04      	cmp	r3, #4
 8002854:	d107      	bne.n	8002866 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002864:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e005      	b.n	8002876 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800286a:	893b      	ldrh	r3, [r7, #8]
 800286c:	b2da      	uxtb	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	00010002 	.word	0x00010002

08002884 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af02      	add	r7, sp, #8
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	4608      	mov	r0, r1
 800288e:	4611      	mov	r1, r2
 8002890:	461a      	mov	r2, r3
 8002892:	4603      	mov	r3, r0
 8002894:	817b      	strh	r3, [r7, #10]
 8002896:	460b      	mov	r3, r1
 8002898:	813b      	strh	r3, [r7, #8]
 800289a:	4613      	mov	r3, r2
 800289c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028ac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 f8c2 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00d      	beq.n	80028f2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028e4:	d103      	bne.n	80028ee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e0aa      	b.n	8002a48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028f2:	897b      	ldrh	r3, [r7, #10]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	461a      	mov	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002900:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	6a3a      	ldr	r2, [r7, #32]
 8002906:	4952      	ldr	r1, [pc, #328]	; (8002a50 <I2C_RequestMemoryRead+0x1cc>)
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 f8fa 	bl	8002b02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e097      	b.n	8002a48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	617b      	str	r3, [r7, #20]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800292e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002930:	6a39      	ldr	r1, [r7, #32]
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 f964 	bl	8002c00 <I2C_WaitOnTXEFlagUntilTimeout>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00d      	beq.n	800295a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	2b04      	cmp	r3, #4
 8002944:	d107      	bne.n	8002956 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002954:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e076      	b.n	8002a48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800295a:	88fb      	ldrh	r3, [r7, #6]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d105      	bne.n	800296c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002960:	893b      	ldrh	r3, [r7, #8]
 8002962:	b2da      	uxtb	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	611a      	str	r2, [r3, #16]
 800296a:	e021      	b.n	80029b0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800296c:	893b      	ldrh	r3, [r7, #8]
 800296e:	0a1b      	lsrs	r3, r3, #8
 8002970:	b29b      	uxth	r3, r3
 8002972:	b2da      	uxtb	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800297a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297c:	6a39      	ldr	r1, [r7, #32]
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 f93e 	bl	8002c00 <I2C_WaitOnTXEFlagUntilTimeout>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00d      	beq.n	80029a6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	2b04      	cmp	r3, #4
 8002990:	d107      	bne.n	80029a2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e050      	b.n	8002a48 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029a6:	893b      	ldrh	r3, [r7, #8]
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b2:	6a39      	ldr	r1, [r7, #32]
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 f923 	bl	8002c00 <I2C_WaitOnTXEFlagUntilTimeout>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00d      	beq.n	80029dc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	d107      	bne.n	80029d8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e035      	b.n	8002a48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029ea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	6a3b      	ldr	r3, [r7, #32]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 f82b 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00d      	beq.n	8002a20 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a12:	d103      	bne.n	8002a1c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e013      	b.n	8002a48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a20:	897b      	ldrh	r3, [r7, #10]
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	6a3a      	ldr	r2, [r7, #32]
 8002a34:	4906      	ldr	r1, [pc, #24]	; (8002a50 <I2C_RequestMemoryRead+0x1cc>)
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 f863 	bl	8002b02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	00010002 	.word	0x00010002

08002a54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	603b      	str	r3, [r7, #0]
 8002a60:	4613      	mov	r3, r2
 8002a62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a64:	e025      	b.n	8002ab2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6c:	d021      	beq.n	8002ab2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a6e:	f7fe ff17 	bl	80018a0 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d302      	bcc.n	8002a84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d116      	bne.n	8002ab2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f043 0220 	orr.w	r2, r3, #32
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e023      	b.n	8002afa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	0c1b      	lsrs	r3, r3, #16
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d10d      	bne.n	8002ad8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	43da      	mvns	r2, r3
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	bf0c      	ite	eq
 8002ace:	2301      	moveq	r3, #1
 8002ad0:	2300      	movne	r3, #0
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	e00c      	b.n	8002af2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	43da      	mvns	r2, r3
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	bf0c      	ite	eq
 8002aea:	2301      	moveq	r3, #1
 8002aec:	2300      	movne	r3, #0
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	461a      	mov	r2, r3
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d0b6      	beq.n	8002a66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b084      	sub	sp, #16
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	60f8      	str	r0, [r7, #12]
 8002b0a:	60b9      	str	r1, [r7, #8]
 8002b0c:	607a      	str	r2, [r7, #4]
 8002b0e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b10:	e051      	b.n	8002bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b20:	d123      	bne.n	8002b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b30:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b3a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2220      	movs	r2, #32
 8002b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	f043 0204 	orr.w	r2, r3, #4
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e046      	b.n	8002bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b70:	d021      	beq.n	8002bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b72:	f7fe fe95 	bl	80018a0 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d302      	bcc.n	8002b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d116      	bne.n	8002bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f043 0220 	orr.w	r2, r3, #32
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e020      	b.n	8002bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	0c1b      	lsrs	r3, r3, #16
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d10c      	bne.n	8002bda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	43da      	mvns	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	bf14      	ite	ne
 8002bd2:	2301      	movne	r3, #1
 8002bd4:	2300      	moveq	r3, #0
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	e00b      	b.n	8002bf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	43da      	mvns	r2, r3
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	4013      	ands	r3, r2
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	bf14      	ite	ne
 8002bec:	2301      	movne	r3, #1
 8002bee:	2300      	moveq	r3, #0
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d18d      	bne.n	8002b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c0c:	e02d      	b.n	8002c6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f8ce 	bl	8002db0 <I2C_IsAcknowledgeFailed>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e02d      	b.n	8002c7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c24:	d021      	beq.n	8002c6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c26:	f7fe fe3b 	bl	80018a0 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d302      	bcc.n	8002c3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d116      	bne.n	8002c6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2220      	movs	r2, #32
 8002c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	f043 0220 	orr.w	r2, r3, #32
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e007      	b.n	8002c7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c74:	2b80      	cmp	r3, #128	; 0x80
 8002c76:	d1ca      	bne.n	8002c0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b084      	sub	sp, #16
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c8e:	e02d      	b.n	8002cec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 f88d 	bl	8002db0 <I2C_IsAcknowledgeFailed>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e02d      	b.n	8002cfc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca6:	d021      	beq.n	8002cec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ca8:	f7fe fdfa 	bl	80018a0 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d302      	bcc.n	8002cbe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d116      	bne.n	8002cec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	f043 0220 	orr.w	r2, r3, #32
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e007      	b.n	8002cfc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d1ca      	bne.n	8002c90 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d10:	e042      	b.n	8002d98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	f003 0310 	and.w	r3, r3, #16
 8002d1c:	2b10      	cmp	r3, #16
 8002d1e:	d119      	bne.n	8002d54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f06f 0210 	mvn.w	r2, #16
 8002d28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2220      	movs	r2, #32
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e029      	b.n	8002da8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d54:	f7fe fda4 	bl	80018a0 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d302      	bcc.n	8002d6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d116      	bne.n	8002d98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	f043 0220 	orr.w	r2, r3, #32
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e007      	b.n	8002da8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da2:	2b40      	cmp	r3, #64	; 0x40
 8002da4:	d1b5      	bne.n	8002d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc6:	d11b      	bne.n	8002e00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dd0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	f043 0204 	orr.w	r2, r3, #4
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e000      	b.n	8002e02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
	...

08002e10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e267      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d075      	beq.n	8002f1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e2e:	4b88      	ldr	r3, [pc, #544]	; (8003050 <HAL_RCC_OscConfig+0x240>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 030c 	and.w	r3, r3, #12
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d00c      	beq.n	8002e54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e3a:	4b85      	ldr	r3, [pc, #532]	; (8003050 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d112      	bne.n	8002e6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e46:	4b82      	ldr	r3, [pc, #520]	; (8003050 <HAL_RCC_OscConfig+0x240>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e52:	d10b      	bne.n	8002e6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e54:	4b7e      	ldr	r3, [pc, #504]	; (8003050 <HAL_RCC_OscConfig+0x240>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d05b      	beq.n	8002f18 <HAL_RCC_OscConfig+0x108>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d157      	bne.n	8002f18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e242      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e74:	d106      	bne.n	8002e84 <HAL_RCC_OscConfig+0x74>
 8002e76:	4b76      	ldr	r3, [pc, #472]	; (8003050 <HAL_RCC_OscConfig+0x240>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a75      	ldr	r2, [pc, #468]	; (8003050 <HAL_RCC_OscConfig+0x240>)
 8002e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	e01d      	b.n	8002ec0 <HAL_RCC_OscConfig+0xb0>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e8c:	d10c      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x98>
 8002e8e:	4b70      	ldr	r3, [pc, #448]	; (8003050 <HAL_RCC_OscConfig+0x240>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a6f      	ldr	r2, [pc, #444]	; (8003050 <HAL_RCC_OscConfig+0x240>)
 8002e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	4b6d      	ldr	r3, [pc, #436]	; (8003050 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a6c      	ldr	r2, [pc, #432]	; (8003050 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	e00b      	b.n	8002ec0 <HAL_RCC_OscConfig+0xb0>
 8002ea8:	4b69      	ldr	r3, [pc, #420]	; (8003050 <HAL_RCC_OscConfig+0x240>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a68      	ldr	r2, [pc, #416]	; (8003050 <HAL_RCC_OscConfig+0x240>)
 8002eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	4b66      	ldr	r3, [pc, #408]	; (8003050 <HAL_RCC_OscConfig+0x240>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a65      	ldr	r2, [pc, #404]	; (8003050 <HAL_RCC_OscConfig+0x240>)
 8002eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d013      	beq.n	8002ef0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec8:	f7fe fcea 	bl	80018a0 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ed0:	f7fe fce6 	bl	80018a0 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b64      	cmp	r3, #100	; 0x64
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e207      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee2:	4b5b      	ldr	r3, [pc, #364]	; (8003050 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0xc0>
 8002eee:	e014      	b.n	8002f1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef0:	f7fe fcd6 	bl	80018a0 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ef8:	f7fe fcd2 	bl	80018a0 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b64      	cmp	r3, #100	; 0x64
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e1f3      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0a:	4b51      	ldr	r3, [pc, #324]	; (8003050 <HAL_RCC_OscConfig+0x240>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0xe8>
 8002f16:	e000      	b.n	8002f1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d063      	beq.n	8002fee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f26:	4b4a      	ldr	r3, [pc, #296]	; (8003050 <HAL_RCC_OscConfig+0x240>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00b      	beq.n	8002f4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f32:	4b47      	ldr	r3, [pc, #284]	; (8003050 <HAL_RCC_OscConfig+0x240>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d11c      	bne.n	8002f78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f3e:	4b44      	ldr	r3, [pc, #272]	; (8003050 <HAL_RCC_OscConfig+0x240>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d116      	bne.n	8002f78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4a:	4b41      	ldr	r3, [pc, #260]	; (8003050 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d005      	beq.n	8002f62 <HAL_RCC_OscConfig+0x152>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d001      	beq.n	8002f62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e1c7      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f62:	4b3b      	ldr	r3, [pc, #236]	; (8003050 <HAL_RCC_OscConfig+0x240>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4937      	ldr	r1, [pc, #220]	; (8003050 <HAL_RCC_OscConfig+0x240>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f76:	e03a      	b.n	8002fee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d020      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f80:	4b34      	ldr	r3, [pc, #208]	; (8003054 <HAL_RCC_OscConfig+0x244>)
 8002f82:	2201      	movs	r2, #1
 8002f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f86:	f7fe fc8b 	bl	80018a0 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f8e:	f7fe fc87 	bl	80018a0 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e1a8      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa0:	4b2b      	ldr	r3, [pc, #172]	; (8003050 <HAL_RCC_OscConfig+0x240>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0f0      	beq.n	8002f8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fac:	4b28      	ldr	r3, [pc, #160]	; (8003050 <HAL_RCC_OscConfig+0x240>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	4925      	ldr	r1, [pc, #148]	; (8003050 <HAL_RCC_OscConfig+0x240>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	600b      	str	r3, [r1, #0]
 8002fc0:	e015      	b.n	8002fee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fc2:	4b24      	ldr	r3, [pc, #144]	; (8003054 <HAL_RCC_OscConfig+0x244>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7fe fc6a 	bl	80018a0 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fd0:	f7fe fc66 	bl	80018a0 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e187      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe2:	4b1b      	ldr	r3, [pc, #108]	; (8003050 <HAL_RCC_OscConfig+0x240>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d036      	beq.n	8003068 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d016      	beq.n	8003030 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003002:	4b15      	ldr	r3, [pc, #84]	; (8003058 <HAL_RCC_OscConfig+0x248>)
 8003004:	2201      	movs	r2, #1
 8003006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003008:	f7fe fc4a 	bl	80018a0 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003010:	f7fe fc46 	bl	80018a0 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e167      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003022:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <HAL_RCC_OscConfig+0x240>)
 8003024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0x200>
 800302e:	e01b      	b.n	8003068 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003030:	4b09      	ldr	r3, [pc, #36]	; (8003058 <HAL_RCC_OscConfig+0x248>)
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003036:	f7fe fc33 	bl	80018a0 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800303c:	e00e      	b.n	800305c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800303e:	f7fe fc2f 	bl	80018a0 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d907      	bls.n	800305c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e150      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
 8003050:	40023800 	.word	0x40023800
 8003054:	42470000 	.word	0x42470000
 8003058:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800305c:	4b88      	ldr	r3, [pc, #544]	; (8003280 <HAL_RCC_OscConfig+0x470>)
 800305e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1ea      	bne.n	800303e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 8097 	beq.w	80031a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003076:	2300      	movs	r3, #0
 8003078:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800307a:	4b81      	ldr	r3, [pc, #516]	; (8003280 <HAL_RCC_OscConfig+0x470>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10f      	bne.n	80030a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003086:	2300      	movs	r3, #0
 8003088:	60bb      	str	r3, [r7, #8]
 800308a:	4b7d      	ldr	r3, [pc, #500]	; (8003280 <HAL_RCC_OscConfig+0x470>)
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	4a7c      	ldr	r2, [pc, #496]	; (8003280 <HAL_RCC_OscConfig+0x470>)
 8003090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003094:	6413      	str	r3, [r2, #64]	; 0x40
 8003096:	4b7a      	ldr	r3, [pc, #488]	; (8003280 <HAL_RCC_OscConfig+0x470>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030a2:	2301      	movs	r3, #1
 80030a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a6:	4b77      	ldr	r3, [pc, #476]	; (8003284 <HAL_RCC_OscConfig+0x474>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d118      	bne.n	80030e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030b2:	4b74      	ldr	r3, [pc, #464]	; (8003284 <HAL_RCC_OscConfig+0x474>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a73      	ldr	r2, [pc, #460]	; (8003284 <HAL_RCC_OscConfig+0x474>)
 80030b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030be:	f7fe fbef 	bl	80018a0 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c6:	f7fe fbeb 	bl	80018a0 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e10c      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d8:	4b6a      	ldr	r3, [pc, #424]	; (8003284 <HAL_RCC_OscConfig+0x474>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d106      	bne.n	80030fa <HAL_RCC_OscConfig+0x2ea>
 80030ec:	4b64      	ldr	r3, [pc, #400]	; (8003280 <HAL_RCC_OscConfig+0x470>)
 80030ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f0:	4a63      	ldr	r2, [pc, #396]	; (8003280 <HAL_RCC_OscConfig+0x470>)
 80030f2:	f043 0301 	orr.w	r3, r3, #1
 80030f6:	6713      	str	r3, [r2, #112]	; 0x70
 80030f8:	e01c      	b.n	8003134 <HAL_RCC_OscConfig+0x324>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2b05      	cmp	r3, #5
 8003100:	d10c      	bne.n	800311c <HAL_RCC_OscConfig+0x30c>
 8003102:	4b5f      	ldr	r3, [pc, #380]	; (8003280 <HAL_RCC_OscConfig+0x470>)
 8003104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003106:	4a5e      	ldr	r2, [pc, #376]	; (8003280 <HAL_RCC_OscConfig+0x470>)
 8003108:	f043 0304 	orr.w	r3, r3, #4
 800310c:	6713      	str	r3, [r2, #112]	; 0x70
 800310e:	4b5c      	ldr	r3, [pc, #368]	; (8003280 <HAL_RCC_OscConfig+0x470>)
 8003110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003112:	4a5b      	ldr	r2, [pc, #364]	; (8003280 <HAL_RCC_OscConfig+0x470>)
 8003114:	f043 0301 	orr.w	r3, r3, #1
 8003118:	6713      	str	r3, [r2, #112]	; 0x70
 800311a:	e00b      	b.n	8003134 <HAL_RCC_OscConfig+0x324>
 800311c:	4b58      	ldr	r3, [pc, #352]	; (8003280 <HAL_RCC_OscConfig+0x470>)
 800311e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003120:	4a57      	ldr	r2, [pc, #348]	; (8003280 <HAL_RCC_OscConfig+0x470>)
 8003122:	f023 0301 	bic.w	r3, r3, #1
 8003126:	6713      	str	r3, [r2, #112]	; 0x70
 8003128:	4b55      	ldr	r3, [pc, #340]	; (8003280 <HAL_RCC_OscConfig+0x470>)
 800312a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312c:	4a54      	ldr	r2, [pc, #336]	; (8003280 <HAL_RCC_OscConfig+0x470>)
 800312e:	f023 0304 	bic.w	r3, r3, #4
 8003132:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d015      	beq.n	8003168 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313c:	f7fe fbb0 	bl	80018a0 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003142:	e00a      	b.n	800315a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003144:	f7fe fbac 	bl	80018a0 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003152:	4293      	cmp	r3, r2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e0cb      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800315a:	4b49      	ldr	r3, [pc, #292]	; (8003280 <HAL_RCC_OscConfig+0x470>)
 800315c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0ee      	beq.n	8003144 <HAL_RCC_OscConfig+0x334>
 8003166:	e014      	b.n	8003192 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003168:	f7fe fb9a 	bl	80018a0 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800316e:	e00a      	b.n	8003186 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003170:	f7fe fb96 	bl	80018a0 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	f241 3288 	movw	r2, #5000	; 0x1388
 800317e:	4293      	cmp	r3, r2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e0b5      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003186:	4b3e      	ldr	r3, [pc, #248]	; (8003280 <HAL_RCC_OscConfig+0x470>)
 8003188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1ee      	bne.n	8003170 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003192:	7dfb      	ldrb	r3, [r7, #23]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d105      	bne.n	80031a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003198:	4b39      	ldr	r3, [pc, #228]	; (8003280 <HAL_RCC_OscConfig+0x470>)
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	4a38      	ldr	r2, [pc, #224]	; (8003280 <HAL_RCC_OscConfig+0x470>)
 800319e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 80a1 	beq.w	80032f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031ae:	4b34      	ldr	r3, [pc, #208]	; (8003280 <HAL_RCC_OscConfig+0x470>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 030c 	and.w	r3, r3, #12
 80031b6:	2b08      	cmp	r3, #8
 80031b8:	d05c      	beq.n	8003274 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d141      	bne.n	8003246 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c2:	4b31      	ldr	r3, [pc, #196]	; (8003288 <HAL_RCC_OscConfig+0x478>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c8:	f7fe fb6a 	bl	80018a0 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031d0:	f7fe fb66 	bl	80018a0 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e087      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e2:	4b27      	ldr	r3, [pc, #156]	; (8003280 <HAL_RCC_OscConfig+0x470>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f0      	bne.n	80031d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69da      	ldr	r2, [r3, #28]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	019b      	lsls	r3, r3, #6
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	3b01      	subs	r3, #1
 8003208:	041b      	lsls	r3, r3, #16
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003210:	061b      	lsls	r3, r3, #24
 8003212:	491b      	ldr	r1, [pc, #108]	; (8003280 <HAL_RCC_OscConfig+0x470>)
 8003214:	4313      	orrs	r3, r2
 8003216:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003218:	4b1b      	ldr	r3, [pc, #108]	; (8003288 <HAL_RCC_OscConfig+0x478>)
 800321a:	2201      	movs	r2, #1
 800321c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321e:	f7fe fb3f 	bl	80018a0 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003226:	f7fe fb3b 	bl	80018a0 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e05c      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003238:	4b11      	ldr	r3, [pc, #68]	; (8003280 <HAL_RCC_OscConfig+0x470>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0f0      	beq.n	8003226 <HAL_RCC_OscConfig+0x416>
 8003244:	e054      	b.n	80032f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003246:	4b10      	ldr	r3, [pc, #64]	; (8003288 <HAL_RCC_OscConfig+0x478>)
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324c:	f7fe fb28 	bl	80018a0 <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003254:	f7fe fb24 	bl	80018a0 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e045      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003266:	4b06      	ldr	r3, [pc, #24]	; (8003280 <HAL_RCC_OscConfig+0x470>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1f0      	bne.n	8003254 <HAL_RCC_OscConfig+0x444>
 8003272:	e03d      	b.n	80032f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d107      	bne.n	800328c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e038      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
 8003280:	40023800 	.word	0x40023800
 8003284:	40007000 	.word	0x40007000
 8003288:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800328c:	4b1b      	ldr	r3, [pc, #108]	; (80032fc <HAL_RCC_OscConfig+0x4ec>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d028      	beq.n	80032ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d121      	bne.n	80032ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d11a      	bne.n	80032ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032bc:	4013      	ands	r3, r2
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d111      	bne.n	80032ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d2:	085b      	lsrs	r3, r3, #1
 80032d4:	3b01      	subs	r3, #1
 80032d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032d8:	429a      	cmp	r2, r3
 80032da:	d107      	bne.n	80032ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d001      	beq.n	80032f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e000      	b.n	80032f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3718      	adds	r7, #24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40023800 	.word	0x40023800

08003300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e0cc      	b.n	80034ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003314:	4b68      	ldr	r3, [pc, #416]	; (80034b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d90c      	bls.n	800333c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003322:	4b65      	ldr	r3, [pc, #404]	; (80034b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800332a:	4b63      	ldr	r3, [pc, #396]	; (80034b8 <HAL_RCC_ClockConfig+0x1b8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d001      	beq.n	800333c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e0b8      	b.n	80034ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d020      	beq.n	800338a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b00      	cmp	r3, #0
 8003352:	d005      	beq.n	8003360 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003354:	4b59      	ldr	r3, [pc, #356]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	4a58      	ldr	r2, [pc, #352]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800335e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0308 	and.w	r3, r3, #8
 8003368:	2b00      	cmp	r3, #0
 800336a:	d005      	beq.n	8003378 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800336c:	4b53      	ldr	r3, [pc, #332]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	4a52      	ldr	r2, [pc, #328]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 8003372:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003376:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003378:	4b50      	ldr	r3, [pc, #320]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	494d      	ldr	r1, [pc, #308]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	4313      	orrs	r3, r2
 8003388:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d044      	beq.n	8003420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d107      	bne.n	80033ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800339e:	4b47      	ldr	r3, [pc, #284]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d119      	bne.n	80033de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e07f      	b.n	80034ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d003      	beq.n	80033be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ba:	2b03      	cmp	r3, #3
 80033bc:	d107      	bne.n	80033ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033be:	4b3f      	ldr	r3, [pc, #252]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d109      	bne.n	80033de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e06f      	b.n	80034ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ce:	4b3b      	ldr	r3, [pc, #236]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e067      	b.n	80034ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033de:	4b37      	ldr	r3, [pc, #220]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f023 0203 	bic.w	r2, r3, #3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	4934      	ldr	r1, [pc, #208]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033f0:	f7fe fa56 	bl	80018a0 <HAL_GetTick>
 80033f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f6:	e00a      	b.n	800340e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f8:	f7fe fa52 	bl	80018a0 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	f241 3288 	movw	r2, #5000	; 0x1388
 8003406:	4293      	cmp	r3, r2
 8003408:	d901      	bls.n	800340e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e04f      	b.n	80034ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340e:	4b2b      	ldr	r3, [pc, #172]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 020c 	and.w	r2, r3, #12
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	429a      	cmp	r2, r3
 800341e:	d1eb      	bne.n	80033f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003420:	4b25      	ldr	r3, [pc, #148]	; (80034b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	429a      	cmp	r2, r3
 800342c:	d20c      	bcs.n	8003448 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342e:	4b22      	ldr	r3, [pc, #136]	; (80034b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003436:	4b20      	ldr	r3, [pc, #128]	; (80034b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	d001      	beq.n	8003448 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e032      	b.n	80034ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	d008      	beq.n	8003466 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003454:	4b19      	ldr	r3, [pc, #100]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	4916      	ldr	r1, [pc, #88]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	4313      	orrs	r3, r2
 8003464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b00      	cmp	r3, #0
 8003470:	d009      	beq.n	8003486 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003472:	4b12      	ldr	r3, [pc, #72]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	490e      	ldr	r1, [pc, #56]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	4313      	orrs	r3, r2
 8003484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003486:	f000 f821 	bl	80034cc <HAL_RCC_GetSysClockFreq>
 800348a:	4602      	mov	r2, r0
 800348c:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	091b      	lsrs	r3, r3, #4
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	490a      	ldr	r1, [pc, #40]	; (80034c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003498:	5ccb      	ldrb	r3, [r1, r3]
 800349a:	fa22 f303 	lsr.w	r3, r2, r3
 800349e:	4a09      	ldr	r2, [pc, #36]	; (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 80034a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034a2:	4b09      	ldr	r3, [pc, #36]	; (80034c8 <HAL_RCC_ClockConfig+0x1c8>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fe f9b6 	bl	8001818 <HAL_InitTick>

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40023c00 	.word	0x40023c00
 80034bc:	40023800 	.word	0x40023800
 80034c0:	08004270 	.word	0x08004270
 80034c4:	20000000 	.word	0x20000000
 80034c8:	20000004 	.word	0x20000004

080034cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034d0:	b094      	sub	sp, #80	; 0x50
 80034d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	647b      	str	r3, [r7, #68]	; 0x44
 80034d8:	2300      	movs	r3, #0
 80034da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034dc:	2300      	movs	r3, #0
 80034de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034e4:	4b79      	ldr	r3, [pc, #484]	; (80036cc <HAL_RCC_GetSysClockFreq+0x200>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 030c 	and.w	r3, r3, #12
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	d00d      	beq.n	800350c <HAL_RCC_GetSysClockFreq+0x40>
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	f200 80e1 	bhi.w	80036b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d002      	beq.n	8003500 <HAL_RCC_GetSysClockFreq+0x34>
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d003      	beq.n	8003506 <HAL_RCC_GetSysClockFreq+0x3a>
 80034fe:	e0db      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003500:	4b73      	ldr	r3, [pc, #460]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003502:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003504:	e0db      	b.n	80036be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003506:	4b73      	ldr	r3, [pc, #460]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003508:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800350a:	e0d8      	b.n	80036be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800350c:	4b6f      	ldr	r3, [pc, #444]	; (80036cc <HAL_RCC_GetSysClockFreq+0x200>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003514:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003516:	4b6d      	ldr	r3, [pc, #436]	; (80036cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d063      	beq.n	80035ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003522:	4b6a      	ldr	r3, [pc, #424]	; (80036cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	099b      	lsrs	r3, r3, #6
 8003528:	2200      	movs	r2, #0
 800352a:	63bb      	str	r3, [r7, #56]	; 0x38
 800352c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800352e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003534:	633b      	str	r3, [r7, #48]	; 0x30
 8003536:	2300      	movs	r3, #0
 8003538:	637b      	str	r3, [r7, #52]	; 0x34
 800353a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800353e:	4622      	mov	r2, r4
 8003540:	462b      	mov	r3, r5
 8003542:	f04f 0000 	mov.w	r0, #0
 8003546:	f04f 0100 	mov.w	r1, #0
 800354a:	0159      	lsls	r1, r3, #5
 800354c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003550:	0150      	lsls	r0, r2, #5
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	4621      	mov	r1, r4
 8003558:	1a51      	subs	r1, r2, r1
 800355a:	6139      	str	r1, [r7, #16]
 800355c:	4629      	mov	r1, r5
 800355e:	eb63 0301 	sbc.w	r3, r3, r1
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	f04f 0200 	mov.w	r2, #0
 8003568:	f04f 0300 	mov.w	r3, #0
 800356c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003570:	4659      	mov	r1, fp
 8003572:	018b      	lsls	r3, r1, #6
 8003574:	4651      	mov	r1, sl
 8003576:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800357a:	4651      	mov	r1, sl
 800357c:	018a      	lsls	r2, r1, #6
 800357e:	4651      	mov	r1, sl
 8003580:	ebb2 0801 	subs.w	r8, r2, r1
 8003584:	4659      	mov	r1, fp
 8003586:	eb63 0901 	sbc.w	r9, r3, r1
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003596:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800359a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800359e:	4690      	mov	r8, r2
 80035a0:	4699      	mov	r9, r3
 80035a2:	4623      	mov	r3, r4
 80035a4:	eb18 0303 	adds.w	r3, r8, r3
 80035a8:	60bb      	str	r3, [r7, #8]
 80035aa:	462b      	mov	r3, r5
 80035ac:	eb49 0303 	adc.w	r3, r9, r3
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	f04f 0300 	mov.w	r3, #0
 80035ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035be:	4629      	mov	r1, r5
 80035c0:	024b      	lsls	r3, r1, #9
 80035c2:	4621      	mov	r1, r4
 80035c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035c8:	4621      	mov	r1, r4
 80035ca:	024a      	lsls	r2, r1, #9
 80035cc:	4610      	mov	r0, r2
 80035ce:	4619      	mov	r1, r3
 80035d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035d2:	2200      	movs	r2, #0
 80035d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80035d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035dc:	f7fd f808 	bl	80005f0 <__aeabi_uldivmod>
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	4613      	mov	r3, r2
 80035e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035e8:	e058      	b.n	800369c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ea:	4b38      	ldr	r3, [pc, #224]	; (80036cc <HAL_RCC_GetSysClockFreq+0x200>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	099b      	lsrs	r3, r3, #6
 80035f0:	2200      	movs	r2, #0
 80035f2:	4618      	mov	r0, r3
 80035f4:	4611      	mov	r1, r2
 80035f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035fa:	623b      	str	r3, [r7, #32]
 80035fc:	2300      	movs	r3, #0
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003600:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003604:	4642      	mov	r2, r8
 8003606:	464b      	mov	r3, r9
 8003608:	f04f 0000 	mov.w	r0, #0
 800360c:	f04f 0100 	mov.w	r1, #0
 8003610:	0159      	lsls	r1, r3, #5
 8003612:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003616:	0150      	lsls	r0, r2, #5
 8003618:	4602      	mov	r2, r0
 800361a:	460b      	mov	r3, r1
 800361c:	4641      	mov	r1, r8
 800361e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003622:	4649      	mov	r1, r9
 8003624:	eb63 0b01 	sbc.w	fp, r3, r1
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003634:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003638:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800363c:	ebb2 040a 	subs.w	r4, r2, sl
 8003640:	eb63 050b 	sbc.w	r5, r3, fp
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	00eb      	lsls	r3, r5, #3
 800364e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003652:	00e2      	lsls	r2, r4, #3
 8003654:	4614      	mov	r4, r2
 8003656:	461d      	mov	r5, r3
 8003658:	4643      	mov	r3, r8
 800365a:	18e3      	adds	r3, r4, r3
 800365c:	603b      	str	r3, [r7, #0]
 800365e:	464b      	mov	r3, r9
 8003660:	eb45 0303 	adc.w	r3, r5, r3
 8003664:	607b      	str	r3, [r7, #4]
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	f04f 0300 	mov.w	r3, #0
 800366e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003672:	4629      	mov	r1, r5
 8003674:	028b      	lsls	r3, r1, #10
 8003676:	4621      	mov	r1, r4
 8003678:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800367c:	4621      	mov	r1, r4
 800367e:	028a      	lsls	r2, r1, #10
 8003680:	4610      	mov	r0, r2
 8003682:	4619      	mov	r1, r3
 8003684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003686:	2200      	movs	r2, #0
 8003688:	61bb      	str	r3, [r7, #24]
 800368a:	61fa      	str	r2, [r7, #28]
 800368c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003690:	f7fc ffae 	bl	80005f0 <__aeabi_uldivmod>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	4613      	mov	r3, r2
 800369a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800369c:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <HAL_RCC_GetSysClockFreq+0x200>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	0c1b      	lsrs	r3, r3, #16
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	3301      	adds	r3, #1
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80036ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036b6:	e002      	b.n	80036be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036b8:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80036ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3750      	adds	r7, #80	; 0x50
 80036c4:	46bd      	mov	sp, r7
 80036c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036ca:	bf00      	nop
 80036cc:	40023800 	.word	0x40023800
 80036d0:	00f42400 	.word	0x00f42400
 80036d4:	007a1200 	.word	0x007a1200

080036d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036dc:	4b03      	ldr	r3, [pc, #12]	; (80036ec <HAL_RCC_GetHCLKFreq+0x14>)
 80036de:	681b      	ldr	r3, [r3, #0]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	20000000 	.word	0x20000000

080036f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036f4:	f7ff fff0 	bl	80036d8 <HAL_RCC_GetHCLKFreq>
 80036f8:	4602      	mov	r2, r0
 80036fa:	4b05      	ldr	r3, [pc, #20]	; (8003710 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	0a9b      	lsrs	r3, r3, #10
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	4903      	ldr	r1, [pc, #12]	; (8003714 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003706:	5ccb      	ldrb	r3, [r1, r3]
 8003708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800370c:	4618      	mov	r0, r3
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40023800 	.word	0x40023800
 8003714:	08004280 	.word	0x08004280

08003718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800371c:	f7ff ffdc 	bl	80036d8 <HAL_RCC_GetHCLKFreq>
 8003720:	4602      	mov	r2, r0
 8003722:	4b05      	ldr	r3, [pc, #20]	; (8003738 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	0b5b      	lsrs	r3, r3, #13
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	4903      	ldr	r1, [pc, #12]	; (800373c <HAL_RCC_GetPCLK2Freq+0x24>)
 800372e:	5ccb      	ldrb	r3, [r1, r3]
 8003730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003734:	4618      	mov	r0, r3
 8003736:	bd80      	pop	{r7, pc}
 8003738:	40023800 	.word	0x40023800
 800373c:	08004280 	.word	0x08004280

08003740 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e03f      	b.n	80037d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d106      	bne.n	800376c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7fd ffb2 	bl	80016d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2224      	movs	r2, #36	; 0x24
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003782:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f929 	bl	80039dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003798:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695a      	ldr	r2, [r3, #20]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b08a      	sub	sp, #40	; 0x28
 80037de:	af02      	add	r7, sp, #8
 80037e0:	60f8      	str	r0, [r7, #12]
 80037e2:	60b9      	str	r1, [r7, #8]
 80037e4:	603b      	str	r3, [r7, #0]
 80037e6:	4613      	mov	r3, r2
 80037e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b20      	cmp	r3, #32
 80037f8:	d17c      	bne.n	80038f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <HAL_UART_Transmit+0x2c>
 8003800:	88fb      	ldrh	r3, [r7, #6]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e075      	b.n	80038f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_UART_Transmit+0x3e>
 8003814:	2302      	movs	r3, #2
 8003816:	e06e      	b.n	80038f6 <HAL_UART_Transmit+0x11c>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2221      	movs	r2, #33	; 0x21
 800382a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800382e:	f7fe f837 	bl	80018a0 <HAL_GetTick>
 8003832:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	88fa      	ldrh	r2, [r7, #6]
 8003838:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	88fa      	ldrh	r2, [r7, #6]
 800383e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003848:	d108      	bne.n	800385c <HAL_UART_Transmit+0x82>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d104      	bne.n	800385c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003852:	2300      	movs	r3, #0
 8003854:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	61bb      	str	r3, [r7, #24]
 800385a:	e003      	b.n	8003864 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003860:	2300      	movs	r3, #0
 8003862:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800386c:	e02a      	b.n	80038c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2200      	movs	r2, #0
 8003876:	2180      	movs	r1, #128	; 0x80
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f840 	bl	80038fe <UART_WaitOnFlagUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e036      	b.n	80038f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10b      	bne.n	80038a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800389c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	3302      	adds	r3, #2
 80038a2:	61bb      	str	r3, [r7, #24]
 80038a4:	e007      	b.n	80038b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	781a      	ldrb	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	3301      	adds	r3, #1
 80038b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1cf      	bne.n	800386e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2200      	movs	r2, #0
 80038d6:	2140      	movs	r1, #64	; 0x40
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 f810 	bl	80038fe <UART_WaitOnFlagUntilTimeout>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e006      	b.n	80038f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	e000      	b.n	80038f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80038f4:	2302      	movs	r3, #2
  }
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3720      	adds	r7, #32
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b090      	sub	sp, #64	; 0x40
 8003902:	af00      	add	r7, sp, #0
 8003904:	60f8      	str	r0, [r7, #12]
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	603b      	str	r3, [r7, #0]
 800390a:	4613      	mov	r3, r2
 800390c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800390e:	e050      	b.n	80039b2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003916:	d04c      	beq.n	80039b2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800391a:	2b00      	cmp	r3, #0
 800391c:	d007      	beq.n	800392e <UART_WaitOnFlagUntilTimeout+0x30>
 800391e:	f7fd ffbf 	bl	80018a0 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800392a:	429a      	cmp	r2, r3
 800392c:	d241      	bcs.n	80039b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	330c      	adds	r3, #12
 8003934:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003938:	e853 3f00 	ldrex	r3, [r3]
 800393c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003944:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	330c      	adds	r3, #12
 800394c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800394e:	637a      	str	r2, [r7, #52]	; 0x34
 8003950:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003952:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003954:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003956:	e841 2300 	strex	r3, r2, [r1]
 800395a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800395c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1e5      	bne.n	800392e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3314      	adds	r3, #20
 8003968:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	e853 3f00 	ldrex	r3, [r3]
 8003970:	613b      	str	r3, [r7, #16]
   return(result);
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f023 0301 	bic.w	r3, r3, #1
 8003978:	63bb      	str	r3, [r7, #56]	; 0x38
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	3314      	adds	r3, #20
 8003980:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003982:	623a      	str	r2, [r7, #32]
 8003984:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003986:	69f9      	ldr	r1, [r7, #28]
 8003988:	6a3a      	ldr	r2, [r7, #32]
 800398a:	e841 2300 	strex	r3, r2, [r1]
 800398e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1e5      	bne.n	8003962 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2220      	movs	r2, #32
 800399a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e00f      	b.n	80039d2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	4013      	ands	r3, r2
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	429a      	cmp	r2, r3
 80039c0:	bf0c      	ite	eq
 80039c2:	2301      	moveq	r3, #1
 80039c4:	2300      	movne	r3, #0
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	461a      	mov	r2, r3
 80039ca:	79fb      	ldrb	r3, [r7, #7]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d09f      	beq.n	8003910 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3740      	adds	r7, #64	; 0x40
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
	...

080039dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039e0:	b0c0      	sub	sp, #256	; 0x100
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80039f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f8:	68d9      	ldr	r1, [r3, #12]
 80039fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	ea40 0301 	orr.w	r3, r0, r1
 8003a04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	431a      	orrs	r2, r3
 8003a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a34:	f021 010c 	bic.w	r1, r1, #12
 8003a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a42:	430b      	orrs	r3, r1
 8003a44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a56:	6999      	ldr	r1, [r3, #24]
 8003a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	ea40 0301 	orr.w	r3, r0, r1
 8003a62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	4b8f      	ldr	r3, [pc, #572]	; (8003ca8 <UART_SetConfig+0x2cc>)
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d005      	beq.n	8003a7c <UART_SetConfig+0xa0>
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	4b8d      	ldr	r3, [pc, #564]	; (8003cac <UART_SetConfig+0x2d0>)
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d104      	bne.n	8003a86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a7c:	f7ff fe4c 	bl	8003718 <HAL_RCC_GetPCLK2Freq>
 8003a80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003a84:	e003      	b.n	8003a8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a86:	f7ff fe33 	bl	80036f0 <HAL_RCC_GetPCLK1Freq>
 8003a8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a98:	f040 810c 	bne.w	8003cb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003aa6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003aaa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003aae:	4622      	mov	r2, r4
 8003ab0:	462b      	mov	r3, r5
 8003ab2:	1891      	adds	r1, r2, r2
 8003ab4:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ab6:	415b      	adcs	r3, r3
 8003ab8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003aba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003abe:	4621      	mov	r1, r4
 8003ac0:	eb12 0801 	adds.w	r8, r2, r1
 8003ac4:	4629      	mov	r1, r5
 8003ac6:	eb43 0901 	adc.w	r9, r3, r1
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ad6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ada:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ade:	4690      	mov	r8, r2
 8003ae0:	4699      	mov	r9, r3
 8003ae2:	4623      	mov	r3, r4
 8003ae4:	eb18 0303 	adds.w	r3, r8, r3
 8003ae8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003aec:	462b      	mov	r3, r5
 8003aee:	eb49 0303 	adc.w	r3, r9, r3
 8003af2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	18db      	adds	r3, r3, r3
 8003b0e:	653b      	str	r3, [r7, #80]	; 0x50
 8003b10:	4613      	mov	r3, r2
 8003b12:	eb42 0303 	adc.w	r3, r2, r3
 8003b16:	657b      	str	r3, [r7, #84]	; 0x54
 8003b18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003b20:	f7fc fd66 	bl	80005f0 <__aeabi_uldivmod>
 8003b24:	4602      	mov	r2, r0
 8003b26:	460b      	mov	r3, r1
 8003b28:	4b61      	ldr	r3, [pc, #388]	; (8003cb0 <UART_SetConfig+0x2d4>)
 8003b2a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	011c      	lsls	r4, r3, #4
 8003b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b36:	2200      	movs	r2, #0
 8003b38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003b40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003b44:	4642      	mov	r2, r8
 8003b46:	464b      	mov	r3, r9
 8003b48:	1891      	adds	r1, r2, r2
 8003b4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003b4c:	415b      	adcs	r3, r3
 8003b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b54:	4641      	mov	r1, r8
 8003b56:	eb12 0a01 	adds.w	sl, r2, r1
 8003b5a:	4649      	mov	r1, r9
 8003b5c:	eb43 0b01 	adc.w	fp, r3, r1
 8003b60:	f04f 0200 	mov.w	r2, #0
 8003b64:	f04f 0300 	mov.w	r3, #0
 8003b68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b74:	4692      	mov	sl, r2
 8003b76:	469b      	mov	fp, r3
 8003b78:	4643      	mov	r3, r8
 8003b7a:	eb1a 0303 	adds.w	r3, sl, r3
 8003b7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b82:	464b      	mov	r3, r9
 8003b84:	eb4b 0303 	adc.w	r3, fp, r3
 8003b88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	18db      	adds	r3, r3, r3
 8003ba4:	643b      	str	r3, [r7, #64]	; 0x40
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	eb42 0303 	adc.w	r3, r2, r3
 8003bac:	647b      	str	r3, [r7, #68]	; 0x44
 8003bae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003bb2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003bb6:	f7fc fd1b 	bl	80005f0 <__aeabi_uldivmod>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	4611      	mov	r1, r2
 8003bc0:	4b3b      	ldr	r3, [pc, #236]	; (8003cb0 <UART_SetConfig+0x2d4>)
 8003bc2:	fba3 2301 	umull	r2, r3, r3, r1
 8003bc6:	095b      	lsrs	r3, r3, #5
 8003bc8:	2264      	movs	r2, #100	; 0x64
 8003bca:	fb02 f303 	mul.w	r3, r2, r3
 8003bce:	1acb      	subs	r3, r1, r3
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003bd6:	4b36      	ldr	r3, [pc, #216]	; (8003cb0 <UART_SetConfig+0x2d4>)
 8003bd8:	fba3 2302 	umull	r2, r3, r3, r2
 8003bdc:	095b      	lsrs	r3, r3, #5
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003be4:	441c      	add	r4, r3
 8003be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bea:	2200      	movs	r2, #0
 8003bec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003bf0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003bf4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003bf8:	4642      	mov	r2, r8
 8003bfa:	464b      	mov	r3, r9
 8003bfc:	1891      	adds	r1, r2, r2
 8003bfe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c00:	415b      	adcs	r3, r3
 8003c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c08:	4641      	mov	r1, r8
 8003c0a:	1851      	adds	r1, r2, r1
 8003c0c:	6339      	str	r1, [r7, #48]	; 0x30
 8003c0e:	4649      	mov	r1, r9
 8003c10:	414b      	adcs	r3, r1
 8003c12:	637b      	str	r3, [r7, #52]	; 0x34
 8003c14:	f04f 0200 	mov.w	r2, #0
 8003c18:	f04f 0300 	mov.w	r3, #0
 8003c1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003c20:	4659      	mov	r1, fp
 8003c22:	00cb      	lsls	r3, r1, #3
 8003c24:	4651      	mov	r1, sl
 8003c26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c2a:	4651      	mov	r1, sl
 8003c2c:	00ca      	lsls	r2, r1, #3
 8003c2e:	4610      	mov	r0, r2
 8003c30:	4619      	mov	r1, r3
 8003c32:	4603      	mov	r3, r0
 8003c34:	4642      	mov	r2, r8
 8003c36:	189b      	adds	r3, r3, r2
 8003c38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c3c:	464b      	mov	r3, r9
 8003c3e:	460a      	mov	r2, r1
 8003c40:	eb42 0303 	adc.w	r3, r2, r3
 8003c44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003c58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	18db      	adds	r3, r3, r3
 8003c60:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c62:	4613      	mov	r3, r2
 8003c64:	eb42 0303 	adc.w	r3, r2, r3
 8003c68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003c72:	f7fc fcbd 	bl	80005f0 <__aeabi_uldivmod>
 8003c76:	4602      	mov	r2, r0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4b0d      	ldr	r3, [pc, #52]	; (8003cb0 <UART_SetConfig+0x2d4>)
 8003c7c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c80:	095b      	lsrs	r3, r3, #5
 8003c82:	2164      	movs	r1, #100	; 0x64
 8003c84:	fb01 f303 	mul.w	r3, r1, r3
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	3332      	adds	r3, #50	; 0x32
 8003c8e:	4a08      	ldr	r2, [pc, #32]	; (8003cb0 <UART_SetConfig+0x2d4>)
 8003c90:	fba2 2303 	umull	r2, r3, r2, r3
 8003c94:	095b      	lsrs	r3, r3, #5
 8003c96:	f003 0207 	and.w	r2, r3, #7
 8003c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4422      	add	r2, r4
 8003ca2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ca4:	e105      	b.n	8003eb2 <UART_SetConfig+0x4d6>
 8003ca6:	bf00      	nop
 8003ca8:	40011000 	.word	0x40011000
 8003cac:	40011400 	.word	0x40011400
 8003cb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003cbe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003cc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003cc6:	4642      	mov	r2, r8
 8003cc8:	464b      	mov	r3, r9
 8003cca:	1891      	adds	r1, r2, r2
 8003ccc:	6239      	str	r1, [r7, #32]
 8003cce:	415b      	adcs	r3, r3
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cd6:	4641      	mov	r1, r8
 8003cd8:	1854      	adds	r4, r2, r1
 8003cda:	4649      	mov	r1, r9
 8003cdc:	eb43 0501 	adc.w	r5, r3, r1
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	00eb      	lsls	r3, r5, #3
 8003cea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cee:	00e2      	lsls	r2, r4, #3
 8003cf0:	4614      	mov	r4, r2
 8003cf2:	461d      	mov	r5, r3
 8003cf4:	4643      	mov	r3, r8
 8003cf6:	18e3      	adds	r3, r4, r3
 8003cf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003cfc:	464b      	mov	r3, r9
 8003cfe:	eb45 0303 	adc.w	r3, r5, r3
 8003d02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	f04f 0300 	mov.w	r3, #0
 8003d1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d22:	4629      	mov	r1, r5
 8003d24:	008b      	lsls	r3, r1, #2
 8003d26:	4621      	mov	r1, r4
 8003d28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d2c:	4621      	mov	r1, r4
 8003d2e:	008a      	lsls	r2, r1, #2
 8003d30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003d34:	f7fc fc5c 	bl	80005f0 <__aeabi_uldivmod>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4b60      	ldr	r3, [pc, #384]	; (8003ec0 <UART_SetConfig+0x4e4>)
 8003d3e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d42:	095b      	lsrs	r3, r3, #5
 8003d44:	011c      	lsls	r4, r3, #4
 8003d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003d58:	4642      	mov	r2, r8
 8003d5a:	464b      	mov	r3, r9
 8003d5c:	1891      	adds	r1, r2, r2
 8003d5e:	61b9      	str	r1, [r7, #24]
 8003d60:	415b      	adcs	r3, r3
 8003d62:	61fb      	str	r3, [r7, #28]
 8003d64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d68:	4641      	mov	r1, r8
 8003d6a:	1851      	adds	r1, r2, r1
 8003d6c:	6139      	str	r1, [r7, #16]
 8003d6e:	4649      	mov	r1, r9
 8003d70:	414b      	adcs	r3, r1
 8003d72:	617b      	str	r3, [r7, #20]
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	f04f 0300 	mov.w	r3, #0
 8003d7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d80:	4659      	mov	r1, fp
 8003d82:	00cb      	lsls	r3, r1, #3
 8003d84:	4651      	mov	r1, sl
 8003d86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d8a:	4651      	mov	r1, sl
 8003d8c:	00ca      	lsls	r2, r1, #3
 8003d8e:	4610      	mov	r0, r2
 8003d90:	4619      	mov	r1, r3
 8003d92:	4603      	mov	r3, r0
 8003d94:	4642      	mov	r2, r8
 8003d96:	189b      	adds	r3, r3, r2
 8003d98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d9c:	464b      	mov	r3, r9
 8003d9e:	460a      	mov	r2, r1
 8003da0:	eb42 0303 	adc.w	r3, r2, r3
 8003da4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003db2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	f04f 0300 	mov.w	r3, #0
 8003dbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003dc0:	4649      	mov	r1, r9
 8003dc2:	008b      	lsls	r3, r1, #2
 8003dc4:	4641      	mov	r1, r8
 8003dc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dca:	4641      	mov	r1, r8
 8003dcc:	008a      	lsls	r2, r1, #2
 8003dce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003dd2:	f7fc fc0d 	bl	80005f0 <__aeabi_uldivmod>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4b39      	ldr	r3, [pc, #228]	; (8003ec0 <UART_SetConfig+0x4e4>)
 8003ddc:	fba3 1302 	umull	r1, r3, r3, r2
 8003de0:	095b      	lsrs	r3, r3, #5
 8003de2:	2164      	movs	r1, #100	; 0x64
 8003de4:	fb01 f303 	mul.w	r3, r1, r3
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	3332      	adds	r3, #50	; 0x32
 8003dee:	4a34      	ldr	r2, [pc, #208]	; (8003ec0 <UART_SetConfig+0x4e4>)
 8003df0:	fba2 2303 	umull	r2, r3, r2, r3
 8003df4:	095b      	lsrs	r3, r3, #5
 8003df6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dfa:	441c      	add	r4, r3
 8003dfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e00:	2200      	movs	r2, #0
 8003e02:	673b      	str	r3, [r7, #112]	; 0x70
 8003e04:	677a      	str	r2, [r7, #116]	; 0x74
 8003e06:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e0a:	4642      	mov	r2, r8
 8003e0c:	464b      	mov	r3, r9
 8003e0e:	1891      	adds	r1, r2, r2
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	415b      	adcs	r3, r3
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e1a:	4641      	mov	r1, r8
 8003e1c:	1851      	adds	r1, r2, r1
 8003e1e:	6039      	str	r1, [r7, #0]
 8003e20:	4649      	mov	r1, r9
 8003e22:	414b      	adcs	r3, r1
 8003e24:	607b      	str	r3, [r7, #4]
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	f04f 0300 	mov.w	r3, #0
 8003e2e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e32:	4659      	mov	r1, fp
 8003e34:	00cb      	lsls	r3, r1, #3
 8003e36:	4651      	mov	r1, sl
 8003e38:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e3c:	4651      	mov	r1, sl
 8003e3e:	00ca      	lsls	r2, r1, #3
 8003e40:	4610      	mov	r0, r2
 8003e42:	4619      	mov	r1, r3
 8003e44:	4603      	mov	r3, r0
 8003e46:	4642      	mov	r2, r8
 8003e48:	189b      	adds	r3, r3, r2
 8003e4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e4c:	464b      	mov	r3, r9
 8003e4e:	460a      	mov	r2, r1
 8003e50:	eb42 0303 	adc.w	r3, r2, r3
 8003e54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	663b      	str	r3, [r7, #96]	; 0x60
 8003e60:	667a      	str	r2, [r7, #100]	; 0x64
 8003e62:	f04f 0200 	mov.w	r2, #0
 8003e66:	f04f 0300 	mov.w	r3, #0
 8003e6a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003e6e:	4649      	mov	r1, r9
 8003e70:	008b      	lsls	r3, r1, #2
 8003e72:	4641      	mov	r1, r8
 8003e74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e78:	4641      	mov	r1, r8
 8003e7a:	008a      	lsls	r2, r1, #2
 8003e7c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e80:	f7fc fbb6 	bl	80005f0 <__aeabi_uldivmod>
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4b0d      	ldr	r3, [pc, #52]	; (8003ec0 <UART_SetConfig+0x4e4>)
 8003e8a:	fba3 1302 	umull	r1, r3, r3, r2
 8003e8e:	095b      	lsrs	r3, r3, #5
 8003e90:	2164      	movs	r1, #100	; 0x64
 8003e92:	fb01 f303 	mul.w	r3, r1, r3
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	3332      	adds	r3, #50	; 0x32
 8003e9c:	4a08      	ldr	r2, [pc, #32]	; (8003ec0 <UART_SetConfig+0x4e4>)
 8003e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea2:	095b      	lsrs	r3, r3, #5
 8003ea4:	f003 020f 	and.w	r2, r3, #15
 8003ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4422      	add	r2, r4
 8003eb0:	609a      	str	r2, [r3, #8]
}
 8003eb2:	bf00      	nop
 8003eb4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ebe:	bf00      	nop
 8003ec0:	51eb851f 	.word	0x51eb851f

08003ec4 <_ZdlPvj>:
 8003ec4:	f000 b814 	b.w	8003ef0 <_ZdlPv>

08003ec8 <_Znwj>:
 8003ec8:	2801      	cmp	r0, #1
 8003eca:	bf38      	it	cc
 8003ecc:	2001      	movcc	r0, #1
 8003ece:	b510      	push	{r4, lr}
 8003ed0:	4604      	mov	r4, r0
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	f000 f85a 	bl	8003f8c <malloc>
 8003ed8:	b930      	cbnz	r0, 8003ee8 <_Znwj+0x20>
 8003eda:	f000 f81d 	bl	8003f18 <_ZSt15get_new_handlerv>
 8003ede:	b908      	cbnz	r0, 8003ee4 <_Znwj+0x1c>
 8003ee0:	f000 f822 	bl	8003f28 <abort>
 8003ee4:	4780      	blx	r0
 8003ee6:	e7f4      	b.n	8003ed2 <_Znwj+0xa>
 8003ee8:	bd10      	pop	{r4, pc}

08003eea <__cxa_pure_virtual>:
 8003eea:	b508      	push	{r3, lr}
 8003eec:	f000 f80e 	bl	8003f0c <_ZSt9terminatev>

08003ef0 <_ZdlPv>:
 8003ef0:	f000 b854 	b.w	8003f9c <free>

08003ef4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8003ef4:	b508      	push	{r3, lr}
 8003ef6:	4780      	blx	r0
 8003ef8:	f000 f816 	bl	8003f28 <abort>

08003efc <_ZSt13get_terminatev>:
 8003efc:	4b02      	ldr	r3, [pc, #8]	; (8003f08 <_ZSt13get_terminatev+0xc>)
 8003efe:	6818      	ldr	r0, [r3, #0]
 8003f00:	f3bf 8f5b 	dmb	ish
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	2000000c 	.word	0x2000000c

08003f0c <_ZSt9terminatev>:
 8003f0c:	b508      	push	{r3, lr}
 8003f0e:	f7ff fff5 	bl	8003efc <_ZSt13get_terminatev>
 8003f12:	f7ff ffef 	bl	8003ef4 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08003f18 <_ZSt15get_new_handlerv>:
 8003f18:	4b02      	ldr	r3, [pc, #8]	; (8003f24 <_ZSt15get_new_handlerv+0xc>)
 8003f1a:	6818      	ldr	r0, [r3, #0]
 8003f1c:	f3bf 8f5b 	dmb	ish
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	2000014c 	.word	0x2000014c

08003f28 <abort>:
 8003f28:	b508      	push	{r3, lr}
 8003f2a:	2006      	movs	r0, #6
 8003f2c:	f000 f95e 	bl	80041ec <raise>
 8003f30:	2001      	movs	r0, #1
 8003f32:	f7fd fb51 	bl	80015d8 <_exit>
	...

08003f38 <__errno>:
 8003f38:	4b01      	ldr	r3, [pc, #4]	; (8003f40 <__errno+0x8>)
 8003f3a:	6818      	ldr	r0, [r3, #0]
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	20000010 	.word	0x20000010

08003f44 <__libc_init_array>:
 8003f44:	b570      	push	{r4, r5, r6, lr}
 8003f46:	4d0d      	ldr	r5, [pc, #52]	; (8003f7c <__libc_init_array+0x38>)
 8003f48:	4c0d      	ldr	r4, [pc, #52]	; (8003f80 <__libc_init_array+0x3c>)
 8003f4a:	1b64      	subs	r4, r4, r5
 8003f4c:	10a4      	asrs	r4, r4, #2
 8003f4e:	2600      	movs	r6, #0
 8003f50:	42a6      	cmp	r6, r4
 8003f52:	d109      	bne.n	8003f68 <__libc_init_array+0x24>
 8003f54:	4d0b      	ldr	r5, [pc, #44]	; (8003f84 <__libc_init_array+0x40>)
 8003f56:	4c0c      	ldr	r4, [pc, #48]	; (8003f88 <__libc_init_array+0x44>)
 8003f58:	f000 f972 	bl	8004240 <_init>
 8003f5c:	1b64      	subs	r4, r4, r5
 8003f5e:	10a4      	asrs	r4, r4, #2
 8003f60:	2600      	movs	r6, #0
 8003f62:	42a6      	cmp	r6, r4
 8003f64:	d105      	bne.n	8003f72 <__libc_init_array+0x2e>
 8003f66:	bd70      	pop	{r4, r5, r6, pc}
 8003f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f6c:	4798      	blx	r3
 8003f6e:	3601      	adds	r6, #1
 8003f70:	e7ee      	b.n	8003f50 <__libc_init_array+0xc>
 8003f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f76:	4798      	blx	r3
 8003f78:	3601      	adds	r6, #1
 8003f7a:	e7f2      	b.n	8003f62 <__libc_init_array+0x1e>
 8003f7c:	08004290 	.word	0x08004290
 8003f80:	08004290 	.word	0x08004290
 8003f84:	08004290 	.word	0x08004290
 8003f88:	08004298 	.word	0x08004298

08003f8c <malloc>:
 8003f8c:	4b02      	ldr	r3, [pc, #8]	; (8003f98 <malloc+0xc>)
 8003f8e:	4601      	mov	r1, r0
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	f000 b87f 	b.w	8004094 <_malloc_r>
 8003f96:	bf00      	nop
 8003f98:	20000010 	.word	0x20000010

08003f9c <free>:
 8003f9c:	4b02      	ldr	r3, [pc, #8]	; (8003fa8 <free+0xc>)
 8003f9e:	4601      	mov	r1, r0
 8003fa0:	6818      	ldr	r0, [r3, #0]
 8003fa2:	f000 b80b 	b.w	8003fbc <_free_r>
 8003fa6:	bf00      	nop
 8003fa8:	20000010 	.word	0x20000010

08003fac <memset>:
 8003fac:	4402      	add	r2, r0
 8003fae:	4603      	mov	r3, r0
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d100      	bne.n	8003fb6 <memset+0xa>
 8003fb4:	4770      	bx	lr
 8003fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8003fba:	e7f9      	b.n	8003fb0 <memset+0x4>

08003fbc <_free_r>:
 8003fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003fbe:	2900      	cmp	r1, #0
 8003fc0:	d044      	beq.n	800404c <_free_r+0x90>
 8003fc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fc6:	9001      	str	r0, [sp, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f1a1 0404 	sub.w	r4, r1, #4
 8003fce:	bfb8      	it	lt
 8003fd0:	18e4      	addlt	r4, r4, r3
 8003fd2:	f000 f927 	bl	8004224 <__malloc_lock>
 8003fd6:	4a1e      	ldr	r2, [pc, #120]	; (8004050 <_free_r+0x94>)
 8003fd8:	9801      	ldr	r0, [sp, #4]
 8003fda:	6813      	ldr	r3, [r2, #0]
 8003fdc:	b933      	cbnz	r3, 8003fec <_free_r+0x30>
 8003fde:	6063      	str	r3, [r4, #4]
 8003fe0:	6014      	str	r4, [r2, #0]
 8003fe2:	b003      	add	sp, #12
 8003fe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003fe8:	f000 b922 	b.w	8004230 <__malloc_unlock>
 8003fec:	42a3      	cmp	r3, r4
 8003fee:	d908      	bls.n	8004002 <_free_r+0x46>
 8003ff0:	6825      	ldr	r5, [r4, #0]
 8003ff2:	1961      	adds	r1, r4, r5
 8003ff4:	428b      	cmp	r3, r1
 8003ff6:	bf01      	itttt	eq
 8003ff8:	6819      	ldreq	r1, [r3, #0]
 8003ffa:	685b      	ldreq	r3, [r3, #4]
 8003ffc:	1949      	addeq	r1, r1, r5
 8003ffe:	6021      	streq	r1, [r4, #0]
 8004000:	e7ed      	b.n	8003fde <_free_r+0x22>
 8004002:	461a      	mov	r2, r3
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	b10b      	cbz	r3, 800400c <_free_r+0x50>
 8004008:	42a3      	cmp	r3, r4
 800400a:	d9fa      	bls.n	8004002 <_free_r+0x46>
 800400c:	6811      	ldr	r1, [r2, #0]
 800400e:	1855      	adds	r5, r2, r1
 8004010:	42a5      	cmp	r5, r4
 8004012:	d10b      	bne.n	800402c <_free_r+0x70>
 8004014:	6824      	ldr	r4, [r4, #0]
 8004016:	4421      	add	r1, r4
 8004018:	1854      	adds	r4, r2, r1
 800401a:	42a3      	cmp	r3, r4
 800401c:	6011      	str	r1, [r2, #0]
 800401e:	d1e0      	bne.n	8003fe2 <_free_r+0x26>
 8004020:	681c      	ldr	r4, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	6053      	str	r3, [r2, #4]
 8004026:	4421      	add	r1, r4
 8004028:	6011      	str	r1, [r2, #0]
 800402a:	e7da      	b.n	8003fe2 <_free_r+0x26>
 800402c:	d902      	bls.n	8004034 <_free_r+0x78>
 800402e:	230c      	movs	r3, #12
 8004030:	6003      	str	r3, [r0, #0]
 8004032:	e7d6      	b.n	8003fe2 <_free_r+0x26>
 8004034:	6825      	ldr	r5, [r4, #0]
 8004036:	1961      	adds	r1, r4, r5
 8004038:	428b      	cmp	r3, r1
 800403a:	bf04      	itt	eq
 800403c:	6819      	ldreq	r1, [r3, #0]
 800403e:	685b      	ldreq	r3, [r3, #4]
 8004040:	6063      	str	r3, [r4, #4]
 8004042:	bf04      	itt	eq
 8004044:	1949      	addeq	r1, r1, r5
 8004046:	6021      	streq	r1, [r4, #0]
 8004048:	6054      	str	r4, [r2, #4]
 800404a:	e7ca      	b.n	8003fe2 <_free_r+0x26>
 800404c:	b003      	add	sp, #12
 800404e:	bd30      	pop	{r4, r5, pc}
 8004050:	20000150 	.word	0x20000150

08004054 <sbrk_aligned>:
 8004054:	b570      	push	{r4, r5, r6, lr}
 8004056:	4e0e      	ldr	r6, [pc, #56]	; (8004090 <sbrk_aligned+0x3c>)
 8004058:	460c      	mov	r4, r1
 800405a:	6831      	ldr	r1, [r6, #0]
 800405c:	4605      	mov	r5, r0
 800405e:	b911      	cbnz	r1, 8004066 <sbrk_aligned+0x12>
 8004060:	f000 f88c 	bl	800417c <_sbrk_r>
 8004064:	6030      	str	r0, [r6, #0]
 8004066:	4621      	mov	r1, r4
 8004068:	4628      	mov	r0, r5
 800406a:	f000 f887 	bl	800417c <_sbrk_r>
 800406e:	1c43      	adds	r3, r0, #1
 8004070:	d00a      	beq.n	8004088 <sbrk_aligned+0x34>
 8004072:	1cc4      	adds	r4, r0, #3
 8004074:	f024 0403 	bic.w	r4, r4, #3
 8004078:	42a0      	cmp	r0, r4
 800407a:	d007      	beq.n	800408c <sbrk_aligned+0x38>
 800407c:	1a21      	subs	r1, r4, r0
 800407e:	4628      	mov	r0, r5
 8004080:	f000 f87c 	bl	800417c <_sbrk_r>
 8004084:	3001      	adds	r0, #1
 8004086:	d101      	bne.n	800408c <sbrk_aligned+0x38>
 8004088:	f04f 34ff 	mov.w	r4, #4294967295
 800408c:	4620      	mov	r0, r4
 800408e:	bd70      	pop	{r4, r5, r6, pc}
 8004090:	20000154 	.word	0x20000154

08004094 <_malloc_r>:
 8004094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004098:	1ccd      	adds	r5, r1, #3
 800409a:	f025 0503 	bic.w	r5, r5, #3
 800409e:	3508      	adds	r5, #8
 80040a0:	2d0c      	cmp	r5, #12
 80040a2:	bf38      	it	cc
 80040a4:	250c      	movcc	r5, #12
 80040a6:	2d00      	cmp	r5, #0
 80040a8:	4607      	mov	r7, r0
 80040aa:	db01      	blt.n	80040b0 <_malloc_r+0x1c>
 80040ac:	42a9      	cmp	r1, r5
 80040ae:	d905      	bls.n	80040bc <_malloc_r+0x28>
 80040b0:	230c      	movs	r3, #12
 80040b2:	603b      	str	r3, [r7, #0]
 80040b4:	2600      	movs	r6, #0
 80040b6:	4630      	mov	r0, r6
 80040b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040bc:	4e2e      	ldr	r6, [pc, #184]	; (8004178 <_malloc_r+0xe4>)
 80040be:	f000 f8b1 	bl	8004224 <__malloc_lock>
 80040c2:	6833      	ldr	r3, [r6, #0]
 80040c4:	461c      	mov	r4, r3
 80040c6:	bb34      	cbnz	r4, 8004116 <_malloc_r+0x82>
 80040c8:	4629      	mov	r1, r5
 80040ca:	4638      	mov	r0, r7
 80040cc:	f7ff ffc2 	bl	8004054 <sbrk_aligned>
 80040d0:	1c43      	adds	r3, r0, #1
 80040d2:	4604      	mov	r4, r0
 80040d4:	d14d      	bne.n	8004172 <_malloc_r+0xde>
 80040d6:	6834      	ldr	r4, [r6, #0]
 80040d8:	4626      	mov	r6, r4
 80040da:	2e00      	cmp	r6, #0
 80040dc:	d140      	bne.n	8004160 <_malloc_r+0xcc>
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	4631      	mov	r1, r6
 80040e2:	4638      	mov	r0, r7
 80040e4:	eb04 0803 	add.w	r8, r4, r3
 80040e8:	f000 f848 	bl	800417c <_sbrk_r>
 80040ec:	4580      	cmp	r8, r0
 80040ee:	d13a      	bne.n	8004166 <_malloc_r+0xd2>
 80040f0:	6821      	ldr	r1, [r4, #0]
 80040f2:	3503      	adds	r5, #3
 80040f4:	1a6d      	subs	r5, r5, r1
 80040f6:	f025 0503 	bic.w	r5, r5, #3
 80040fa:	3508      	adds	r5, #8
 80040fc:	2d0c      	cmp	r5, #12
 80040fe:	bf38      	it	cc
 8004100:	250c      	movcc	r5, #12
 8004102:	4629      	mov	r1, r5
 8004104:	4638      	mov	r0, r7
 8004106:	f7ff ffa5 	bl	8004054 <sbrk_aligned>
 800410a:	3001      	adds	r0, #1
 800410c:	d02b      	beq.n	8004166 <_malloc_r+0xd2>
 800410e:	6823      	ldr	r3, [r4, #0]
 8004110:	442b      	add	r3, r5
 8004112:	6023      	str	r3, [r4, #0]
 8004114:	e00e      	b.n	8004134 <_malloc_r+0xa0>
 8004116:	6822      	ldr	r2, [r4, #0]
 8004118:	1b52      	subs	r2, r2, r5
 800411a:	d41e      	bmi.n	800415a <_malloc_r+0xc6>
 800411c:	2a0b      	cmp	r2, #11
 800411e:	d916      	bls.n	800414e <_malloc_r+0xba>
 8004120:	1961      	adds	r1, r4, r5
 8004122:	42a3      	cmp	r3, r4
 8004124:	6025      	str	r5, [r4, #0]
 8004126:	bf18      	it	ne
 8004128:	6059      	strne	r1, [r3, #4]
 800412a:	6863      	ldr	r3, [r4, #4]
 800412c:	bf08      	it	eq
 800412e:	6031      	streq	r1, [r6, #0]
 8004130:	5162      	str	r2, [r4, r5]
 8004132:	604b      	str	r3, [r1, #4]
 8004134:	4638      	mov	r0, r7
 8004136:	f104 060b 	add.w	r6, r4, #11
 800413a:	f000 f879 	bl	8004230 <__malloc_unlock>
 800413e:	f026 0607 	bic.w	r6, r6, #7
 8004142:	1d23      	adds	r3, r4, #4
 8004144:	1af2      	subs	r2, r6, r3
 8004146:	d0b6      	beq.n	80040b6 <_malloc_r+0x22>
 8004148:	1b9b      	subs	r3, r3, r6
 800414a:	50a3      	str	r3, [r4, r2]
 800414c:	e7b3      	b.n	80040b6 <_malloc_r+0x22>
 800414e:	6862      	ldr	r2, [r4, #4]
 8004150:	42a3      	cmp	r3, r4
 8004152:	bf0c      	ite	eq
 8004154:	6032      	streq	r2, [r6, #0]
 8004156:	605a      	strne	r2, [r3, #4]
 8004158:	e7ec      	b.n	8004134 <_malloc_r+0xa0>
 800415a:	4623      	mov	r3, r4
 800415c:	6864      	ldr	r4, [r4, #4]
 800415e:	e7b2      	b.n	80040c6 <_malloc_r+0x32>
 8004160:	4634      	mov	r4, r6
 8004162:	6876      	ldr	r6, [r6, #4]
 8004164:	e7b9      	b.n	80040da <_malloc_r+0x46>
 8004166:	230c      	movs	r3, #12
 8004168:	603b      	str	r3, [r7, #0]
 800416a:	4638      	mov	r0, r7
 800416c:	f000 f860 	bl	8004230 <__malloc_unlock>
 8004170:	e7a1      	b.n	80040b6 <_malloc_r+0x22>
 8004172:	6025      	str	r5, [r4, #0]
 8004174:	e7de      	b.n	8004134 <_malloc_r+0xa0>
 8004176:	bf00      	nop
 8004178:	20000150 	.word	0x20000150

0800417c <_sbrk_r>:
 800417c:	b538      	push	{r3, r4, r5, lr}
 800417e:	4d06      	ldr	r5, [pc, #24]	; (8004198 <_sbrk_r+0x1c>)
 8004180:	2300      	movs	r3, #0
 8004182:	4604      	mov	r4, r0
 8004184:	4608      	mov	r0, r1
 8004186:	602b      	str	r3, [r5, #0]
 8004188:	f7fd fa30 	bl	80015ec <_sbrk>
 800418c:	1c43      	adds	r3, r0, #1
 800418e:	d102      	bne.n	8004196 <_sbrk_r+0x1a>
 8004190:	682b      	ldr	r3, [r5, #0]
 8004192:	b103      	cbz	r3, 8004196 <_sbrk_r+0x1a>
 8004194:	6023      	str	r3, [r4, #0]
 8004196:	bd38      	pop	{r3, r4, r5, pc}
 8004198:	20000158 	.word	0x20000158

0800419c <_raise_r>:
 800419c:	291f      	cmp	r1, #31
 800419e:	b538      	push	{r3, r4, r5, lr}
 80041a0:	4604      	mov	r4, r0
 80041a2:	460d      	mov	r5, r1
 80041a4:	d904      	bls.n	80041b0 <_raise_r+0x14>
 80041a6:	2316      	movs	r3, #22
 80041a8:	6003      	str	r3, [r0, #0]
 80041aa:	f04f 30ff 	mov.w	r0, #4294967295
 80041ae:	bd38      	pop	{r3, r4, r5, pc}
 80041b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80041b2:	b112      	cbz	r2, 80041ba <_raise_r+0x1e>
 80041b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80041b8:	b94b      	cbnz	r3, 80041ce <_raise_r+0x32>
 80041ba:	4620      	mov	r0, r4
 80041bc:	f000 f830 	bl	8004220 <_getpid_r>
 80041c0:	462a      	mov	r2, r5
 80041c2:	4601      	mov	r1, r0
 80041c4:	4620      	mov	r0, r4
 80041c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041ca:	f000 b817 	b.w	80041fc <_kill_r>
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d00a      	beq.n	80041e8 <_raise_r+0x4c>
 80041d2:	1c59      	adds	r1, r3, #1
 80041d4:	d103      	bne.n	80041de <_raise_r+0x42>
 80041d6:	2316      	movs	r3, #22
 80041d8:	6003      	str	r3, [r0, #0]
 80041da:	2001      	movs	r0, #1
 80041dc:	e7e7      	b.n	80041ae <_raise_r+0x12>
 80041de:	2400      	movs	r4, #0
 80041e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80041e4:	4628      	mov	r0, r5
 80041e6:	4798      	blx	r3
 80041e8:	2000      	movs	r0, #0
 80041ea:	e7e0      	b.n	80041ae <_raise_r+0x12>

080041ec <raise>:
 80041ec:	4b02      	ldr	r3, [pc, #8]	; (80041f8 <raise+0xc>)
 80041ee:	4601      	mov	r1, r0
 80041f0:	6818      	ldr	r0, [r3, #0]
 80041f2:	f7ff bfd3 	b.w	800419c <_raise_r>
 80041f6:	bf00      	nop
 80041f8:	20000010 	.word	0x20000010

080041fc <_kill_r>:
 80041fc:	b538      	push	{r3, r4, r5, lr}
 80041fe:	4d07      	ldr	r5, [pc, #28]	; (800421c <_kill_r+0x20>)
 8004200:	2300      	movs	r3, #0
 8004202:	4604      	mov	r4, r0
 8004204:	4608      	mov	r0, r1
 8004206:	4611      	mov	r1, r2
 8004208:	602b      	str	r3, [r5, #0]
 800420a:	f7fd f9d5 	bl	80015b8 <_kill>
 800420e:	1c43      	adds	r3, r0, #1
 8004210:	d102      	bne.n	8004218 <_kill_r+0x1c>
 8004212:	682b      	ldr	r3, [r5, #0]
 8004214:	b103      	cbz	r3, 8004218 <_kill_r+0x1c>
 8004216:	6023      	str	r3, [r4, #0]
 8004218:	bd38      	pop	{r3, r4, r5, pc}
 800421a:	bf00      	nop
 800421c:	20000158 	.word	0x20000158

08004220 <_getpid_r>:
 8004220:	f7fd b9c2 	b.w	80015a8 <_getpid>

08004224 <__malloc_lock>:
 8004224:	4801      	ldr	r0, [pc, #4]	; (800422c <__malloc_lock+0x8>)
 8004226:	f000 b809 	b.w	800423c <__retarget_lock_acquire_recursive>
 800422a:	bf00      	nop
 800422c:	2000015c 	.word	0x2000015c

08004230 <__malloc_unlock>:
 8004230:	4801      	ldr	r0, [pc, #4]	; (8004238 <__malloc_unlock+0x8>)
 8004232:	f000 b804 	b.w	800423e <__retarget_lock_release_recursive>
 8004236:	bf00      	nop
 8004238:	2000015c 	.word	0x2000015c

0800423c <__retarget_lock_acquire_recursive>:
 800423c:	4770      	bx	lr

0800423e <__retarget_lock_release_recursive>:
 800423e:	4770      	bx	lr

08004240 <_init>:
 8004240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004242:	bf00      	nop
 8004244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004246:	bc08      	pop	{r3}
 8004248:	469e      	mov	lr, r3
 800424a:	4770      	bx	lr

0800424c <_fini>:
 800424c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424e:	bf00      	nop
 8004250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004252:	bc08      	pop	{r3}
 8004254:	469e      	mov	lr, r3
 8004256:	4770      	bx	lr
