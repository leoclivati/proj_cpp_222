
temperature_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fd4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000744  08009178  08009178  00019178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098bc  080098bc  0002060c  2**0
                  CONTENTS
  4 .ARM          00000008  080098bc  080098bc  000198bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098c4  080098c4  0002060c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080098c4  080098c4  000198c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098cc  080098cc  000198cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000060c  20000000  080098d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  2000060c  08009edc  0002060c  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  2000086c  08009edc  0002086c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002060c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a5f  00000000  00000000  0002063c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bb7  00000000  00000000  0003a09b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  0003dc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001040  00000000  00000000  0003ee08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d0ff  00000000  00000000  0003fe48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018185  00000000  00000000  0005cf47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ed24  00000000  00000000  000750cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cb  00000000  00000000  00113df0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ce4  00000000  00000000  00113ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  00119ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00119c6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000060c 	.word	0x2000060c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800915c 	.word	0x0800915c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000610 	.word	0x20000610
 80001dc:	0800915c 	.word	0x0800915c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <_ZN7MPU60504initEv>:
 */


#include "MPU6050.h"

void MPU6050::init(){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af04      	add	r7, sp, #16
 8000f62:	6078      	str	r0, [r7, #4]
	uint8_t check, data;

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 8000f64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f68:	9302      	str	r3, [sp, #8]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	f107 030f 	add.w	r3, r7, #15
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	2301      	movs	r3, #1
 8000f76:	2275      	movs	r2, #117	; 0x75
 8000f78:	21d0      	movs	r1, #208	; 0xd0
 8000f7a:	4815      	ldr	r0, [pc, #84]	; (8000fd0 <_ZN7MPU60504initEv+0x74>)
 8000f7c:	f001 ff4c 	bl	8002e18 <HAL_I2C_Mem_Read>

	if(check == 104){
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	2b68      	cmp	r3, #104	; 0x68
 8000f84:	d11f      	bne.n	8000fc6 <_ZN7MPU60504initEv+0x6a>
			data = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	73bb      	strb	r3, [r7, #14]
			HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_REG, 1, &data, 1, 1000);
 8000f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8e:	9302      	str	r3, [sp, #8]
 8000f90:	2301      	movs	r3, #1
 8000f92:	9301      	str	r3, [sp, #4]
 8000f94:	f107 030e 	add.w	r3, r7, #14
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	226b      	movs	r2, #107	; 0x6b
 8000f9e:	21d0      	movs	r1, #208	; 0xd0
 8000fa0:	480b      	ldr	r0, [pc, #44]	; (8000fd0 <_ZN7MPU60504initEv+0x74>)
 8000fa2:	f001 fe3f 	bl	8002c24 <HAL_I2C_Mem_Write>
			data = 0x01;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73bb      	strb	r3, [r7, #14]
			HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_REG, 1, &data, 1, 1000);
 8000faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	f107 030e 	add.w	r3, r7, #14
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	2219      	movs	r2, #25
 8000fbe:	21d0      	movs	r1, #208	; 0xd0
 8000fc0:	4803      	ldr	r0, [pc, #12]	; (8000fd0 <_ZN7MPU60504initEv+0x74>)
 8000fc2:	f001 fe2f 	bl	8002c24 <HAL_I2C_Mem_Write>
	}
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000630 	.word	0x20000630
 8000fd4:	00000000 	.word	0x00000000

08000fd8 <_ZN7MPU605015readTemperatureEv>:

void MPU6050::readTemperature(){
 8000fd8:	b5b0      	push	{r4, r5, r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af04      	add	r7, sp, #16
 8000fde:	6078      	str	r0, [r7, #4]
	uint8_t data[2];
	int16_t temp_raw;

	for(uint8_t j = 0; j<20; j++){
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	2b13      	cmp	r3, #19
 8000fe8:	d842      	bhi.n	8001070 <_ZN7MPU605015readTemperatureEv+0x98>

		HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, TEMP_REG, 1, data, 2, 1000);
 8000fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fee:	9302      	str	r3, [sp, #8]
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	f107 0308 	add.w	r3, r7, #8
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	2241      	movs	r2, #65	; 0x41
 8000ffe:	21d0      	movs	r1, #208	; 0xd0
 8001000:	4825      	ldr	r0, [pc, #148]	; (8001098 <_ZN7MPU605015readTemperatureEv+0xc0>)
 8001002:	f001 ff09 	bl	8002e18 <HAL_I2C_Mem_Read>

		temp_raw = (int16_t)(data[0]<<8 | data[1]);
 8001006:	7a3b      	ldrb	r3, [r7, #8]
 8001008:	021b      	lsls	r3, r3, #8
 800100a:	b21a      	sxth	r2, r3
 800100c:	7a7b      	ldrb	r3, [r7, #9]
 800100e:	b21b      	sxth	r3, r3
 8001010:	4313      	orrs	r3, r2
 8001012:	81bb      	strh	r3, [r7, #12]
		temperature += ((temp_raw/340) + 36.53);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fa9d 	bl	8000558 <__aeabi_f2d>
 800101e:	4604      	mov	r4, r0
 8001020:	460d      	mov	r5, r1
 8001022:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001026:	4a1d      	ldr	r2, [pc, #116]	; (800109c <_ZN7MPU605015readTemperatureEv+0xc4>)
 8001028:	fb82 1203 	smull	r1, r2, r2, r3
 800102c:	11d2      	asrs	r2, r2, #7
 800102e:	17db      	asrs	r3, r3, #31
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	b21b      	sxth	r3, r3
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fa7d 	bl	8000534 <__aeabi_i2d>
 800103a:	a315      	add	r3, pc, #84	; (adr r3, 8001090 <_ZN7MPU605015readTemperatureEv+0xb8>)
 800103c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001040:	f7ff f92c 	bl	800029c <__adddf3>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4620      	mov	r0, r4
 800104a:	4629      	mov	r1, r5
 800104c:	f7ff f926 	bl	800029c <__adddf3>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4610      	mov	r0, r2
 8001056:	4619      	mov	r1, r3
 8001058:	f7ff fdae 	bl	8000bb8 <__aeabi_d2f>
 800105c:	4602      	mov	r2, r0
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	601a      	str	r2, [r3, #0]
		HAL_Delay(50);
 8001062:	2032      	movs	r0, #50	; 0x32
 8001064:	f001 f978 	bl	8002358 <HAL_Delay>
	for(uint8_t j = 0; j<20; j++){
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	3301      	adds	r3, #1
 800106c:	73fb      	strb	r3, [r7, #15]
 800106e:	e7b9      	b.n	8000fe4 <_ZN7MPU605015readTemperatureEv+0xc>
	}

	temperature = temperature/20;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	ed93 7a00 	vldr	s14, [r3]
 8001076:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800107a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	edc3 7a00 	vstr	s15, [r3]
}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bdb0      	pop	{r4, r5, r7, pc}
 800108c:	f3af 8000 	nop.w
 8001090:	0a3d70a4 	.word	0x0a3d70a4
 8001094:	404243d7 	.word	0x404243d7
 8001098:	20000630 	.word	0x20000630
 800109c:	60606061 	.word	0x60606061

080010a0 <_ZN7MPU605014getTemperatureEv>:

float MPU6050::getTemperature(){
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	return temperature;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	ee07 3a90 	vmov	s15, r3
}
 80010b0:	eeb0 0a67 	vmov.f32	s0, s15
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <_ZN5ClockC1Ehhhb>:
 *  Created on: 30 de nov de 2022
 *      Author: leocl
 */
#include "clockcalendar.h"

Clock::Clock(uint8_t h, uint8_t s, uint8_t m, bool pm){
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	4608      	mov	r0, r1
 80010c8:	4611      	mov	r1, r2
 80010ca:	461a      	mov	r2, r3
 80010cc:	4603      	mov	r3, r0
 80010ce:	70fb      	strb	r3, [r7, #3]
 80010d0:	460b      	mov	r3, r1
 80010d2:	70bb      	strb	r3, [r7, #2]
 80010d4:	4613      	mov	r3, r2
 80010d6:	707b      	strb	r3, [r7, #1]
			hr = h;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	78fa      	ldrb	r2, [r7, #3]
 80010dc:	701a      	strb	r2, [r3, #0]
			min = m;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	787a      	ldrb	r2, [r7, #1]
 80010e2:	705a      	strb	r2, [r3, #1]
			sec = s;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	78ba      	ldrb	r2, [r7, #2]
 80010e8:	709a      	strb	r2, [r3, #2]
			is_pm = pm;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	7c3a      	ldrb	r2, [r7, #16]
 80010ee:	70da      	strb	r2, [r3, #3]
		}
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4618      	mov	r0, r3
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <_ZN5ClockC1Ev>:

Clock::Clock(){
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
	hr = 0;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
	min = 0;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	705a      	strb	r2, [r3, #1]
	sec = 0;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	709a      	strb	r2, [r3, #2]
	is_pm = 0;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	70da      	strb	r2, [r3, #3]
}
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <_ZN5Clock9getSecondEv>:

uint8_t Clock::getSecond(){
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	return sec;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	789b      	ldrb	r3, [r3, #2]
}
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <_ZN5Clock9getMinuteEv>:

uint8_t Clock::getMinute(){
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	return min;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	785b      	ldrb	r3, [r3, #1]
}
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <_ZN5Clock7getHourEv>:

uint8_t Clock::getHour(){
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	return hr;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	781b      	ldrb	r3, [r3, #0]
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <_ZN5Clock7getPMAMEv>:

bool Clock::getPMAM(){
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	return is_pm;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	78db      	ldrb	r3, [r3, #3]
}
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <_ZN5Clock7advanceEv>:

void Clock::advance(){
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
			sec++;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	789b      	ldrb	r3, [r3, #2]
 8001198:	3301      	adds	r3, #1
 800119a:	b2da      	uxtb	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	709a      	strb	r2, [r3, #2]
			if(sec == 60){
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	789b      	ldrb	r3, [r3, #2]
 80011a4:	2b3c      	cmp	r3, #60	; 0x3c
 80011a6:	d108      	bne.n	80011ba <_ZN5Clock7advanceEv+0x2e>
				sec = 0;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	709a      	strb	r2, [r3, #2]
				min++;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	785b      	ldrb	r3, [r3, #1]
 80011b2:	3301      	adds	r3, #1
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	705a      	strb	r2, [r3, #1]
			}
			if(min == 60){
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	785b      	ldrb	r3, [r3, #1]
 80011be:	2b3c      	cmp	r3, #60	; 0x3c
 80011c0:	d108      	bne.n	80011d4 <_ZN5Clock7advanceEv+0x48>
				min = 0;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	705a      	strb	r2, [r3, #1]
				hr++;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	3301      	adds	r3, #1
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	701a      	strb	r2, [r3, #0]
			}
			if(hr > 12){
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b0c      	cmp	r3, #12
 80011da:	d909      	bls.n	80011f0 <_ZN5Clock7advanceEv+0x64>
				hr = 1;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
				is_pm = !(is_pm);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	78db      	ldrb	r3, [r3, #3]
 80011e6:	f083 0301 	eor.w	r3, r3, #1
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	70da      	strb	r2, [r3, #3]
			}
		}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <_ZN8CalendarC1Ehhh>:


//Calendar

Calendar::Calendar(uint8_t m, uint8_t d, uint8_t y){
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	4608      	mov	r0, r1
 8001206:	4611      	mov	r1, r2
 8001208:	461a      	mov	r2, r3
 800120a:	4603      	mov	r3, r0
 800120c:	70fb      	strb	r3, [r7, #3]
 800120e:	460b      	mov	r3, r1
 8001210:	70bb      	strb	r3, [r7, #2]
 8001212:	4613      	mov	r3, r2
 8001214:	707b      	strb	r3, [r7, #1]
			mo = m;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	78fa      	ldrb	r2, [r7, #3]
 800121a:	701a      	strb	r2, [r3, #0]
			day = d;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	78ba      	ldrb	r2, [r7, #2]
 8001220:	705a      	strb	r2, [r3, #1]
			yr = y;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	787a      	ldrb	r2, [r7, #1]
 8001226:	709a      	strb	r2, [r3, #2]
		}
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4618      	mov	r0, r3
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <_ZN8CalendarC1Ev>:

Calendar::Calendar(){
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
	mo = 0;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	701a      	strb	r2, [r3, #0]
	day = 0;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	705a      	strb	r2, [r3, #1]
	yr = 0;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	709a      	strb	r2, [r3, #2]
}
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4618      	mov	r0, r3
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <_ZN8Calendar7advanceEv>:

void Calendar::advance(){
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
			day++;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	785b      	ldrb	r3, [r3, #1]
 800126a:	3301      	adds	r3, #1
 800126c:	b2da      	uxtb	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	705a      	strb	r2, [r3, #1]
			if(day >= 30){
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	785b      	ldrb	r3, [r3, #1]
 8001276:	2b1d      	cmp	r3, #29
 8001278:	d908      	bls.n	800128c <_ZN8Calendar7advanceEv+0x2e>
				day = 1;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	705a      	strb	r2, [r3, #1]
				mo++;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	3301      	adds	r3, #1
 8001286:	b2da      	uxtb	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	701a      	strb	r2, [r3, #0]
			}
			if(mo > 12){
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b0c      	cmp	r3, #12
 8001292:	d908      	bls.n	80012a6 <_ZN8Calendar7advanceEv+0x48>
				mo = 1;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2201      	movs	r2, #1
 8001298:	701a      	strb	r2, [r3, #0]
				yr++;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	789b      	ldrb	r3, [r3, #2]
 800129e:	3301      	adds	r3, #1
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	709a      	strb	r2, [r3, #2]
			}
		}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <_ZN8Calendar6getDayEv>:

uint8_t Calendar::getDay(){
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
	return day;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	785b      	ldrb	r3, [r3, #1]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <_ZN8Calendar8getMonthEv>:

uint8_t Calendar::getMonth(){
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
	return mo;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	781b      	ldrb	r3, [r3, #0]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <_ZN8Calendar7getYearEv>:

uint8_t Calendar::getYear(){
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
	return yr;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	789b      	ldrb	r3, [r3, #2]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <_ZN13ClockCalendar7advanceEv>:

//ClockCalendar

void ClockCalendar::advance(){
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b084      	sub	sp, #16
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
	bool wasPm = is_pm;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	78db      	ldrb	r3, [r3, #3]
 8001306:	73fb      	strb	r3, [r7, #15]
	Clock::advance();
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff ff3e 	bl	800118c <_ZN5Clock7advanceEv>
	if(wasPm && !is_pm) Calendar::advance();
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00b      	beq.n	800132e <_ZN13ClockCalendar7advanceEv+0x34>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	78db      	ldrb	r3, [r3, #3]
 800131a:	f083 0301 	eor.w	r3, r3, #1
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	d004      	beq.n	800132e <_ZN13ClockCalendar7advanceEv+0x34>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3304      	adds	r3, #4
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff98 	bl	800125e <_ZN8Calendar7advanceEv>
}
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	ed87 0a01 	vstr	s0, [r7, #4]
 8001340:	edd7 7a01 	vldr	s15, [r7, #4]
 8001344:	eef0 7ae7 	vabs.f32	s15, s15
 8001348:	eeb0 0a67 	vmov.f32	s0, s15
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <_ZN13Communication14addDataToQueueEP4Data>:
 *      Author: leocl
 */

#include "communication.h"

void Communication::addDataToQueue(Data* data){
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	6039      	str	r1, [r7, #0]
	q.insert(data);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3304      	adds	r3, #4
 8001364:	6839      	ldr	r1, [r7, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f000 fd5a 	bl	8001e20 <_ZN5Queue6insertEP4Data>
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <_ZN13Communication16verifyPredictionEff>:

bool Communication::verifyPrediction(float measure, float prediction){
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001380:	edc7 0a01 	vstr	s1, [r7, #4]

	if(abs(prediction-measure)<0.5) {
 8001384:	ed97 7a01 	vldr	s14, [r7, #4]
 8001388:	edd7 7a02 	vldr	s15, [r7, #8]
 800138c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001390:	eeb0 0a67 	vmov.f32	s0, s15
 8001394:	f7ff ffcf 	bl	8001336 <_ZSt3absf>
 8001398:	eef0 7a40 	vmov.f32	s15, s0
 800139c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a8:	bf4c      	ite	mi
 80013aa:	2301      	movmi	r3, #1
 80013ac:	2300      	movpl	r3, #0
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <_ZN13Communication16verifyPredictionEff+0x44>
		return true;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e000      	b.n	80013ba <_ZN13Communication16verifyPredictionEff+0x46>
	}
	else{
		return false;
 80013b8:	2300      	movs	r3, #0
	}
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <_ZN6Serial8sendDataEv>:

void Serial::sendData(){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b088      	sub	sp, #32
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	uint32_t i, length;
	Data* aux;
	uint8_t txbuffer[12];

	length = q.getLength();
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3304      	adds	r3, #4
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 fd9e 	bl	8001f12 <_ZN5Queue9getLengthEv>
 80013d6:	61b8      	str	r0, [r7, #24]

	for(i = 0; i<length; i++){
 80013d8:	2300      	movs	r3, #0
 80013da:	61fb      	str	r3, [r7, #28]
 80013dc:	69fa      	ldr	r2, [r7, #28]
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d269      	bcs.n	80014b8 <_ZN6Serial8sendDataEv+0xf4>
		aux = q.remove();
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3304      	adds	r3, #4
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 fd51 	bl	8001e90 <_ZN5Queue6removeEv>
 80013ee:	6178      	str	r0, [r7, #20]
		txbuffer[0] = aux->id;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	723b      	strb	r3, [r7, #8]
		txbuffer[1] = aux->datetime.getMonth();
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	3305      	adds	r3, #5
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff ff65 	bl	80012ca <_ZN8Calendar8getMonthEv>
 8001400:	4603      	mov	r3, r0
 8001402:	727b      	strb	r3, [r7, #9]
		txbuffer[2] = aux->datetime.getDay();
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	3305      	adds	r3, #5
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff52 	bl	80012b2 <_ZN8Calendar6getDayEv>
 800140e:	4603      	mov	r3, r0
 8001410:	72bb      	strb	r3, [r7, #10]
		txbuffer[3] = aux->datetime.getYear();
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	3305      	adds	r3, #5
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ff63 	bl	80012e2 <_ZN8Calendar7getYearEv>
 800141c:	4603      	mov	r3, r0
 800141e:	72fb      	strb	r3, [r7, #11]
		txbuffer[4] = aux->datetime.getHour();
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	3301      	adds	r3, #1
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fe99 	bl	800115c <_ZN5Clock7getHourEv>
 800142a:	4603      	mov	r3, r0
 800142c:	733b      	strb	r3, [r7, #12]
		txbuffer[5] = aux->datetime.getMinute();
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	3301      	adds	r3, #1
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fe86 	bl	8001144 <_ZN5Clock9getMinuteEv>
 8001438:	4603      	mov	r3, r0
 800143a:	737b      	strb	r3, [r7, #13]
		txbuffer[6] = aux->datetime.getSecond();
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	3301      	adds	r3, #1
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fe73 	bl	800112c <_ZN5Clock9getSecondEv>
 8001446:	4603      	mov	r3, r0
 8001448:	73bb      	strb	r3, [r7, #14]
		txbuffer[7] = aux->datetime.getPMAM();
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	3301      	adds	r3, #1
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fe90 	bl	8001174 <_ZN5Clock7getPMAMEv>
 8001454:	4603      	mov	r3, r0
 8001456:	73fb      	strb	r3, [r7, #15]
		txbuffer[8] = (uint8_t)aux->temperature;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	edd3 7a02 	vldr	s15, [r3, #8]
 800145e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001462:	edc7 7a00 	vstr	s15, [r7]
 8001466:	783b      	ldrb	r3, [r7, #0]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	743b      	strb	r3, [r7, #16]
		txbuffer[9] = (uint8_t)((aux->temperature - txbuffer[8])*100);
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001472:	7c3b      	ldrb	r3, [r7, #16]
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001480:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80014c0 <_ZN6Serial8sendDataEv+0xfc>
 8001484:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800148c:	edc7 7a00 	vstr	s15, [r7]
 8001490:	783b      	ldrb	r3, [r7, #0]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	747b      	strb	r3, [r7, #17]
		txbuffer[10] = aux->pred_is_Correct;
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	7b1b      	ldrb	r3, [r3, #12]
 800149a:	74bb      	strb	r3, [r7, #18]
		txbuffer[11] = 0xFE;
 800149c:	23fe      	movs	r3, #254	; 0xfe
 800149e:	74fb      	strb	r3, [r7, #19]

		HAL_UART_Transmit(&huart2, txbuffer, 12, 1000);
 80014a0:	f107 0108 	add.w	r1, r7, #8
 80014a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a8:	220c      	movs	r2, #12
 80014aa:	4806      	ldr	r0, [pc, #24]	; (80014c4 <_ZN6Serial8sendDataEv+0x100>)
 80014ac:	f003 f92f 	bl	800470e <HAL_UART_Transmit>
	for(i = 0; i<length; i++){
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	3301      	adds	r3, #1
 80014b4:	61fb      	str	r3, [r7, #28]
 80014b6:	e791      	b.n	80013dc <_ZN6Serial8sendDataEv+0x18>
	}
}
 80014b8:	bf00      	nop
 80014ba:	3720      	adds	r7, #32
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	42c80000 	.word	0x42c80000
 80014c4:	200007a0 	.word	0x200007a0

080014c8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <MX_CRC_Init+0x20>)
 80014ce:	4a07      	ldr	r2, [pc, #28]	; (80014ec <MX_CRC_Init+0x24>)
 80014d0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_CRC_Init+0x20>)
 80014d4:	f001 f875 	bl	80025c2 <HAL_CRC_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80014de:	f000 fae5 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000628 	.word	0x20000628
 80014ec:	40023000 	.word	0x40023000

080014f0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0b      	ldr	r2, [pc, #44]	; (800152c <HAL_CRC_MspInit+0x3c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d10d      	bne.n	800151e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <HAL_CRC_MspInit+0x40>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a09      	ldr	r2, [pc, #36]	; (8001530 <HAL_CRC_MspInit+0x40>)
 800150c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b07      	ldr	r3, [pc, #28]	; (8001530 <HAL_CRC_MspInit+0x40>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800151e:	bf00      	nop
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40023000 	.word	0x40023000
 8001530:	40023800 	.word	0x40023800

08001534 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	; 0x28
 8001538:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
 8001548:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	4b31      	ldr	r3, [pc, #196]	; (8001614 <MX_GPIO_Init+0xe0>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a30      	ldr	r2, [pc, #192]	; (8001614 <MX_GPIO_Init+0xe0>)
 8001554:	f043 0304 	orr.w	r3, r3, #4
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b2e      	ldr	r3, [pc, #184]	; (8001614 <MX_GPIO_Init+0xe0>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	4b2a      	ldr	r3, [pc, #168]	; (8001614 <MX_GPIO_Init+0xe0>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a29      	ldr	r2, [pc, #164]	; (8001614 <MX_GPIO_Init+0xe0>)
 8001570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b27      	ldr	r3, [pc, #156]	; (8001614 <MX_GPIO_Init+0xe0>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	4b23      	ldr	r3, [pc, #140]	; (8001614 <MX_GPIO_Init+0xe0>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a22      	ldr	r2, [pc, #136]	; (8001614 <MX_GPIO_Init+0xe0>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b20      	ldr	r3, [pc, #128]	; (8001614 <MX_GPIO_Init+0xe0>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <MX_GPIO_Init+0xe0>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a1b      	ldr	r2, [pc, #108]	; (8001614 <MX_GPIO_Init+0xe0>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b19      	ldr	r3, [pc, #100]	; (8001614 <MX_GPIO_Init+0xe0>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2120      	movs	r1, #32
 80015be:	4816      	ldr	r0, [pc, #88]	; (8001618 <MX_GPIO_Init+0xe4>)
 80015c0:	f001 f9a0 	bl	8002904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015ca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015d0:	2301      	movs	r3, #1
 80015d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4619      	mov	r1, r3
 80015da:	4810      	ldr	r0, [pc, #64]	; (800161c <MX_GPIO_Init+0xe8>)
 80015dc:	f001 f80e 	bl	80025fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015e0:	2320      	movs	r3, #32
 80015e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e4:	2301      	movs	r3, #1
 80015e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015e8:	2301      	movs	r3, #1
 80015ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4619      	mov	r1, r3
 80015f6:	4808      	ldr	r0, [pc, #32]	; (8001618 <MX_GPIO_Init+0xe4>)
 80015f8:	f001 f800 	bl	80025fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2100      	movs	r1, #0
 8001600:	2028      	movs	r0, #40	; 0x28
 8001602:	f000 ffa8 	bl	8002556 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001606:	2028      	movs	r0, #40	; 0x28
 8001608:	f000 ffc1 	bl	800258e <HAL_NVIC_EnableIRQ>

}
 800160c:	bf00      	nop
 800160e:	3728      	adds	r7, #40	; 0x28
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40023800 	.word	0x40023800
 8001618:	40020000 	.word	0x40020000
 800161c:	40020800 	.word	0x40020800

08001620 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001624:	4b12      	ldr	r3, [pc, #72]	; (8001670 <MX_I2C1_Init+0x50>)
 8001626:	4a13      	ldr	r2, [pc, #76]	; (8001674 <MX_I2C1_Init+0x54>)
 8001628:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <MX_I2C1_Init+0x50>)
 800162c:	4a12      	ldr	r2, [pc, #72]	; (8001678 <MX_I2C1_Init+0x58>)
 800162e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <MX_I2C1_Init+0x50>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <MX_I2C1_Init+0x50>)
 8001638:	2200      	movs	r2, #0
 800163a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <MX_I2C1_Init+0x50>)
 800163e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001642:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001644:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <MX_I2C1_Init+0x50>)
 8001646:	2200      	movs	r2, #0
 8001648:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <MX_I2C1_Init+0x50>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001650:	4b07      	ldr	r3, [pc, #28]	; (8001670 <MX_I2C1_Init+0x50>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <MX_I2C1_Init+0x50>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800165c:	4804      	ldr	r0, [pc, #16]	; (8001670 <MX_I2C1_Init+0x50>)
 800165e:	f001 f99d 	bl	800299c <HAL_I2C_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001668:	f000 fa20 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000630 	.word	0x20000630
 8001674:	40005400 	.word	0x40005400
 8001678:	000186a0 	.word	0x000186a0

0800167c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	; 0x28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a19      	ldr	r2, [pc, #100]	; (8001700 <HAL_I2C_MspInit+0x84>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d12c      	bne.n	80016f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	4b18      	ldr	r3, [pc, #96]	; (8001704 <HAL_I2C_MspInit+0x88>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a17      	ldr	r2, [pc, #92]	; (8001704 <HAL_I2C_MspInit+0x88>)
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_I2C_MspInit+0x88>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c0:	2312      	movs	r3, #18
 80016c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c4:	2301      	movs	r3, #1
 80016c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c8:	2303      	movs	r3, #3
 80016ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016cc:	2304      	movs	r3, #4
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	4619      	mov	r1, r3
 80016d6:	480c      	ldr	r0, [pc, #48]	; (8001708 <HAL_I2C_MspInit+0x8c>)
 80016d8:	f000 ff90 	bl	80025fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	4b08      	ldr	r3, [pc, #32]	; (8001704 <HAL_I2C_MspInit+0x88>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	4a07      	ldr	r2, [pc, #28]	; (8001704 <HAL_I2C_MspInit+0x88>)
 80016e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016ea:	6413      	str	r3, [r2, #64]	; 0x40
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <HAL_I2C_MspInit+0x88>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016f8:	bf00      	nop
 80016fa:	3728      	adds	r7, #40	; 0x28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40005400 	.word	0x40005400
 8001704:	40023800 	.word	0x40023800
 8001708:	40020400 	.word	0x40020400

0800170c <_ZN13ClockCalendarC1Ehhhhhhb>:
		void advance();
};

class ClockCalendar: public Clock, public Calendar{
	public:
		ClockCalendar(uint8_t mt, uint8_t d, uint8_t y, uint8_t h, uint8_t m, uint8_t s, bool pm):Clock(h, s, m, pm), Calendar(mt, d, y){};
 800170c:	b590      	push	{r4, r7, lr}
 800170e:	b085      	sub	sp, #20
 8001710:	af02      	add	r7, sp, #8
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	4608      	mov	r0, r1
 8001716:	4611      	mov	r1, r2
 8001718:	461a      	mov	r2, r3
 800171a:	4603      	mov	r3, r0
 800171c:	70fb      	strb	r3, [r7, #3]
 800171e:	460b      	mov	r3, r1
 8001720:	70bb      	strb	r3, [r7, #2]
 8001722:	4613      	mov	r3, r2
 8001724:	707b      	strb	r3, [r7, #1]
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	7f3c      	ldrb	r4, [r7, #28]
 800172a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800172e:	7e39      	ldrb	r1, [r7, #24]
 8001730:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	4623      	mov	r3, r4
 8001738:	f7ff fcc1 	bl	80010be <_ZN5ClockC1Ehhhb>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	1d18      	adds	r0, r3, #4
 8001740:	787b      	ldrb	r3, [r7, #1]
 8001742:	78ba      	ldrb	r2, [r7, #2]
 8001744:	78f9      	ldrb	r1, [r7, #3]
 8001746:	f7ff fd59 	bl	80011fc <_ZN8CalendarC1Ehhh>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4618      	mov	r0, r3
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	bd90      	pop	{r4, r7, pc}

08001754 <_ZN5ModelC1Ev>:
static ai_handle temp_model = AI_HANDLE_NULL;

static ai_buffer ai_input[AI_TEMP_MODEL_IN_NUM] = AI_TEMP_MODEL_IN;
static ai_buffer ai_output[AI_TEMP_MODEL_OUT_NUM] = AI_TEMP_MODEL_OUT;

class Model{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	641a      	str	r2, [r3, #64]	; 0x40
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <_ZN13CommunicationC1Ev>:

#include "usart.h"
#include "queue.h"
#include "math.h"

class Communication{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	4a06      	ldr	r2, [pc, #24]	; (8001794 <_ZN13CommunicationC1Ev+0x24>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3304      	adds	r3, #4
 8001782:	4618      	mov	r0, r3
 8001784:	f000 fb16 	bl	8001db4 <_ZN5QueueC1Ev>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	080091ec 	.word	0x080091ec

08001798 <_ZN6SerialC1Ev>:
		void addDataToQueue(Data* data);
		bool verifyPrediction(float measure, float prediction);
		virtual void sendData() = 0;
};

class Serial: public Communication{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff ffe4 	bl	8001770 <_ZN13CommunicationC1Ev>
 80017a8:	4a03      	ldr	r2, [pc, #12]	; (80017b8 <_ZN6SerialC1Ev+0x20>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4618      	mov	r0, r3
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	080091e0 	.word	0x080091e0

080017bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017bc:	b5b0      	push	{r4, r5, r7, lr}
 80017be:	b096      	sub	sp, #88	; 0x58
 80017c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017c2:	f000 fd57 	bl	8002274 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c6:	f000 f8d9 	bl	800197c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ca:	f7ff feb3 	bl	8001534 <MX_GPIO_Init>
  MX_I2C1_Init();
 80017ce:	f7ff ff27 	bl	8001620 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80017d2:	f000 fca3 	bl	800211c <MX_USART2_UART_Init>
  MX_CRC_Init();
 80017d6:	f7ff fe77 	bl	80014c8 <MX_CRC_Init>
  MX_TIM10_Init();
 80017da:	f000 fc53 	bl	8002084 <MX_TIM10_Init>
  __HAL_RCC_CRC_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	4b5b      	ldr	r3, [pc, #364]	; (8001950 <main+0x194>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a5a      	ldr	r2, [pc, #360]	; (8001950 <main+0x194>)
 80017e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b58      	ldr	r3, [pc, #352]	; (8001950 <main+0x194>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN 2 */
  mpu.init();
 80017fa:	4856      	ldr	r0, [pc, #344]	; (8001954 <main+0x198>)
 80017fc:	f7ff fbae 	bl	8000f5c <_ZN7MPU60504initEv>
  model.init();
 8001800:	4855      	ldr	r0, [pc, #340]	; (8001958 <main+0x19c>)
 8001802:	f000 f987 	bl	8001b14 <_ZN5Model4initEv>
  comm = new Serial();
 8001806:	2010      	movs	r0, #16
 8001808:	f004 fd1a 	bl	8006240 <_Znwj>
 800180c:	4603      	mov	r3, r0
 800180e:	461c      	mov	r4, r3
 8001810:	4622      	mov	r2, r4
 8001812:	2300      	movs	r3, #0
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	6053      	str	r3, [r2, #4]
 8001818:	6093      	str	r3, [r2, #8]
 800181a:	60d3      	str	r3, [r2, #12]
 800181c:	4620      	mov	r0, r4
 800181e:	f7ff ffbb 	bl	8001798 <_ZN6SerialC1Ev>
 8001822:	4b4e      	ldr	r3, [pc, #312]	; (800195c <main+0x1a0>)
 8001824:	601c      	str	r4, [r3, #0]
  uint8_t deviceID = 2;
 8001826:	2302      	movs	r3, #2
 8001828:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  char buf[50];
  int buf_len = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	for (uint32_t i = 0; i < AI_TEMP_MODEL_IN_1_SIZE; i++)
 8001830:	2300      	movs	r3, #0
 8001832:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001836:	2b08      	cmp	r3, #8
 8001838:	d818      	bhi.n	800186c <main+0xb0>
	{
	  mpu.readTemperature();
 800183a:	4846      	ldr	r0, [pc, #280]	; (8001954 <main+0x198>)
 800183c:	f7ff fbcc 	bl	8000fd8 <_ZN7MPU605015readTemperatureEv>
	  temperature = mpu.getTemperature();
 8001840:	4844      	ldr	r0, [pc, #272]	; (8001954 <main+0x198>)
 8001842:	f7ff fc2d 	bl	80010a0 <_ZN7MPU605014getTemperatureEv>
 8001846:	eef0 7a40 	vmov.f32	s15, s0
 800184a:	4b45      	ldr	r3, [pc, #276]	; (8001960 <main+0x1a4>)
 800184c:	edc3 7a00 	vstr	s15, [r3]
	  model.fillInput(temperature, i);
 8001850:	4b43      	ldr	r3, [pc, #268]	; (8001960 <main+0x1a4>)
 8001852:	edd3 7a00 	vldr	s15, [r3]
 8001856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001858:	4619      	mov	r1, r3
 800185a:	eeb0 0a67 	vmov.f32	s0, s15
 800185e:	483e      	ldr	r0, [pc, #248]	; (8001958 <main+0x19c>)
 8001860:	f000 f9e2 	bl	8001c28 <_ZN5Model9fillInputEfi>
	for (uint32_t i = 0; i < AI_TEMP_MODEL_IN_1_SIZE; i++)
 8001864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001866:	3301      	adds	r3, #1
 8001868:	64fb      	str	r3, [r7, #76]	; 0x4c
 800186a:	e7e3      	b.n	8001834 <main+0x78>
	}

	pred = model.run();
 800186c:	483a      	ldr	r0, [pc, #232]	; (8001958 <main+0x19c>)
 800186e:	f000 f9f1 	bl	8001c54 <_ZN5Model3runEv>
 8001872:	eef0 7a40 	vmov.f32	s15, s0
 8001876:	4b3b      	ldr	r3, [pc, #236]	; (8001964 <main+0x1a8>)
 8001878:	edc3 7a00 	vstr	s15, [r3]
	temperature = mpu.getTemperature();
 800187c:	4835      	ldr	r0, [pc, #212]	; (8001954 <main+0x198>)
 800187e:	f7ff fc0f 	bl	80010a0 <_ZN7MPU605014getTemperatureEv>
 8001882:	eef0 7a40 	vmov.f32	s15, s0
 8001886:	4b36      	ldr	r3, [pc, #216]	; (8001960 <main+0x1a4>)
 8001888:	edc3 7a00 	vstr	s15, [r3]

	predIsCorrect = comm->verifyPrediction(temperature, pred);
 800188c:	4b33      	ldr	r3, [pc, #204]	; (800195c <main+0x1a0>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a33      	ldr	r2, [pc, #204]	; (8001960 <main+0x1a4>)
 8001892:	edd2 7a00 	vldr	s15, [r2]
 8001896:	4a33      	ldr	r2, [pc, #204]	; (8001964 <main+0x1a8>)
 8001898:	ed92 7a00 	vldr	s14, [r2]
 800189c:	eef0 0a47 	vmov.f32	s1, s14
 80018a0:	eeb0 0a67 	vmov.f32	s0, s15
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fd65 	bl	8001374 <_ZN13Communication16verifyPredictionEff>
 80018aa:	4603      	mov	r3, r0
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b2e      	ldr	r3, [pc, #184]	; (8001968 <main+0x1ac>)
 80018b0:	701a      	strb	r2, [r3, #0]

	pd = new Data(deviceID, cc, temperature, predIsCorrect);
 80018b2:	4a2e      	ldr	r2, [pc, #184]	; (800196c <main+0x1b0>)
 80018b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018bc:	6018      	str	r0, [r3, #0]
 80018be:	3304      	adds	r3, #4
 80018c0:	8019      	strh	r1, [r3, #0]
 80018c2:	3302      	adds	r3, #2
 80018c4:	0c0a      	lsrs	r2, r1, #16
 80018c6:	701a      	strb	r2, [r3, #0]
 80018c8:	2010      	movs	r0, #16
 80018ca:	f004 fcb9 	bl	8006240 <_Znwj>
 80018ce:	4603      	mov	r3, r0
 80018d0:	461c      	mov	r4, r3
 80018d2:	4b23      	ldr	r3, [pc, #140]	; (8001960 <main+0x1a4>)
 80018d4:	edd3 7a00 	vldr	s15, [r3]
 80018d8:	4b23      	ldr	r3, [pc, #140]	; (8001968 <main+0x1ac>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	f897 104b 	ldrb.w	r1, [r7, #75]	; 0x4b
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	eeb0 0a67 	vmov.f32	s0, s15
 80018e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018ea:	cb0c      	ldmia	r3, {r2, r3}
 80018ec:	4620      	mov	r0, r4
 80018ee:	f000 fa0f 	bl	8001d10 <_ZN4DataC1Eh13ClockCalendarfb>
 80018f2:	4b1f      	ldr	r3, [pc, #124]	; (8001970 <main+0x1b4>)
 80018f4:	601c      	str	r4, [r3, #0]

	buf_len = sprintf(buf,
 80018f6:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <main+0x1a8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fe2c 	bl	8000558 <__aeabi_f2d>
 8001900:	4604      	mov	r4, r0
 8001902:	460d      	mov	r5, r1
 8001904:	4b16      	ldr	r3, [pc, #88]	; (8001960 <main+0x1a4>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fe25 	bl	8000558 <__aeabi_f2d>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	f107 0008 	add.w	r0, r7, #8
 8001916:	e9cd 2300 	strd	r2, r3, [sp]
 800191a:	4622      	mov	r2, r4
 800191c:	462b      	mov	r3, r5
 800191e:	4915      	ldr	r1, [pc, #84]	; (8001974 <main+0x1b8>)
 8001920:	f005 fab4 	bl	8006e8c <siprintf>
 8001924:	6478      	str	r0, [r7, #68]	; 0x44
					"Pred: %f | Val: %f \r\n",
					pred, temperature);
	HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001928:	b29a      	uxth	r2, r3
 800192a:	f107 0108 	add.w	r1, r7, #8
 800192e:	2364      	movs	r3, #100	; 0x64
 8001930:	4811      	ldr	r0, [pc, #68]	; (8001978 <main+0x1bc>)
 8001932:	f002 feec 	bl	800470e <HAL_UART_Transmit>

	comm->addDataToQueue(pd);
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <main+0x1a0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a0d      	ldr	r2, [pc, #52]	; (8001970 <main+0x1b4>)
 800193c:	6812      	ldr	r2, [r2, #0]
 800193e:	4611      	mov	r1, r2
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fd08 	bl	8001356 <_ZN13Communication14addDataToQueueEP4Data>
	cc.advance();
 8001946:	4809      	ldr	r0, [pc, #36]	; (800196c <main+0x1b0>)
 8001948:	f7ff fcd7 	bl	80012fa <_ZN13ClockCalendar7advanceEv>

//	HAL_Delay(1000);

    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
  }
 800194c:	e770      	b.n	8001830 <main+0x74>
 800194e:	bf00      	nop
 8001950:	40023800 	.word	0x40023800
 8001954:	20000684 	.word	0x20000684
 8001958:	2000068c 	.word	0x2000068c
 800195c:	20000688 	.word	0x20000688
 8001960:	20000748 	.word	0x20000748
 8001964:	2000074c 	.word	0x2000074c
 8001968:	20000744 	.word	0x20000744
 800196c:	20000738 	.word	0x20000738
 8001970:	20000740 	.word	0x20000740
 8001974:	08009178 	.word	0x08009178
 8001978:	200007a0 	.word	0x200007a0

0800197c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b094      	sub	sp, #80	; 0x50
 8001980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001982:	f107 0320 	add.w	r3, r7, #32
 8001986:	2230      	movs	r2, #48	; 0x30
 8001988:	2100      	movs	r1, #0
 800198a:	4618      	mov	r0, r3
 800198c:	f004 fcd8 	bl	8006340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001990:	f107 030c 	add.w	r3, r7, #12
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a0:	2300      	movs	r3, #0
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	4b2e      	ldr	r3, [pc, #184]	; (8001a60 <_Z18SystemClock_Configv+0xe4>)
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	4a2d      	ldr	r2, [pc, #180]	; (8001a60 <_Z18SystemClock_Configv+0xe4>)
 80019aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ae:	6413      	str	r3, [r2, #64]	; 0x40
 80019b0:	4b2b      	ldr	r3, [pc, #172]	; (8001a60 <_Z18SystemClock_Configv+0xe4>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80019bc:	2300      	movs	r3, #0
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	4b28      	ldr	r3, [pc, #160]	; (8001a64 <_Z18SystemClock_Configv+0xe8>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019c8:	4a26      	ldr	r2, [pc, #152]	; (8001a64 <_Z18SystemClock_Configv+0xe8>)
 80019ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b24      	ldr	r3, [pc, #144]	; (8001a64 <_Z18SystemClock_Configv+0xe8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019dc:	2302      	movs	r3, #2
 80019de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019e0:	2301      	movs	r3, #1
 80019e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019e4:	2310      	movs	r3, #16
 80019e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e8:	2302      	movs	r3, #2
 80019ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019ec:	2300      	movs	r3, #0
 80019ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80019f0:	2310      	movs	r3, #16
 80019f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80019f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80019f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80019fa:	2304      	movs	r3, #4
 80019fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80019fe:	2307      	movs	r3, #7
 8001a00:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a02:	f107 0320 	add.w	r3, r7, #32
 8001a06:	4618      	mov	r0, r3
 8001a08:	f001 ff88 	bl	800391c <HAL_RCC_OscConfig>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	bf14      	ite	ne
 8001a12:	2301      	movne	r3, #1
 8001a14:	2300      	moveq	r3, #0
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 8001a1c:	f000 f846 	bl	8001aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a20:	230f      	movs	r3, #15
 8001a22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a24:	2302      	movs	r3, #2
 8001a26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a36:	f107 030c 	add.w	r3, r7, #12
 8001a3a:	2102      	movs	r1, #2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f002 f9e5 	bl	8003e0c <HAL_RCC_ClockConfig>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	bf14      	ite	ne
 8001a48:	2301      	movne	r3, #1
 8001a4a:	2300      	moveq	r3, #0
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8001a52:	f000 f82b 	bl	8001aac <Error_Handler>
  }
}
 8001a56:	bf00      	nop
 8001a58:	3750      	adds	r7, #80	; 0x50
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40007000 	.word	0x40007000

08001a68 <HAL_GPIO_EXTI_Callback>:
  * @retval None
  */

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	80fb      	strh	r3, [r7, #6]
	comm->sendData();
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_GPIO_EXTI_Callback+0x24>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <HAL_GPIO_EXTI_Callback+0x24>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4798      	blx	r3
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000688 	.word	0x20000688

08001a90 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001a98:	2120      	movs	r1, #32
 8001a9a:	4803      	ldr	r0, [pc, #12]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001a9c:	f000 ff4b 	bl	8002936 <HAL_GPIO_TogglePin>
}
 8001aa0:	bf00      	nop
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40020000 	.word	0x40020000

08001aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab0:	b672      	cpsid	i
}
 8001ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <Error_Handler+0x8>
	...

08001ab8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af04      	add	r7, sp, #16
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d115      	bne.n	8001af4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d110      	bne.n	8001af4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
Model model;
 8001ad2:	480a      	ldr	r0, [pc, #40]	; (8001afc <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001ad4:	f7ff fe3e 	bl	8001754 <_ZN5ModelC1Ev>
ClockCalendar cc(11, 30, 22, 10, 9, 59, 1);
 8001ad8:	2301      	movs	r3, #1
 8001ada:	9303      	str	r3, [sp, #12]
 8001adc:	233b      	movs	r3, #59	; 0x3b
 8001ade:	9302      	str	r3, [sp, #8]
 8001ae0:	2309      	movs	r3, #9
 8001ae2:	9301      	str	r3, [sp, #4]
 8001ae4:	230a      	movs	r3, #10
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	2316      	movs	r3, #22
 8001aea:	221e      	movs	r2, #30
 8001aec:	210b      	movs	r1, #11
 8001aee:	4804      	ldr	r0, [pc, #16]	; (8001b00 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001af0:	f7ff fe0c 	bl	800170c <_ZN13ClockCalendarC1Ehhhhhhb>
}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	2000068c 	.word	0x2000068c
 8001b00:	20000738 	.word	0x20000738

08001b04 <_GLOBAL__sub_I_mpu>:
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	f7ff ffd3 	bl	8001ab8 <_Z41__static_initialization_and_destruction_0ii>
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <_ZN5Model4initEv>:
 */


#include "model.h"

void Model::init(){
 8001b14:	b590      	push	{r4, r7, lr}
 8001b16:	b08f      	sub	sp, #60	; 0x3c
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]

	ai_network_params ai_params = {
 8001b1c:	f107 0308 	add.w	r3, r7, #8
 8001b20:	2230      	movs	r2, #48	; 0x30
 8001b22:	2100      	movs	r1, #0
 8001b24:	4618      	mov	r0, r3
 8001b26:	f004 fc0b 	bl	8006340 <memset>
 8001b2a:	4b37      	ldr	r3, [pc, #220]	; (8001c08 <_ZN5Model4initEv+0xf4>)
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	2301      	movs	r3, #1
 8001b30:	81bb      	strh	r3, [r7, #12]
 8001b32:	2301      	movs	r3, #1
 8001b34:	81fb      	strh	r3, [r7, #14]
 8001b36:	2301      	movs	r3, #1
 8001b38:	823b      	strh	r3, [r7, #16]
 8001b3a:	f44f 7331 	mov.w	r3, #708	; 0x2c4
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	4b32      	ldr	r3, [pc, #200]	; (8001c0c <_ZN5Model4initEv+0xf8>)
 8001b42:	623b      	str	r3, [r7, #32]
 8001b44:	2301      	movs	r3, #1
 8001b46:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001b48:	2301      	movs	r3, #1
 8001b4a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	853b      	strh	r3, [r7, #40]	; 0x28
 8001b50:	2340      	movs	r3, #64	; 0x40
 8001b52:	62fb      	str	r3, [r7, #44]	; 0x2c
		AI_TEMP_MODEL_DATA_WEIGHTS(ai_temp_model_data_weights_get()),
 8001b54:	f003 fa48 	bl	8004fe8 <ai_temp_model_data_weights_get>
 8001b58:	4603      	mov	r3, r0
		AI_TEMP_MODEL_DATA_ACTIVATIONS(activations)
	};
 8001b5a:	61bb      	str	r3, [r7, #24]
		AI_TEMP_MODEL_DATA_ACTIVATIONS(activations)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3344      	adds	r3, #68	; 0x44
	};
 8001b60:	633b      	str	r3, [r7, #48]	; 0x30

	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3384      	adds	r3, #132	; 0x84
 8001b66:	4a2a      	ldr	r2, [pc, #168]	; (8001c10 <_ZN5Model4initEv+0xfc>)
 8001b68:	6113      	str	r3, [r2, #16]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	33a8      	adds	r3, #168	; 0xa8
 8001b6e:	4a29      	ldr	r2, [pc, #164]	; (8001c14 <_ZN5Model4initEv+0x100>)
 8001b70:	6113      	str	r3, [r2, #16]

	ai_err = ai_temp_model_create(&temp_model, AI_TEMP_MODEL_DATA_CONFIG);
 8001b72:	687c      	ldr	r4, [r7, #4]
 8001b74:	2100      	movs	r1, #0
 8001b76:	4828      	ldr	r0, [pc, #160]	; (8001c18 <_ZN5Model4initEv+0x104>)
 8001b78:	f003 f9d0 	bl	8004f1c <ai_temp_model_create>
 8001b7c:	6020      	str	r0, [r4, #0]
	if (ai_err.type != AI_ERROR_NONE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d01a      	beq.n	8001bbc <_ZN5Model4initEv+0xa8>
	{
		buf_len = sprintf(buf, "E: AI error - type=%d code=%d\r\n", ai_err.type, ai_err.code);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f103 000c 	add.w	r0, r3, #12
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001b9a:	4920      	ldr	r1, [pc, #128]	; (8001c1c <_ZN5Model4initEv+0x108>)
 8001b9c:	f005 f976 	bl	8006e8c <siprintf>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f103 010c 	add.w	r1, r3, #12
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	2364      	movs	r3, #100	; 0x64
 8001bb4:	481a      	ldr	r0, [pc, #104]	; (8001c20 <_ZN5Model4initEv+0x10c>)
 8001bb6:	f002 fdaa 	bl	800470e <HAL_UART_Transmit>
		while(1);
 8001bba:	e7fe      	b.n	8001bba <_ZN5Model4initEv+0xa6>
	}

	if (!ai_temp_model_init(temp_model, &ai_params))
 8001bbc:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <_ZN5Model4initEv+0x104>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f107 0208 	add.w	r2, r7, #8
 8001bc4:	4611      	mov	r1, r2
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f003 f9be 	bl	8004f48 <ai_temp_model_init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	f083 0301 	eor.w	r3, r3, #1
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d013      	beq.n	8001c00 <_ZN5Model4initEv+0xec>
	{
		buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	330c      	adds	r3, #12
 8001bdc:	4911      	ldr	r1, [pc, #68]	; (8001c24 <_ZN5Model4initEv+0x110>)
 8001bde:	4618      	mov	r0, r3
 8001be0:	f005 f954 	bl	8006e8c <siprintf>
 8001be4:	4602      	mov	r2, r0
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f103 010c 	add.w	r1, r3, #12
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	2364      	movs	r3, #100	; 0x64
 8001bf8:	4809      	ldr	r0, [pc, #36]	; (8001c20 <_ZN5Model4initEv+0x10c>)
 8001bfa:	f002 fd88 	bl	800470e <HAL_UART_Transmit>
		while(1);
 8001bfe:	e7fe      	b.n	8001bfe <_ZN5Model4initEv+0xea>
	}
}
 8001c00:	bf00      	nop
 8001c02:	373c      	adds	r7, #60	; 0x3c
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd90      	pop	{r4, r7, pc}
 8001c08:	40040440 	.word	0x40040440
 8001c0c:	00040440 	.word	0x00040440
 8001c10:	20000000 	.word	0x20000000
 8001c14:	20000018 	.word	0x20000018
 8001c18:	20000750 	.word	0x20000750
 8001c1c:	08009190 	.word	0x08009190
 8001c20:	200007a0 	.word	0x200007a0
 8001c24:	080091b0 	.word	0x080091b0

08001c28 <_ZN5Model9fillInputEfi>:

void Model::fillInput(float temperature, int position){
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c34:	6079      	str	r1, [r7, #4]
	((ai_float *)in_data)[position] = (ai_float)temperature;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	601a      	str	r2, [r3, #0]
}
 8001c46:	bf00      	nop
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <_ZN5Model3runEv>:


float Model::run(){
 8001c54:	b590      	push	{r4, r7, lr}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	nbatch = ai_temp_model_run(temp_model, &ai_input[0], &ai_output[0]);
 8001c5c:	4b1e      	ldr	r3, [pc, #120]	; (8001cd8 <_ZN5Model3runEv+0x84>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a1e      	ldr	r2, [pc, #120]	; (8001cdc <_ZN5Model3runEv+0x88>)
 8001c62:	491f      	ldr	r1, [pc, #124]	; (8001ce0 <_ZN5Model3runEv+0x8c>)
 8001c64:	4618      	mov	r0, r3
 8001c66:	f003 f9ae 	bl	8004fc6 <ai_temp_model_run>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	605a      	str	r2, [r3, #4]
	if (nbatch != 1) {
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d020      	beq.n	8001cba <_ZN5Model3runEv+0x66>
		ai_err = ai_temp_model_get_error(temp_model);
 8001c78:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <_ZN5Model3runEv+0x84>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	687c      	ldr	r4, [r7, #4]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f003 f940 	bl	8004f04 <ai_temp_model_get_error>
 8001c84:	6020      	str	r0, [r4, #0]
		buf_len = sprintf(buf, "E: AI error - type=%d code=%d\r\n", ai_err.type, ai_err.code);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f103 000c 	add.w	r0, r3, #12
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	461a      	mov	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001c9a:	4912      	ldr	r1, [pc, #72]	; (8001ce4 <_ZN5Model3runEv+0x90>)
 8001c9c:	f005 f8f6 	bl	8006e8c <siprintf>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f103 010c 	add.w	r1, r3, #12
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	2364      	movs	r3, #100	; 0x64
 8001cb4:	480c      	ldr	r0, [pc, #48]	; (8001ce8 <_ZN5Model3runEv+0x94>)
 8001cb6:	f002 fd2a 	bl	800470e <HAL_UART_Transmit>
	}

	// Read output (predicted y) of neural network
	prediction = ((float *)out_data)[0];
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	33a8      	adds	r3, #168	; 0xa8
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	609a      	str	r2, [r3, #8]

	return prediction;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	ee07 3a90 	vmov	s15, r3
}
 8001ccc:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd90      	pop	{r4, r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000750 	.word	0x20000750
 8001cdc:	20000018 	.word	0x20000018
 8001ce0:	20000000 	.word	0x20000000
 8001ce4:	08009190 	.word	0x08009190
 8001ce8:	200007a0 	.word	0x200007a0

08001cec <_ZN13ClockCalendarC1Ev>:
		ClockCalendar():Clock(), Calendar(){};
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff fa01 	bl	80010fe <_ZN5ClockC1Ev>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3304      	adds	r3, #4
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fa98 	bl	8001236 <_ZN8CalendarC1Ev>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <_ZN4DataC1Eh13ClockCalendarfb>:
 *      Author: leocl
 */

#include "node.h"

Data::Data(uint8_t i, ClockCalendar dat, float t, bool c){
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6178      	str	r0, [r7, #20]
 8001d18:	4608      	mov	r0, r1
 8001d1a:	f107 0108 	add.w	r1, r7, #8
 8001d1e:	e881 000c 	stmia.w	r1, {r2, r3}
 8001d22:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d26:	4603      	mov	r3, r0
 8001d28:	74fb      	strb	r3, [r7, #19]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff ffdc 	bl	8001cec <_ZN13ClockCalendarC1Ev>
		id = i;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	7cfa      	ldrb	r2, [r7, #19]
 8001d38:	701a      	strb	r2, [r3, #0]
		datetime = dat;
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	f107 0208 	add.w	r2, r7, #8
 8001d42:	6810      	ldr	r0, [r2, #0]
 8001d44:	6018      	str	r0, [r3, #0]
 8001d46:	8891      	ldrh	r1, [r2, #4]
 8001d48:	7992      	ldrb	r2, [r2, #6]
 8001d4a:	8099      	strh	r1, [r3, #4]
 8001d4c:	719a      	strb	r2, [r3, #6]
		temperature = t;
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	609a      	str	r2, [r3, #8]
		pred_is_Correct = c;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d5a:	731a      	strb	r2, [r3, #12]
	}
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <_ZN4DataC1Ev>:

Data::Data(){
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b084      	sub	sp, #16
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3301      	adds	r3, #1
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ffba 	bl	8001cec <_ZN13ClockCalendarC1Ev>
	id = 0;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	701a      	strb	r2, [r3, #0]
	datetime = ClockCalendar();
 8001d7e:	f107 0308 	add.w	r3, r7, #8
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff ffb2 	bl	8001cec <_ZN13ClockCalendarC1Ev>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	f107 0208 	add.w	r2, r7, #8
 8001d90:	6810      	ldr	r0, [r2, #0]
 8001d92:	6018      	str	r0, [r3, #0]
 8001d94:	8891      	ldrh	r1, [r2, #4]
 8001d96:	7992      	ldrb	r2, [r2, #6]
 8001d98:	8099      	strh	r1, [r3, #4]
 8001d9a:	719a      	strb	r2, [r3, #6]
	temperature = 0;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
	pred_is_Correct = 0;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	731a      	strb	r2, [r3, #12]
}
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4618      	mov	r0, r3
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <_ZN5QueueC1Ev>:
 *  Created on: 30 de nov de 2022
 *      Author: leocl
 */
#include "queue.h"

Queue::Queue() {
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
   head = 0;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
   tail = 0;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	605a      	str	r2, [r3, #4]
   length = 0;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
}
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <_ZN5Queue4LinkC1EP4DataPS0_S3_>:
  head = 0; // Officially empty
  tail = 0;
  length = 0;
}

Queue::Link::Link(Data* dat, Link* prv, Link* nxt) {
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
 8001de8:	603b      	str	r3, [r7, #0]
  data = dat;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	68ba      	ldr	r2, [r7, #8]
 8001dee:	601a      	str	r2, [r3, #0]
  prev = prv;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	605a      	str	r2, [r3, #4]
  next = nxt;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	609a      	str	r2, [r3, #8]
}
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <_ZN5Queue4LinkD1Ev>:

Queue::Link::~Link() {
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
//  delete prev;
}
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4618      	mov	r0, r3
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <_ZN5Queue6insertEP4Data>:

void Queue::insert(Data* dat) {
 8001e20:	b590      	push	{r4, r7, lr}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  if (head == 0){
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d111      	bne.n	8001e56 <_ZN5Queue6insertEP4Data+0x36>
     tail = new Link(dat, 0, 0);
 8001e32:	200c      	movs	r0, #12
 8001e34:	f004 fa04 	bl	8006240 <_Znwj>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	461c      	mov	r4, r3
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	2200      	movs	r2, #0
 8001e40:	6839      	ldr	r1, [r7, #0]
 8001e42:	4620      	mov	r0, r4
 8001e44:	f7ff ffca 	bl	8001ddc <_ZN5Queue4LinkC1EP4DataPS0_S3_>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	605c      	str	r4, [r3, #4]
     head = tail;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	e013      	b.n	8001e7e <_ZN5Queue6insertEP4Data+0x5e>
  } else {
     tail->next = new Link(dat, tail, 0);
 8001e56:	200c      	movs	r0, #12
 8001e58:	f004 f9f2 	bl	8006240 <_Znwj>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	461c      	mov	r4, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	2300      	movs	r3, #0
 8001e66:	6839      	ldr	r1, [r7, #0]
 8001e68:	4620      	mov	r0, r4
 8001e6a:	f7ff ffb7 	bl	8001ddc <_ZN5Queue4LinkC1EP4DataPS0_S3_>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	609c      	str	r4, [r3, #8]
     tail = tail->next;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	605a      	str	r2, [r3, #4]
  }
  length++;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	1c5a      	adds	r2, r3, #1
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	609a      	str	r2, [r3, #8]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd90      	pop	{r4, r7, pc}

08001e90 <_ZN5Queue6removeEv>:

Data* Queue::remove() {
 8001e90:	b590      	push	{r4, r7, lr}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
   Data* result;
   if(length == 0){
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d109      	bne.n	8001eb4 <_ZN5Queue6removeEv+0x24>
      result = new Data();
 8001ea0:	2010      	movs	r0, #16
 8001ea2:	f004 f9cd 	bl	8006240 <_Znwj>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	461c      	mov	r4, r3
 8001eaa:	4620      	mov	r0, r4
 8001eac:	f7ff ff5b 	bl	8001d66 <_ZN4DataC1Ev>
 8001eb0:	60fc      	str	r4, [r7, #12]
      }
      length--;
      if (length == 0) tail = 0;
      return result;
   }
}
 8001eb2:	e02a      	b.n	8001f0a <_ZN5Queue6removeEv+0x7a>
      result = head->data;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	60fb      	str	r3, [r7, #12]
      Link* oldHead = head;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	60bb      	str	r3, [r7, #8]
      head = head->next;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	601a      	str	r2, [r3, #0]
      if (head != 0){
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00d      	beq.n	8001ef0 <_ZN5Queue6removeEv+0x60>
         head->prev = 0;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	605a      	str	r2, [r3, #4]
         delete oldHead;
 8001edc:	68bc      	ldr	r4, [r7, #8]
 8001ede:	2c00      	cmp	r4, #0
 8001ee0:	d006      	beq.n	8001ef0 <_ZN5Queue6removeEv+0x60>
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	f7ff ff91 	bl	8001e0a <_ZN5Queue4LinkD1Ev>
 8001ee8:	210c      	movs	r1, #12
 8001eea:	4620      	mov	r0, r4
 8001eec:	f004 f9a6 	bl	800623c <_ZdlPvj>
      length--;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	1e5a      	subs	r2, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
      if (length == 0) tail = 0;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d102      	bne.n	8001f08 <_ZN5Queue6removeEv+0x78>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	605a      	str	r2, [r3, #4]
      return result;
 8001f08:	68fb      	ldr	r3, [r7, #12]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd90      	pop	{r4, r7, pc}

08001f12 <_ZN5Queue9getLengthEv>:

uint32_t Queue::getLength() {
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
	return length;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	607b      	str	r3, [r7, #4]
 8001f36:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <HAL_MspInit+0x4c>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	4a0f      	ldr	r2, [pc, #60]	; (8001f78 <HAL_MspInit+0x4c>)
 8001f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f40:	6453      	str	r3, [r2, #68]	; 0x44
 8001f42:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <HAL_MspInit+0x4c>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	603b      	str	r3, [r7, #0]
 8001f52:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <HAL_MspInit+0x4c>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	4a08      	ldr	r2, [pc, #32]	; (8001f78 <HAL_MspInit+0x4c>)
 8001f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f5e:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <HAL_MspInit+0x4c>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f66:	603b      	str	r3, [r7, #0]
 8001f68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f6a:	2007      	movs	r0, #7
 8001f6c:	f000 fae8 	bl	8002540 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40023800 	.word	0x40023800

08001f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f80:	e7fe      	b.n	8001f80 <NMI_Handler+0x4>

08001f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f86:	e7fe      	b.n	8001f86 <HardFault_Handler+0x4>

08001f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f8c:	e7fe      	b.n	8001f8c <MemManage_Handler+0x4>

08001f8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f92:	e7fe      	b.n	8001f92 <BusFault_Handler+0x4>

08001f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <UsageFault_Handler+0x4>

08001f9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fc8:	f000 f9a6 	bl	8002318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001fd4:	4802      	ldr	r0, [pc, #8]	; (8001fe0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001fd6:	f002 f988 	bl	80042ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000758 	.word	0x20000758

08001fe4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001fe8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001fec:	f000 fcbe 	bl	800296c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ffc:	4a14      	ldr	r2, [pc, #80]	; (8002050 <_sbrk+0x5c>)
 8001ffe:	4b15      	ldr	r3, [pc, #84]	; (8002054 <_sbrk+0x60>)
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002008:	4b13      	ldr	r3, [pc, #76]	; (8002058 <_sbrk+0x64>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d102      	bne.n	8002016 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002010:	4b11      	ldr	r3, [pc, #68]	; (8002058 <_sbrk+0x64>)
 8002012:	4a12      	ldr	r2, [pc, #72]	; (800205c <_sbrk+0x68>)
 8002014:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <_sbrk+0x64>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	429a      	cmp	r2, r3
 8002022:	d207      	bcs.n	8002034 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002024:	f004 f944 	bl	80062b0 <__errno>
 8002028:	4603      	mov	r3, r0
 800202a:	220c      	movs	r2, #12
 800202c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800202e:	f04f 33ff 	mov.w	r3, #4294967295
 8002032:	e009      	b.n	8002048 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002034:	4b08      	ldr	r3, [pc, #32]	; (8002058 <_sbrk+0x64>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800203a:	4b07      	ldr	r3, [pc, #28]	; (8002058 <_sbrk+0x64>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	4a05      	ldr	r2, [pc, #20]	; (8002058 <_sbrk+0x64>)
 8002044:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002046:	68fb      	ldr	r3, [r7, #12]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20018000 	.word	0x20018000
 8002054:	00000800 	.word	0x00000800
 8002058:	20000754 	.word	0x20000754
 800205c:	20000870 	.word	0x20000870

08002060 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <SystemInit+0x20>)
 8002066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206a:	4a05      	ldr	r2, [pc, #20]	; (8002080 <SystemInit+0x20>)
 800206c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002070:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002088:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <MX_TIM10_Init+0x40>)
 800208a:	4a0f      	ldr	r2, [pc, #60]	; (80020c8 <MX_TIM10_Init+0x44>)
 800208c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8400-1;
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <MX_TIM10_Init+0x40>)
 8002090:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002094:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <MX_TIM10_Init+0x40>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000;
 800209c:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <MX_TIM10_Init+0x40>)
 800209e:	f242 7210 	movw	r2, #10000	; 0x2710
 80020a2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a4:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <MX_TIM10_Init+0x40>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <MX_TIM10_Init+0x40>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80020b0:	4804      	ldr	r0, [pc, #16]	; (80020c4 <MX_TIM10_Init+0x40>)
 80020b2:	f002 f8cb 	bl	800424c <HAL_TIM_Base_Init>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80020bc:	f7ff fcf6 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20000758 	.word	0x20000758
 80020c8:	40014400 	.word	0x40014400

080020cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0e      	ldr	r2, [pc, #56]	; (8002114 <HAL_TIM_Base_MspInit+0x48>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d115      	bne.n	800210a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <HAL_TIM_Base_MspInit+0x4c>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	4a0c      	ldr	r2, [pc, #48]	; (8002118 <HAL_TIM_Base_MspInit+0x4c>)
 80020e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ec:	6453      	str	r3, [r2, #68]	; 0x44
 80020ee:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <HAL_TIM_Base_MspInit+0x4c>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2100      	movs	r1, #0
 80020fe:	2019      	movs	r0, #25
 8002100:	f000 fa29 	bl	8002556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002104:	2019      	movs	r0, #25
 8002106:	f000 fa42 	bl	800258e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40014400 	.word	0x40014400
 8002118:	40023800 	.word	0x40023800

0800211c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002120:	4b11      	ldr	r3, [pc, #68]	; (8002168 <MX_USART2_UART_Init+0x4c>)
 8002122:	4a12      	ldr	r2, [pc, #72]	; (800216c <MX_USART2_UART_Init+0x50>)
 8002124:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <MX_USART2_UART_Init+0x4c>)
 8002128:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800212c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800212e:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <MX_USART2_UART_Init+0x4c>)
 8002130:	2200      	movs	r2, #0
 8002132:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <MX_USART2_UART_Init+0x4c>)
 8002136:	2200      	movs	r2, #0
 8002138:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800213a:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <MX_USART2_UART_Init+0x4c>)
 800213c:	2200      	movs	r2, #0
 800213e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002140:	4b09      	ldr	r3, [pc, #36]	; (8002168 <MX_USART2_UART_Init+0x4c>)
 8002142:	220c      	movs	r2, #12
 8002144:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002146:	4b08      	ldr	r3, [pc, #32]	; (8002168 <MX_USART2_UART_Init+0x4c>)
 8002148:	2200      	movs	r2, #0
 800214a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <MX_USART2_UART_Init+0x4c>)
 800214e:	2200      	movs	r2, #0
 8002150:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002152:	4805      	ldr	r0, [pc, #20]	; (8002168 <MX_USART2_UART_Init+0x4c>)
 8002154:	f002 fa8e 	bl	8004674 <HAL_UART_Init>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800215e:	f7ff fca5 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	200007a0 	.word	0x200007a0
 800216c:	40004400 	.word	0x40004400

08002170 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	; 0x28
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a21      	ldr	r2, [pc, #132]	; (8002214 <HAL_UART_MspInit+0xa4>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d13b      	bne.n	800220a <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	4b20      	ldr	r3, [pc, #128]	; (8002218 <HAL_UART_MspInit+0xa8>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	4a1f      	ldr	r2, [pc, #124]	; (8002218 <HAL_UART_MspInit+0xa8>)
 800219c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a0:	6413      	str	r3, [r2, #64]	; 0x40
 80021a2:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <HAL_UART_MspInit+0xa8>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	4b19      	ldr	r3, [pc, #100]	; (8002218 <HAL_UART_MspInit+0xa8>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	4a18      	ldr	r2, [pc, #96]	; (8002218 <HAL_UART_MspInit+0xa8>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6313      	str	r3, [r2, #48]	; 0x30
 80021be:	4b16      	ldr	r3, [pc, #88]	; (8002218 <HAL_UART_MspInit+0xa8>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021ca:	2304      	movs	r3, #4
 80021cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d6:	2303      	movs	r3, #3
 80021d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021da:	2307      	movs	r3, #7
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021de:	f107 0314 	add.w	r3, r7, #20
 80021e2:	4619      	mov	r1, r3
 80021e4:	480d      	ldr	r0, [pc, #52]	; (800221c <HAL_UART_MspInit+0xac>)
 80021e6:	f000 fa09 	bl	80025fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART_RX_Pin;
 80021ea:	2308      	movs	r3, #8
 80021ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ee:	2302      	movs	r3, #2
 80021f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f6:	2300      	movs	r3, #0
 80021f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021fa:	2307      	movs	r3, #7
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 80021fe:	f107 0314 	add.w	r3, r7, #20
 8002202:	4619      	mov	r1, r3
 8002204:	4805      	ldr	r0, [pc, #20]	; (800221c <HAL_UART_MspInit+0xac>)
 8002206:	f000 f9f9 	bl	80025fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800220a:	bf00      	nop
 800220c:	3728      	adds	r7, #40	; 0x28
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40004400 	.word	0x40004400
 8002218:	40023800 	.word	0x40023800
 800221c:	40020000 	.word	0x40020000

08002220 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002220:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002258 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002224:	480d      	ldr	r0, [pc, #52]	; (800225c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002226:	490e      	ldr	r1, [pc, #56]	; (8002260 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002228:	4a0e      	ldr	r2, [pc, #56]	; (8002264 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800222c:	e002      	b.n	8002234 <LoopCopyDataInit>

0800222e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800222e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002232:	3304      	adds	r3, #4

08002234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002238:	d3f9      	bcc.n	800222e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223a:	4a0b      	ldr	r2, [pc, #44]	; (8002268 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800223c:	4c0b      	ldr	r4, [pc, #44]	; (800226c <LoopFillZerobss+0x26>)
  movs r3, #0
 800223e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002240:	e001      	b.n	8002246 <LoopFillZerobss>

08002242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002244:	3204      	adds	r2, #4

08002246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002248:	d3fb      	bcc.n	8002242 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800224a:	f7ff ff09 	bl	8002060 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800224e:	f004 f835 	bl	80062bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002252:	f7ff fab3 	bl	80017bc <main>
  bx  lr    
 8002256:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002258:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800225c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002260:	2000060c 	.word	0x2000060c
  ldr r2, =_sidata
 8002264:	080098d0 	.word	0x080098d0
  ldr r2, =_sbss
 8002268:	2000060c 	.word	0x2000060c
  ldr r4, =_ebss
 800226c:	2000086c 	.word	0x2000086c

08002270 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002270:	e7fe      	b.n	8002270 <ADC_IRQHandler>
	...

08002274 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002278:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <HAL_Init+0x40>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a0d      	ldr	r2, [pc, #52]	; (80022b4 <HAL_Init+0x40>)
 800227e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002282:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002284:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <HAL_Init+0x40>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <HAL_Init+0x40>)
 800228a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800228e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <HAL_Init+0x40>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a07      	ldr	r2, [pc, #28]	; (80022b4 <HAL_Init+0x40>)
 8002296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800229c:	2003      	movs	r0, #3
 800229e:	f000 f94f 	bl	8002540 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022a2:	2000      	movs	r0, #0
 80022a4:	f000 f808 	bl	80022b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022a8:	f7ff fe40 	bl	8001f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40023c00 	.word	0x40023c00

080022b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022c0:	4b12      	ldr	r3, [pc, #72]	; (800230c <HAL_InitTick+0x54>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b12      	ldr	r3, [pc, #72]	; (8002310 <HAL_InitTick+0x58>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	4619      	mov	r1, r3
 80022ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80022d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 f967 	bl	80025aa <HAL_SYSTICK_Config>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e00e      	b.n	8002304 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b0f      	cmp	r3, #15
 80022ea:	d80a      	bhi.n	8002302 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022ec:	2200      	movs	r2, #0
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	f04f 30ff 	mov.w	r0, #4294967295
 80022f4:	f000 f92f 	bl	8002556 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022f8:	4a06      	ldr	r2, [pc, #24]	; (8002314 <HAL_InitTick+0x5c>)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	e000      	b.n	8002304 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
}
 8002304:	4618      	mov	r0, r3
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	20000030 	.word	0x20000030
 8002310:	20000038 	.word	0x20000038
 8002314:	20000034 	.word	0x20000034

08002318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_IncTick+0x20>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_IncTick+0x24>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4413      	add	r3, r2
 8002328:	4a04      	ldr	r2, [pc, #16]	; (800233c <HAL_IncTick+0x24>)
 800232a:	6013      	str	r3, [r2, #0]
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	20000038 	.word	0x20000038
 800233c:	200007e4 	.word	0x200007e4

08002340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return uwTick;
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <HAL_GetTick+0x14>)
 8002346:	681b      	ldr	r3, [r3, #0]
}
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	200007e4 	.word	0x200007e4

08002358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002360:	f7ff ffee 	bl	8002340 <HAL_GetTick>
 8002364:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002370:	d005      	beq.n	800237e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002372:	4b0a      	ldr	r3, [pc, #40]	; (800239c <HAL_Delay+0x44>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4413      	add	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800237e:	bf00      	nop
 8002380:	f7ff ffde 	bl	8002340 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	429a      	cmp	r2, r3
 800238e:	d8f7      	bhi.n	8002380 <HAL_Delay+0x28>
  {
  }
}
 8002390:	bf00      	nop
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000038 	.word	0x20000038

080023a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <__NVIC_SetPriorityGrouping+0x44>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023bc:	4013      	ands	r3, r2
 80023be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023d2:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <__NVIC_SetPriorityGrouping+0x44>)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	60d3      	str	r3, [r2, #12]
}
 80023d8:	bf00      	nop
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023ec:	4b04      	ldr	r3, [pc, #16]	; (8002400 <__NVIC_GetPriorityGrouping+0x18>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	0a1b      	lsrs	r3, r3, #8
 80023f2:	f003 0307 	and.w	r3, r3, #7
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	2b00      	cmp	r3, #0
 8002414:	db0b      	blt.n	800242e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	f003 021f 	and.w	r2, r3, #31
 800241c:	4907      	ldr	r1, [pc, #28]	; (800243c <__NVIC_EnableIRQ+0x38>)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	095b      	lsrs	r3, r3, #5
 8002424:	2001      	movs	r0, #1
 8002426:	fa00 f202 	lsl.w	r2, r0, r2
 800242a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	e000e100 	.word	0xe000e100

08002440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	6039      	str	r1, [r7, #0]
 800244a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002450:	2b00      	cmp	r3, #0
 8002452:	db0a      	blt.n	800246a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	b2da      	uxtb	r2, r3
 8002458:	490c      	ldr	r1, [pc, #48]	; (800248c <__NVIC_SetPriority+0x4c>)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	0112      	lsls	r2, r2, #4
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	440b      	add	r3, r1
 8002464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002468:	e00a      	b.n	8002480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4908      	ldr	r1, [pc, #32]	; (8002490 <__NVIC_SetPriority+0x50>)
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	3b04      	subs	r3, #4
 8002478:	0112      	lsls	r2, r2, #4
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	440b      	add	r3, r1
 800247e:	761a      	strb	r2, [r3, #24]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	e000e100 	.word	0xe000e100
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002494:	b480      	push	{r7}
 8002496:	b089      	sub	sp, #36	; 0x24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f1c3 0307 	rsb	r3, r3, #7
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	bf28      	it	cs
 80024b2:	2304      	movcs	r3, #4
 80024b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	3304      	adds	r3, #4
 80024ba:	2b06      	cmp	r3, #6
 80024bc:	d902      	bls.n	80024c4 <NVIC_EncodePriority+0x30>
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3b03      	subs	r3, #3
 80024c2:	e000      	b.n	80024c6 <NVIC_EncodePriority+0x32>
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c8:	f04f 32ff 	mov.w	r2, #4294967295
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43da      	mvns	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	401a      	ands	r2, r3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024dc:	f04f 31ff 	mov.w	r1, #4294967295
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	fa01 f303 	lsl.w	r3, r1, r3
 80024e6:	43d9      	mvns	r1, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ec:	4313      	orrs	r3, r2
         );
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3724      	adds	r7, #36	; 0x24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
	...

080024fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3b01      	subs	r3, #1
 8002508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800250c:	d301      	bcc.n	8002512 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800250e:	2301      	movs	r3, #1
 8002510:	e00f      	b.n	8002532 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002512:	4a0a      	ldr	r2, [pc, #40]	; (800253c <SysTick_Config+0x40>)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3b01      	subs	r3, #1
 8002518:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800251a:	210f      	movs	r1, #15
 800251c:	f04f 30ff 	mov.w	r0, #4294967295
 8002520:	f7ff ff8e 	bl	8002440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002524:	4b05      	ldr	r3, [pc, #20]	; (800253c <SysTick_Config+0x40>)
 8002526:	2200      	movs	r2, #0
 8002528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800252a:	4b04      	ldr	r3, [pc, #16]	; (800253c <SysTick_Config+0x40>)
 800252c:	2207      	movs	r2, #7
 800252e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	e000e010 	.word	0xe000e010

08002540 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff ff29 	bl	80023a0 <__NVIC_SetPriorityGrouping>
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002556:	b580      	push	{r7, lr}
 8002558:	b086      	sub	sp, #24
 800255a:	af00      	add	r7, sp, #0
 800255c:	4603      	mov	r3, r0
 800255e:	60b9      	str	r1, [r7, #8]
 8002560:	607a      	str	r2, [r7, #4]
 8002562:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002568:	f7ff ff3e 	bl	80023e8 <__NVIC_GetPriorityGrouping>
 800256c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	68b9      	ldr	r1, [r7, #8]
 8002572:	6978      	ldr	r0, [r7, #20]
 8002574:	f7ff ff8e 	bl	8002494 <NVIC_EncodePriority>
 8002578:	4602      	mov	r2, r0
 800257a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800257e:	4611      	mov	r1, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff ff5d 	bl	8002440 <__NVIC_SetPriority>
}
 8002586:	bf00      	nop
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	af00      	add	r7, sp, #0
 8002594:	4603      	mov	r3, r0
 8002596:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ff31 	bl	8002404 <__NVIC_EnableIRQ>
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff ffa2 	bl	80024fc <SysTick_Config>
 80025b8:	4603      	mov	r3, r0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e00e      	b.n	80025f2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	795b      	ldrb	r3, [r3, #5]
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d105      	bne.n	80025ea <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7fe ff83 	bl	80014f0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b089      	sub	sp, #36	; 0x24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800260a:	2300      	movs	r3, #0
 800260c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800260e:	2300      	movs	r3, #0
 8002610:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002612:	2300      	movs	r3, #0
 8002614:	61fb      	str	r3, [r7, #28]
 8002616:	e159      	b.n	80028cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002618:	2201      	movs	r2, #1
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	4013      	ands	r3, r2
 800262a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	429a      	cmp	r2, r3
 8002632:	f040 8148 	bne.w	80028c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	2b01      	cmp	r3, #1
 8002640:	d005      	beq.n	800264e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800264a:	2b02      	cmp	r3, #2
 800264c:	d130      	bne.n	80026b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	2203      	movs	r2, #3
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4013      	ands	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4313      	orrs	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002684:	2201      	movs	r2, #1
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	091b      	lsrs	r3, r3, #4
 800269a:	f003 0201 	and.w	r2, r3, #1
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d017      	beq.n	80026ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	2203      	movs	r2, #3
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d123      	bne.n	8002740 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	08da      	lsrs	r2, r3, #3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3208      	adds	r2, #8
 8002700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002704:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	220f      	movs	r2, #15
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	08da      	lsrs	r2, r3, #3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3208      	adds	r2, #8
 800273a:	69b9      	ldr	r1, [r7, #24]
 800273c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	2203      	movs	r2, #3
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4013      	ands	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 0203 	and.w	r2, r3, #3
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 80a2 	beq.w	80028c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	4b57      	ldr	r3, [pc, #348]	; (80028e4 <HAL_GPIO_Init+0x2e8>)
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278a:	4a56      	ldr	r2, [pc, #344]	; (80028e4 <HAL_GPIO_Init+0x2e8>)
 800278c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002790:	6453      	str	r3, [r2, #68]	; 0x44
 8002792:	4b54      	ldr	r3, [pc, #336]	; (80028e4 <HAL_GPIO_Init+0x2e8>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800279e:	4a52      	ldr	r2, [pc, #328]	; (80028e8 <HAL_GPIO_Init+0x2ec>)
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	089b      	lsrs	r3, r3, #2
 80027a4:	3302      	adds	r3, #2
 80027a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	220f      	movs	r2, #15
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4013      	ands	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a49      	ldr	r2, [pc, #292]	; (80028ec <HAL_GPIO_Init+0x2f0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d019      	beq.n	80027fe <HAL_GPIO_Init+0x202>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a48      	ldr	r2, [pc, #288]	; (80028f0 <HAL_GPIO_Init+0x2f4>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d013      	beq.n	80027fa <HAL_GPIO_Init+0x1fe>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a47      	ldr	r2, [pc, #284]	; (80028f4 <HAL_GPIO_Init+0x2f8>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d00d      	beq.n	80027f6 <HAL_GPIO_Init+0x1fa>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a46      	ldr	r2, [pc, #280]	; (80028f8 <HAL_GPIO_Init+0x2fc>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d007      	beq.n	80027f2 <HAL_GPIO_Init+0x1f6>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a45      	ldr	r2, [pc, #276]	; (80028fc <HAL_GPIO_Init+0x300>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d101      	bne.n	80027ee <HAL_GPIO_Init+0x1f2>
 80027ea:	2304      	movs	r3, #4
 80027ec:	e008      	b.n	8002800 <HAL_GPIO_Init+0x204>
 80027ee:	2307      	movs	r3, #7
 80027f0:	e006      	b.n	8002800 <HAL_GPIO_Init+0x204>
 80027f2:	2303      	movs	r3, #3
 80027f4:	e004      	b.n	8002800 <HAL_GPIO_Init+0x204>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e002      	b.n	8002800 <HAL_GPIO_Init+0x204>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <HAL_GPIO_Init+0x204>
 80027fe:	2300      	movs	r3, #0
 8002800:	69fa      	ldr	r2, [r7, #28]
 8002802:	f002 0203 	and.w	r2, r2, #3
 8002806:	0092      	lsls	r2, r2, #2
 8002808:	4093      	lsls	r3, r2
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4313      	orrs	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002810:	4935      	ldr	r1, [pc, #212]	; (80028e8 <HAL_GPIO_Init+0x2ec>)
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	089b      	lsrs	r3, r3, #2
 8002816:	3302      	adds	r3, #2
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800281e:	4b38      	ldr	r3, [pc, #224]	; (8002900 <HAL_GPIO_Init+0x304>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	43db      	mvns	r3, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4013      	ands	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002842:	4a2f      	ldr	r2, [pc, #188]	; (8002900 <HAL_GPIO_Init+0x304>)
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002848:	4b2d      	ldr	r3, [pc, #180]	; (8002900 <HAL_GPIO_Init+0x304>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800286c:	4a24      	ldr	r2, [pc, #144]	; (8002900 <HAL_GPIO_Init+0x304>)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002872:	4b23      	ldr	r3, [pc, #140]	; (8002900 <HAL_GPIO_Init+0x304>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	43db      	mvns	r3, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4013      	ands	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002896:	4a1a      	ldr	r2, [pc, #104]	; (8002900 <HAL_GPIO_Init+0x304>)
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800289c:	4b18      	ldr	r3, [pc, #96]	; (8002900 <HAL_GPIO_Init+0x304>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	43db      	mvns	r3, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4013      	ands	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028c0:	4a0f      	ldr	r2, [pc, #60]	; (8002900 <HAL_GPIO_Init+0x304>)
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	3301      	adds	r3, #1
 80028ca:	61fb      	str	r3, [r7, #28]
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	2b0f      	cmp	r3, #15
 80028d0:	f67f aea2 	bls.w	8002618 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	3724      	adds	r7, #36	; 0x24
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40013800 	.word	0x40013800
 80028ec:	40020000 	.word	0x40020000
 80028f0:	40020400 	.word	0x40020400
 80028f4:	40020800 	.word	0x40020800
 80028f8:	40020c00 	.word	0x40020c00
 80028fc:	40021000 	.word	0x40021000
 8002900:	40013c00 	.word	0x40013c00

08002904 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	807b      	strh	r3, [r7, #2]
 8002910:	4613      	mov	r3, r2
 8002912:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002914:	787b      	ldrb	r3, [r7, #1]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800291a:	887a      	ldrh	r2, [r7, #2]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002920:	e003      	b.n	800292a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002922:	887b      	ldrh	r3, [r7, #2]
 8002924:	041a      	lsls	r2, r3, #16
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	619a      	str	r2, [r3, #24]
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002936:	b480      	push	{r7}
 8002938:	b085      	sub	sp, #20
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	460b      	mov	r3, r1
 8002940:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002948:	887a      	ldrh	r2, [r7, #2]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4013      	ands	r3, r2
 800294e:	041a      	lsls	r2, r3, #16
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	43d9      	mvns	r1, r3
 8002954:	887b      	ldrh	r3, [r7, #2]
 8002956:	400b      	ands	r3, r1
 8002958:	431a      	orrs	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	619a      	str	r2, [r3, #24]
}
 800295e:	bf00      	nop
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
	...

0800296c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002976:	4b08      	ldr	r3, [pc, #32]	; (8002998 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002978:	695a      	ldr	r2, [r3, #20]
 800297a:	88fb      	ldrh	r3, [r7, #6]
 800297c:	4013      	ands	r3, r2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d006      	beq.n	8002990 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002982:	4a05      	ldr	r2, [pc, #20]	; (8002998 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002984:	88fb      	ldrh	r3, [r7, #6]
 8002986:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002988:	88fb      	ldrh	r3, [r7, #6]
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff f86c 	bl	8001a68 <HAL_GPIO_EXTI_Callback>
  }
}
 8002990:	bf00      	nop
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40013c00 	.word	0x40013c00

0800299c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e12b      	b.n	8002c06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d106      	bne.n	80029c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7fe fe5a 	bl	800167c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2224      	movs	r2, #36	; 0x24
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0201 	bic.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a00:	f001 fbfc 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 8002a04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	4a81      	ldr	r2, [pc, #516]	; (8002c10 <HAL_I2C_Init+0x274>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d807      	bhi.n	8002a20 <HAL_I2C_Init+0x84>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4a80      	ldr	r2, [pc, #512]	; (8002c14 <HAL_I2C_Init+0x278>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	bf94      	ite	ls
 8002a18:	2301      	movls	r3, #1
 8002a1a:	2300      	movhi	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	e006      	b.n	8002a2e <HAL_I2C_Init+0x92>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4a7d      	ldr	r2, [pc, #500]	; (8002c18 <HAL_I2C_Init+0x27c>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	bf94      	ite	ls
 8002a28:	2301      	movls	r3, #1
 8002a2a:	2300      	movhi	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e0e7      	b.n	8002c06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4a78      	ldr	r2, [pc, #480]	; (8002c1c <HAL_I2C_Init+0x280>)
 8002a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3e:	0c9b      	lsrs	r3, r3, #18
 8002a40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	4a6a      	ldr	r2, [pc, #424]	; (8002c10 <HAL_I2C_Init+0x274>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d802      	bhi.n	8002a70 <HAL_I2C_Init+0xd4>
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	e009      	b.n	8002a84 <HAL_I2C_Init+0xe8>
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a76:	fb02 f303 	mul.w	r3, r2, r3
 8002a7a:	4a69      	ldr	r2, [pc, #420]	; (8002c20 <HAL_I2C_Init+0x284>)
 8002a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a80:	099b      	lsrs	r3, r3, #6
 8002a82:	3301      	adds	r3, #1
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	495c      	ldr	r1, [pc, #368]	; (8002c10 <HAL_I2C_Init+0x274>)
 8002aa0:	428b      	cmp	r3, r1
 8002aa2:	d819      	bhi.n	8002ad8 <HAL_I2C_Init+0x13c>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1e59      	subs	r1, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ab2:	1c59      	adds	r1, r3, #1
 8002ab4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ab8:	400b      	ands	r3, r1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00a      	beq.n	8002ad4 <HAL_I2C_Init+0x138>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1e59      	subs	r1, r3, #1
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002acc:	3301      	adds	r3, #1
 8002ace:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad2:	e051      	b.n	8002b78 <HAL_I2C_Init+0x1dc>
 8002ad4:	2304      	movs	r3, #4
 8002ad6:	e04f      	b.n	8002b78 <HAL_I2C_Init+0x1dc>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d111      	bne.n	8002b04 <HAL_I2C_Init+0x168>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	1e58      	subs	r0, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6859      	ldr	r1, [r3, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	440b      	add	r3, r1
 8002aee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002af2:	3301      	adds	r3, #1
 8002af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	bf0c      	ite	eq
 8002afc:	2301      	moveq	r3, #1
 8002afe:	2300      	movne	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	e012      	b.n	8002b2a <HAL_I2C_Init+0x18e>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	1e58      	subs	r0, r3, #1
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6859      	ldr	r1, [r3, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	0099      	lsls	r1, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	bf0c      	ite	eq
 8002b24:	2301      	moveq	r3, #1
 8002b26:	2300      	movne	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_I2C_Init+0x196>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e022      	b.n	8002b78 <HAL_I2C_Init+0x1dc>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10e      	bne.n	8002b58 <HAL_I2C_Init+0x1bc>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1e58      	subs	r0, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6859      	ldr	r1, [r3, #4]
 8002b42:	460b      	mov	r3, r1
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	440b      	add	r3, r1
 8002b48:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b56:	e00f      	b.n	8002b78 <HAL_I2C_Init+0x1dc>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	1e58      	subs	r0, r3, #1
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6859      	ldr	r1, [r3, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	0099      	lsls	r1, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b6e:	3301      	adds	r3, #1
 8002b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	6809      	ldr	r1, [r1, #0]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69da      	ldr	r2, [r3, #28]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ba6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6911      	ldr	r1, [r2, #16]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68d2      	ldr	r2, [r2, #12]
 8002bb2:	4311      	orrs	r1, r2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6812      	ldr	r2, [r2, #0]
 8002bb8:	430b      	orrs	r3, r1
 8002bba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	695a      	ldr	r2, [r3, #20]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	000186a0 	.word	0x000186a0
 8002c14:	001e847f 	.word	0x001e847f
 8002c18:	003d08ff 	.word	0x003d08ff
 8002c1c:	431bde83 	.word	0x431bde83
 8002c20:	10624dd3 	.word	0x10624dd3

08002c24 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b088      	sub	sp, #32
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	4608      	mov	r0, r1
 8002c2e:	4611      	mov	r1, r2
 8002c30:	461a      	mov	r2, r3
 8002c32:	4603      	mov	r3, r0
 8002c34:	817b      	strh	r3, [r7, #10]
 8002c36:	460b      	mov	r3, r1
 8002c38:	813b      	strh	r3, [r7, #8]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c3e:	f7ff fb7f 	bl	8002340 <HAL_GetTick>
 8002c42:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b20      	cmp	r3, #32
 8002c4e:	f040 80d9 	bne.w	8002e04 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	2319      	movs	r3, #25
 8002c58:	2201      	movs	r2, #1
 8002c5a:	496d      	ldr	r1, [pc, #436]	; (8002e10 <HAL_I2C_Mem_Write+0x1ec>)
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 fc7f 	bl	8003560 <I2C_WaitOnFlagUntilTimeout>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e0cc      	b.n	8002e06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d101      	bne.n	8002c7a <HAL_I2C_Mem_Write+0x56>
 8002c76:	2302      	movs	r3, #2
 8002c78:	e0c5      	b.n	8002e06 <HAL_I2C_Mem_Write+0x1e2>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d007      	beq.n	8002ca0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0201 	orr.w	r2, r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2221      	movs	r2, #33	; 0x21
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2240      	movs	r2, #64	; 0x40
 8002cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a3a      	ldr	r2, [r7, #32]
 8002cca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4a4d      	ldr	r2, [pc, #308]	; (8002e14 <HAL_I2C_Mem_Write+0x1f0>)
 8002ce0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ce2:	88f8      	ldrh	r0, [r7, #6]
 8002ce4:	893a      	ldrh	r2, [r7, #8]
 8002ce6:	8979      	ldrh	r1, [r7, #10]
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	9301      	str	r3, [sp, #4]
 8002cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 fab6 	bl	8003264 <I2C_RequestMemoryWrite>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d052      	beq.n	8002da4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e081      	b.n	8002e06 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 fd00 	bl	800370c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00d      	beq.n	8002d2e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d107      	bne.n	8002d2a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e06b      	b.n	8002e06 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	781a      	ldrb	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	3b01      	subs	r3, #1
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d11b      	bne.n	8002da4 <HAL_I2C_Mem_Write+0x180>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d017      	beq.n	8002da4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	781a      	ldrb	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1aa      	bne.n	8002d02 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 fcec 	bl	800378e <I2C_WaitOnBTFFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00d      	beq.n	8002dd8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d107      	bne.n	8002dd4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e016      	b.n	8002e06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	e000      	b.n	8002e06 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002e04:	2302      	movs	r3, #2
  }
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	00100002 	.word	0x00100002
 8002e14:	ffff0000 	.word	0xffff0000

08002e18 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08c      	sub	sp, #48	; 0x30
 8002e1c:	af02      	add	r7, sp, #8
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	4608      	mov	r0, r1
 8002e22:	4611      	mov	r1, r2
 8002e24:	461a      	mov	r2, r3
 8002e26:	4603      	mov	r3, r0
 8002e28:	817b      	strh	r3, [r7, #10]
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	813b      	strh	r3, [r7, #8]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e32:	f7ff fa85 	bl	8002340 <HAL_GetTick>
 8002e36:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b20      	cmp	r3, #32
 8002e42:	f040 8208 	bne.w	8003256 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	2319      	movs	r3, #25
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	497b      	ldr	r1, [pc, #492]	; (800303c <HAL_I2C_Mem_Read+0x224>)
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 fb85 	bl	8003560 <I2C_WaitOnFlagUntilTimeout>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e1fb      	b.n	8003258 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <HAL_I2C_Mem_Read+0x56>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e1f4      	b.n	8003258 <HAL_I2C_Mem_Read+0x440>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d007      	beq.n	8002e94 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0201 	orr.w	r2, r2, #1
 8002e92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ea2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2222      	movs	r2, #34	; 0x22
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2240      	movs	r2, #64	; 0x40
 8002eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ebe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002ec4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4a5b      	ldr	r2, [pc, #364]	; (8003040 <HAL_I2C_Mem_Read+0x228>)
 8002ed4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ed6:	88f8      	ldrh	r0, [r7, #6]
 8002ed8:	893a      	ldrh	r2, [r7, #8]
 8002eda:	8979      	ldrh	r1, [r7, #10]
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	9301      	str	r3, [sp, #4]
 8002ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 fa52 	bl	8003390 <I2C_RequestMemoryRead>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e1b0      	b.n	8003258 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d113      	bne.n	8002f26 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002efe:	2300      	movs	r3, #0
 8002f00:	623b      	str	r3, [r7, #32]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	623b      	str	r3, [r7, #32]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	623b      	str	r3, [r7, #32]
 8002f12:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	e184      	b.n	8003230 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d11b      	bne.n	8002f66 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61fb      	str	r3, [r7, #28]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	61fb      	str	r3, [r7, #28]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	61fb      	str	r3, [r7, #28]
 8002f52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	e164      	b.n	8003230 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d11b      	bne.n	8002fa6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f7c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61bb      	str	r3, [r7, #24]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	61bb      	str	r3, [r7, #24]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	61bb      	str	r3, [r7, #24]
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	e144      	b.n	8003230 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	617b      	str	r3, [r7, #20]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	617b      	str	r3, [r7, #20]
 8002fba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002fbc:	e138      	b.n	8003230 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	f200 80f1 	bhi.w	80031aa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d123      	bne.n	8003018 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f000 fc1b 	bl	8003810 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e139      	b.n	8003258 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691a      	ldr	r2, [r3, #16]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300c:	b29b      	uxth	r3, r3
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003016:	e10b      	b.n	8003230 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301c:	2b02      	cmp	r3, #2
 800301e:	d14e      	bne.n	80030be <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003026:	2200      	movs	r2, #0
 8003028:	4906      	ldr	r1, [pc, #24]	; (8003044 <HAL_I2C_Mem_Read+0x22c>)
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 fa98 	bl	8003560 <I2C_WaitOnFlagUntilTimeout>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d008      	beq.n	8003048 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e10e      	b.n	8003258 <HAL_I2C_Mem_Read+0x440>
 800303a:	bf00      	nop
 800303c:	00100002 	.word	0x00100002
 8003040:	ffff0000 	.word	0xffff0000
 8003044:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003056:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	691a      	ldr	r2, [r3, #16]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003080:	b29b      	uxth	r3, r3
 8003082:	3b01      	subs	r3, #1
 8003084:	b29a      	uxth	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	691a      	ldr	r2, [r3, #16]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	1c5a      	adds	r2, r3, #1
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a6:	3b01      	subs	r3, #1
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	3b01      	subs	r3, #1
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030bc:	e0b8      	b.n	8003230 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c4:	2200      	movs	r2, #0
 80030c6:	4966      	ldr	r1, [pc, #408]	; (8003260 <HAL_I2C_Mem_Read+0x448>)
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 fa49 	bl	8003560 <I2C_WaitOnFlagUntilTimeout>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e0bf      	b.n	8003258 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691a      	ldr	r2, [r3, #16]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003104:	3b01      	subs	r3, #1
 8003106:	b29a      	uxth	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003110:	b29b      	uxth	r3, r3
 8003112:	3b01      	subs	r3, #1
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003120:	2200      	movs	r2, #0
 8003122:	494f      	ldr	r1, [pc, #316]	; (8003260 <HAL_I2C_Mem_Read+0x448>)
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 fa1b 	bl	8003560 <I2C_WaitOnFlagUntilTimeout>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e091      	b.n	8003258 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003142:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316c:	b29b      	uxth	r3, r3
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003192:	3b01      	subs	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319e:	b29b      	uxth	r3, r3
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031a8:	e042      	b.n	8003230 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 fb2e 	bl	8003810 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e04c      	b.n	8003258 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	691a      	ldr	r2, [r3, #16]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	1c5a      	adds	r2, r3, #1
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	3b01      	subs	r3, #1
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d118      	bne.n	8003230 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	b2d2      	uxtb	r2, r2
 800320a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	1c5a      	adds	r2, r3, #1
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321a:	3b01      	subs	r3, #1
 800321c:	b29a      	uxth	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003226:	b29b      	uxth	r3, r3
 8003228:	3b01      	subs	r3, #1
 800322a:	b29a      	uxth	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003234:	2b00      	cmp	r3, #0
 8003236:	f47f aec2 	bne.w	8002fbe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2220      	movs	r2, #32
 800323e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	e000      	b.n	8003258 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003256:	2302      	movs	r3, #2
  }
}
 8003258:	4618      	mov	r0, r3
 800325a:	3728      	adds	r7, #40	; 0x28
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	00010004 	.word	0x00010004

08003264 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b088      	sub	sp, #32
 8003268:	af02      	add	r7, sp, #8
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	4608      	mov	r0, r1
 800326e:	4611      	mov	r1, r2
 8003270:	461a      	mov	r2, r3
 8003272:	4603      	mov	r3, r0
 8003274:	817b      	strh	r3, [r7, #10]
 8003276:	460b      	mov	r3, r1
 8003278:	813b      	strh	r3, [r7, #8]
 800327a:	4613      	mov	r3, r2
 800327c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800328c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	6a3b      	ldr	r3, [r7, #32]
 8003294:	2200      	movs	r2, #0
 8003296:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 f960 	bl	8003560 <I2C_WaitOnFlagUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00d      	beq.n	80032c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032b4:	d103      	bne.n	80032be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e05f      	b.n	8003382 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032c2:	897b      	ldrh	r3, [r7, #10]
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	461a      	mov	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	6a3a      	ldr	r2, [r7, #32]
 80032d6:	492d      	ldr	r1, [pc, #180]	; (800338c <I2C_RequestMemoryWrite+0x128>)
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 f998 	bl	800360e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e04c      	b.n	8003382 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003300:	6a39      	ldr	r1, [r7, #32]
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 fa02 	bl	800370c <I2C_WaitOnTXEFlagUntilTimeout>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00d      	beq.n	800332a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	2b04      	cmp	r3, #4
 8003314:	d107      	bne.n	8003326 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003324:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e02b      	b.n	8003382 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800332a:	88fb      	ldrh	r3, [r7, #6]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d105      	bne.n	800333c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003330:	893b      	ldrh	r3, [r7, #8]
 8003332:	b2da      	uxtb	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	611a      	str	r2, [r3, #16]
 800333a:	e021      	b.n	8003380 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800333c:	893b      	ldrh	r3, [r7, #8]
 800333e:	0a1b      	lsrs	r3, r3, #8
 8003340:	b29b      	uxth	r3, r3
 8003342:	b2da      	uxtb	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800334a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800334c:	6a39      	ldr	r1, [r7, #32]
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f9dc 	bl	800370c <I2C_WaitOnTXEFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00d      	beq.n	8003376 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	2b04      	cmp	r3, #4
 8003360:	d107      	bne.n	8003372 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003370:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e005      	b.n	8003382 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003376:	893b      	ldrh	r3, [r7, #8]
 8003378:	b2da      	uxtb	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	00010002 	.word	0x00010002

08003390 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af02      	add	r7, sp, #8
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	4608      	mov	r0, r1
 800339a:	4611      	mov	r1, r2
 800339c:	461a      	mov	r2, r3
 800339e:	4603      	mov	r3, r0
 80033a0:	817b      	strh	r3, [r7, #10]
 80033a2:	460b      	mov	r3, r1
 80033a4:	813b      	strh	r3, [r7, #8]
 80033a6:	4613      	mov	r3, r2
 80033a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 f8c2 	bl	8003560 <I2C_WaitOnFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00d      	beq.n	80033fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033f0:	d103      	bne.n	80033fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e0aa      	b.n	8003554 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033fe:	897b      	ldrh	r3, [r7, #10]
 8003400:	b2db      	uxtb	r3, r3
 8003402:	461a      	mov	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800340c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	6a3a      	ldr	r2, [r7, #32]
 8003412:	4952      	ldr	r1, [pc, #328]	; (800355c <I2C_RequestMemoryRead+0x1cc>)
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 f8fa 	bl	800360e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e097      	b.n	8003554 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	617b      	str	r3, [r7, #20]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800343a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800343c:	6a39      	ldr	r1, [r7, #32]
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 f964 	bl	800370c <I2C_WaitOnTXEFlagUntilTimeout>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00d      	beq.n	8003466 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	2b04      	cmp	r3, #4
 8003450:	d107      	bne.n	8003462 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003460:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e076      	b.n	8003554 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003466:	88fb      	ldrh	r3, [r7, #6]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d105      	bne.n	8003478 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800346c:	893b      	ldrh	r3, [r7, #8]
 800346e:	b2da      	uxtb	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	611a      	str	r2, [r3, #16]
 8003476:	e021      	b.n	80034bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003478:	893b      	ldrh	r3, [r7, #8]
 800347a:	0a1b      	lsrs	r3, r3, #8
 800347c:	b29b      	uxth	r3, r3
 800347e:	b2da      	uxtb	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003488:	6a39      	ldr	r1, [r7, #32]
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 f93e 	bl	800370c <I2C_WaitOnTXEFlagUntilTimeout>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00d      	beq.n	80034b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	2b04      	cmp	r3, #4
 800349c:	d107      	bne.n	80034ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e050      	b.n	8003554 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034b2:	893b      	ldrh	r3, [r7, #8]
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034be:	6a39      	ldr	r1, [r7, #32]
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 f923 	bl	800370c <I2C_WaitOnTXEFlagUntilTimeout>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00d      	beq.n	80034e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	d107      	bne.n	80034e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e035      	b.n	8003554 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	2200      	movs	r2, #0
 8003500:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 f82b 	bl	8003560 <I2C_WaitOnFlagUntilTimeout>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00d      	beq.n	800352c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800351e:	d103      	bne.n	8003528 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003526:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e013      	b.n	8003554 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800352c:	897b      	ldrh	r3, [r7, #10]
 800352e:	b2db      	uxtb	r3, r3
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	b2da      	uxtb	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	6a3a      	ldr	r2, [r7, #32]
 8003540:	4906      	ldr	r1, [pc, #24]	; (800355c <I2C_RequestMemoryRead+0x1cc>)
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 f863 	bl	800360e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	00010002 	.word	0x00010002

08003560 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	603b      	str	r3, [r7, #0]
 800356c:	4613      	mov	r3, r2
 800356e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003570:	e025      	b.n	80035be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003578:	d021      	beq.n	80035be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800357a:	f7fe fee1 	bl	8002340 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d302      	bcc.n	8003590 <I2C_WaitOnFlagUntilTimeout+0x30>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d116      	bne.n	80035be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2220      	movs	r2, #32
 800359a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	f043 0220 	orr.w	r2, r3, #32
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e023      	b.n	8003606 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	0c1b      	lsrs	r3, r3, #16
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d10d      	bne.n	80035e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	43da      	mvns	r2, r3
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	4013      	ands	r3, r2
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	bf0c      	ite	eq
 80035da:	2301      	moveq	r3, #1
 80035dc:	2300      	movne	r3, #0
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	461a      	mov	r2, r3
 80035e2:	e00c      	b.n	80035fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	43da      	mvns	r2, r3
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	4013      	ands	r3, r2
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	bf0c      	ite	eq
 80035f6:	2301      	moveq	r3, #1
 80035f8:	2300      	movne	r3, #0
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	461a      	mov	r2, r3
 80035fe:	79fb      	ldrb	r3, [r7, #7]
 8003600:	429a      	cmp	r2, r3
 8003602:	d0b6      	beq.n	8003572 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b084      	sub	sp, #16
 8003612:	af00      	add	r7, sp, #0
 8003614:	60f8      	str	r0, [r7, #12]
 8003616:	60b9      	str	r1, [r7, #8]
 8003618:	607a      	str	r2, [r7, #4]
 800361a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800361c:	e051      	b.n	80036c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800362c:	d123      	bne.n	8003676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800363c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003646:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f043 0204 	orr.w	r2, r3, #4
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e046      	b.n	8003704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367c:	d021      	beq.n	80036c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800367e:	f7fe fe5f 	bl	8002340 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	429a      	cmp	r2, r3
 800368c:	d302      	bcc.n	8003694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d116      	bne.n	80036c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2220      	movs	r2, #32
 800369e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	f043 0220 	orr.w	r2, r3, #32
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e020      	b.n	8003704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	0c1b      	lsrs	r3, r3, #16
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d10c      	bne.n	80036e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	43da      	mvns	r2, r3
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	4013      	ands	r3, r2
 80036d8:	b29b      	uxth	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	bf14      	ite	ne
 80036de:	2301      	movne	r3, #1
 80036e0:	2300      	moveq	r3, #0
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	e00b      	b.n	80036fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	43da      	mvns	r2, r3
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	4013      	ands	r3, r2
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	bf14      	ite	ne
 80036f8:	2301      	movne	r3, #1
 80036fa:	2300      	moveq	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d18d      	bne.n	800361e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003718:	e02d      	b.n	8003776 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 f8ce 	bl	80038bc <I2C_IsAcknowledgeFailed>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e02d      	b.n	8003786 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003730:	d021      	beq.n	8003776 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003732:	f7fe fe05 	bl	8002340 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	429a      	cmp	r2, r3
 8003740:	d302      	bcc.n	8003748 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d116      	bne.n	8003776 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2220      	movs	r2, #32
 8003752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f043 0220 	orr.w	r2, r3, #32
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e007      	b.n	8003786 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003780:	2b80      	cmp	r3, #128	; 0x80
 8003782:	d1ca      	bne.n	800371a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b084      	sub	sp, #16
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800379a:	e02d      	b.n	80037f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f000 f88d 	bl	80038bc <I2C_IsAcknowledgeFailed>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e02d      	b.n	8003808 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b2:	d021      	beq.n	80037f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b4:	f7fe fdc4 	bl	8002340 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d302      	bcc.n	80037ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d116      	bne.n	80037f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2220      	movs	r2, #32
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	f043 0220 	orr.w	r2, r3, #32
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e007      	b.n	8003808 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	f003 0304 	and.w	r3, r3, #4
 8003802:	2b04      	cmp	r3, #4
 8003804:	d1ca      	bne.n	800379c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800381c:	e042      	b.n	80038a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	f003 0310 	and.w	r3, r3, #16
 8003828:	2b10      	cmp	r3, #16
 800382a:	d119      	bne.n	8003860 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f06f 0210 	mvn.w	r2, #16
 8003834:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e029      	b.n	80038b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003860:	f7fe fd6e 	bl	8002340 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	429a      	cmp	r2, r3
 800386e:	d302      	bcc.n	8003876 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d116      	bne.n	80038a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2220      	movs	r2, #32
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	f043 0220 	orr.w	r2, r3, #32
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e007      	b.n	80038b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ae:	2b40      	cmp	r3, #64	; 0x40
 80038b0:	d1b5      	bne.n	800381e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038d2:	d11b      	bne.n	800390c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	f043 0204 	orr.w	r2, r3, #4
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e000      	b.n	800390e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
	...

0800391c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e267      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d075      	beq.n	8003a26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800393a:	4b88      	ldr	r3, [pc, #544]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 030c 	and.w	r3, r3, #12
 8003942:	2b04      	cmp	r3, #4
 8003944:	d00c      	beq.n	8003960 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003946:	4b85      	ldr	r3, [pc, #532]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800394e:	2b08      	cmp	r3, #8
 8003950:	d112      	bne.n	8003978 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003952:	4b82      	ldr	r3, [pc, #520]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800395a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800395e:	d10b      	bne.n	8003978 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003960:	4b7e      	ldr	r3, [pc, #504]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d05b      	beq.n	8003a24 <HAL_RCC_OscConfig+0x108>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d157      	bne.n	8003a24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e242      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003980:	d106      	bne.n	8003990 <HAL_RCC_OscConfig+0x74>
 8003982:	4b76      	ldr	r3, [pc, #472]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a75      	ldr	r2, [pc, #468]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	e01d      	b.n	80039cc <HAL_RCC_OscConfig+0xb0>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003998:	d10c      	bne.n	80039b4 <HAL_RCC_OscConfig+0x98>
 800399a:	4b70      	ldr	r3, [pc, #448]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a6f      	ldr	r2, [pc, #444]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 80039a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	4b6d      	ldr	r3, [pc, #436]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a6c      	ldr	r2, [pc, #432]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 80039ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	e00b      	b.n	80039cc <HAL_RCC_OscConfig+0xb0>
 80039b4:	4b69      	ldr	r3, [pc, #420]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a68      	ldr	r2, [pc, #416]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 80039ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039be:	6013      	str	r3, [r2, #0]
 80039c0:	4b66      	ldr	r3, [pc, #408]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a65      	ldr	r2, [pc, #404]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 80039c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d013      	beq.n	80039fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d4:	f7fe fcb4 	bl	8002340 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039dc:	f7fe fcb0 	bl	8002340 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b64      	cmp	r3, #100	; 0x64
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e207      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ee:	4b5b      	ldr	r3, [pc, #364]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0f0      	beq.n	80039dc <HAL_RCC_OscConfig+0xc0>
 80039fa:	e014      	b.n	8003a26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fc:	f7fe fca0 	bl	8002340 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a04:	f7fe fc9c 	bl	8002340 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b64      	cmp	r3, #100	; 0x64
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e1f3      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a16:	4b51      	ldr	r3, [pc, #324]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f0      	bne.n	8003a04 <HAL_RCC_OscConfig+0xe8>
 8003a22:	e000      	b.n	8003a26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d063      	beq.n	8003afa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a32:	4b4a      	ldr	r3, [pc, #296]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 030c 	and.w	r3, r3, #12
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00b      	beq.n	8003a56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a3e:	4b47      	ldr	r3, [pc, #284]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a46:	2b08      	cmp	r3, #8
 8003a48:	d11c      	bne.n	8003a84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a4a:	4b44      	ldr	r3, [pc, #272]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d116      	bne.n	8003a84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a56:	4b41      	ldr	r3, [pc, #260]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d005      	beq.n	8003a6e <HAL_RCC_OscConfig+0x152>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d001      	beq.n	8003a6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e1c7      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a6e:	4b3b      	ldr	r3, [pc, #236]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	4937      	ldr	r1, [pc, #220]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a82:	e03a      	b.n	8003afa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d020      	beq.n	8003ace <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a8c:	4b34      	ldr	r3, [pc, #208]	; (8003b60 <HAL_RCC_OscConfig+0x244>)
 8003a8e:	2201      	movs	r2, #1
 8003a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a92:	f7fe fc55 	bl	8002340 <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a9a:	f7fe fc51 	bl	8002340 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e1a8      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aac:	4b2b      	ldr	r3, [pc, #172]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0f0      	beq.n	8003a9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab8:	4b28      	ldr	r3, [pc, #160]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	4925      	ldr	r1, [pc, #148]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	600b      	str	r3, [r1, #0]
 8003acc:	e015      	b.n	8003afa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ace:	4b24      	ldr	r3, [pc, #144]	; (8003b60 <HAL_RCC_OscConfig+0x244>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad4:	f7fe fc34 	bl	8002340 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003adc:	f7fe fc30 	bl	8002340 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e187      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aee:	4b1b      	ldr	r3, [pc, #108]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1f0      	bne.n	8003adc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d036      	beq.n	8003b74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d016      	beq.n	8003b3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b0e:	4b15      	ldr	r3, [pc, #84]	; (8003b64 <HAL_RCC_OscConfig+0x248>)
 8003b10:	2201      	movs	r2, #1
 8003b12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b14:	f7fe fc14 	bl	8002340 <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b1c:	f7fe fc10 	bl	8002340 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e167      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b2e:	4b0b      	ldr	r3, [pc, #44]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0f0      	beq.n	8003b1c <HAL_RCC_OscConfig+0x200>
 8003b3a:	e01b      	b.n	8003b74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b3c:	4b09      	ldr	r3, [pc, #36]	; (8003b64 <HAL_RCC_OscConfig+0x248>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b42:	f7fe fbfd 	bl	8002340 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b48:	e00e      	b.n	8003b68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b4a:	f7fe fbf9 	bl	8002340 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d907      	bls.n	8003b68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e150      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	42470000 	.word	0x42470000
 8003b64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b68:	4b88      	ldr	r3, [pc, #544]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1ea      	bne.n	8003b4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 8097 	beq.w	8003cb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b82:	2300      	movs	r3, #0
 8003b84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b86:	4b81      	ldr	r3, [pc, #516]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10f      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b92:	2300      	movs	r3, #0
 8003b94:	60bb      	str	r3, [r7, #8]
 8003b96:	4b7d      	ldr	r3, [pc, #500]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	4a7c      	ldr	r2, [pc, #496]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ba2:	4b7a      	ldr	r3, [pc, #488]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003baa:	60bb      	str	r3, [r7, #8]
 8003bac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb2:	4b77      	ldr	r3, [pc, #476]	; (8003d90 <HAL_RCC_OscConfig+0x474>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d118      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bbe:	4b74      	ldr	r3, [pc, #464]	; (8003d90 <HAL_RCC_OscConfig+0x474>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a73      	ldr	r2, [pc, #460]	; (8003d90 <HAL_RCC_OscConfig+0x474>)
 8003bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bca:	f7fe fbb9 	bl	8002340 <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd0:	e008      	b.n	8003be4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd2:	f7fe fbb5 	bl	8002340 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e10c      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be4:	4b6a      	ldr	r3, [pc, #424]	; (8003d90 <HAL_RCC_OscConfig+0x474>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0f0      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d106      	bne.n	8003c06 <HAL_RCC_OscConfig+0x2ea>
 8003bf8:	4b64      	ldr	r3, [pc, #400]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfc:	4a63      	ldr	r2, [pc, #396]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003bfe:	f043 0301 	orr.w	r3, r3, #1
 8003c02:	6713      	str	r3, [r2, #112]	; 0x70
 8003c04:	e01c      	b.n	8003c40 <HAL_RCC_OscConfig+0x324>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	2b05      	cmp	r3, #5
 8003c0c:	d10c      	bne.n	8003c28 <HAL_RCC_OscConfig+0x30c>
 8003c0e:	4b5f      	ldr	r3, [pc, #380]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c12:	4a5e      	ldr	r2, [pc, #376]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003c14:	f043 0304 	orr.w	r3, r3, #4
 8003c18:	6713      	str	r3, [r2, #112]	; 0x70
 8003c1a:	4b5c      	ldr	r3, [pc, #368]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1e:	4a5b      	ldr	r2, [pc, #364]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	6713      	str	r3, [r2, #112]	; 0x70
 8003c26:	e00b      	b.n	8003c40 <HAL_RCC_OscConfig+0x324>
 8003c28:	4b58      	ldr	r3, [pc, #352]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2c:	4a57      	ldr	r2, [pc, #348]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003c2e:	f023 0301 	bic.w	r3, r3, #1
 8003c32:	6713      	str	r3, [r2, #112]	; 0x70
 8003c34:	4b55      	ldr	r3, [pc, #340]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c38:	4a54      	ldr	r2, [pc, #336]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003c3a:	f023 0304 	bic.w	r3, r3, #4
 8003c3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d015      	beq.n	8003c74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c48:	f7fe fb7a 	bl	8002340 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4e:	e00a      	b.n	8003c66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c50:	f7fe fb76 	bl	8002340 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e0cb      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c66:	4b49      	ldr	r3, [pc, #292]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0ee      	beq.n	8003c50 <HAL_RCC_OscConfig+0x334>
 8003c72:	e014      	b.n	8003c9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c74:	f7fe fb64 	bl	8002340 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c7a:	e00a      	b.n	8003c92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c7c:	f7fe fb60 	bl	8002340 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e0b5      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c92:	4b3e      	ldr	r3, [pc, #248]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1ee      	bne.n	8003c7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d105      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca4:	4b39      	ldr	r3, [pc, #228]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca8:	4a38      	ldr	r2, [pc, #224]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003caa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 80a1 	beq.w	8003dfc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cba:	4b34      	ldr	r3, [pc, #208]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d05c      	beq.n	8003d80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d141      	bne.n	8003d52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cce:	4b31      	ldr	r3, [pc, #196]	; (8003d94 <HAL_RCC_OscConfig+0x478>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd4:	f7fe fb34 	bl	8002340 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cdc:	f7fe fb30 	bl	8002340 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e087      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cee:	4b27      	ldr	r3, [pc, #156]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	69da      	ldr	r2, [r3, #28]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	019b      	lsls	r3, r3, #6
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d10:	085b      	lsrs	r3, r3, #1
 8003d12:	3b01      	subs	r3, #1
 8003d14:	041b      	lsls	r3, r3, #16
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	061b      	lsls	r3, r3, #24
 8003d1e:	491b      	ldr	r1, [pc, #108]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d24:	4b1b      	ldr	r3, [pc, #108]	; (8003d94 <HAL_RCC_OscConfig+0x478>)
 8003d26:	2201      	movs	r2, #1
 8003d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2a:	f7fe fb09 	bl	8002340 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d32:	f7fe fb05 	bl	8002340 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e05c      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d44:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0f0      	beq.n	8003d32 <HAL_RCC_OscConfig+0x416>
 8003d50:	e054      	b.n	8003dfc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d52:	4b10      	ldr	r3, [pc, #64]	; (8003d94 <HAL_RCC_OscConfig+0x478>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d58:	f7fe faf2 	bl	8002340 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d60:	f7fe faee 	bl	8002340 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e045      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d72:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f0      	bne.n	8003d60 <HAL_RCC_OscConfig+0x444>
 8003d7e:	e03d      	b.n	8003dfc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d107      	bne.n	8003d98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e038      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	40007000 	.word	0x40007000
 8003d94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d98:	4b1b      	ldr	r3, [pc, #108]	; (8003e08 <HAL_RCC_OscConfig+0x4ec>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d028      	beq.n	8003df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d121      	bne.n	8003df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d11a      	bne.n	8003df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dc8:	4013      	ands	r3, r2
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d111      	bne.n	8003df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dde:	085b      	lsrs	r3, r3, #1
 8003de0:	3b01      	subs	r3, #1
 8003de2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d107      	bne.n	8003df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d001      	beq.n	8003dfc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e000      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40023800 	.word	0x40023800

08003e0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e0cc      	b.n	8003fba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e20:	4b68      	ldr	r3, [pc, #416]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d90c      	bls.n	8003e48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e2e:	4b65      	ldr	r3, [pc, #404]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e36:	4b63      	ldr	r3, [pc, #396]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d001      	beq.n	8003e48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e0b8      	b.n	8003fba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d020      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d005      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e60:	4b59      	ldr	r3, [pc, #356]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	4a58      	ldr	r2, [pc, #352]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d005      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e78:	4b53      	ldr	r3, [pc, #332]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	4a52      	ldr	r2, [pc, #328]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e84:	4b50      	ldr	r3, [pc, #320]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	494d      	ldr	r1, [pc, #308]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d044      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d107      	bne.n	8003eba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eaa:	4b47      	ldr	r3, [pc, #284]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d119      	bne.n	8003eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e07f      	b.n	8003fba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d003      	beq.n	8003eca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ec6:	2b03      	cmp	r3, #3
 8003ec8:	d107      	bne.n	8003eda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eca:	4b3f      	ldr	r3, [pc, #252]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d109      	bne.n	8003eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e06f      	b.n	8003fba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eda:	4b3b      	ldr	r3, [pc, #236]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e067      	b.n	8003fba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eea:	4b37      	ldr	r3, [pc, #220]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f023 0203 	bic.w	r2, r3, #3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	4934      	ldr	r1, [pc, #208]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003efc:	f7fe fa20 	bl	8002340 <HAL_GetTick>
 8003f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f02:	e00a      	b.n	8003f1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f04:	f7fe fa1c 	bl	8002340 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e04f      	b.n	8003fba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f1a:	4b2b      	ldr	r3, [pc, #172]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 020c 	and.w	r2, r3, #12
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d1eb      	bne.n	8003f04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f2c:	4b25      	ldr	r3, [pc, #148]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0307 	and.w	r3, r3, #7
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d20c      	bcs.n	8003f54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f3a:	4b22      	ldr	r3, [pc, #136]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f42:	4b20      	ldr	r3, [pc, #128]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d001      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e032      	b.n	8003fba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d008      	beq.n	8003f72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f60:	4b19      	ldr	r3, [pc, #100]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	4916      	ldr	r1, [pc, #88]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d009      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f7e:	4b12      	ldr	r3, [pc, #72]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	490e      	ldr	r1, [pc, #56]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f92:	f000 f821 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 8003f96:	4602      	mov	r2, r0
 8003f98:	4b0b      	ldr	r3, [pc, #44]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	091b      	lsrs	r3, r3, #4
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	490a      	ldr	r1, [pc, #40]	; (8003fcc <HAL_RCC_ClockConfig+0x1c0>)
 8003fa4:	5ccb      	ldrb	r3, [r1, r3]
 8003fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8003faa:	4a09      	ldr	r2, [pc, #36]	; (8003fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fae:	4b09      	ldr	r3, [pc, #36]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fe f980 	bl	80022b8 <HAL_InitTick>

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40023c00 	.word	0x40023c00
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	080091f0 	.word	0x080091f0
 8003fd0:	20000030 	.word	0x20000030
 8003fd4:	20000034 	.word	0x20000034

08003fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fdc:	b094      	sub	sp, #80	; 0x50
 8003fde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	647b      	str	r3, [r7, #68]	; 0x44
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fe8:	2300      	movs	r3, #0
 8003fea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003fec:	2300      	movs	r3, #0
 8003fee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ff0:	4b79      	ldr	r3, [pc, #484]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f003 030c 	and.w	r3, r3, #12
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d00d      	beq.n	8004018 <HAL_RCC_GetSysClockFreq+0x40>
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	f200 80e1 	bhi.w	80041c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004002:	2b00      	cmp	r3, #0
 8004004:	d002      	beq.n	800400c <HAL_RCC_GetSysClockFreq+0x34>
 8004006:	2b04      	cmp	r3, #4
 8004008:	d003      	beq.n	8004012 <HAL_RCC_GetSysClockFreq+0x3a>
 800400a:	e0db      	b.n	80041c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800400c:	4b73      	ldr	r3, [pc, #460]	; (80041dc <HAL_RCC_GetSysClockFreq+0x204>)
 800400e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004010:	e0db      	b.n	80041ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004012:	4b73      	ldr	r3, [pc, #460]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004014:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004016:	e0d8      	b.n	80041ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004018:	4b6f      	ldr	r3, [pc, #444]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004020:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004022:	4b6d      	ldr	r3, [pc, #436]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d063      	beq.n	80040f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800402e:	4b6a      	ldr	r3, [pc, #424]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	099b      	lsrs	r3, r3, #6
 8004034:	2200      	movs	r2, #0
 8004036:	63bb      	str	r3, [r7, #56]	; 0x38
 8004038:	63fa      	str	r2, [r7, #60]	; 0x3c
 800403a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004040:	633b      	str	r3, [r7, #48]	; 0x30
 8004042:	2300      	movs	r3, #0
 8004044:	637b      	str	r3, [r7, #52]	; 0x34
 8004046:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800404a:	4622      	mov	r2, r4
 800404c:	462b      	mov	r3, r5
 800404e:	f04f 0000 	mov.w	r0, #0
 8004052:	f04f 0100 	mov.w	r1, #0
 8004056:	0159      	lsls	r1, r3, #5
 8004058:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800405c:	0150      	lsls	r0, r2, #5
 800405e:	4602      	mov	r2, r0
 8004060:	460b      	mov	r3, r1
 8004062:	4621      	mov	r1, r4
 8004064:	1a51      	subs	r1, r2, r1
 8004066:	6139      	str	r1, [r7, #16]
 8004068:	4629      	mov	r1, r5
 800406a:	eb63 0301 	sbc.w	r3, r3, r1
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	f04f 0300 	mov.w	r3, #0
 8004078:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800407c:	4659      	mov	r1, fp
 800407e:	018b      	lsls	r3, r1, #6
 8004080:	4651      	mov	r1, sl
 8004082:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004086:	4651      	mov	r1, sl
 8004088:	018a      	lsls	r2, r1, #6
 800408a:	4651      	mov	r1, sl
 800408c:	ebb2 0801 	subs.w	r8, r2, r1
 8004090:	4659      	mov	r1, fp
 8004092:	eb63 0901 	sbc.w	r9, r3, r1
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	f04f 0300 	mov.w	r3, #0
 800409e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040aa:	4690      	mov	r8, r2
 80040ac:	4699      	mov	r9, r3
 80040ae:	4623      	mov	r3, r4
 80040b0:	eb18 0303 	adds.w	r3, r8, r3
 80040b4:	60bb      	str	r3, [r7, #8]
 80040b6:	462b      	mov	r3, r5
 80040b8:	eb49 0303 	adc.w	r3, r9, r3
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	f04f 0300 	mov.w	r3, #0
 80040c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040ca:	4629      	mov	r1, r5
 80040cc:	024b      	lsls	r3, r1, #9
 80040ce:	4621      	mov	r1, r4
 80040d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040d4:	4621      	mov	r1, r4
 80040d6:	024a      	lsls	r2, r1, #9
 80040d8:	4610      	mov	r0, r2
 80040da:	4619      	mov	r1, r3
 80040dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040de:	2200      	movs	r2, #0
 80040e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80040e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040e8:	f7fc fdb6 	bl	8000c58 <__aeabi_uldivmod>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4613      	mov	r3, r2
 80040f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040f4:	e058      	b.n	80041a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040f6:	4b38      	ldr	r3, [pc, #224]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	099b      	lsrs	r3, r3, #6
 80040fc:	2200      	movs	r2, #0
 80040fe:	4618      	mov	r0, r3
 8004100:	4611      	mov	r1, r2
 8004102:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004106:	623b      	str	r3, [r7, #32]
 8004108:	2300      	movs	r3, #0
 800410a:	627b      	str	r3, [r7, #36]	; 0x24
 800410c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004110:	4642      	mov	r2, r8
 8004112:	464b      	mov	r3, r9
 8004114:	f04f 0000 	mov.w	r0, #0
 8004118:	f04f 0100 	mov.w	r1, #0
 800411c:	0159      	lsls	r1, r3, #5
 800411e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004122:	0150      	lsls	r0, r2, #5
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	4641      	mov	r1, r8
 800412a:	ebb2 0a01 	subs.w	sl, r2, r1
 800412e:	4649      	mov	r1, r9
 8004130:	eb63 0b01 	sbc.w	fp, r3, r1
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004140:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004144:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004148:	ebb2 040a 	subs.w	r4, r2, sl
 800414c:	eb63 050b 	sbc.w	r5, r3, fp
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	f04f 0300 	mov.w	r3, #0
 8004158:	00eb      	lsls	r3, r5, #3
 800415a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800415e:	00e2      	lsls	r2, r4, #3
 8004160:	4614      	mov	r4, r2
 8004162:	461d      	mov	r5, r3
 8004164:	4643      	mov	r3, r8
 8004166:	18e3      	adds	r3, r4, r3
 8004168:	603b      	str	r3, [r7, #0]
 800416a:	464b      	mov	r3, r9
 800416c:	eb45 0303 	adc.w	r3, r5, r3
 8004170:	607b      	str	r3, [r7, #4]
 8004172:	f04f 0200 	mov.w	r2, #0
 8004176:	f04f 0300 	mov.w	r3, #0
 800417a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800417e:	4629      	mov	r1, r5
 8004180:	028b      	lsls	r3, r1, #10
 8004182:	4621      	mov	r1, r4
 8004184:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004188:	4621      	mov	r1, r4
 800418a:	028a      	lsls	r2, r1, #10
 800418c:	4610      	mov	r0, r2
 800418e:	4619      	mov	r1, r3
 8004190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004192:	2200      	movs	r2, #0
 8004194:	61bb      	str	r3, [r7, #24]
 8004196:	61fa      	str	r2, [r7, #28]
 8004198:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800419c:	f7fc fd5c 	bl	8000c58 <__aeabi_uldivmod>
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	4613      	mov	r3, r2
 80041a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041a8:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	0c1b      	lsrs	r3, r3, #16
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	3301      	adds	r3, #1
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80041b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041c2:	e002      	b.n	80041ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041c4:	4b05      	ldr	r3, [pc, #20]	; (80041dc <HAL_RCC_GetSysClockFreq+0x204>)
 80041c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3750      	adds	r7, #80	; 0x50
 80041d0:	46bd      	mov	sp, r7
 80041d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041d6:	bf00      	nop
 80041d8:	40023800 	.word	0x40023800
 80041dc:	00f42400 	.word	0x00f42400
 80041e0:	007a1200 	.word	0x007a1200

080041e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041e8:	4b03      	ldr	r3, [pc, #12]	; (80041f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80041ea:	681b      	ldr	r3, [r3, #0]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	20000030 	.word	0x20000030

080041fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004200:	f7ff fff0 	bl	80041e4 <HAL_RCC_GetHCLKFreq>
 8004204:	4602      	mov	r2, r0
 8004206:	4b05      	ldr	r3, [pc, #20]	; (800421c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	0a9b      	lsrs	r3, r3, #10
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	4903      	ldr	r1, [pc, #12]	; (8004220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004212:	5ccb      	ldrb	r3, [r1, r3]
 8004214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004218:	4618      	mov	r0, r3
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40023800 	.word	0x40023800
 8004220:	08009200 	.word	0x08009200

08004224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004228:	f7ff ffdc 	bl	80041e4 <HAL_RCC_GetHCLKFreq>
 800422c:	4602      	mov	r2, r0
 800422e:	4b05      	ldr	r3, [pc, #20]	; (8004244 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	0b5b      	lsrs	r3, r3, #13
 8004234:	f003 0307 	and.w	r3, r3, #7
 8004238:	4903      	ldr	r1, [pc, #12]	; (8004248 <HAL_RCC_GetPCLK2Freq+0x24>)
 800423a:	5ccb      	ldrb	r3, [r1, r3]
 800423c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004240:	4618      	mov	r0, r3
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40023800 	.word	0x40023800
 8004248:	08009200 	.word	0x08009200

0800424c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e041      	b.n	80042e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d106      	bne.n	8004278 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7fd ff2a 	bl	80020cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	3304      	adds	r3, #4
 8004288:	4619      	mov	r1, r3
 800428a:	4610      	mov	r0, r2
 800428c:	f000 f95e 	bl	800454c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b082      	sub	sp, #8
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d122      	bne.n	8004346 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b02      	cmp	r3, #2
 800430c:	d11b      	bne.n	8004346 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f06f 0202 	mvn.w	r2, #2
 8004316:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	f003 0303 	and.w	r3, r3, #3
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 f8ee 	bl	800450e <HAL_TIM_IC_CaptureCallback>
 8004332:	e005      	b.n	8004340 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f8e0 	bl	80044fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f8f1 	bl	8004522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b04      	cmp	r3, #4
 8004352:	d122      	bne.n	800439a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f003 0304 	and.w	r3, r3, #4
 800435e:	2b04      	cmp	r3, #4
 8004360:	d11b      	bne.n	800439a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f06f 0204 	mvn.w	r2, #4
 800436a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800437c:	2b00      	cmp	r3, #0
 800437e:	d003      	beq.n	8004388 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f8c4 	bl	800450e <HAL_TIM_IC_CaptureCallback>
 8004386:	e005      	b.n	8004394 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f8b6 	bl	80044fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f8c7 	bl	8004522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d122      	bne.n	80043ee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b08      	cmp	r3, #8
 80043b4:	d11b      	bne.n	80043ee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f06f 0208 	mvn.w	r2, #8
 80043be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2204      	movs	r2, #4
 80043c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	69db      	ldr	r3, [r3, #28]
 80043cc:	f003 0303 	and.w	r3, r3, #3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f89a 	bl	800450e <HAL_TIM_IC_CaptureCallback>
 80043da:	e005      	b.n	80043e8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f88c 	bl	80044fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f89d 	bl	8004522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	f003 0310 	and.w	r3, r3, #16
 80043f8:	2b10      	cmp	r3, #16
 80043fa:	d122      	bne.n	8004442 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f003 0310 	and.w	r3, r3, #16
 8004406:	2b10      	cmp	r3, #16
 8004408:	d11b      	bne.n	8004442 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f06f 0210 	mvn.w	r2, #16
 8004412:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2208      	movs	r2, #8
 8004418:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004424:	2b00      	cmp	r3, #0
 8004426:	d003      	beq.n	8004430 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 f870 	bl	800450e <HAL_TIM_IC_CaptureCallback>
 800442e:	e005      	b.n	800443c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f862 	bl	80044fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f873 	bl	8004522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b01      	cmp	r3, #1
 800444e:	d10e      	bne.n	800446e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b01      	cmp	r3, #1
 800445c:	d107      	bne.n	800446e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f06f 0201 	mvn.w	r2, #1
 8004466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f7fd fb11 	bl	8001a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004478:	2b80      	cmp	r3, #128	; 0x80
 800447a:	d10e      	bne.n	800449a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004486:	2b80      	cmp	r3, #128	; 0x80
 8004488:	d107      	bne.n	800449a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f8e3 	bl	8004660 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a4:	2b40      	cmp	r3, #64	; 0x40
 80044a6:	d10e      	bne.n	80044c6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b2:	2b40      	cmp	r3, #64	; 0x40
 80044b4:	d107      	bne.n	80044c6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f838 	bl	8004536 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	f003 0320 	and.w	r3, r3, #32
 80044d0:	2b20      	cmp	r3, #32
 80044d2:	d10e      	bne.n	80044f2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f003 0320 	and.w	r3, r3, #32
 80044de:	2b20      	cmp	r3, #32
 80044e0:	d107      	bne.n	80044f2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f06f 0220 	mvn.w	r2, #32
 80044ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f8ad 	bl	800464c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044f2:	bf00      	nop
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b083      	sub	sp, #12
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004516:	bf00      	nop
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004522:	b480      	push	{r7}
 8004524:	b083      	sub	sp, #12
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
	...

0800454c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a34      	ldr	r2, [pc, #208]	; (8004630 <TIM_Base_SetConfig+0xe4>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d00f      	beq.n	8004584 <TIM_Base_SetConfig+0x38>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800456a:	d00b      	beq.n	8004584 <TIM_Base_SetConfig+0x38>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a31      	ldr	r2, [pc, #196]	; (8004634 <TIM_Base_SetConfig+0xe8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d007      	beq.n	8004584 <TIM_Base_SetConfig+0x38>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a30      	ldr	r2, [pc, #192]	; (8004638 <TIM_Base_SetConfig+0xec>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d003      	beq.n	8004584 <TIM_Base_SetConfig+0x38>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a2f      	ldr	r2, [pc, #188]	; (800463c <TIM_Base_SetConfig+0xf0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d108      	bne.n	8004596 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	4313      	orrs	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a25      	ldr	r2, [pc, #148]	; (8004630 <TIM_Base_SetConfig+0xe4>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d01b      	beq.n	80045d6 <TIM_Base_SetConfig+0x8a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a4:	d017      	beq.n	80045d6 <TIM_Base_SetConfig+0x8a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a22      	ldr	r2, [pc, #136]	; (8004634 <TIM_Base_SetConfig+0xe8>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d013      	beq.n	80045d6 <TIM_Base_SetConfig+0x8a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a21      	ldr	r2, [pc, #132]	; (8004638 <TIM_Base_SetConfig+0xec>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00f      	beq.n	80045d6 <TIM_Base_SetConfig+0x8a>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a20      	ldr	r2, [pc, #128]	; (800463c <TIM_Base_SetConfig+0xf0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d00b      	beq.n	80045d6 <TIM_Base_SetConfig+0x8a>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a1f      	ldr	r2, [pc, #124]	; (8004640 <TIM_Base_SetConfig+0xf4>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d007      	beq.n	80045d6 <TIM_Base_SetConfig+0x8a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a1e      	ldr	r2, [pc, #120]	; (8004644 <TIM_Base_SetConfig+0xf8>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d003      	beq.n	80045d6 <TIM_Base_SetConfig+0x8a>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a1d      	ldr	r2, [pc, #116]	; (8004648 <TIM_Base_SetConfig+0xfc>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d108      	bne.n	80045e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a08      	ldr	r2, [pc, #32]	; (8004630 <TIM_Base_SetConfig+0xe4>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d103      	bne.n	800461c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	615a      	str	r2, [r3, #20]
}
 8004622:	bf00      	nop
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	40010000 	.word	0x40010000
 8004634:	40000400 	.word	0x40000400
 8004638:	40000800 	.word	0x40000800
 800463c:	40000c00 	.word	0x40000c00
 8004640:	40014000 	.word	0x40014000
 8004644:	40014400 	.word	0x40014400
 8004648:	40014800 	.word	0x40014800

0800464c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e03f      	b.n	8004706 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fd fd68 	bl	8002170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2224      	movs	r2, #36	; 0x24
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f929 	bl	8004910 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	691a      	ldr	r2, [r3, #16]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	695a      	ldr	r2, [r3, #20]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68da      	ldr	r2, [r3, #12]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2220      	movs	r2, #32
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2220      	movs	r2, #32
 8004700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b08a      	sub	sp, #40	; 0x28
 8004712:	af02      	add	r7, sp, #8
 8004714:	60f8      	str	r0, [r7, #12]
 8004716:	60b9      	str	r1, [r7, #8]
 8004718:	603b      	str	r3, [r7, #0]
 800471a:	4613      	mov	r3, r2
 800471c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800471e:	2300      	movs	r3, #0
 8004720:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b20      	cmp	r3, #32
 800472c:	d17c      	bne.n	8004828 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d002      	beq.n	800473a <HAL_UART_Transmit+0x2c>
 8004734:	88fb      	ldrh	r3, [r7, #6]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e075      	b.n	800482a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <HAL_UART_Transmit+0x3e>
 8004748:	2302      	movs	r3, #2
 800474a:	e06e      	b.n	800482a <HAL_UART_Transmit+0x11c>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2221      	movs	r2, #33	; 0x21
 800475e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004762:	f7fd fded 	bl	8002340 <HAL_GetTick>
 8004766:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	88fa      	ldrh	r2, [r7, #6]
 800476c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	88fa      	ldrh	r2, [r7, #6]
 8004772:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800477c:	d108      	bne.n	8004790 <HAL_UART_Transmit+0x82>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d104      	bne.n	8004790 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004786:	2300      	movs	r3, #0
 8004788:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	61bb      	str	r3, [r7, #24]
 800478e:	e003      	b.n	8004798 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004794:	2300      	movs	r3, #0
 8004796:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80047a0:	e02a      	b.n	80047f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	2200      	movs	r2, #0
 80047aa:	2180      	movs	r1, #128	; 0x80
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f000 f840 	bl	8004832 <UART_WaitOnFlagUntilTimeout>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e036      	b.n	800482a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10b      	bne.n	80047da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	461a      	mov	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	3302      	adds	r3, #2
 80047d6:	61bb      	str	r3, [r7, #24]
 80047d8:	e007      	b.n	80047ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	781a      	ldrb	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	3301      	adds	r3, #1
 80047e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1cf      	bne.n	80047a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	2200      	movs	r2, #0
 800480a:	2140      	movs	r1, #64	; 0x40
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 f810 	bl	8004832 <UART_WaitOnFlagUntilTimeout>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e006      	b.n	800482a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2220      	movs	r2, #32
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004824:	2300      	movs	r3, #0
 8004826:	e000      	b.n	800482a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004828:	2302      	movs	r3, #2
  }
}
 800482a:	4618      	mov	r0, r3
 800482c:	3720      	adds	r7, #32
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b090      	sub	sp, #64	; 0x40
 8004836:	af00      	add	r7, sp, #0
 8004838:	60f8      	str	r0, [r7, #12]
 800483a:	60b9      	str	r1, [r7, #8]
 800483c:	603b      	str	r3, [r7, #0]
 800483e:	4613      	mov	r3, r2
 8004840:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004842:	e050      	b.n	80048e6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484a:	d04c      	beq.n	80048e6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800484c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800484e:	2b00      	cmp	r3, #0
 8004850:	d007      	beq.n	8004862 <UART_WaitOnFlagUntilTimeout+0x30>
 8004852:	f7fd fd75 	bl	8002340 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800485e:	429a      	cmp	r2, r3
 8004860:	d241      	bcs.n	80048e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	330c      	adds	r3, #12
 8004868:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486c:	e853 3f00 	ldrex	r3, [r3]
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004878:	63fb      	str	r3, [r7, #60]	; 0x3c
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	330c      	adds	r3, #12
 8004880:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004882:	637a      	str	r2, [r7, #52]	; 0x34
 8004884:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004886:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004888:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800488a:	e841 2300 	strex	r3, r2, [r1]
 800488e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1e5      	bne.n	8004862 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3314      	adds	r3, #20
 800489c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	e853 3f00 	ldrex	r3, [r3]
 80048a4:	613b      	str	r3, [r7, #16]
   return(result);
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	f023 0301 	bic.w	r3, r3, #1
 80048ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3314      	adds	r3, #20
 80048b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048b6:	623a      	str	r2, [r7, #32]
 80048b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ba:	69f9      	ldr	r1, [r7, #28]
 80048bc:	6a3a      	ldr	r2, [r7, #32]
 80048be:	e841 2300 	strex	r3, r2, [r1]
 80048c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1e5      	bne.n	8004896 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e00f      	b.n	8004906 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	4013      	ands	r3, r2
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	bf0c      	ite	eq
 80048f6:	2301      	moveq	r3, #1
 80048f8:	2300      	movne	r3, #0
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	461a      	mov	r2, r3
 80048fe:	79fb      	ldrb	r3, [r7, #7]
 8004900:	429a      	cmp	r2, r3
 8004902:	d09f      	beq.n	8004844 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3740      	adds	r7, #64	; 0x40
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
	...

08004910 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004914:	b0c0      	sub	sp, #256	; 0x100
 8004916:	af00      	add	r7, sp, #0
 8004918:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800491c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492c:	68d9      	ldr	r1, [r3, #12]
 800492e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	ea40 0301 	orr.w	r3, r0, r1
 8004938:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800493a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493e:	689a      	ldr	r2, [r3, #8]
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	431a      	orrs	r2, r3
 8004948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	431a      	orrs	r2, r3
 8004950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800495c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004968:	f021 010c 	bic.w	r1, r1, #12
 800496c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004976:	430b      	orrs	r3, r1
 8004978:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800497a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800498a:	6999      	ldr	r1, [r3, #24]
 800498c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	ea40 0301 	orr.w	r3, r0, r1
 8004996:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	4b8f      	ldr	r3, [pc, #572]	; (8004bdc <UART_SetConfig+0x2cc>)
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d005      	beq.n	80049b0 <UART_SetConfig+0xa0>
 80049a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	4b8d      	ldr	r3, [pc, #564]	; (8004be0 <UART_SetConfig+0x2d0>)
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d104      	bne.n	80049ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049b0:	f7ff fc38 	bl	8004224 <HAL_RCC_GetPCLK2Freq>
 80049b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80049b8:	e003      	b.n	80049c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049ba:	f7ff fc1f 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 80049be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049cc:	f040 810c 	bne.w	8004be8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049d4:	2200      	movs	r2, #0
 80049d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80049da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80049de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80049e2:	4622      	mov	r2, r4
 80049e4:	462b      	mov	r3, r5
 80049e6:	1891      	adds	r1, r2, r2
 80049e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80049ea:	415b      	adcs	r3, r3
 80049ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049f2:	4621      	mov	r1, r4
 80049f4:	eb12 0801 	adds.w	r8, r2, r1
 80049f8:	4629      	mov	r1, r5
 80049fa:	eb43 0901 	adc.w	r9, r3, r1
 80049fe:	f04f 0200 	mov.w	r2, #0
 8004a02:	f04f 0300 	mov.w	r3, #0
 8004a06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a12:	4690      	mov	r8, r2
 8004a14:	4699      	mov	r9, r3
 8004a16:	4623      	mov	r3, r4
 8004a18:	eb18 0303 	adds.w	r3, r8, r3
 8004a1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a20:	462b      	mov	r3, r5
 8004a22:	eb49 0303 	adc.w	r3, r9, r3
 8004a26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a36:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a3e:	460b      	mov	r3, r1
 8004a40:	18db      	adds	r3, r3, r3
 8004a42:	653b      	str	r3, [r7, #80]	; 0x50
 8004a44:	4613      	mov	r3, r2
 8004a46:	eb42 0303 	adc.w	r3, r2, r3
 8004a4a:	657b      	str	r3, [r7, #84]	; 0x54
 8004a4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a54:	f7fc f900 	bl	8000c58 <__aeabi_uldivmod>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4b61      	ldr	r3, [pc, #388]	; (8004be4 <UART_SetConfig+0x2d4>)
 8004a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a62:	095b      	lsrs	r3, r3, #5
 8004a64:	011c      	lsls	r4, r3, #4
 8004a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a70:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a78:	4642      	mov	r2, r8
 8004a7a:	464b      	mov	r3, r9
 8004a7c:	1891      	adds	r1, r2, r2
 8004a7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a80:	415b      	adcs	r3, r3
 8004a82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a88:	4641      	mov	r1, r8
 8004a8a:	eb12 0a01 	adds.w	sl, r2, r1
 8004a8e:	4649      	mov	r1, r9
 8004a90:	eb43 0b01 	adc.w	fp, r3, r1
 8004a94:	f04f 0200 	mov.w	r2, #0
 8004a98:	f04f 0300 	mov.w	r3, #0
 8004a9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004aa0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004aa4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004aa8:	4692      	mov	sl, r2
 8004aaa:	469b      	mov	fp, r3
 8004aac:	4643      	mov	r3, r8
 8004aae:	eb1a 0303 	adds.w	r3, sl, r3
 8004ab2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ab6:	464b      	mov	r3, r9
 8004ab8:	eb4b 0303 	adc.w	r3, fp, r3
 8004abc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004acc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ad0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	18db      	adds	r3, r3, r3
 8004ad8:	643b      	str	r3, [r7, #64]	; 0x40
 8004ada:	4613      	mov	r3, r2
 8004adc:	eb42 0303 	adc.w	r3, r2, r3
 8004ae0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ae2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ae6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004aea:	f7fc f8b5 	bl	8000c58 <__aeabi_uldivmod>
 8004aee:	4602      	mov	r2, r0
 8004af0:	460b      	mov	r3, r1
 8004af2:	4611      	mov	r1, r2
 8004af4:	4b3b      	ldr	r3, [pc, #236]	; (8004be4 <UART_SetConfig+0x2d4>)
 8004af6:	fba3 2301 	umull	r2, r3, r3, r1
 8004afa:	095b      	lsrs	r3, r3, #5
 8004afc:	2264      	movs	r2, #100	; 0x64
 8004afe:	fb02 f303 	mul.w	r3, r2, r3
 8004b02:	1acb      	subs	r3, r1, r3
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b0a:	4b36      	ldr	r3, [pc, #216]	; (8004be4 <UART_SetConfig+0x2d4>)
 8004b0c:	fba3 2302 	umull	r2, r3, r3, r2
 8004b10:	095b      	lsrs	r3, r3, #5
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b18:	441c      	add	r4, r3
 8004b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b24:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b2c:	4642      	mov	r2, r8
 8004b2e:	464b      	mov	r3, r9
 8004b30:	1891      	adds	r1, r2, r2
 8004b32:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b34:	415b      	adcs	r3, r3
 8004b36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b3c:	4641      	mov	r1, r8
 8004b3e:	1851      	adds	r1, r2, r1
 8004b40:	6339      	str	r1, [r7, #48]	; 0x30
 8004b42:	4649      	mov	r1, r9
 8004b44:	414b      	adcs	r3, r1
 8004b46:	637b      	str	r3, [r7, #52]	; 0x34
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b54:	4659      	mov	r1, fp
 8004b56:	00cb      	lsls	r3, r1, #3
 8004b58:	4651      	mov	r1, sl
 8004b5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b5e:	4651      	mov	r1, sl
 8004b60:	00ca      	lsls	r2, r1, #3
 8004b62:	4610      	mov	r0, r2
 8004b64:	4619      	mov	r1, r3
 8004b66:	4603      	mov	r3, r0
 8004b68:	4642      	mov	r2, r8
 8004b6a:	189b      	adds	r3, r3, r2
 8004b6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b70:	464b      	mov	r3, r9
 8004b72:	460a      	mov	r2, r1
 8004b74:	eb42 0303 	adc.w	r3, r2, r3
 8004b78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b88:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b90:	460b      	mov	r3, r1
 8004b92:	18db      	adds	r3, r3, r3
 8004b94:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b96:	4613      	mov	r3, r2
 8004b98:	eb42 0303 	adc.w	r3, r2, r3
 8004b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ba2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ba6:	f7fc f857 	bl	8000c58 <__aeabi_uldivmod>
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	4b0d      	ldr	r3, [pc, #52]	; (8004be4 <UART_SetConfig+0x2d4>)
 8004bb0:	fba3 1302 	umull	r1, r3, r3, r2
 8004bb4:	095b      	lsrs	r3, r3, #5
 8004bb6:	2164      	movs	r1, #100	; 0x64
 8004bb8:	fb01 f303 	mul.w	r3, r1, r3
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	3332      	adds	r3, #50	; 0x32
 8004bc2:	4a08      	ldr	r2, [pc, #32]	; (8004be4 <UART_SetConfig+0x2d4>)
 8004bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc8:	095b      	lsrs	r3, r3, #5
 8004bca:	f003 0207 	and.w	r2, r3, #7
 8004bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4422      	add	r2, r4
 8004bd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bd8:	e105      	b.n	8004de6 <UART_SetConfig+0x4d6>
 8004bda:	bf00      	nop
 8004bdc:	40011000 	.word	0x40011000
 8004be0:	40011400 	.word	0x40011400
 8004be4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004be8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bec:	2200      	movs	r2, #0
 8004bee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bf2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004bf6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004bfa:	4642      	mov	r2, r8
 8004bfc:	464b      	mov	r3, r9
 8004bfe:	1891      	adds	r1, r2, r2
 8004c00:	6239      	str	r1, [r7, #32]
 8004c02:	415b      	adcs	r3, r3
 8004c04:	627b      	str	r3, [r7, #36]	; 0x24
 8004c06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c0a:	4641      	mov	r1, r8
 8004c0c:	1854      	adds	r4, r2, r1
 8004c0e:	4649      	mov	r1, r9
 8004c10:	eb43 0501 	adc.w	r5, r3, r1
 8004c14:	f04f 0200 	mov.w	r2, #0
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	00eb      	lsls	r3, r5, #3
 8004c1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c22:	00e2      	lsls	r2, r4, #3
 8004c24:	4614      	mov	r4, r2
 8004c26:	461d      	mov	r5, r3
 8004c28:	4643      	mov	r3, r8
 8004c2a:	18e3      	adds	r3, r4, r3
 8004c2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c30:	464b      	mov	r3, r9
 8004c32:	eb45 0303 	adc.w	r3, r5, r3
 8004c36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	f04f 0300 	mov.w	r3, #0
 8004c52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c56:	4629      	mov	r1, r5
 8004c58:	008b      	lsls	r3, r1, #2
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c60:	4621      	mov	r1, r4
 8004c62:	008a      	lsls	r2, r1, #2
 8004c64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c68:	f7fb fff6 	bl	8000c58 <__aeabi_uldivmod>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	4b60      	ldr	r3, [pc, #384]	; (8004df4 <UART_SetConfig+0x4e4>)
 8004c72:	fba3 2302 	umull	r2, r3, r3, r2
 8004c76:	095b      	lsrs	r3, r3, #5
 8004c78:	011c      	lsls	r4, r3, #4
 8004c7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c8c:	4642      	mov	r2, r8
 8004c8e:	464b      	mov	r3, r9
 8004c90:	1891      	adds	r1, r2, r2
 8004c92:	61b9      	str	r1, [r7, #24]
 8004c94:	415b      	adcs	r3, r3
 8004c96:	61fb      	str	r3, [r7, #28]
 8004c98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c9c:	4641      	mov	r1, r8
 8004c9e:	1851      	adds	r1, r2, r1
 8004ca0:	6139      	str	r1, [r7, #16]
 8004ca2:	4649      	mov	r1, r9
 8004ca4:	414b      	adcs	r3, r1
 8004ca6:	617b      	str	r3, [r7, #20]
 8004ca8:	f04f 0200 	mov.w	r2, #0
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cb4:	4659      	mov	r1, fp
 8004cb6:	00cb      	lsls	r3, r1, #3
 8004cb8:	4651      	mov	r1, sl
 8004cba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cbe:	4651      	mov	r1, sl
 8004cc0:	00ca      	lsls	r2, r1, #3
 8004cc2:	4610      	mov	r0, r2
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	4642      	mov	r2, r8
 8004cca:	189b      	adds	r3, r3, r2
 8004ccc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cd0:	464b      	mov	r3, r9
 8004cd2:	460a      	mov	r2, r1
 8004cd4:	eb42 0303 	adc.w	r3, r2, r3
 8004cd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ce6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ce8:	f04f 0200 	mov.w	r2, #0
 8004cec:	f04f 0300 	mov.w	r3, #0
 8004cf0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004cf4:	4649      	mov	r1, r9
 8004cf6:	008b      	lsls	r3, r1, #2
 8004cf8:	4641      	mov	r1, r8
 8004cfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cfe:	4641      	mov	r1, r8
 8004d00:	008a      	lsls	r2, r1, #2
 8004d02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d06:	f7fb ffa7 	bl	8000c58 <__aeabi_uldivmod>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	4b39      	ldr	r3, [pc, #228]	; (8004df4 <UART_SetConfig+0x4e4>)
 8004d10:	fba3 1302 	umull	r1, r3, r3, r2
 8004d14:	095b      	lsrs	r3, r3, #5
 8004d16:	2164      	movs	r1, #100	; 0x64
 8004d18:	fb01 f303 	mul.w	r3, r1, r3
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	011b      	lsls	r3, r3, #4
 8004d20:	3332      	adds	r3, #50	; 0x32
 8004d22:	4a34      	ldr	r2, [pc, #208]	; (8004df4 <UART_SetConfig+0x4e4>)
 8004d24:	fba2 2303 	umull	r2, r3, r2, r3
 8004d28:	095b      	lsrs	r3, r3, #5
 8004d2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d2e:	441c      	add	r4, r3
 8004d30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d34:	2200      	movs	r2, #0
 8004d36:	673b      	str	r3, [r7, #112]	; 0x70
 8004d38:	677a      	str	r2, [r7, #116]	; 0x74
 8004d3a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d3e:	4642      	mov	r2, r8
 8004d40:	464b      	mov	r3, r9
 8004d42:	1891      	adds	r1, r2, r2
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	415b      	adcs	r3, r3
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d4e:	4641      	mov	r1, r8
 8004d50:	1851      	adds	r1, r2, r1
 8004d52:	6039      	str	r1, [r7, #0]
 8004d54:	4649      	mov	r1, r9
 8004d56:	414b      	adcs	r3, r1
 8004d58:	607b      	str	r3, [r7, #4]
 8004d5a:	f04f 0200 	mov.w	r2, #0
 8004d5e:	f04f 0300 	mov.w	r3, #0
 8004d62:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d66:	4659      	mov	r1, fp
 8004d68:	00cb      	lsls	r3, r1, #3
 8004d6a:	4651      	mov	r1, sl
 8004d6c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d70:	4651      	mov	r1, sl
 8004d72:	00ca      	lsls	r2, r1, #3
 8004d74:	4610      	mov	r0, r2
 8004d76:	4619      	mov	r1, r3
 8004d78:	4603      	mov	r3, r0
 8004d7a:	4642      	mov	r2, r8
 8004d7c:	189b      	adds	r3, r3, r2
 8004d7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d80:	464b      	mov	r3, r9
 8004d82:	460a      	mov	r2, r1
 8004d84:	eb42 0303 	adc.w	r3, r2, r3
 8004d88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	663b      	str	r3, [r7, #96]	; 0x60
 8004d94:	667a      	str	r2, [r7, #100]	; 0x64
 8004d96:	f04f 0200 	mov.w	r2, #0
 8004d9a:	f04f 0300 	mov.w	r3, #0
 8004d9e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004da2:	4649      	mov	r1, r9
 8004da4:	008b      	lsls	r3, r1, #2
 8004da6:	4641      	mov	r1, r8
 8004da8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dac:	4641      	mov	r1, r8
 8004dae:	008a      	lsls	r2, r1, #2
 8004db0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004db4:	f7fb ff50 	bl	8000c58 <__aeabi_uldivmod>
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4b0d      	ldr	r3, [pc, #52]	; (8004df4 <UART_SetConfig+0x4e4>)
 8004dbe:	fba3 1302 	umull	r1, r3, r3, r2
 8004dc2:	095b      	lsrs	r3, r3, #5
 8004dc4:	2164      	movs	r1, #100	; 0x64
 8004dc6:	fb01 f303 	mul.w	r3, r1, r3
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	011b      	lsls	r3, r3, #4
 8004dce:	3332      	adds	r3, #50	; 0x32
 8004dd0:	4a08      	ldr	r2, [pc, #32]	; (8004df4 <UART_SetConfig+0x4e4>)
 8004dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd6:	095b      	lsrs	r3, r3, #5
 8004dd8:	f003 020f 	and.w	r2, r3, #15
 8004ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4422      	add	r2, r4
 8004de4:	609a      	str	r2, [r3, #8]
}
 8004de6:	bf00      	nop
 8004de8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004dec:	46bd      	mov	sp, r7
 8004dee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004df2:	bf00      	nop
 8004df4:	51eb851f 	.word	0x51eb851f

08004df8 <temp_model_configure_activations>:


AI_DECLARE_STATIC
ai_bool temp_model_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, AI_TEMP_MODEL_ACTIVATIONS_ALIGNMENT));
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	3303      	adds	r3, #3
 8004e08:	f023 0303 	bic.w	r3, r3, #3
 8004e0c:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    serving_default_dense_input0_output_array.data = AI_PTR(NULL);
 8004e0e:	4b0f      	ldr	r3, [pc, #60]	; (8004e4c <temp_model_configure_activations+0x54>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	609a      	str	r2, [r3, #8]
    serving_default_dense_input0_output_array.data_start = AI_PTR(NULL);
 8004e14:	4b0d      	ldr	r3, [pc, #52]	; (8004e4c <temp_model_configure_activations+0x54>)
 8004e16:	2200      	movs	r2, #0
 8004e18:	60da      	str	r2, [r3, #12]
    dense_0_output_array.data = AI_PTR(activations + 0);
 8004e1a:	4a0d      	ldr	r2, [pc, #52]	; (8004e50 <temp_model_configure_activations+0x58>)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6093      	str	r3, [r2, #8]
    dense_0_output_array.data_start = AI_PTR(activations + 0);
 8004e20:	4a0b      	ldr	r2, [pc, #44]	; (8004e50 <temp_model_configure_activations+0x58>)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	60d3      	str	r3, [r2, #12]
    nl_0_output_array.data = AI_PTR(activations + 0);
 8004e26:	4a0b      	ldr	r2, [pc, #44]	; (8004e54 <temp_model_configure_activations+0x5c>)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6093      	str	r3, [r2, #8]
    nl_0_output_array.data_start = AI_PTR(activations + 0);
 8004e2c:	4a09      	ldr	r2, [pc, #36]	; (8004e54 <temp_model_configure_activations+0x5c>)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(NULL);
 8004e32:	4b09      	ldr	r3, [pc, #36]	; (8004e58 <temp_model_configure_activations+0x60>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	609a      	str	r2, [r3, #8]
    dense_1_output_array.data_start = AI_PTR(NULL);
 8004e38:	4b07      	ldr	r3, [pc, #28]	; (8004e58 <temp_model_configure_activations+0x60>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 8004e3e:	2301      	movs	r3, #1
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	200000dc 	.word	0x200000dc
 8004e50:	200000ec 	.word	0x200000ec
 8004e54:	200000fc 	.word	0x200000fc
 8004e58:	2000010c 	.word	0x2000010c

08004e5c <temp_model_configure_weights>:


AI_DECLARE_STATIC
ai_bool temp_model_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004e6c:	4b21      	ldr	r3, [pc, #132]	; (8004ef4 <temp_model_configure_weights+0x98>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e74:	4a1f      	ldr	r2, [pc, #124]	; (8004ef4 <temp_model_configure_weights+0x98>)
 8004e76:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 704);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8004e7e:	4a1d      	ldr	r2, [pc, #116]	; (8004ef4 <temp_model_configure_weights+0x98>)
 8004e80:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 704);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8004e88:	4a1a      	ldr	r2, [pc, #104]	; (8004ef4 <temp_model_configure_weights+0x98>)
 8004e8a:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004e8c:	4b1a      	ldr	r3, [pc, #104]	; (8004ef8 <temp_model_configure_weights+0x9c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e94:	4a18      	ldr	r2, [pc, #96]	; (8004ef8 <temp_model_configure_weights+0x9c>)
 8004e96:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 640);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004e9e:	4a16      	ldr	r2, [pc, #88]	; (8004ef8 <temp_model_configure_weights+0x9c>)
 8004ea0:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 640);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004ea8:	4a13      	ldr	r2, [pc, #76]	; (8004ef8 <temp_model_configure_weights+0x9c>)
 8004eaa:	60d3      	str	r3, [r2, #12]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8004eac:	4b13      	ldr	r3, [pc, #76]	; (8004efc <temp_model_configure_weights+0xa0>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004eb4:	4a11      	ldr	r2, [pc, #68]	; (8004efc <temp_model_configure_weights+0xa0>)
 8004eb6:	6013      	str	r3, [r2, #0]
    dense_0_bias_array.data = AI_PTR(weights + 576);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8004ebe:	4a0f      	ldr	r2, [pc, #60]	; (8004efc <temp_model_configure_weights+0xa0>)
 8004ec0:	6093      	str	r3, [r2, #8]
    dense_0_bias_array.data_start = AI_PTR(weights + 576);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8004ec8:	4a0c      	ldr	r2, [pc, #48]	; (8004efc <temp_model_configure_weights+0xa0>)
 8004eca:	60d3      	str	r3, [r2, #12]
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8004ecc:	4b0c      	ldr	r3, [pc, #48]	; (8004f00 <temp_model_configure_weights+0xa4>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ed4:	4a0a      	ldr	r2, [pc, #40]	; (8004f00 <temp_model_configure_weights+0xa4>)
 8004ed6:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(weights + 0);
 8004ed8:	4a09      	ldr	r2, [pc, #36]	; (8004f00 <temp_model_configure_weights+0xa4>)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6093      	str	r3, [r2, #8]
    dense_0_weights_array.data_start = AI_PTR(weights + 0);
 8004ede:	4a08      	ldr	r2, [pc, #32]	; (8004f00 <temp_model_configure_weights+0xa4>)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8004ee4:	2301      	movs	r3, #1
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	2000009c 	.word	0x2000009c
 8004ef8:	200000ac 	.word	0x200000ac
 8004efc:	200000bc 	.word	0x200000bc
 8004f00:	200000cc 	.word	0x200000cc

08004f04 <ai_temp_model_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_temp_model_get_error(ai_handle network)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f895 	bl	800503c <ai_platform_network_get_error>
 8004f12:	4603      	mov	r3, r0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <ai_temp_model_create>:

AI_API_ENTRY
ai_error ai_temp_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af02      	add	r7, sp, #8
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8004f26:	2300      	movs	r3, #0
 8004f28:	9301      	str	r3, [sp, #4]
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	2301      	movs	r3, #1
 8004f30:	4a04      	ldr	r2, [pc, #16]	; (8004f44 <ai_temp_model_create+0x28>)
 8004f32:	6839      	ldr	r1, [r7, #0]
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f8b3 	bl	80050a0 <ai_platform_network_create>
 8004f3a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	2000003c 	.word	0x2000003c

08004f48 <ai_temp_model_init>:
}

AI_API_ENTRY
ai_bool ai_temp_model_init(
  ai_handle network, const ai_network_params* params)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8004f52:	6839      	ldr	r1, [r7, #0]
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f8fb 	bl	8005150 <ai_platform_network_init>
 8004f5a:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <ai_temp_model_init+0x1e>
 8004f62:	2300      	movs	r3, #0
 8004f64:	e02b      	b.n	8004fbe <ai_temp_model_init+0x76>

  ai_bool ok = true;
 8004f66:	2301      	movs	r3, #1
 8004f68:	72fb      	strb	r3, [r7, #11]
  ok &= temp_model_configure_weights(net_ctx, &params->params);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f7ff ff74 	bl	8004e5c <temp_model_configure_weights>
 8004f74:	4603      	mov	r3, r0
 8004f76:	461a      	mov	r2, r3
 8004f78:	7afb      	ldrb	r3, [r7, #11]
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	bf14      	ite	ne
 8004f80:	2301      	movne	r3, #1
 8004f82:	2300      	moveq	r3, #0
 8004f84:	72fb      	strb	r3, [r7, #11]
  ok &= temp_model_configure_activations(net_ctx, &params->activations);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	3318      	adds	r3, #24
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f7ff ff33 	bl	8004df8 <temp_model_configure_activations>
 8004f92:	4603      	mov	r3, r0
 8004f94:	461a      	mov	r2, r3
 8004f96:	7afb      	ldrb	r3, [r7, #11]
 8004f98:	4013      	ands	r3, r2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	bf14      	ite	ne
 8004f9e:	2301      	movne	r3, #1
 8004fa0:	2300      	moveq	r3, #0
 8004fa2:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 f951 	bl	800524c <ai_platform_network_post_init>
 8004faa:	4603      	mov	r3, r0
 8004fac:	461a      	mov	r2, r3
 8004fae:	7afb      	ldrb	r3, [r7, #11]
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	bf14      	ite	ne
 8004fb6:	2301      	movne	r3, #1
 8004fb8:	2300      	moveq	r3, #0
 8004fba:	72fb      	strb	r3, [r7, #11]

  return ok;
 8004fbc:	7afb      	ldrb	r3, [r7, #11]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <ai_temp_model_run>:


AI_API_ENTRY
ai_i32 ai_temp_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b084      	sub	sp, #16
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	60f8      	str	r0, [r7, #12]
 8004fce:	60b9      	str	r1, [r7, #8]
 8004fd0:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	68b9      	ldr	r1, [r7, #8]
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 f980 	bl	80052dc <ai_platform_network_process>
 8004fdc:	4603      	mov	r3, r0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
	...

08004fe8 <ai_temp_model_data_weights_get>:
#include "temp_model_data.h"

ai_handle ai_temp_model_data_weights_get(void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
    0x4c, 0xce, 0xbd, 0xbe, 0x00, 0x4a, 0x6d, 0x3d, 0x40, 0x0f,
    0x6e, 0x3d, 0x70, 0x09, 0x71, 0x3d, 0x3e, 0xa0, 0x6d,
    0xbe, 0xda, 0xe3, 0xed, 0xbe, 0x19, 0xe6, 0x16, 0x3d
  };

  return AI_HANDLE_PTR(s_temp_model_weights);
 8004fec:	4b02      	ldr	r3, [pc, #8]	; (8004ff8 <ai_temp_model_data_weights_get+0x10>)

}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	08009220 	.word	0x08009220

08004ffc <_platform_network_state_setup.isra.1>:
 8004ffc:	b430      	push	{r4, r5}
 8004ffe:	68dd      	ldr	r5, [r3, #12]
 8005000:	695c      	ldr	r4, [r3, #20]
 8005002:	68ed      	ldr	r5, [r5, #12]
 8005004:	68e4      	ldr	r4, [r4, #12]
 8005006:	fb04 f405 	mul.w	r4, r4, r5
 800500a:	6084      	str	r4, [r0, #8]
 800500c:	8809      	ldrh	r1, [r1, #0]
 800500e:	fb04 f401 	mul.w	r4, r4, r1
 8005012:	60c4      	str	r4, [r0, #12]
 8005014:	6811      	ldr	r1, [r2, #0]
 8005016:	6041      	str	r1, [r0, #4]
 8005018:	6812      	ldr	r2, [r2, #0]
 800501a:	4414      	add	r4, r2
 800501c:	6004      	str	r4, [r0, #0]
 800501e:	699a      	ldr	r2, [r3, #24]
 8005020:	6814      	ldr	r4, [r2, #0]
 8005022:	00a4      	lsls	r4, r4, #2
 8005024:	d407      	bmi.n	8005036 <_platform_network_state_setup.isra.1+0x3a>
 8005026:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 800502a:	1b64      	subs	r4, r4, r5
 800502c:	4421      	add	r1, r4
 800502e:	6091      	str	r1, [r2, #8]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	6842      	ldr	r2, [r0, #4]
 8005034:	60da      	str	r2, [r3, #12]
 8005036:	bc30      	pop	{r4, r5}
 8005038:	4770      	bx	lr
	...

0800503c <ai_platform_network_get_error>:
 800503c:	b410      	push	{r4}
 800503e:	b120      	cbz	r0, 800504a <ai_platform_network_get_error+0xe>
 8005040:	4b11      	ldr	r3, [pc, #68]	; (8005088 <ai_platform_network_get_error+0x4c>)
 8005042:	6802      	ldr	r2, [r0, #0]
 8005044:	429a      	cmp	r2, r3
 8005046:	bf18      	it	ne
 8005048:	2000      	movne	r0, #0
 800504a:	4910      	ldr	r1, [pc, #64]	; (800508c <ai_platform_network_get_error+0x50>)
 800504c:	4a10      	ldr	r2, [pc, #64]	; (8005090 <ai_platform_network_get_error+0x54>)
 800504e:	680b      	ldr	r3, [r1, #0]
 8005050:	2401      	movs	r4, #1
 8005052:	f023 0301 	bic.w	r3, r3, #1
 8005056:	600b      	str	r3, [r1, #0]
 8005058:	4613      	mov	r3, r2
 800505a:	6014      	str	r4, [r2, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	2a00      	cmp	r2, #0
 8005060:	d1fc      	bne.n	800505c <ai_platform_network_get_error+0x20>
 8005062:	4b0c      	ldr	r3, [pc, #48]	; (8005094 <ai_platform_network_get_error+0x58>)
 8005064:	4a0c      	ldr	r2, [pc, #48]	; (8005098 <ai_platform_network_get_error+0x5c>)
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	4b0c      	ldr	r3, [pc, #48]	; (800509c <ai_platform_network_get_error+0x60>)
 800506c:	429a      	cmp	r2, r3
 800506e:	d000      	beq.n	8005072 <ai_platform_network_get_error+0x36>
 8005070:	e7fe      	b.n	8005070 <ai_platform_network_get_error+0x34>
 8005072:	b120      	cbz	r0, 800507e <ai_platform_network_get_error+0x42>
 8005074:	3010      	adds	r0, #16
 8005076:	f85d 4b04 	ldr.w	r4, [sp], #4
 800507a:	f000 bb3b 	b.w	80056f4 <core_get_error>
 800507e:	f241 0010 	movw	r0, #4112	; 0x1010
 8005082:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	a1c00100 	.word	0xa1c00100
 800508c:	e0002000 	.word	0xe0002000
 8005090:	40023008 	.word	0x40023008
 8005094:	40023000 	.word	0x40023000
 8005098:	f407a5c2 	.word	0xf407a5c2
 800509c:	b5e8b5cd 	.word	0xb5e8b5cd

080050a0 <ai_platform_network_create>:
 80050a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050a4:	4e23      	ldr	r6, [pc, #140]	; (8005134 <ai_platform_network_create+0x94>)
 80050a6:	4924      	ldr	r1, [pc, #144]	; (8005138 <ai_platform_network_create+0x98>)
 80050a8:	6835      	ldr	r5, [r6, #0]
 80050aa:	b082      	sub	sp, #8
 80050ac:	f025 0501 	bic.w	r5, r5, #1
 80050b0:	f89d 7020 	ldrb.w	r7, [sp, #32]
 80050b4:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 80050b8:	6035      	str	r5, [r6, #0]
 80050ba:	2501      	movs	r5, #1
 80050bc:	600d      	str	r5, [r1, #0]
 80050be:	680d      	ldr	r5, [r1, #0]
 80050c0:	2d00      	cmp	r5, #0
 80050c2:	d1fc      	bne.n	80050be <ai_platform_network_create+0x1e>
 80050c4:	491d      	ldr	r1, [pc, #116]	; (800513c <ai_platform_network_create+0x9c>)
 80050c6:	4e1e      	ldr	r6, [pc, #120]	; (8005140 <ai_platform_network_create+0xa0>)
 80050c8:	600e      	str	r6, [r1, #0]
 80050ca:	680e      	ldr	r6, [r1, #0]
 80050cc:	491d      	ldr	r1, [pc, #116]	; (8005144 <ai_platform_network_create+0xa4>)
 80050ce:	428e      	cmp	r6, r1
 80050d0:	d000      	beq.n	80050d4 <ai_platform_network_create+0x34>
 80050d2:	e7fe      	b.n	80050d2 <ai_platform_network_create+0x32>
 80050d4:	b1d0      	cbz	r0, 800510c <ai_platform_network_create+0x6c>
 80050d6:	4698      	mov	r8, r3
 80050d8:	4613      	mov	r3, r2
 80050da:	4a1b      	ldr	r2, [pc, #108]	; (8005148 <ai_platform_network_create+0xa8>)
 80050dc:	601a      	str	r2, [r3, #0]
 80050de:	6003      	str	r3, [r0, #0]
 80050e0:	4606      	mov	r6, r0
 80050e2:	f000 fb05 	bl	80056f0 <core_init>
 80050e6:	b1b0      	cbz	r0, 8005116 <ai_platform_network_create+0x76>
 80050e8:	0223      	lsls	r3, r4, #8
 80050ea:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80050ee:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 80050f2:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 80050f6:	d910      	bls.n	800511a <ai_platform_network_create+0x7a>
 80050f8:	2201      	movs	r2, #1
 80050fa:	2300      	movs	r3, #0
 80050fc:	6033      	str	r3, [r6, #0]
 80050fe:	2310      	movs	r3, #16
 8005100:	2000      	movs	r0, #0
 8005102:	f362 0007 	bfi	r0, r2, #0, #8
 8005106:	f363 201f 	bfi	r0, r3, #8, #24
 800510a:	e001      	b.n	8005110 <ai_platform_network_create+0x70>
 800510c:	f241 0010 	movw	r0, #4112	; 0x1010
 8005110:	b002      	add	sp, #8
 8005112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005116:	2230      	movs	r2, #48	; 0x30
 8005118:	e7ef      	b.n	80050fa <ai_platform_network_create+0x5a>
 800511a:	a802      	add	r0, sp, #8
 800511c:	4b0b      	ldr	r3, [pc, #44]	; (800514c <ai_platform_network_create+0xac>)
 800511e:	f840 3d04 	str.w	r3, [r0, #-4]!
 8005122:	f000 ffb9 	bl	8006098 <ai_check_custom_types>
 8005126:	b110      	cbz	r0, 800512e <ai_platform_network_create+0x8e>
 8005128:	462b      	mov	r3, r5
 800512a:	462a      	mov	r2, r5
 800512c:	e7e8      	b.n	8005100 <ai_platform_network_create+0x60>
 800512e:	2202      	movs	r2, #2
 8005130:	e7e3      	b.n	80050fa <ai_platform_network_create+0x5a>
 8005132:	bf00      	nop
 8005134:	e0002000 	.word	0xe0002000
 8005138:	40023008 	.word	0x40023008
 800513c:	40023000 	.word	0x40023000
 8005140:	f407a5c2 	.word	0xf407a5c2
 8005144:	b5e8b5cd 	.word	0xb5e8b5cd
 8005148:	a1c00100 	.word	0xa1c00100
 800514c:	84048403 	.word	0x84048403

08005150 <ai_platform_network_init>:
 8005150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005152:	460c      	mov	r4, r1
 8005154:	4605      	mov	r5, r0
 8005156:	b120      	cbz	r0, 8005162 <ai_platform_network_init+0x12>
 8005158:	4b36      	ldr	r3, [pc, #216]	; (8005234 <ai_platform_network_init+0xe4>)
 800515a:	6802      	ldr	r2, [r0, #0]
 800515c:	429a      	cmp	r2, r3
 800515e:	bf18      	it	ne
 8005160:	2500      	movne	r5, #0
 8005162:	4935      	ldr	r1, [pc, #212]	; (8005238 <ai_platform_network_init+0xe8>)
 8005164:	4a35      	ldr	r2, [pc, #212]	; (800523c <ai_platform_network_init+0xec>)
 8005166:	680b      	ldr	r3, [r1, #0]
 8005168:	2001      	movs	r0, #1
 800516a:	f023 0301 	bic.w	r3, r3, #1
 800516e:	600b      	str	r3, [r1, #0]
 8005170:	4613      	mov	r3, r2
 8005172:	6010      	str	r0, [r2, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	2a00      	cmp	r2, #0
 8005178:	d1fc      	bne.n	8005174 <ai_platform_network_init+0x24>
 800517a:	4b31      	ldr	r3, [pc, #196]	; (8005240 <ai_platform_network_init+0xf0>)
 800517c:	4a31      	ldr	r2, [pc, #196]	; (8005244 <ai_platform_network_init+0xf4>)
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	4b31      	ldr	r3, [pc, #196]	; (8005248 <ai_platform_network_init+0xf8>)
 8005184:	429a      	cmp	r2, r3
 8005186:	d000      	beq.n	800518a <ai_platform_network_init+0x3a>
 8005188:	e7fe      	b.n	8005188 <ai_platform_network_init+0x38>
 800518a:	b33d      	cbz	r5, 80051dc <ai_platform_network_init+0x8c>
 800518c:	b344      	cbz	r4, 80051e0 <ai_platform_network_init+0x90>
 800518e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8005190:	6926      	ldr	r6, [r4, #16]
 8005192:	2f00      	cmp	r7, #0
 8005194:	d03d      	beq.n	8005212 <ai_platform_network_init+0xc2>
 8005196:	b35e      	cbz	r6, 80051f0 <ai_platform_network_init+0xa0>
 8005198:	4627      	mov	r7, r4
 800519a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800519c:	f105 0618 	add.w	r6, r5, #24
 80051a0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80051a2:	e897 0003 	ldmia.w	r7, {r0, r1}
 80051a6:	e886 0003 	stmia.w	r6, {r0, r1}
 80051aa:	3418      	adds	r4, #24
 80051ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051ae:	f105 0630 	add.w	r6, r5, #48	; 0x30
 80051b2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80051b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80051b8:	e886 0003 	stmia.w	r6, {r0, r1}
 80051bc:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80051be:	2303      	movs	r3, #3
 80051c0:	60eb      	str	r3, [r5, #12]
 80051c2:	b15a      	cbz	r2, 80051dc <ai_platform_network_init+0x8c>
 80051c4:	68d3      	ldr	r3, [r2, #12]
 80051c6:	6095      	str	r5, [r2, #8]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d007      	beq.n	80051dc <ai_platform_network_init+0x8c>
 80051cc:	b133      	cbz	r3, 80051dc <ai_platform_network_init+0x8c>
 80051ce:	68da      	ldr	r2, [r3, #12]
 80051d0:	609d      	str	r5, [r3, #8]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d002      	beq.n	80051dc <ai_platform_network_init+0x8c>
 80051d6:	4613      	mov	r3, r2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1f8      	bne.n	80051ce <ai_platform_network_init+0x7e>
 80051dc:	4628      	mov	r0, r5
 80051de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051e0:	f105 0010 	add.w	r0, r5, #16
 80051e4:	2211      	movs	r2, #17
 80051e6:	2110      	movs	r1, #16
 80051e8:	f000 fa8a 	bl	8005700 <core_set_error>
 80051ec:	4625      	mov	r5, r4
 80051ee:	e7f5      	b.n	80051dc <ai_platform_network_init+0x8c>
 80051f0:	8921      	ldrh	r1, [r4, #8]
 80051f2:	88e2      	ldrh	r2, [r4, #6]
 80051f4:	68e3      	ldr	r3, [r4, #12]
 80051f6:	fb02 f201 	mul.w	r2, r2, r1
 80051fa:	fb03 f302 	mul.w	r3, r3, r2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0ca      	beq.n	8005198 <ai_platform_network_init+0x48>
 8005202:	f105 0010 	add.w	r0, r5, #16
 8005206:	2212      	movs	r2, #18
 8005208:	2110      	movs	r1, #16
 800520a:	f000 fa79 	bl	8005700 <core_set_error>
 800520e:	4635      	mov	r5, r6
 8005210:	e7e4      	b.n	80051dc <ai_platform_network_init+0x8c>
 8005212:	8c21      	ldrh	r1, [r4, #32]
 8005214:	8be2      	ldrh	r2, [r4, #30]
 8005216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005218:	fb02 f201 	mul.w	r2, r2, r1
 800521c:	fb03 f302 	mul.w	r3, r3, r2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0b8      	beq.n	8005196 <ai_platform_network_init+0x46>
 8005224:	f105 0010 	add.w	r0, r5, #16
 8005228:	2213      	movs	r2, #19
 800522a:	2110      	movs	r1, #16
 800522c:	f000 fa68 	bl	8005700 <core_set_error>
 8005230:	463d      	mov	r5, r7
 8005232:	e7d3      	b.n	80051dc <ai_platform_network_init+0x8c>
 8005234:	a1c00100 	.word	0xa1c00100
 8005238:	e0002000 	.word	0xe0002000
 800523c:	40023008 	.word	0x40023008
 8005240:	40023000 	.word	0x40023000
 8005244:	f407a5c2 	.word	0xf407a5c2
 8005248:	b5e8b5cd 	.word	0xb5e8b5cd

0800524c <ai_platform_network_post_init>:
 800524c:	b538      	push	{r3, r4, r5, lr}
 800524e:	4604      	mov	r4, r0
 8005250:	b120      	cbz	r0, 800525c <ai_platform_network_post_init+0x10>
 8005252:	4b1c      	ldr	r3, [pc, #112]	; (80052c4 <ai_platform_network_post_init+0x78>)
 8005254:	6802      	ldr	r2, [r0, #0]
 8005256:	429a      	cmp	r2, r3
 8005258:	bf18      	it	ne
 800525a:	2400      	movne	r4, #0
 800525c:	491a      	ldr	r1, [pc, #104]	; (80052c8 <ai_platform_network_post_init+0x7c>)
 800525e:	4a1b      	ldr	r2, [pc, #108]	; (80052cc <ai_platform_network_post_init+0x80>)
 8005260:	680b      	ldr	r3, [r1, #0]
 8005262:	2001      	movs	r0, #1
 8005264:	f023 0301 	bic.w	r3, r3, #1
 8005268:	600b      	str	r3, [r1, #0]
 800526a:	4613      	mov	r3, r2
 800526c:	6010      	str	r0, [r2, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	2a00      	cmp	r2, #0
 8005272:	d1fc      	bne.n	800526e <ai_platform_network_post_init+0x22>
 8005274:	4b16      	ldr	r3, [pc, #88]	; (80052d0 <ai_platform_network_post_init+0x84>)
 8005276:	4a17      	ldr	r2, [pc, #92]	; (80052d4 <ai_platform_network_post_init+0x88>)
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	4b16      	ldr	r3, [pc, #88]	; (80052d8 <ai_platform_network_post_init+0x8c>)
 800527e:	429a      	cmp	r2, r3
 8005280:	d000      	beq.n	8005284 <ai_platform_network_post_init+0x38>
 8005282:	e7fe      	b.n	8005282 <ai_platform_network_post_init+0x36>
 8005284:	b1a4      	cbz	r4, 80052b0 <ai_platform_network_post_init+0x64>
 8005286:	68e3      	ldr	r3, [r4, #12]
 8005288:	f013 0502 	ands.w	r5, r3, #2
 800528c:	d012      	beq.n	80052b4 <ai_platform_network_post_init+0x68>
 800528e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005290:	b163      	cbz	r3, 80052ac <ai_platform_network_post_init+0x60>
 8005292:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8005294:	b91d      	cbnz	r5, 800529e <ai_platform_network_post_init+0x52>
 8005296:	e009      	b.n	80052ac <ai_platform_network_post_init+0x60>
 8005298:	461d      	mov	r5, r3
 800529a:	b13b      	cbz	r3, 80052ac <ai_platform_network_post_init+0x60>
 800529c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800529e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80052a0:	4629      	mov	r1, r5
 80052a2:	2000      	movs	r0, #0
 80052a4:	4798      	blx	r3
 80052a6:	68eb      	ldr	r3, [r5, #12]
 80052a8:	42ab      	cmp	r3, r5
 80052aa:	d1f5      	bne.n	8005298 <ai_platform_network_post_init+0x4c>
 80052ac:	2001      	movs	r0, #1
 80052ae:	bd38      	pop	{r3, r4, r5, pc}
 80052b0:	4620      	mov	r0, r4
 80052b2:	bd38      	pop	{r3, r4, r5, pc}
 80052b4:	f104 0010 	add.w	r0, r4, #16
 80052b8:	2210      	movs	r2, #16
 80052ba:	2111      	movs	r1, #17
 80052bc:	f000 fa20 	bl	8005700 <core_set_error>
 80052c0:	4628      	mov	r0, r5
 80052c2:	bd38      	pop	{r3, r4, r5, pc}
 80052c4:	a1c00100 	.word	0xa1c00100
 80052c8:	e0002000 	.word	0xe0002000
 80052cc:	40023008 	.word	0x40023008
 80052d0:	40023000 	.word	0x40023000
 80052d4:	f407a5c2 	.word	0xf407a5c2
 80052d8:	b5e8b5cd 	.word	0xb5e8b5cd

080052dc <ai_platform_network_process>:
 80052dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052e0:	b083      	sub	sp, #12
 80052e2:	4604      	mov	r4, r0
 80052e4:	9201      	str	r2, [sp, #4]
 80052e6:	b120      	cbz	r0, 80052f2 <ai_platform_network_process+0x16>
 80052e8:	4ba5      	ldr	r3, [pc, #660]	; (8005580 <ai_platform_network_process+0x2a4>)
 80052ea:	6802      	ldr	r2, [r0, #0]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	bf18      	it	ne
 80052f0:	2400      	movne	r4, #0
 80052f2:	48a4      	ldr	r0, [pc, #656]	; (8005584 <ai_platform_network_process+0x2a8>)
 80052f4:	4ba4      	ldr	r3, [pc, #656]	; (8005588 <ai_platform_network_process+0x2ac>)
 80052f6:	6802      	ldr	r2, [r0, #0]
 80052f8:	f022 0201 	bic.w	r2, r2, #1
 80052fc:	6002      	str	r2, [r0, #0]
 80052fe:	2201      	movs	r2, #1
 8005300:	601a      	str	r2, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	2a00      	cmp	r2, #0
 8005306:	d1fc      	bne.n	8005302 <ai_platform_network_process+0x26>
 8005308:	4ba0      	ldr	r3, [pc, #640]	; (800558c <ai_platform_network_process+0x2b0>)
 800530a:	4aa1      	ldr	r2, [pc, #644]	; (8005590 <ai_platform_network_process+0x2b4>)
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	4ba0      	ldr	r3, [pc, #640]	; (8005594 <ai_platform_network_process+0x2b8>)
 8005312:	429a      	cmp	r2, r3
 8005314:	d000      	beq.n	8005318 <ai_platform_network_process+0x3c>
 8005316:	e7fe      	b.n	8005316 <ai_platform_network_process+0x3a>
 8005318:	2c00      	cmp	r4, #0
 800531a:	d066      	beq.n	80053ea <ai_platform_network_process+0x10e>
 800531c:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 8005320:	b107      	cbz	r7, 8005324 <ai_platform_network_process+0x48>
 8005322:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8005324:	68e3      	ldr	r3, [r4, #12]
 8005326:	f003 0303 	and.w	r3, r3, #3
 800532a:	2600      	movs	r6, #0
 800532c:	2b03      	cmp	r3, #3
 800532e:	6166      	str	r6, [r4, #20]
 8005330:	f040 80fe 	bne.w	8005530 <ai_platform_network_process+0x254>
 8005334:	2900      	cmp	r1, #0
 8005336:	d07f      	beq.n	8005438 <ai_platform_network_process+0x15c>
 8005338:	2f00      	cmp	r7, #0
 800533a:	d07d      	beq.n	8005438 <ai_platform_network_process+0x15c>
 800533c:	883b      	ldrh	r3, [r7, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d07a      	beq.n	8005438 <ai_platform_network_process+0x15c>
 8005342:	460d      	mov	r5, r1
 8005344:	46a0      	mov	r8, r4
 8005346:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 800534a:	429e      	cmp	r6, r3
 800534c:	d27d      	bcs.n	800544a <ai_platform_network_process+0x16e>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d07a      	beq.n	800544a <ai_platform_network_process+0x16e>
 8005354:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8005358:	2c00      	cmp	r4, #0
 800535a:	d076      	beq.n	800544a <ai_platform_network_process+0x16e>
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 8005364:	d067      	beq.n	8005436 <ai_platform_network_process+0x15a>
 8005366:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 800536a:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 800536e:	69a0      	ldr	r0, [r4, #24]
 8005370:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8005374:	6841      	ldr	r1, [r0, #4]
 8005376:	fb0b f30e 	mul.w	r3, fp, lr
 800537a:	fb0c f303 	mul.w	r3, ip, r3
 800537e:	4299      	cmp	r1, r3
 8005380:	d350      	bcc.n	8005424 <ai_platform_network_process+0x148>
 8005382:	68e3      	ldr	r3, [r4, #12]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	455a      	cmp	r2, fp
 8005388:	d14c      	bne.n	8005424 <ai_platform_network_process+0x148>
 800538a:	689a      	ldr	r2, [r3, #8]
 800538c:	4572      	cmp	r2, lr
 800538e:	d149      	bne.n	8005424 <ai_platform_network_process+0x148>
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	459c      	cmp	ip, r3
 8005394:	d146      	bne.n	8005424 <ai_platform_network_process+0x148>
 8005396:	6800      	ldr	r0, [r0, #0]
 8005398:	f000 ff2e 	bl	80061f8 <ai_array_get_byte_size>
 800539c:	68e2      	ldr	r2, [r4, #12]
 800539e:	6963      	ldr	r3, [r4, #20]
 80053a0:	68d2      	ldr	r2, [r2, #12]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	fb03 f302 	mul.w	r3, r3, r2
 80053a8:	4298      	cmp	r0, r3
 80053aa:	d33b      	bcc.n	8005424 <ai_platform_network_process+0x148>
 80053ac:	69a3      	ldr	r3, [r4, #24]
 80053ae:	6818      	ldr	r0, [r3, #0]
 80053b0:	f000 fed6 	bl	8006160 <ai_array_to_buffer_fmt>
 80053b4:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80053b8:	4043      	eors	r3, r0
 80053ba:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80053be:	d128      	bne.n	8005412 <ai_platform_network_process+0x136>
 80053c0:	68eb      	ldr	r3, [r5, #12]
 80053c2:	b1f3      	cbz	r3, 8005402 <ai_platform_network_process+0x126>
 80053c4:	f8b5 b000 	ldrh.w	fp, [r5]
 80053c8:	f1bb 0f00 	cmp.w	fp, #0
 80053cc:	d012      	beq.n	80053f4 <ai_platform_network_process+0x118>
 80053ce:	4623      	mov	r3, r4
 80053d0:	f105 020c 	add.w	r2, r5, #12
 80053d4:	4629      	mov	r1, r5
 80053d6:	4650      	mov	r0, sl
 80053d8:	f7ff fe10 	bl	8004ffc <_platform_network_state_setup.isra.1>
 80053dc:	45d9      	cmp	r9, fp
 80053de:	883b      	ldrh	r3, [r7, #0]
 80053e0:	bf38      	it	cc
 80053e2:	46d9      	movcc	r9, fp
 80053e4:	3601      	adds	r6, #1
 80053e6:	3518      	adds	r5, #24
 80053e8:	e7af      	b.n	800534a <ai_platform_network_process+0x6e>
 80053ea:	46a3      	mov	fp, r4
 80053ec:	4658      	mov	r0, fp
 80053ee:	b003      	add	sp, #12
 80053f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f4:	f108 0010 	add.w	r0, r8, #16
 80053f8:	2221      	movs	r2, #33	; 0x21
 80053fa:	2112      	movs	r1, #18
 80053fc:	f000 f980 	bl	8005700 <core_set_error>
 8005400:	e7f4      	b.n	80053ec <ai_platform_network_process+0x110>
 8005402:	f108 0010 	add.w	r0, r8, #16
 8005406:	2217      	movs	r2, #23
 8005408:	2112      	movs	r1, #18
 800540a:	469b      	mov	fp, r3
 800540c:	f000 f978 	bl	8005700 <core_set_error>
 8005410:	e7ec      	b.n	80053ec <ai_platform_network_process+0x110>
 8005412:	f108 0010 	add.w	r0, r8, #16
 8005416:	2219      	movs	r2, #25
 8005418:	2112      	movs	r1, #18
 800541a:	f000 f971 	bl	8005700 <core_set_error>
 800541e:	f04f 0b00 	mov.w	fp, #0
 8005422:	e7e3      	b.n	80053ec <ai_platform_network_process+0x110>
 8005424:	f108 0010 	add.w	r0, r8, #16
 8005428:	2218      	movs	r2, #24
 800542a:	2112      	movs	r1, #18
 800542c:	f000 f968 	bl	8005700 <core_set_error>
 8005430:	f04f 0b00 	mov.w	fp, #0
 8005434:	e7da      	b.n	80053ec <ai_platform_network_process+0x110>
 8005436:	4644      	mov	r4, r8
 8005438:	f104 0010 	add.w	r0, r4, #16
 800543c:	2217      	movs	r2, #23
 800543e:	2112      	movs	r1, #18
 8005440:	f000 f95e 	bl	8005700 <core_set_error>
 8005444:	f04f 0b00 	mov.w	fp, #0
 8005448:	e7d0      	b.n	80053ec <ai_platform_network_process+0x110>
 800544a:	9a01      	ldr	r2, [sp, #4]
 800544c:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 8005450:	4644      	mov	r4, r8
 8005452:	2a00      	cmp	r2, #0
 8005454:	f000 80a4 	beq.w	80055a0 <ai_platform_network_process+0x2c4>
 8005458:	2b01      	cmp	r3, #1
 800545a:	f240 8140 	bls.w	80056de <ai_platform_network_process+0x402>
 800545e:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 8005462:	f118 0f0c 	cmn.w	r8, #12
 8005466:	f000 813a 	beq.w	80056de <ai_platform_network_process+0x402>
 800546a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 8135 	beq.w	80056de <ai_platform_network_process+0x402>
 8005474:	3204      	adds	r2, #4
 8005476:	4615      	mov	r5, r2
 8005478:	2700      	movs	r7, #0
 800547a:	429f      	cmp	r7, r3
 800547c:	f080 808c 	bcs.w	8005598 <ai_platform_network_process+0x2bc>
 8005480:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 8087 	beq.w	8005598 <ai_platform_network_process+0x2bc>
 800548a:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 800548e:	2e00      	cmp	r6, #0
 8005490:	f000 8082 	beq.w	8005598 <ai_platform_network_process+0x2bc>
 8005494:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 800549e:	d067      	beq.n	8005570 <ai_platform_network_process+0x294>
 80054a0:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80054a4:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 80054a8:	69b0      	ldr	r0, [r6, #24]
 80054aa:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80054ae:	6841      	ldr	r1, [r0, #4]
 80054b0:	fb0b f30e 	mul.w	r3, fp, lr
 80054b4:	fb0c f303 	mul.w	r3, ip, r3
 80054b8:	4299      	cmp	r1, r3
 80054ba:	f0c0 8110 	bcc.w	80056de <ai_platform_network_process+0x402>
 80054be:	68f3      	ldr	r3, [r6, #12]
 80054c0:	68da      	ldr	r2, [r3, #12]
 80054c2:	455a      	cmp	r2, fp
 80054c4:	f040 810b 	bne.w	80056de <ai_platform_network_process+0x402>
 80054c8:	689a      	ldr	r2, [r3, #8]
 80054ca:	4572      	cmp	r2, lr
 80054cc:	f040 8107 	bne.w	80056de <ai_platform_network_process+0x402>
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	459c      	cmp	ip, r3
 80054d4:	f040 8103 	bne.w	80056de <ai_platform_network_process+0x402>
 80054d8:	6800      	ldr	r0, [r0, #0]
 80054da:	f000 fe8d 	bl	80061f8 <ai_array_get_byte_size>
 80054de:	68f2      	ldr	r2, [r6, #12]
 80054e0:	6973      	ldr	r3, [r6, #20]
 80054e2:	68d2      	ldr	r2, [r2, #12]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	fb03 f302 	mul.w	r3, r3, r2
 80054ea:	4298      	cmp	r0, r3
 80054ec:	f0c0 80f7 	bcc.w	80056de <ai_platform_network_process+0x402>
 80054f0:	69b3      	ldr	r3, [r6, #24]
 80054f2:	6818      	ldr	r0, [r3, #0]
 80054f4:	f000 fe34 	bl	8006160 <ai_array_to_buffer_fmt>
 80054f8:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80054fc:	4043      	eors	r3, r0
 80054fe:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8005502:	d12c      	bne.n	800555e <ai_platform_network_process+0x282>
 8005504:	68eb      	ldr	r3, [r5, #12]
 8005506:	b313      	cbz	r3, 800554e <ai_platform_network_process+0x272>
 8005508:	f8b5 b000 	ldrh.w	fp, [r5]
 800550c:	f1bb 0f00 	cmp.w	fp, #0
 8005510:	d016      	beq.n	8005540 <ai_platform_network_process+0x264>
 8005512:	4633      	mov	r3, r6
 8005514:	f105 020c 	add.w	r2, r5, #12
 8005518:	4629      	mov	r1, r5
 800551a:	4650      	mov	r0, sl
 800551c:	f7ff fd6e 	bl	8004ffc <_platform_network_state_setup.isra.1>
 8005520:	45d9      	cmp	r9, fp
 8005522:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005526:	bf38      	it	cc
 8005528:	46d9      	movcc	r9, fp
 800552a:	3701      	adds	r7, #1
 800552c:	3518      	adds	r5, #24
 800552e:	e7a4      	b.n	800547a <ai_platform_network_process+0x19e>
 8005530:	f104 0010 	add.w	r0, r4, #16
 8005534:	2230      	movs	r2, #48	; 0x30
 8005536:	2111      	movs	r1, #17
 8005538:	f000 f8e2 	bl	8005700 <core_set_error>
 800553c:	46b3      	mov	fp, r6
 800553e:	e755      	b.n	80053ec <ai_platform_network_process+0x110>
 8005540:	f104 0010 	add.w	r0, r4, #16
 8005544:	2221      	movs	r2, #33	; 0x21
 8005546:	2113      	movs	r1, #19
 8005548:	f000 f8da 	bl	8005700 <core_set_error>
 800554c:	e74e      	b.n	80053ec <ai_platform_network_process+0x110>
 800554e:	f104 0010 	add.w	r0, r4, #16
 8005552:	2217      	movs	r2, #23
 8005554:	2113      	movs	r1, #19
 8005556:	469b      	mov	fp, r3
 8005558:	f000 f8d2 	bl	8005700 <core_set_error>
 800555c:	e746      	b.n	80053ec <ai_platform_network_process+0x110>
 800555e:	f104 0010 	add.w	r0, r4, #16
 8005562:	2219      	movs	r2, #25
 8005564:	2113      	movs	r1, #19
 8005566:	f000 f8cb 	bl	8005700 <core_set_error>
 800556a:	f04f 0b00 	mov.w	fp, #0
 800556e:	e73d      	b.n	80053ec <ai_platform_network_process+0x110>
 8005570:	f104 0010 	add.w	r0, r4, #16
 8005574:	2217      	movs	r2, #23
 8005576:	2113      	movs	r1, #19
 8005578:	f000 f8c2 	bl	8005700 <core_set_error>
 800557c:	46d3      	mov	fp, sl
 800557e:	e735      	b.n	80053ec <ai_platform_network_process+0x110>
 8005580:	a1c00100 	.word	0xa1c00100
 8005584:	e0002000 	.word	0xe0002000
 8005588:	40023008 	.word	0x40023008
 800558c:	40023000 	.word	0x40023000
 8005590:	f407a5c2 	.word	0xf407a5c2
 8005594:	b5e8b5cd 	.word	0xb5e8b5cd
 8005598:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800559c:	f8a4 9014 	strh.w	r9, [r4, #20]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 8099 	beq.w	80056d8 <ai_platform_network_process+0x3fc>
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80055aa:	f240 8093 	bls.w	80056d4 <ai_platform_network_process+0x3f8>
 80055ae:	f105 070c 	add.w	r7, r5, #12
 80055b2:	8ae0      	ldrh	r0, [r4, #22]
 80055b4:	8aa3      	ldrh	r3, [r4, #20]
 80055b6:	4283      	cmp	r3, r0
 80055b8:	d977      	bls.n	80056aa <ai_platform_network_process+0x3ce>
 80055ba:	46a3      	mov	fp, r4
 80055bc:	2d00      	cmp	r5, #0
 80055be:	d032      	beq.n	8005626 <ai_platform_network_process+0x34a>
 80055c0:	882b      	ldrh	r3, [r5, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d02f      	beq.n	8005626 <ai_platform_network_process+0x34a>
 80055c6:	686b      	ldr	r3, [r5, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d02c      	beq.n	8005626 <ai_platform_network_process+0x34a>
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f04f 0800 	mov.w	r8, #0
 80055d2:	b343      	cbz	r3, 8005626 <ai_platform_network_process+0x34a>
 80055d4:	68a9      	ldr	r1, [r5, #8]
 80055d6:	699a      	ldr	r2, [r3, #24]
 80055d8:	f8d1 a000 	ldr.w	sl, [r1]
 80055dc:	6814      	ldr	r4, [r2, #0]
 80055de:	6890      	ldr	r0, [r2, #8]
 80055e0:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80055e4:	eb0a 0609 	add.w	r6, sl, r9
 80055e8:	00a4      	lsls	r4, r4, #2
 80055ea:	6871      	ldr	r1, [r6, #4]
 80055ec:	d45f      	bmi.n	80056ae <ai_platform_network_process+0x3d2>
 80055ee:	68d4      	ldr	r4, [r2, #12]
 80055f0:	1b00      	subs	r0, r0, r4
 80055f2:	4401      	add	r1, r0
 80055f4:	6091      	str	r1, [r2, #8]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	6872      	ldr	r2, [r6, #4]
 80055fa:	60da      	str	r2, [r3, #12]
 80055fc:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8005600:	f85a 2009 	ldr.w	r2, [sl, r9]
 8005604:	440b      	add	r3, r1
 8005606:	4293      	cmp	r3, r2
 8005608:	bf24      	itt	cs
 800560a:	68f3      	ldrcs	r3, [r6, #12]
 800560c:	1ad3      	subcs	r3, r2, r3
 800560e:	6073      	str	r3, [r6, #4]
 8005610:	882b      	ldrh	r3, [r5, #0]
 8005612:	f108 0801 	add.w	r8, r8, #1
 8005616:	4598      	cmp	r8, r3
 8005618:	d205      	bcs.n	8005626 <ai_platform_network_process+0x34a>
 800561a:	686b      	ldr	r3, [r5, #4]
 800561c:	b11b      	cbz	r3, 8005626 <ai_platform_network_process+0x34a>
 800561e:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1d6      	bne.n	80055d4 <ai_platform_network_process+0x2f8>
 8005626:	4658      	mov	r0, fp
 8005628:	f000 fd60 	bl	80060ec <ai_layers_forward_all>
 800562c:	2f00      	cmp	r7, #0
 800562e:	d032      	beq.n	8005696 <ai_platform_network_process+0x3ba>
 8005630:	883b      	ldrh	r3, [r7, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d02f      	beq.n	8005696 <ai_platform_network_process+0x3ba>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	b36b      	cbz	r3, 8005696 <ai_platform_network_process+0x3ba>
 800563a:	6818      	ldr	r0, [r3, #0]
 800563c:	b358      	cbz	r0, 8005696 <ai_platform_network_process+0x3ba>
 800563e:	f04f 0800 	mov.w	r8, #0
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	6981      	ldr	r1, [r0, #24]
 8005646:	f8d3 a000 	ldr.w	sl, [r3]
 800564a:	680c      	ldr	r4, [r1, #0]
 800564c:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8005650:	eb0a 0609 	add.w	r6, sl, r9
 8005654:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8005658:	00a4      	lsls	r4, r4, #2
 800565a:	eb0c 0302 	add.w	r3, ip, r2
 800565e:	d42a      	bmi.n	80056b6 <ai_platform_network_process+0x3da>
 8005660:	f85a 2009 	ldr.w	r2, [sl, r9]
 8005664:	4293      	cmp	r3, r2
 8005666:	bf24      	itt	cs
 8005668:	68f3      	ldrcs	r3, [r6, #12]
 800566a:	1ad3      	subcs	r3, r2, r3
 800566c:	6073      	str	r3, [r6, #4]
 800566e:	6981      	ldr	r1, [r0, #24]
 8005670:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8005674:	1b12      	subs	r2, r2, r4
 8005676:	4413      	add	r3, r2
 8005678:	608b      	str	r3, [r1, #8]
 800567a:	6983      	ldr	r3, [r0, #24]
 800567c:	6872      	ldr	r2, [r6, #4]
 800567e:	60da      	str	r2, [r3, #12]
 8005680:	883b      	ldrh	r3, [r7, #0]
 8005682:	f108 0801 	add.w	r8, r8, #1
 8005686:	4598      	cmp	r8, r3
 8005688:	d205      	bcs.n	8005696 <ai_platform_network_process+0x3ba>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	b11b      	cbz	r3, 8005696 <ai_platform_network_process+0x3ba>
 800568e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005692:	2800      	cmp	r0, #0
 8005694:	d1d5      	bne.n	8005642 <ai_platform_network_process+0x366>
 8005696:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 800569a:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800569e:	3001      	adds	r0, #1
 80056a0:	b280      	uxth	r0, r0
 80056a2:	4283      	cmp	r3, r0
 80056a4:	f8ab 0016 	strh.w	r0, [fp, #22]
 80056a8:	d888      	bhi.n	80055bc <ai_platform_network_process+0x2e0>
 80056aa:	4683      	mov	fp, r0
 80056ac:	e69e      	b.n	80053ec <ai_platform_network_process+0x110>
 80056ae:	68b2      	ldr	r2, [r6, #8]
 80056b0:	f000 fe38 	bl	8006324 <memcpy>
 80056b4:	e7a2      	b.n	80055fc <ai_platform_network_process+0x320>
 80056b6:	6889      	ldr	r1, [r1, #8]
 80056b8:	4660      	mov	r0, ip
 80056ba:	f000 fe33 	bl	8006324 <memcpy>
 80056be:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80056c2:	f85a 2009 	ldr.w	r2, [sl, r9]
 80056c6:	440b      	add	r3, r1
 80056c8:	4293      	cmp	r3, r2
 80056ca:	bf24      	itt	cs
 80056cc:	68f3      	ldrcs	r3, [r6, #12]
 80056ce:	1ad3      	subcs	r3, r2, r3
 80056d0:	6073      	str	r3, [r6, #4]
 80056d2:	e7d5      	b.n	8005680 <ai_platform_network_process+0x3a4>
 80056d4:	2700      	movs	r7, #0
 80056d6:	e76c      	b.n	80055b2 <ai_platform_network_process+0x2d6>
 80056d8:	461d      	mov	r5, r3
 80056da:	461f      	mov	r7, r3
 80056dc:	e769      	b.n	80055b2 <ai_platform_network_process+0x2d6>
 80056de:	f104 0010 	add.w	r0, r4, #16
 80056e2:	2218      	movs	r2, #24
 80056e4:	2113      	movs	r1, #19
 80056e6:	f000 f80b 	bl	8005700 <core_set_error>
 80056ea:	f04f 0b00 	mov.w	fp, #0
 80056ee:	e67d      	b.n	80053ec <ai_platform_network_process+0x110>

080056f0 <core_init>:
 80056f0:	2001      	movs	r0, #1
 80056f2:	4770      	bx	lr

080056f4 <core_get_error>:
 80056f4:	4603      	mov	r3, r0
 80056f6:	2200      	movs	r2, #0
 80056f8:	6800      	ldr	r0, [r0, #0]
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop

08005700 <core_set_error>:
 8005700:	7803      	ldrb	r3, [r0, #0]
 8005702:	b933      	cbnz	r3, 8005712 <core_set_error+0x12>
 8005704:	7001      	strb	r1, [r0, #0]
 8005706:	6803      	ldr	r3, [r0, #0]
 8005708:	f362 231f 	bfi	r3, r2, #8, #24
 800570c:	6003      	str	r3, [r0, #0]
 800570e:	2001      	movs	r0, #1
 8005710:	4770      	bx	lr
 8005712:	2000      	movs	r0, #0
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop

08005718 <ai_dict8_dot_array_f32>:
 8005718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800571c:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005720:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 8005724:	f000 80c0 	beq.w	80058a8 <ai_dict8_dot_array_f32+0x190>
 8005728:	f101 0408 	add.w	r4, r1, #8
 800572c:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8005730:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80058b0 <ai_dict8_dot_array_f32+0x198>
 8005734:	eb04 0e09 	add.w	lr, r4, r9
 8005738:	f103 0520 	add.w	r5, r3, #32
 800573c:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8005740:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 8005744:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 8005748:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 800574c:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8005750:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 8005754:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8005758:	ed55 3a04 	vldr	s7, [r5, #-16]
 800575c:	ed55 4a03 	vldr	s9, [r5, #-12]
 8005760:	ed55 5a02 	vldr	s11, [r5, #-8]
 8005764:	ed55 6a01 	vldr	s13, [r5, #-4]
 8005768:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800576c:	edd6 7a00 	vldr	s15, [r6]
 8005770:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 8005774:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005778:	ee67 7a83 	vmul.f32	s15, s15, s6
 800577c:	ed9a 3a00 	vldr	s6, [sl]
 8005780:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8005784:	eee3 7a05 	vfma.f32	s15, s6, s10
 8005788:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800578c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005790:	ed97 3a00 	vldr	s6, [r7]
 8005794:	ed96 5a00 	vldr	s10, [r6]
 8005798:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 800579c:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 80057a0:	eee3 7a04 	vfma.f32	s15, s6, s8
 80057a4:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80057a8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80057ac:	ed9a 3a00 	vldr	s6, [sl]
 80057b0:	ed96 4a00 	vldr	s8, [r6]
 80057b4:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 80057b8:	eee5 7a06 	vfma.f32	s15, s10, s12
 80057bc:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80057c0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80057c4:	ed97 5a00 	vldr	s10, [r7]
 80057c8:	ed96 6a00 	vldr	s12, [r6]
 80057cc:	eee3 7a23 	vfma.f32	s15, s6, s7
 80057d0:	3408      	adds	r4, #8
 80057d2:	45a6      	cmp	lr, r4
 80057d4:	f105 0520 	add.w	r5, r5, #32
 80057d8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80057dc:	eee5 7a25 	vfma.f32	s15, s10, s11
 80057e0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80057e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057e8:	d1a8      	bne.n	800573c <ai_dict8_dot_array_f32+0x24>
 80057ea:	4449      	add	r1, r9
 80057ec:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80057f0:	f01c 0c07 	ands.w	ip, ip, #7
 80057f4:	d050      	beq.n	8005898 <ai_dict8_dot_array_f32+0x180>
 80057f6:	780c      	ldrb	r4, [r1, #0]
 80057f8:	edd3 6a00 	vldr	s13, [r3]
 80057fc:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005800:	edd4 7a00 	vldr	s15, [r4]
 8005804:	f1bc 0f01 	cmp.w	ip, #1
 8005808:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800580c:	d044      	beq.n	8005898 <ai_dict8_dot_array_f32+0x180>
 800580e:	784c      	ldrb	r4, [r1, #1]
 8005810:	edd3 6a01 	vldr	s13, [r3, #4]
 8005814:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005818:	edd4 7a00 	vldr	s15, [r4]
 800581c:	f1bc 0f02 	cmp.w	ip, #2
 8005820:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005824:	d038      	beq.n	8005898 <ai_dict8_dot_array_f32+0x180>
 8005826:	788c      	ldrb	r4, [r1, #2]
 8005828:	edd3 6a02 	vldr	s13, [r3, #8]
 800582c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005830:	edd4 7a00 	vldr	s15, [r4]
 8005834:	f1bc 0f03 	cmp.w	ip, #3
 8005838:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800583c:	d02c      	beq.n	8005898 <ai_dict8_dot_array_f32+0x180>
 800583e:	78cc      	ldrb	r4, [r1, #3]
 8005840:	edd3 6a03 	vldr	s13, [r3, #12]
 8005844:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005848:	edd4 7a00 	vldr	s15, [r4]
 800584c:	f1bc 0f04 	cmp.w	ip, #4
 8005850:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005854:	d020      	beq.n	8005898 <ai_dict8_dot_array_f32+0x180>
 8005856:	790c      	ldrb	r4, [r1, #4]
 8005858:	edd3 6a04 	vldr	s13, [r3, #16]
 800585c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005860:	edd4 7a00 	vldr	s15, [r4]
 8005864:	f1bc 0f05 	cmp.w	ip, #5
 8005868:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800586c:	d014      	beq.n	8005898 <ai_dict8_dot_array_f32+0x180>
 800586e:	794c      	ldrb	r4, [r1, #5]
 8005870:	edd3 6a05 	vldr	s13, [r3, #20]
 8005874:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005878:	edd4 7a00 	vldr	s15, [r4]
 800587c:	f1bc 0f06 	cmp.w	ip, #6
 8005880:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005884:	d008      	beq.n	8005898 <ai_dict8_dot_array_f32+0x180>
 8005886:	7989      	ldrb	r1, [r1, #6]
 8005888:	edd3 7a06 	vldr	s15, [r3, #24]
 800588c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005890:	edd2 6a00 	vldr	s13, [r2]
 8005894:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005898:	edd0 7a00 	vldr	s15, [r0]
 800589c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058a0:	ed80 7a00 	vstr	s14, [r0]
 80058a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058a8:	ed9f 7a01 	vldr	s14, [pc, #4]	; 80058b0 <ai_dict8_dot_array_f32+0x198>
 80058ac:	e7a0      	b.n	80057f0 <ai_dict8_dot_array_f32+0xd8>
 80058ae:	bf00      	nop
 80058b0:	00000000 	.word	0x00000000

080058b4 <ai_dict4_dot_array_f32>:
 80058b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80058ba:	f027 0c01 	bic.w	ip, r7, #1
 80058be:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 80058c2:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80058c6:	f000 80ae 	beq.w	8005a26 <ai_dict4_dot_array_f32+0x172>
 80058ca:	1d0d      	adds	r5, r1, #4
 80058cc:	ea4f 0988 	mov.w	r9, r8, lsl #2
 80058d0:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8005a2c <ai_dict4_dot_array_f32+0x178>
 80058d4:	eb05 0e09 	add.w	lr, r5, r9
 80058d8:	f103 0420 	add.w	r4, r3, #32
 80058dc:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 80058e0:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 80058e4:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 80058e8:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 80058ec:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 80058f0:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 80058f4:	ed14 5a04 	vldr	s10, [r4, #-16]
 80058f8:	ed54 5a03 	vldr	s11, [r4, #-12]
 80058fc:	ed14 6a02 	vldr	s12, [r4, #-8]
 8005900:	ed54 6a01 	vldr	s13, [r4, #-4]
 8005904:	f006 0a0f 	and.w	sl, r6, #15
 8005908:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800590c:	edda 7a00 	vldr	s15, [sl]
 8005910:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 8005914:	0936      	lsrs	r6, r6, #4
 8005916:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800591a:	ee67 7a83 	vmul.f32	s15, s15, s6
 800591e:	ed96 3a00 	vldr	s6, [r6]
 8005922:	ea4f 161b 	mov.w	r6, fp, lsr #4
 8005926:	eee3 7a23 	vfma.f32	s15, s6, s7
 800592a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800592e:	f00b 0b0f 	and.w	fp, fp, #15
 8005932:	edd6 3a00 	vldr	s7, [r6]
 8005936:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 800593a:	eee3 7a84 	vfma.f32	s15, s7, s8
 800593e:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8005942:	3504      	adds	r5, #4
 8005944:	ed9b 4a00 	vldr	s8, [fp]
 8005948:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 800594c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005950:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8005954:	f00a 0a0f 	and.w	sl, sl, #15
 8005958:	eddb 4a00 	vldr	s9, [fp]
 800595c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005960:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005964:	45ae      	cmp	lr, r5
 8005966:	ed9a 5a00 	vldr	s10, [sl]
 800596a:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 800596e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005972:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005976:	f006 060f 	and.w	r6, r6, #15
 800597a:	edda 5a00 	vldr	s11, [sl]
 800597e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005982:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005986:	f104 0420 	add.w	r4, r4, #32
 800598a:	ed96 6a00 	vldr	s12, [r6]
 800598e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005992:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005996:	d1a1      	bne.n	80058dc <ai_dict4_dot_array_f32+0x28>
 8005998:	4449      	add	r1, r9
 800599a:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800599e:	459c      	cmp	ip, r3
 80059a0:	d92d      	bls.n	80059fe <ai_dict4_dot_array_f32+0x14a>
 80059a2:	f10c 0c07 	add.w	ip, ip, #7
 80059a6:	f103 0508 	add.w	r5, r3, #8
 80059aa:	ebac 0c05 	sub.w	ip, ip, r5
 80059ae:	f02c 0407 	bic.w	r4, ip, #7
 80059b2:	f103 0810 	add.w	r8, r3, #16
 80059b6:	44a0      	add	r8, r4
 80059b8:	f101 3eff 	add.w	lr, r1, #4294967295
 80059bc:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 80059c0:	ed15 6a01 	vldr	s12, [r5, #-4]
 80059c4:	ed55 6a02 	vldr	s13, [r5, #-8]
 80059c8:	f004 060f 	and.w	r6, r4, #15
 80059cc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80059d0:	0924      	lsrs	r4, r4, #4
 80059d2:	edd6 7a00 	vldr	s15, [r6]
 80059d6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80059da:	ee67 7a86 	vmul.f32	s15, s15, s12
 80059de:	ed94 6a00 	vldr	s12, [r4]
 80059e2:	eee6 7a26 	vfma.f32	s15, s12, s13
 80059e6:	3508      	adds	r5, #8
 80059e8:	45a8      	cmp	r8, r5
 80059ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059ee:	d1e5      	bne.n	80059bc <ai_dict4_dot_array_f32+0x108>
 80059f0:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 80059f4:	f10c 0c01 	add.w	ip, ip, #1
 80059f8:	4461      	add	r1, ip
 80059fa:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 80059fe:	07fc      	lsls	r4, r7, #31
 8005a00:	d509      	bpl.n	8005a16 <ai_dict4_dot_array_f32+0x162>
 8005a02:	7809      	ldrb	r1, [r1, #0]
 8005a04:	edd3 7a00 	vldr	s15, [r3]
 8005a08:	090b      	lsrs	r3, r1, #4
 8005a0a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005a0e:	edd2 6a00 	vldr	s13, [r2]
 8005a12:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005a16:	edd0 7a00 	vldr	s15, [r0]
 8005a1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a1e:	ed80 7a00 	vstr	s14, [r0]
 8005a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a26:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8005a2c <ai_dict4_dot_array_f32+0x178>
 8005a2a:	e7b8      	b.n	800599e <ai_dict4_dot_array_f32+0xea>
 8005a2c:	00000000 	.word	0x00000000

08005a30 <forward_dense>:
 8005a30:	6942      	ldr	r2, [r0, #20]
 8005a32:	8813      	ldrh	r3, [r2, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 81ca 	beq.w	8005dce <forward_dense+0x39e>
 8005a3a:	6852      	ldr	r2, [r2, #4]
 8005a3c:	6850      	ldr	r0, [r2, #4]
 8005a3e:	b100      	cbz	r0, 8005a42 <forward_dense+0x12>
 8005a40:	6800      	ldr	r0, [r0, #0]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	f240 81c0 	bls.w	8005dc8 <forward_dense+0x398>
 8005a48:	6911      	ldr	r1, [r2, #16]
 8005a4a:	b101      	cbz	r1, 8005a4e <forward_dense+0x1e>
 8005a4c:	6809      	ldr	r1, [r1, #0]
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	f000 81bf 	beq.w	8005dd2 <forward_dense+0x3a2>
 8005a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a58:	ed2d 8b10 	vpush	{d8-d15}
 8005a5c:	69d3      	ldr	r3, [r2, #28]
 8005a5e:	b091      	sub	sp, #68	; 0x44
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 820b 	beq.w	8005e7c <forward_dense+0x44c>
 8005a66:	681c      	ldr	r4, [r3, #0]
 8005a68:	9408      	str	r4, [sp, #32]
 8005a6a:	f112 0418 	adds.w	r4, r2, #24
 8005a6e:	f000 81df 	beq.w	8005e30 <forward_dense+0x400>
 8005a72:	8b12      	ldrh	r2, [r2, #24]
 8005a74:	2a01      	cmp	r2, #1
 8005a76:	f240 81fe 	bls.w	8005e76 <forward_dense+0x446>
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 81da 	beq.w	8005e34 <forward_dense+0x404>
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	9306      	str	r3, [sp, #24]
 8005a84:	9b08      	ldr	r3, [sp, #32]
 8005a86:	68cc      	ldr	r4, [r1, #12]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	68c5      	ldr	r5, [r0, #12]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8005a92:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8005a96:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 8005a9a:	f3c2 5541 	ubfx	r5, r2, #21, #2
 8005a9e:	fa4c f505 	asr.w	r5, ip, r5
 8005aa2:	f3c2 4243 	ubfx	r2, r2, #17, #4
 8005aa6:	950b      	str	r5, [sp, #44]	; 0x2c
 8005aa8:	2a04      	cmp	r2, #4
 8005aaa:	fb07 f506 	mul.w	r5, r7, r6
 8005aae:	6864      	ldr	r4, [r4, #4]
 8005ab0:	9507      	str	r5, [sp, #28]
 8005ab2:	f000 81dd 	beq.w	8005e70 <forward_dense+0x440>
 8005ab6:	2a08      	cmp	r2, #8
 8005ab8:	f000 81da 	beq.w	8005e70 <forward_dense+0x440>
 8005abc:	f04f 0a00 	mov.w	sl, #0
 8005ac0:	698a      	ldr	r2, [r1, #24]
 8005ac2:	6981      	ldr	r1, [r0, #24]
 8005ac4:	6890      	ldr	r0, [r2, #8]
 8005ac6:	9a08      	ldr	r2, [sp, #32]
 8005ac8:	9004      	str	r0, [sp, #16]
 8005aca:	6952      	ldr	r2, [r2, #20]
 8005acc:	688f      	ldr	r7, [r1, #8]
 8005ace:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8005ad2:	00a2      	lsls	r2, r4, #2
 8005ad4:	9209      	str	r2, [sp, #36]	; 0x24
 8005ad6:	1886      	adds	r6, r0, r2
 8005ad8:	9a07      	ldr	r2, [sp, #28]
 8005ada:	2a00      	cmp	r2, #0
 8005adc:	f000 81c3 	beq.w	8005e66 <forward_dense+0x436>
 8005ae0:	f1a8 0210 	sub.w	r2, r8, #16
 8005ae4:	0912      	lsrs	r2, r2, #4
 8005ae6:	3201      	adds	r2, #1
 8005ae8:	0192      	lsls	r2, r2, #6
 8005aea:	920c      	str	r2, [sp, #48]	; 0x30
 8005aec:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8005af0:	920a      	str	r2, [sp, #40]	; 0x28
 8005af2:	689d      	ldr	r5, [r3, #8]
 8005af4:	9b06      	ldr	r3, [sp, #24]
 8005af6:	eddf aad0 	vldr	s21, [pc, #832]	; 8005e38 <forward_dense+0x408>
 8005afa:	2200      	movs	r2, #0
 8005afc:	9205      	str	r2, [sp, #20]
 8005afe:	f008 020f 	and.w	r2, r8, #15
 8005b02:	920d      	str	r2, [sp, #52]	; 0x34
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d043      	beq.n	8005b90 <forward_dense+0x160>
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	689c      	ldr	r4, [r3, #8]
 8005b0c:	9b04      	ldr	r3, [sp, #16]
 8005b0e:	f1ba 0f00 	cmp.w	sl, #0
 8005b12:	d042      	beq.n	8005b9a <forward_dense+0x16a>
 8005b14:	42b3      	cmp	r3, r6
 8005b16:	d22a      	bcs.n	8005b6e <forward_dense+0x13e>
 8005b18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b1a:	469b      	mov	fp, r3
 8005b1c:	ab0f      	add	r3, sp, #60	; 0x3c
 8005b1e:	9303      	str	r3, [sp, #12]
 8005b20:	2a04      	cmp	r2, #4
 8005b22:	4633      	mov	r3, r6
 8005b24:	4646      	mov	r6, r8
 8005b26:	4698      	mov	r8, r3
 8005b28:	f000 8156 	beq.w	8005dd8 <forward_dense+0x3a8>
 8005b2c:	2c00      	cmp	r4, #0
 8005b2e:	f000 8185 	beq.w	8005e3c <forward_dense+0x40c>
 8005b32:	f8d4 c000 	ldr.w	ip, [r4]
 8005b36:	9803      	ldr	r0, [sp, #12]
 8005b38:	9600      	str	r6, [sp, #0]
 8005b3a:	463b      	mov	r3, r7
 8005b3c:	4629      	mov	r1, r5
 8005b3e:	4652      	mov	r2, sl
 8005b40:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8005b44:	f7ff fde8 	bl	8005718 <ai_dict8_dot_array_f32>
 8005b48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b4a:	f84b 3b04 	str.w	r3, [fp], #4
 8005b4e:	45c3      	cmp	fp, r8
 8005b50:	f104 0404 	add.w	r4, r4, #4
 8005b54:	444d      	add	r5, r9
 8005b56:	d3e9      	bcc.n	8005b2c <forward_dense+0xfc>
 8005b58:	4643      	mov	r3, r8
 8005b5a:	46b0      	mov	r8, r6
 8005b5c:	461e      	mov	r6, r3
 8005b5e:	9a04      	ldr	r2, [sp, #16]
 8005b60:	43d3      	mvns	r3, r2
 8005b62:	4433      	add	r3, r6
 8005b64:	f023 0303 	bic.w	r3, r3, #3
 8005b68:	3304      	adds	r3, #4
 8005b6a:	18d3      	adds	r3, r2, r3
 8005b6c:	9304      	str	r3, [sp, #16]
 8005b6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b70:	9b05      	ldr	r3, [sp, #20]
 8005b72:	4417      	add	r7, r2
 8005b74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b76:	4416      	add	r6, r2
 8005b78:	9a07      	ldr	r2, [sp, #28]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	9305      	str	r3, [sp, #20]
 8005b80:	f000 8171 	beq.w	8005e66 <forward_dense+0x436>
 8005b84:	9b08      	ldr	r3, [sp, #32]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	689d      	ldr	r5, [r3, #8]
 8005b8a:	9b06      	ldr	r3, [sp, #24]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1bb      	bne.n	8005b08 <forward_dense+0xd8>
 8005b90:	461c      	mov	r4, r3
 8005b92:	9b04      	ldr	r3, [sp, #16]
 8005b94:	f1ba 0f00 	cmp.w	sl, #0
 8005b98:	d1bc      	bne.n	8005b14 <forward_dense+0xe4>
 8005b9a:	42b3      	cmp	r3, r6
 8005b9c:	d2e7      	bcs.n	8005b6e <forward_dense+0x13e>
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ba2:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8005ba6:	eb07 0c03 	add.w	ip, r7, r3
 8005baa:	469e      	mov	lr, r3
 8005bac:	2c00      	cmp	r4, #0
 8005bae:	f000 80ff 	beq.w	8005db0 <forward_dense+0x380>
 8005bb2:	f1b8 0f0f 	cmp.w	r8, #15
 8005bb6:	edd4 fa00 	vldr	s31, [r4]
 8005bba:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8005e38 <forward_dense+0x408>
 8005bbe:	f104 0404 	add.w	r4, r4, #4
 8005bc2:	f240 80fd 	bls.w	8005dc0 <forward_dense+0x390>
 8005bc6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005bca:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8005bce:	4641      	mov	r1, r8
 8005bd0:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 8005bd4:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8005bd8:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8005bdc:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 8005be0:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8005be4:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8005be8:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8005bec:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 8005bf0:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 8005bf4:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8005bf8:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8005bfc:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8005c00:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8005c04:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8005c08:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8005c0c:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 8005c10:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8005c14:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8005c18:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8005c1c:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 8005c20:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8005c24:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8005c28:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 8005c2c:	ed13 4a04 	vldr	s8, [r3, #-16]
 8005c30:	ed52 4a04 	vldr	s9, [r2, #-16]
 8005c34:	ed12 5a03 	vldr	s10, [r2, #-12]
 8005c38:	ed53 5a03 	vldr	s11, [r3, #-12]
 8005c3c:	ed12 6a02 	vldr	s12, [r2, #-8]
 8005c40:	ed13 7a02 	vldr	s14, [r3, #-8]
 8005c44:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8005c48:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 8005c4c:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8005c50:	3910      	subs	r1, #16
 8005c52:	290f      	cmp	r1, #15
 8005c54:	ed53 ea01 	vldr	s29, [r3, #-4]
 8005c58:	ed12 ea01 	vldr	s28, [r2, #-4]
 8005c5c:	eeed 7a8f 	vfma.f32	s15, s27, s30
 8005c60:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8005c64:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8005c68:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8005c6c:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8005c70:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 8005c74:	eee9 7a89 	vfma.f32	s15, s19, s18
 8005c78:	eee8 7a88 	vfma.f32	s15, s17, s16
 8005c7c:	eee0 7a20 	vfma.f32	s15, s0, s1
 8005c80:	eee1 7a21 	vfma.f32	s15, s2, s3
 8005c84:	eee2 7a22 	vfma.f32	s15, s4, s5
 8005c88:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005c8c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005c90:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005c94:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005c98:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8005c9c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005ca0:	d896      	bhi.n	8005bd0 <forward_dense+0x1a0>
 8005ca2:	eb05 010e 	add.w	r1, r5, lr
 8005ca6:	465b      	mov	r3, fp
 8005ca8:	4662      	mov	r2, ip
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d075      	beq.n	8005d9a <forward_dense+0x36a>
 8005cae:	ed91 7a00 	vldr	s14, [r1]
 8005cb2:	edd2 7a00 	vldr	s15, [r2]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005cbc:	d06d      	beq.n	8005d9a <forward_dense+0x36a>
 8005cbe:	ed91 7a01 	vldr	s14, [r1, #4]
 8005cc2:	edd2 7a01 	vldr	s15, [r2, #4]
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005ccc:	d065      	beq.n	8005d9a <forward_dense+0x36a>
 8005cce:	ed91 7a02 	vldr	s14, [r1, #8]
 8005cd2:	edd2 7a02 	vldr	s15, [r2, #8]
 8005cd6:	2b03      	cmp	r3, #3
 8005cd8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005cdc:	d05d      	beq.n	8005d9a <forward_dense+0x36a>
 8005cde:	ed91 7a03 	vldr	s14, [r1, #12]
 8005ce2:	edd2 7a03 	vldr	s15, [r2, #12]
 8005ce6:	2b04      	cmp	r3, #4
 8005ce8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005cec:	d055      	beq.n	8005d9a <forward_dense+0x36a>
 8005cee:	ed91 7a04 	vldr	s14, [r1, #16]
 8005cf2:	edd2 7a04 	vldr	s15, [r2, #16]
 8005cf6:	2b05      	cmp	r3, #5
 8005cf8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005cfc:	d04d      	beq.n	8005d9a <forward_dense+0x36a>
 8005cfe:	ed91 7a05 	vldr	s14, [r1, #20]
 8005d02:	edd2 7a05 	vldr	s15, [r2, #20]
 8005d06:	2b06      	cmp	r3, #6
 8005d08:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005d0c:	d045      	beq.n	8005d9a <forward_dense+0x36a>
 8005d0e:	ed91 7a06 	vldr	s14, [r1, #24]
 8005d12:	edd2 7a06 	vldr	s15, [r2, #24]
 8005d16:	2b07      	cmp	r3, #7
 8005d18:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005d1c:	d03d      	beq.n	8005d9a <forward_dense+0x36a>
 8005d1e:	ed91 7a07 	vldr	s14, [r1, #28]
 8005d22:	edd2 7a07 	vldr	s15, [r2, #28]
 8005d26:	2b08      	cmp	r3, #8
 8005d28:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005d2c:	d035      	beq.n	8005d9a <forward_dense+0x36a>
 8005d2e:	ed91 7a08 	vldr	s14, [r1, #32]
 8005d32:	edd2 7a08 	vldr	s15, [r2, #32]
 8005d36:	2b09      	cmp	r3, #9
 8005d38:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005d3c:	d02d      	beq.n	8005d9a <forward_dense+0x36a>
 8005d3e:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8005d42:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8005d46:	2b0a      	cmp	r3, #10
 8005d48:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005d4c:	d025      	beq.n	8005d9a <forward_dense+0x36a>
 8005d4e:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 8005d52:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8005d56:	2b0b      	cmp	r3, #11
 8005d58:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005d5c:	d01d      	beq.n	8005d9a <forward_dense+0x36a>
 8005d5e:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8005d62:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8005d66:	2b0c      	cmp	r3, #12
 8005d68:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005d6c:	d015      	beq.n	8005d9a <forward_dense+0x36a>
 8005d6e:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8005d72:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8005d76:	2b0d      	cmp	r3, #13
 8005d78:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005d7c:	d00d      	beq.n	8005d9a <forward_dense+0x36a>
 8005d7e:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8005d82:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8005d86:	2b0e      	cmp	r3, #14
 8005d88:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005d8c:	d005      	beq.n	8005d9a <forward_dense+0x36a>
 8005d8e:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 8005d92:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8005d96:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005d9a:	444d      	add	r5, r9
 8005d9c:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 8005da0:	ece0 6a01 	vstmia	r0!, {s13}
 8005da4:	42b0      	cmp	r0, r6
 8005da6:	f4bf aeda 	bcs.w	8005b5e <forward_dense+0x12e>
 8005daa:	2c00      	cmp	r4, #0
 8005dac:	f47f af01 	bne.w	8005bb2 <forward_dense+0x182>
 8005db0:	f1b8 0f0f 	cmp.w	r8, #15
 8005db4:	eef0 fa6a 	vmov.f32	s31, s21
 8005db8:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8005e38 <forward_dense+0x408>
 8005dbc:	f63f af03 	bhi.w	8005bc6 <forward_dense+0x196>
 8005dc0:	4643      	mov	r3, r8
 8005dc2:	4629      	mov	r1, r5
 8005dc4:	463a      	mov	r2, r7
 8005dc6:	e770      	b.n	8005caa <forward_dense+0x27a>
 8005dc8:	2300      	movs	r3, #0
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	deff      	udf	#255	; 0xff
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	deff      	udf	#255	; 0xff
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	deff      	udf	#255	; 0xff
 8005dd8:	b1ac      	cbz	r4, 8005e06 <forward_dense+0x3d6>
 8005dda:	f8d4 c000 	ldr.w	ip, [r4]
 8005dde:	9803      	ldr	r0, [sp, #12]
 8005de0:	9600      	str	r6, [sp, #0]
 8005de2:	463b      	mov	r3, r7
 8005de4:	4629      	mov	r1, r5
 8005de6:	4652      	mov	r2, sl
 8005de8:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8005dec:	f7ff fd62 	bl	80058b4 <ai_dict4_dot_array_f32>
 8005df0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005df2:	f84b 3b04 	str.w	r3, [fp], #4
 8005df6:	45c3      	cmp	fp, r8
 8005df8:	f104 0404 	add.w	r4, r4, #4
 8005dfc:	444d      	add	r5, r9
 8005dfe:	f4bf aeab 	bcs.w	8005b58 <forward_dense+0x128>
 8005e02:	2c00      	cmp	r4, #0
 8005e04:	d1e9      	bne.n	8005dda <forward_dense+0x3aa>
 8005e06:	4634      	mov	r4, r6
 8005e08:	4646      	mov	r6, r8
 8005e0a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005e0e:	9400      	str	r4, [sp, #0]
 8005e10:	463b      	mov	r3, r7
 8005e12:	4629      	mov	r1, r5
 8005e14:	4652      	mov	r2, sl
 8005e16:	4640      	mov	r0, r8
 8005e18:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8005e1c:	f7ff fd4a 	bl	80058b4 <ai_dict4_dot_array_f32>
 8005e20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e22:	f84b 3b04 	str.w	r3, [fp], #4
 8005e26:	45b3      	cmp	fp, r6
 8005e28:	444d      	add	r5, r9
 8005e2a:	d3f0      	bcc.n	8005e0e <forward_dense+0x3de>
 8005e2c:	46a0      	mov	r8, r4
 8005e2e:	e696      	b.n	8005b5e <forward_dense+0x12e>
 8005e30:	9406      	str	r4, [sp, #24]
 8005e32:	e627      	b.n	8005a84 <forward_dense+0x54>
 8005e34:	9306      	str	r3, [sp, #24]
 8005e36:	e625      	b.n	8005a84 <forward_dense+0x54>
 8005e38:	00000000 	.word	0x00000000
 8005e3c:	4634      	mov	r4, r6
 8005e3e:	4646      	mov	r6, r8
 8005e40:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005e44:	9400      	str	r4, [sp, #0]
 8005e46:	463b      	mov	r3, r7
 8005e48:	4629      	mov	r1, r5
 8005e4a:	4652      	mov	r2, sl
 8005e4c:	4640      	mov	r0, r8
 8005e4e:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8005e52:	f7ff fc61 	bl	8005718 <ai_dict8_dot_array_f32>
 8005e56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e58:	f84b 3b04 	str.w	r3, [fp], #4
 8005e5c:	45b3      	cmp	fp, r6
 8005e5e:	444d      	add	r5, r9
 8005e60:	d3f0      	bcc.n	8005e44 <forward_dense+0x414>
 8005e62:	46a0      	mov	r8, r4
 8005e64:	e67b      	b.n	8005b5e <forward_dense+0x12e>
 8005e66:	b011      	add	sp, #68	; 0x44
 8005e68:	ecbd 8b10 	vpop	{d8-d15}
 8005e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e70:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8005e74:	e624      	b.n	8005ac0 <forward_dense+0x90>
 8005e76:	2300      	movs	r3, #0
 8005e78:	9306      	str	r3, [sp, #24]
 8005e7a:	e603      	b.n	8005a84 <forward_dense+0x54>
 8005e7c:	9308      	str	r3, [sp, #32]
 8005e7e:	e5f4      	b.n	8005a6a <forward_dense+0x3a>

08005e80 <nl_func_relu_generic_array_f32>:
 8005e80:	b430      	push	{r4, r5}
 8005e82:	edd3 6a02 	vldr	s13, [r3, #8]
 8005e86:	6880      	ldr	r0, [r0, #8]
 8005e88:	688c      	ldr	r4, [r1, #8]
 8005e8a:	ed93 7a00 	vldr	s14, [r3]
 8005e8e:	ed93 6a01 	vldr	s12, [r3, #4]
 8005e92:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005e96:	3a01      	subs	r2, #1
 8005e98:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8005e9c:	0092      	lsls	r2, r2, #2
 8005e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ea2:	4410      	add	r0, r2
 8005ea4:	4422      	add	r2, r4
 8005ea6:	d421      	bmi.n	8005eec <nl_func_relu_generic_array_f32+0x6c>
 8005ea8:	42a2      	cmp	r2, r4
 8005eaa:	d33d      	bcc.n	8005f28 <nl_func_relu_generic_array_f32+0xa8>
 8005eac:	1d13      	adds	r3, r2, #4
 8005eae:	1d02      	adds	r2, r0, #4
 8005eb0:	e010      	b.n	8005ed4 <nl_func_relu_generic_array_f32+0x54>
 8005eb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eba:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8005ebe:	dd01      	ble.n	8005ec4 <nl_func_relu_generic_array_f32+0x44>
 8005ec0:	ee65 7a86 	vmul.f32	s15, s11, s12
 8005ec4:	ed62 7a01 	vstmdb	r2!, {s15}
 8005ec8:	6888      	ldr	r0, [r1, #8]
 8005eca:	f1a3 0408 	sub.w	r4, r3, #8
 8005ece:	4284      	cmp	r4, r0
 8005ed0:	462b      	mov	r3, r5
 8005ed2:	d329      	bcc.n	8005f28 <nl_func_relu_generic_array_f32+0xa8>
 8005ed4:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005ed8:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ee0:	f1a3 0504 	sub.w	r5, r3, #4
 8005ee4:	dce5      	bgt.n	8005eb2 <nl_func_relu_generic_array_f32+0x32>
 8005ee6:	eef0 7a66 	vmov.f32	s15, s13
 8005eea:	e7eb      	b.n	8005ec4 <nl_func_relu_generic_array_f32+0x44>
 8005eec:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ef4:	d01a      	beq.n	8005f2c <nl_func_relu_generic_array_f32+0xac>
 8005ef6:	42a2      	cmp	r2, r4
 8005ef8:	d316      	bcc.n	8005f28 <nl_func_relu_generic_array_f32+0xa8>
 8005efa:	1d13      	adds	r3, r2, #4
 8005efc:	1d02      	adds	r2, r0, #4
 8005efe:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005f02:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8005f06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f0a:	f1a3 0408 	sub.w	r4, r3, #8
 8005f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f12:	f1a3 0004 	sub.w	r0, r3, #4
 8005f16:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005f1a:	4623      	mov	r3, r4
 8005f1c:	d51e      	bpl.n	8005f5c <nl_func_relu_generic_array_f32+0xdc>
 8005f1e:	ed62 6a01 	vstmdb	r2!, {s13}
 8005f22:	688b      	ldr	r3, [r1, #8]
 8005f24:	42a3      	cmp	r3, r4
 8005f26:	d91e      	bls.n	8005f66 <nl_func_relu_generic_array_f32+0xe6>
 8005f28:	bc30      	pop	{r4, r5}
 8005f2a:	4770      	bx	lr
 8005f2c:	42a2      	cmp	r2, r4
 8005f2e:	d3fb      	bcc.n	8005f28 <nl_func_relu_generic_array_f32+0xa8>
 8005f30:	1d13      	adds	r3, r2, #4
 8005f32:	2500      	movs	r5, #0
 8005f34:	1d02      	adds	r2, r0, #4
 8005f36:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005f3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f3e:	f1a3 0408 	sub.w	r4, r3, #8
 8005f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f46:	f1a3 0004 	sub.w	r0, r3, #4
 8005f4a:	4623      	mov	r3, r4
 8005f4c:	d80d      	bhi.n	8005f6a <nl_func_relu_generic_array_f32+0xea>
 8005f4e:	ed62 7a01 	vstmdb	r2!, {s15}
 8005f52:	688b      	ldr	r3, [r1, #8]
 8005f54:	42a3      	cmp	r3, r4
 8005f56:	d8e7      	bhi.n	8005f28 <nl_func_relu_generic_array_f32+0xa8>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	e7ec      	b.n	8005f36 <nl_func_relu_generic_array_f32+0xb6>
 8005f5c:	ed62 7a01 	vstmdb	r2!, {s15}
 8005f60:	688c      	ldr	r4, [r1, #8]
 8005f62:	429c      	cmp	r4, r3
 8005f64:	d8e0      	bhi.n	8005f28 <nl_func_relu_generic_array_f32+0xa8>
 8005f66:	4603      	mov	r3, r0
 8005f68:	e7c9      	b.n	8005efe <nl_func_relu_generic_array_f32+0x7e>
 8005f6a:	f842 5d04 	str.w	r5, [r2, #-4]!
 8005f6e:	688c      	ldr	r4, [r1, #8]
 8005f70:	429c      	cmp	r4, r3
 8005f72:	d8d9      	bhi.n	8005f28 <nl_func_relu_generic_array_f32+0xa8>
 8005f74:	4603      	mov	r3, r0
 8005f76:	e7de      	b.n	8005f36 <nl_func_relu_generic_array_f32+0xb6>

08005f78 <forward_relu>:
 8005f78:	6942      	ldr	r2, [r0, #20]
 8005f7a:	8813      	ldrh	r3, [r2, #0]
 8005f7c:	b33b      	cbz	r3, 8005fce <forward_relu+0x56>
 8005f7e:	b470      	push	{r4, r5, r6}
 8005f80:	6852      	ldr	r2, [r2, #4]
 8005f82:	6856      	ldr	r6, [r2, #4]
 8005f84:	b106      	cbz	r6, 8005f88 <forward_relu+0x10>
 8005f86:	6836      	ldr	r6, [r6, #0]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d91d      	bls.n	8005fc8 <forward_relu+0x50>
 8005f8c:	6913      	ldr	r3, [r2, #16]
 8005f8e:	b103      	cbz	r3, 8005f92 <forward_relu+0x1a>
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6982      	ldr	r2, [r0, #24]
 8005f94:	68b4      	ldr	r4, [r6, #8]
 8005f96:	6998      	ldr	r0, [r3, #24]
 8005f98:	69b1      	ldr	r1, [r6, #24]
 8005f9a:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8005f9e:	2a00      	cmp	r2, #0
 8005fa0:	d041      	beq.n	8006026 <forward_relu+0xae>
 8005fa2:	e9d2 5301 	ldrd	r5, r3, [r2, #4]
 8005fa6:	2d01      	cmp	r5, #1
 8005fa8:	d013      	beq.n	8005fd2 <forward_relu+0x5a>
 8005faa:	2c00      	cmp	r4, #0
 8005fac:	d06f      	beq.n	800608e <forward_relu+0x116>
 8005fae:	68f6      	ldr	r6, [r6, #12]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8005fb6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005fba:	42a6      	cmp	r6, r4
 8005fbc:	fb05 f202 	mul.w	r2, r5, r2
 8005fc0:	d1f9      	bne.n	8005fb6 <forward_relu+0x3e>
 8005fc2:	bc70      	pop	{r4, r5, r6}
 8005fc4:	f7ff bf5c 	b.w	8005e80 <nl_func_relu_generic_array_f32>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	deff      	udf	#255	; 0xff
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	deff      	udf	#255	; 0xff
 8005fd2:	6880      	ldr	r0, [r0, #8]
 8005fd4:	688a      	ldr	r2, [r1, #8]
 8005fd6:	ed93 7a00 	vldr	s14, [r3]
 8005fda:	b184      	cbz	r4, 8005ffe <forward_relu+0x86>
 8005fdc:	68f6      	ldr	r6, [r6, #12]
 8005fde:	462b      	mov	r3, r5
 8005fe0:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8005fe4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005fe8:	42a6      	cmp	r6, r4
 8005fea:	fb05 f303 	mul.w	r3, r5, r3
 8005fee:	d1f9      	bne.n	8005fe4 <forward_relu+0x6c>
 8005ff0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	18d2      	adds	r2, r2, r3
 8005ffa:	4418      	add	r0, r3
 8005ffc:	d23d      	bcs.n	800607a <forward_relu+0x102>
 8005ffe:	1d13      	adds	r3, r2, #4
 8006000:	2500      	movs	r5, #0
 8006002:	1d02      	adds	r2, r0, #4
 8006004:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006008:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800600c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006010:	f1a3 0004 	sub.w	r0, r3, #4
 8006014:	d833      	bhi.n	800607e <forward_relu+0x106>
 8006016:	ed62 7a01 	vstmdb	r2!, {s15}
 800601a:	688c      	ldr	r4, [r1, #8]
 800601c:	3b08      	subs	r3, #8
 800601e:	429c      	cmp	r4, r3
 8006020:	d82b      	bhi.n	800607a <forward_relu+0x102>
 8006022:	4603      	mov	r3, r0
 8006024:	e7ee      	b.n	8006004 <forward_relu+0x8c>
 8006026:	6880      	ldr	r0, [r0, #8]
 8006028:	688b      	ldr	r3, [r1, #8]
 800602a:	b184      	cbz	r4, 800604e <forward_relu+0xd6>
 800602c:	68f6      	ldr	r6, [r6, #12]
 800602e:	2201      	movs	r2, #1
 8006030:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8006034:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006038:	42a6      	cmp	r6, r4
 800603a:	fb05 f202 	mul.w	r2, r5, r2
 800603e:	d1f9      	bne.n	8006034 <forward_relu+0xbc>
 8006040:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006044:	3a01      	subs	r2, #1
 8006046:	0092      	lsls	r2, r2, #2
 8006048:	189b      	adds	r3, r3, r2
 800604a:	4410      	add	r0, r2
 800604c:	d215      	bcs.n	800607a <forward_relu+0x102>
 800604e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006094 <forward_relu+0x11c>
 8006052:	3304      	adds	r3, #4
 8006054:	3004      	adds	r0, #4
 8006056:	ed53 7a01 	vldr	s15, [r3, #-4]
 800605a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800605e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006062:	bfb8      	it	lt
 8006064:	eef0 7a47 	vmovlt.f32	s15, s14
 8006068:	ed60 7a01 	vstmdb	r0!, {s15}
 800606c:	688c      	ldr	r4, [r1, #8]
 800606e:	f1a3 0208 	sub.w	r2, r3, #8
 8006072:	4294      	cmp	r4, r2
 8006074:	f1a3 0304 	sub.w	r3, r3, #4
 8006078:	d9ed      	bls.n	8006056 <forward_relu+0xde>
 800607a:	bc70      	pop	{r4, r5, r6}
 800607c:	4770      	bx	lr
 800607e:	f842 5d04 	str.w	r5, [r2, #-4]!
 8006082:	688c      	ldr	r4, [r1, #8]
 8006084:	3b08      	subs	r3, #8
 8006086:	429c      	cmp	r4, r3
 8006088:	d8f7      	bhi.n	800607a <forward_relu+0x102>
 800608a:	4603      	mov	r3, r0
 800608c:	e7ba      	b.n	8006004 <forward_relu+0x8c>
 800608e:	2201      	movs	r2, #1
 8006090:	e797      	b.n	8005fc2 <forward_relu+0x4a>
 8006092:	bf00      	nop
 8006094:	00000000 	.word	0x00000000

08006098 <ai_check_custom_types>:
 8006098:	4b13      	ldr	r3, [pc, #76]	; (80060e8 <ai_check_custom_types+0x50>)
 800609a:	b082      	sub	sp, #8
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	9301      	str	r3, [sp, #4]
 80060a0:	b118      	cbz	r0, 80060aa <ai_check_custom_types+0x12>
 80060a2:	7803      	ldrb	r3, [r0, #0]
 80060a4:	2b03      	cmp	r3, #3
 80060a6:	d002      	beq.n	80060ae <ai_check_custom_types+0x16>
 80060a8:	2000      	movs	r0, #0
 80060aa:	b002      	add	sp, #8
 80060ac:	4770      	bx	lr
 80060ae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d004      	beq.n	80060c0 <ai_check_custom_types+0x28>
 80060b6:	2001      	movs	r0, #1
 80060b8:	f080 0001 	eor.w	r0, r0, #1
 80060bc:	b002      	add	sp, #8
 80060be:	4770      	bx	lr
 80060c0:	7842      	ldrb	r2, [r0, #1]
 80060c2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	f100 0001 	add.w	r0, r0, #1
 80060cc:	d1f3      	bne.n	80060b6 <ai_check_custom_types+0x1e>
 80060ce:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80060d2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d1ed      	bne.n	80060b6 <ai_check_custom_types+0x1e>
 80060da:	7842      	ldrb	r2, [r0, #1]
 80060dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d1e8      	bne.n	80060b6 <ai_check_custom_types+0x1e>
 80060e4:	2000      	movs	r0, #0
 80060e6:	e7e7      	b.n	80060b8 <ai_check_custom_types+0x20>
 80060e8:	080091d4 	.word	0x080091d4

080060ec <ai_layers_forward_all>:
 80060ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ee:	6d86      	ldr	r6, [r0, #88]	; 0x58
 80060f0:	6d05      	ldr	r5, [r0, #80]	; 0x50
 80060f2:	4604      	mov	r4, r0
 80060f4:	b31e      	cbz	r6, 800613e <ai_layers_forward_all+0x52>
 80060f6:	b1cd      	cbz	r5, 800612c <ai_layers_forward_all+0x40>
 80060f8:	6545      	str	r5, [r0, #84]	; 0x54
 80060fa:	4629      	mov	r1, r5
 80060fc:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80060fe:	2001      	movs	r0, #1
 8006100:	47b0      	blx	r6
 8006102:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006104:	2700      	movs	r7, #0
 8006106:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006108:	2002      	movs	r0, #2
 800610a:	47b0      	blx	r6
 800610c:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800610e:	692b      	ldr	r3, [r5, #16]
 8006110:	4628      	mov	r0, r5
 8006112:	4798      	blx	r3
 8006114:	68eb      	ldr	r3, [r5, #12]
 8006116:	429d      	cmp	r5, r3
 8006118:	f04f 0003 	mov.w	r0, #3
 800611c:	4619      	mov	r1, r3
 800611e:	d006      	beq.n	800612e <ai_layers_forward_all+0x42>
 8006120:	6563      	str	r3, [r4, #84]	; 0x54
 8006122:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006124:	47b0      	blx	r6
 8006126:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006128:	2900      	cmp	r1, #0
 800612a:	d1ec      	bne.n	8006106 <ai_layers_forward_all+0x1a>
 800612c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800612e:	2100      	movs	r1, #0
 8006130:	6567      	str	r7, [r4, #84]	; 0x54
 8006132:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006134:	47b0      	blx	r6
 8006136:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006138:	2900      	cmp	r1, #0
 800613a:	d1e4      	bne.n	8006106 <ai_layers_forward_all+0x1a>
 800613c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800613e:	2d00      	cmp	r5, #0
 8006140:	d0f4      	beq.n	800612c <ai_layers_forward_all+0x40>
 8006142:	6545      	str	r5, [r0, #84]	; 0x54
 8006144:	692b      	ldr	r3, [r5, #16]
 8006146:	4628      	mov	r0, r5
 8006148:	4798      	blx	r3
 800614a:	68eb      	ldr	r3, [r5, #12]
 800614c:	42ab      	cmp	r3, r5
 800614e:	d004      	beq.n	800615a <ai_layers_forward_all+0x6e>
 8006150:	6563      	str	r3, [r4, #84]	; 0x54
 8006152:	461d      	mov	r5, r3
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1f5      	bne.n	8006144 <ai_layers_forward_all+0x58>
 8006158:	e7e8      	b.n	800612c <ai_layers_forward_all+0x40>
 800615a:	2300      	movs	r3, #0
 800615c:	6563      	str	r3, [r4, #84]	; 0x54
 800615e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006160 <ai_array_to_buffer_fmt>:
 8006160:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8006164:	2b02      	cmp	r3, #2
 8006166:	d01f      	beq.n	80061a8 <ai_array_to_buffer_fmt+0x48>
 8006168:	4a1c      	ldr	r2, [pc, #112]	; (80061dc <ai_array_to_buffer_fmt+0x7c>)
 800616a:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800616e:	4293      	cmp	r3, r2
 8006170:	d00a      	beq.n	8006188 <ai_array_to_buffer_fmt+0x28>
 8006172:	dc0d      	bgt.n	8006190 <ai_array_to_buffer_fmt+0x30>
 8006174:	4a1a      	ldr	r2, [pc, #104]	; (80061e0 <ai_array_to_buffer_fmt+0x80>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d006      	beq.n	8006188 <ai_array_to_buffer_fmt+0x28>
 800617a:	dd1d      	ble.n	80061b8 <ai_array_to_buffer_fmt+0x58>
 800617c:	4a19      	ldr	r2, [pc, #100]	; (80061e4 <ai_array_to_buffer_fmt+0x84>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d002      	beq.n	8006188 <ai_array_to_buffer_fmt+0x28>
 8006182:	320f      	adds	r2, #15
 8006184:	4293      	cmp	r3, r2
 8006186:	d10d      	bne.n	80061a4 <ai_array_to_buffer_fmt+0x44>
 8006188:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800618c:	4318      	orrs	r0, r3
 800618e:	4770      	bx	lr
 8006190:	4a15      	ldr	r2, [pc, #84]	; (80061e8 <ai_array_to_buffer_fmt+0x88>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d0f8      	beq.n	8006188 <ai_array_to_buffer_fmt+0x28>
 8006196:	dd18      	ble.n	80061ca <ai_array_to_buffer_fmt+0x6a>
 8006198:	4a14      	ldr	r2, [pc, #80]	; (80061ec <ai_array_to_buffer_fmt+0x8c>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d0f4      	beq.n	8006188 <ai_array_to_buffer_fmt+0x28>
 800619e:	4a14      	ldr	r2, [pc, #80]	; (80061f0 <ai_array_to_buffer_fmt+0x90>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d0f1      	beq.n	8006188 <ai_array_to_buffer_fmt+0x28>
 80061a4:	2340      	movs	r3, #64	; 0x40
 80061a6:	e7ef      	b.n	8006188 <ai_array_to_buffer_fmt+0x28>
 80061a8:	4b12      	ldr	r3, [pc, #72]	; (80061f4 <ai_array_to_buffer_fmt+0x94>)
 80061aa:	4003      	ands	r3, r0
 80061ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061b0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80061b4:	4318      	orrs	r0, r3
 80061b6:	4770      	bx	lr
 80061b8:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 80061bc:	4293      	cmp	r3, r2
 80061be:	d0e3      	beq.n	8006188 <ai_array_to_buffer_fmt+0x28>
 80061c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d0df      	beq.n	8006188 <ai_array_to_buffer_fmt+0x28>
 80061c8:	e7ec      	b.n	80061a4 <ai_array_to_buffer_fmt+0x44>
 80061ca:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d0da      	beq.n	8006188 <ai_array_to_buffer_fmt+0x28>
 80061d2:	3207      	adds	r2, #7
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d0d7      	beq.n	8006188 <ai_array_to_buffer_fmt+0x28>
 80061d8:	e7e4      	b.n	80061a4 <ai_array_to_buffer_fmt+0x44>
 80061da:	bf00      	nop
 80061dc:	00840040 	.word	0x00840040
 80061e0:	00040447 	.word	0x00040447
 80061e4:	00040840 	.word	0x00040840
 80061e8:	00840840 	.word	0x00840840
 80061ec:	0084084f 	.word	0x0084084f
 80061f0:	01821040 	.word	0x01821040
 80061f4:	00803fff 	.word	0x00803fff

080061f8 <ai_array_get_byte_size>:
 80061f8:	b1c1      	cbz	r1, 800622c <ai_array_get_byte_size+0x34>
 80061fa:	f3c0 3282 	ubfx	r2, r0, #14, #3
 80061fe:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8006202:	4413      	add	r3, r2
 8006204:	fb01 f103 	mul.w	r1, r1, r3
 8006208:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800620c:	3107      	adds	r1, #7
 800620e:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8006212:	f021 0107 	bic.w	r1, r1, #7
 8006216:	2804      	cmp	r0, #4
 8006218:	fa21 f102 	lsr.w	r1, r1, r2
 800621c:	d008      	beq.n	8006230 <ai_array_get_byte_size+0x38>
 800621e:	2808      	cmp	r0, #8
 8006220:	d101      	bne.n	8006226 <ai_array_get_byte_size+0x2e>
 8006222:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8006226:	3107      	adds	r1, #7
 8006228:	08c8      	lsrs	r0, r1, #3
 800622a:	4770      	bx	lr
 800622c:	4608      	mov	r0, r1
 800622e:	4770      	bx	lr
 8006230:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8006234:	3107      	adds	r1, #7
 8006236:	08c8      	lsrs	r0, r1, #3
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop

0800623c <_ZdlPvj>:
 800623c:	f000 b814 	b.w	8006268 <_ZdlPv>

08006240 <_Znwj>:
 8006240:	2801      	cmp	r0, #1
 8006242:	bf38      	it	cc
 8006244:	2001      	movcc	r0, #1
 8006246:	b510      	push	{r4, lr}
 8006248:	4604      	mov	r4, r0
 800624a:	4620      	mov	r0, r4
 800624c:	f000 f85a 	bl	8006304 <malloc>
 8006250:	b930      	cbnz	r0, 8006260 <_Znwj+0x20>
 8006252:	f000 f81d 	bl	8006290 <_ZSt15get_new_handlerv>
 8006256:	b908      	cbnz	r0, 800625c <_Znwj+0x1c>
 8006258:	f000 f822 	bl	80062a0 <abort>
 800625c:	4780      	blx	r0
 800625e:	e7f4      	b.n	800624a <_Znwj+0xa>
 8006260:	bd10      	pop	{r4, pc}

08006262 <__cxa_pure_virtual>:
 8006262:	b508      	push	{r3, lr}
 8006264:	f000 f80e 	bl	8006284 <_ZSt9terminatev>

08006268 <_ZdlPv>:
 8006268:	f000 b854 	b.w	8006314 <free>

0800626c <_ZN10__cxxabiv111__terminateEPFvvE>:
 800626c:	b508      	push	{r3, lr}
 800626e:	4780      	blx	r0
 8006270:	f000 f816 	bl	80062a0 <abort>

08006274 <_ZSt13get_terminatev>:
 8006274:	4b02      	ldr	r3, [pc, #8]	; (8006280 <_ZSt13get_terminatev+0xc>)
 8006276:	6818      	ldr	r0, [r3, #0]
 8006278:	f3bf 8f5b 	dmb	ish
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	20000438 	.word	0x20000438

08006284 <_ZSt9terminatev>:
 8006284:	b508      	push	{r3, lr}
 8006286:	f7ff fff5 	bl	8006274 <_ZSt13get_terminatev>
 800628a:	f7ff ffef 	bl	800626c <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08006290 <_ZSt15get_new_handlerv>:
 8006290:	4b02      	ldr	r3, [pc, #8]	; (800629c <_ZSt15get_new_handlerv+0xc>)
 8006292:	6818      	ldr	r0, [r3, #0]
 8006294:	f3bf 8f5b 	dmb	ish
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	20000858 	.word	0x20000858

080062a0 <abort>:
 80062a0:	b508      	push	{r3, lr}
 80062a2:	2006      	movs	r0, #6
 80062a4:	f000 fdd6 	bl	8006e54 <raise>
 80062a8:	2001      	movs	r0, #1
 80062aa:	f002 ff55 	bl	8009158 <_exit>
	...

080062b0 <__errno>:
 80062b0:	4b01      	ldr	r3, [pc, #4]	; (80062b8 <__errno+0x8>)
 80062b2:	6818      	ldr	r0, [r3, #0]
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	2000043c 	.word	0x2000043c

080062bc <__libc_init_array>:
 80062bc:	b570      	push	{r4, r5, r6, lr}
 80062be:	4d0d      	ldr	r5, [pc, #52]	; (80062f4 <__libc_init_array+0x38>)
 80062c0:	4c0d      	ldr	r4, [pc, #52]	; (80062f8 <__libc_init_array+0x3c>)
 80062c2:	1b64      	subs	r4, r4, r5
 80062c4:	10a4      	asrs	r4, r4, #2
 80062c6:	2600      	movs	r6, #0
 80062c8:	42a6      	cmp	r6, r4
 80062ca:	d109      	bne.n	80062e0 <__libc_init_array+0x24>
 80062cc:	4d0b      	ldr	r5, [pc, #44]	; (80062fc <__libc_init_array+0x40>)
 80062ce:	4c0c      	ldr	r4, [pc, #48]	; (8006300 <__libc_init_array+0x44>)
 80062d0:	f002 ff44 	bl	800915c <_init>
 80062d4:	1b64      	subs	r4, r4, r5
 80062d6:	10a4      	asrs	r4, r4, #2
 80062d8:	2600      	movs	r6, #0
 80062da:	42a6      	cmp	r6, r4
 80062dc:	d105      	bne.n	80062ea <__libc_init_array+0x2e>
 80062de:	bd70      	pop	{r4, r5, r6, pc}
 80062e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80062e4:	4798      	blx	r3
 80062e6:	3601      	adds	r6, #1
 80062e8:	e7ee      	b.n	80062c8 <__libc_init_array+0xc>
 80062ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80062ee:	4798      	blx	r3
 80062f0:	3601      	adds	r6, #1
 80062f2:	e7f2      	b.n	80062da <__libc_init_array+0x1e>
 80062f4:	080098c4 	.word	0x080098c4
 80062f8:	080098c4 	.word	0x080098c4
 80062fc:	080098c4 	.word	0x080098c4
 8006300:	080098cc 	.word	0x080098cc

08006304 <malloc>:
 8006304:	4b02      	ldr	r3, [pc, #8]	; (8006310 <malloc+0xc>)
 8006306:	4601      	mov	r1, r0
 8006308:	6818      	ldr	r0, [r3, #0]
 800630a:	f000 b88d 	b.w	8006428 <_malloc_r>
 800630e:	bf00      	nop
 8006310:	2000043c 	.word	0x2000043c

08006314 <free>:
 8006314:	4b02      	ldr	r3, [pc, #8]	; (8006320 <free+0xc>)
 8006316:	4601      	mov	r1, r0
 8006318:	6818      	ldr	r0, [r3, #0]
 800631a:	f000 b819 	b.w	8006350 <_free_r>
 800631e:	bf00      	nop
 8006320:	2000043c 	.word	0x2000043c

08006324 <memcpy>:
 8006324:	440a      	add	r2, r1
 8006326:	4291      	cmp	r1, r2
 8006328:	f100 33ff 	add.w	r3, r0, #4294967295
 800632c:	d100      	bne.n	8006330 <memcpy+0xc>
 800632e:	4770      	bx	lr
 8006330:	b510      	push	{r4, lr}
 8006332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006336:	f803 4f01 	strb.w	r4, [r3, #1]!
 800633a:	4291      	cmp	r1, r2
 800633c:	d1f9      	bne.n	8006332 <memcpy+0xe>
 800633e:	bd10      	pop	{r4, pc}

08006340 <memset>:
 8006340:	4402      	add	r2, r0
 8006342:	4603      	mov	r3, r0
 8006344:	4293      	cmp	r3, r2
 8006346:	d100      	bne.n	800634a <memset+0xa>
 8006348:	4770      	bx	lr
 800634a:	f803 1b01 	strb.w	r1, [r3], #1
 800634e:	e7f9      	b.n	8006344 <memset+0x4>

08006350 <_free_r>:
 8006350:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006352:	2900      	cmp	r1, #0
 8006354:	d044      	beq.n	80063e0 <_free_r+0x90>
 8006356:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800635a:	9001      	str	r0, [sp, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	f1a1 0404 	sub.w	r4, r1, #4
 8006362:	bfb8      	it	lt
 8006364:	18e4      	addlt	r4, r4, r3
 8006366:	f001 fc31 	bl	8007bcc <__malloc_lock>
 800636a:	4a1e      	ldr	r2, [pc, #120]	; (80063e4 <_free_r+0x94>)
 800636c:	9801      	ldr	r0, [sp, #4]
 800636e:	6813      	ldr	r3, [r2, #0]
 8006370:	b933      	cbnz	r3, 8006380 <_free_r+0x30>
 8006372:	6063      	str	r3, [r4, #4]
 8006374:	6014      	str	r4, [r2, #0]
 8006376:	b003      	add	sp, #12
 8006378:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800637c:	f001 bc2c 	b.w	8007bd8 <__malloc_unlock>
 8006380:	42a3      	cmp	r3, r4
 8006382:	d908      	bls.n	8006396 <_free_r+0x46>
 8006384:	6825      	ldr	r5, [r4, #0]
 8006386:	1961      	adds	r1, r4, r5
 8006388:	428b      	cmp	r3, r1
 800638a:	bf01      	itttt	eq
 800638c:	6819      	ldreq	r1, [r3, #0]
 800638e:	685b      	ldreq	r3, [r3, #4]
 8006390:	1949      	addeq	r1, r1, r5
 8006392:	6021      	streq	r1, [r4, #0]
 8006394:	e7ed      	b.n	8006372 <_free_r+0x22>
 8006396:	461a      	mov	r2, r3
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	b10b      	cbz	r3, 80063a0 <_free_r+0x50>
 800639c:	42a3      	cmp	r3, r4
 800639e:	d9fa      	bls.n	8006396 <_free_r+0x46>
 80063a0:	6811      	ldr	r1, [r2, #0]
 80063a2:	1855      	adds	r5, r2, r1
 80063a4:	42a5      	cmp	r5, r4
 80063a6:	d10b      	bne.n	80063c0 <_free_r+0x70>
 80063a8:	6824      	ldr	r4, [r4, #0]
 80063aa:	4421      	add	r1, r4
 80063ac:	1854      	adds	r4, r2, r1
 80063ae:	42a3      	cmp	r3, r4
 80063b0:	6011      	str	r1, [r2, #0]
 80063b2:	d1e0      	bne.n	8006376 <_free_r+0x26>
 80063b4:	681c      	ldr	r4, [r3, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	6053      	str	r3, [r2, #4]
 80063ba:	4421      	add	r1, r4
 80063bc:	6011      	str	r1, [r2, #0]
 80063be:	e7da      	b.n	8006376 <_free_r+0x26>
 80063c0:	d902      	bls.n	80063c8 <_free_r+0x78>
 80063c2:	230c      	movs	r3, #12
 80063c4:	6003      	str	r3, [r0, #0]
 80063c6:	e7d6      	b.n	8006376 <_free_r+0x26>
 80063c8:	6825      	ldr	r5, [r4, #0]
 80063ca:	1961      	adds	r1, r4, r5
 80063cc:	428b      	cmp	r3, r1
 80063ce:	bf04      	itt	eq
 80063d0:	6819      	ldreq	r1, [r3, #0]
 80063d2:	685b      	ldreq	r3, [r3, #4]
 80063d4:	6063      	str	r3, [r4, #4]
 80063d6:	bf04      	itt	eq
 80063d8:	1949      	addeq	r1, r1, r5
 80063da:	6021      	streq	r1, [r4, #0]
 80063dc:	6054      	str	r4, [r2, #4]
 80063de:	e7ca      	b.n	8006376 <_free_r+0x26>
 80063e0:	b003      	add	sp, #12
 80063e2:	bd30      	pop	{r4, r5, pc}
 80063e4:	2000085c 	.word	0x2000085c

080063e8 <sbrk_aligned>:
 80063e8:	b570      	push	{r4, r5, r6, lr}
 80063ea:	4e0e      	ldr	r6, [pc, #56]	; (8006424 <sbrk_aligned+0x3c>)
 80063ec:	460c      	mov	r4, r1
 80063ee:	6831      	ldr	r1, [r6, #0]
 80063f0:	4605      	mov	r5, r0
 80063f2:	b911      	cbnz	r1, 80063fa <sbrk_aligned+0x12>
 80063f4:	f000 fcf6 	bl	8006de4 <_sbrk_r>
 80063f8:	6030      	str	r0, [r6, #0]
 80063fa:	4621      	mov	r1, r4
 80063fc:	4628      	mov	r0, r5
 80063fe:	f000 fcf1 	bl	8006de4 <_sbrk_r>
 8006402:	1c43      	adds	r3, r0, #1
 8006404:	d00a      	beq.n	800641c <sbrk_aligned+0x34>
 8006406:	1cc4      	adds	r4, r0, #3
 8006408:	f024 0403 	bic.w	r4, r4, #3
 800640c:	42a0      	cmp	r0, r4
 800640e:	d007      	beq.n	8006420 <sbrk_aligned+0x38>
 8006410:	1a21      	subs	r1, r4, r0
 8006412:	4628      	mov	r0, r5
 8006414:	f000 fce6 	bl	8006de4 <_sbrk_r>
 8006418:	3001      	adds	r0, #1
 800641a:	d101      	bne.n	8006420 <sbrk_aligned+0x38>
 800641c:	f04f 34ff 	mov.w	r4, #4294967295
 8006420:	4620      	mov	r0, r4
 8006422:	bd70      	pop	{r4, r5, r6, pc}
 8006424:	20000860 	.word	0x20000860

08006428 <_malloc_r>:
 8006428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800642c:	1ccd      	adds	r5, r1, #3
 800642e:	f025 0503 	bic.w	r5, r5, #3
 8006432:	3508      	adds	r5, #8
 8006434:	2d0c      	cmp	r5, #12
 8006436:	bf38      	it	cc
 8006438:	250c      	movcc	r5, #12
 800643a:	2d00      	cmp	r5, #0
 800643c:	4607      	mov	r7, r0
 800643e:	db01      	blt.n	8006444 <_malloc_r+0x1c>
 8006440:	42a9      	cmp	r1, r5
 8006442:	d905      	bls.n	8006450 <_malloc_r+0x28>
 8006444:	230c      	movs	r3, #12
 8006446:	603b      	str	r3, [r7, #0]
 8006448:	2600      	movs	r6, #0
 800644a:	4630      	mov	r0, r6
 800644c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006450:	4e2e      	ldr	r6, [pc, #184]	; (800650c <_malloc_r+0xe4>)
 8006452:	f001 fbbb 	bl	8007bcc <__malloc_lock>
 8006456:	6833      	ldr	r3, [r6, #0]
 8006458:	461c      	mov	r4, r3
 800645a:	bb34      	cbnz	r4, 80064aa <_malloc_r+0x82>
 800645c:	4629      	mov	r1, r5
 800645e:	4638      	mov	r0, r7
 8006460:	f7ff ffc2 	bl	80063e8 <sbrk_aligned>
 8006464:	1c43      	adds	r3, r0, #1
 8006466:	4604      	mov	r4, r0
 8006468:	d14d      	bne.n	8006506 <_malloc_r+0xde>
 800646a:	6834      	ldr	r4, [r6, #0]
 800646c:	4626      	mov	r6, r4
 800646e:	2e00      	cmp	r6, #0
 8006470:	d140      	bne.n	80064f4 <_malloc_r+0xcc>
 8006472:	6823      	ldr	r3, [r4, #0]
 8006474:	4631      	mov	r1, r6
 8006476:	4638      	mov	r0, r7
 8006478:	eb04 0803 	add.w	r8, r4, r3
 800647c:	f000 fcb2 	bl	8006de4 <_sbrk_r>
 8006480:	4580      	cmp	r8, r0
 8006482:	d13a      	bne.n	80064fa <_malloc_r+0xd2>
 8006484:	6821      	ldr	r1, [r4, #0]
 8006486:	3503      	adds	r5, #3
 8006488:	1a6d      	subs	r5, r5, r1
 800648a:	f025 0503 	bic.w	r5, r5, #3
 800648e:	3508      	adds	r5, #8
 8006490:	2d0c      	cmp	r5, #12
 8006492:	bf38      	it	cc
 8006494:	250c      	movcc	r5, #12
 8006496:	4629      	mov	r1, r5
 8006498:	4638      	mov	r0, r7
 800649a:	f7ff ffa5 	bl	80063e8 <sbrk_aligned>
 800649e:	3001      	adds	r0, #1
 80064a0:	d02b      	beq.n	80064fa <_malloc_r+0xd2>
 80064a2:	6823      	ldr	r3, [r4, #0]
 80064a4:	442b      	add	r3, r5
 80064a6:	6023      	str	r3, [r4, #0]
 80064a8:	e00e      	b.n	80064c8 <_malloc_r+0xa0>
 80064aa:	6822      	ldr	r2, [r4, #0]
 80064ac:	1b52      	subs	r2, r2, r5
 80064ae:	d41e      	bmi.n	80064ee <_malloc_r+0xc6>
 80064b0:	2a0b      	cmp	r2, #11
 80064b2:	d916      	bls.n	80064e2 <_malloc_r+0xba>
 80064b4:	1961      	adds	r1, r4, r5
 80064b6:	42a3      	cmp	r3, r4
 80064b8:	6025      	str	r5, [r4, #0]
 80064ba:	bf18      	it	ne
 80064bc:	6059      	strne	r1, [r3, #4]
 80064be:	6863      	ldr	r3, [r4, #4]
 80064c0:	bf08      	it	eq
 80064c2:	6031      	streq	r1, [r6, #0]
 80064c4:	5162      	str	r2, [r4, r5]
 80064c6:	604b      	str	r3, [r1, #4]
 80064c8:	4638      	mov	r0, r7
 80064ca:	f104 060b 	add.w	r6, r4, #11
 80064ce:	f001 fb83 	bl	8007bd8 <__malloc_unlock>
 80064d2:	f026 0607 	bic.w	r6, r6, #7
 80064d6:	1d23      	adds	r3, r4, #4
 80064d8:	1af2      	subs	r2, r6, r3
 80064da:	d0b6      	beq.n	800644a <_malloc_r+0x22>
 80064dc:	1b9b      	subs	r3, r3, r6
 80064de:	50a3      	str	r3, [r4, r2]
 80064e0:	e7b3      	b.n	800644a <_malloc_r+0x22>
 80064e2:	6862      	ldr	r2, [r4, #4]
 80064e4:	42a3      	cmp	r3, r4
 80064e6:	bf0c      	ite	eq
 80064e8:	6032      	streq	r2, [r6, #0]
 80064ea:	605a      	strne	r2, [r3, #4]
 80064ec:	e7ec      	b.n	80064c8 <_malloc_r+0xa0>
 80064ee:	4623      	mov	r3, r4
 80064f0:	6864      	ldr	r4, [r4, #4]
 80064f2:	e7b2      	b.n	800645a <_malloc_r+0x32>
 80064f4:	4634      	mov	r4, r6
 80064f6:	6876      	ldr	r6, [r6, #4]
 80064f8:	e7b9      	b.n	800646e <_malloc_r+0x46>
 80064fa:	230c      	movs	r3, #12
 80064fc:	603b      	str	r3, [r7, #0]
 80064fe:	4638      	mov	r0, r7
 8006500:	f001 fb6a 	bl	8007bd8 <__malloc_unlock>
 8006504:	e7a1      	b.n	800644a <_malloc_r+0x22>
 8006506:	6025      	str	r5, [r4, #0]
 8006508:	e7de      	b.n	80064c8 <_malloc_r+0xa0>
 800650a:	bf00      	nop
 800650c:	2000085c 	.word	0x2000085c

08006510 <__cvt>:
 8006510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006514:	ec55 4b10 	vmov	r4, r5, d0
 8006518:	2d00      	cmp	r5, #0
 800651a:	460e      	mov	r6, r1
 800651c:	4619      	mov	r1, r3
 800651e:	462b      	mov	r3, r5
 8006520:	bfbb      	ittet	lt
 8006522:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006526:	461d      	movlt	r5, r3
 8006528:	2300      	movge	r3, #0
 800652a:	232d      	movlt	r3, #45	; 0x2d
 800652c:	700b      	strb	r3, [r1, #0]
 800652e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006530:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006534:	4691      	mov	r9, r2
 8006536:	f023 0820 	bic.w	r8, r3, #32
 800653a:	bfbc      	itt	lt
 800653c:	4622      	movlt	r2, r4
 800653e:	4614      	movlt	r4, r2
 8006540:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006544:	d005      	beq.n	8006552 <__cvt+0x42>
 8006546:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800654a:	d100      	bne.n	800654e <__cvt+0x3e>
 800654c:	3601      	adds	r6, #1
 800654e:	2102      	movs	r1, #2
 8006550:	e000      	b.n	8006554 <__cvt+0x44>
 8006552:	2103      	movs	r1, #3
 8006554:	ab03      	add	r3, sp, #12
 8006556:	9301      	str	r3, [sp, #4]
 8006558:	ab02      	add	r3, sp, #8
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	ec45 4b10 	vmov	d0, r4, r5
 8006560:	4653      	mov	r3, sl
 8006562:	4632      	mov	r2, r6
 8006564:	f000 fd40 	bl	8006fe8 <_dtoa_r>
 8006568:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800656c:	4607      	mov	r7, r0
 800656e:	d102      	bne.n	8006576 <__cvt+0x66>
 8006570:	f019 0f01 	tst.w	r9, #1
 8006574:	d022      	beq.n	80065bc <__cvt+0xac>
 8006576:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800657a:	eb07 0906 	add.w	r9, r7, r6
 800657e:	d110      	bne.n	80065a2 <__cvt+0x92>
 8006580:	783b      	ldrb	r3, [r7, #0]
 8006582:	2b30      	cmp	r3, #48	; 0x30
 8006584:	d10a      	bne.n	800659c <__cvt+0x8c>
 8006586:	2200      	movs	r2, #0
 8006588:	2300      	movs	r3, #0
 800658a:	4620      	mov	r0, r4
 800658c:	4629      	mov	r1, r5
 800658e:	f7fa faa3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006592:	b918      	cbnz	r0, 800659c <__cvt+0x8c>
 8006594:	f1c6 0601 	rsb	r6, r6, #1
 8006598:	f8ca 6000 	str.w	r6, [sl]
 800659c:	f8da 3000 	ldr.w	r3, [sl]
 80065a0:	4499      	add	r9, r3
 80065a2:	2200      	movs	r2, #0
 80065a4:	2300      	movs	r3, #0
 80065a6:	4620      	mov	r0, r4
 80065a8:	4629      	mov	r1, r5
 80065aa:	f7fa fa95 	bl	8000ad8 <__aeabi_dcmpeq>
 80065ae:	b108      	cbz	r0, 80065b4 <__cvt+0xa4>
 80065b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80065b4:	2230      	movs	r2, #48	; 0x30
 80065b6:	9b03      	ldr	r3, [sp, #12]
 80065b8:	454b      	cmp	r3, r9
 80065ba:	d307      	bcc.n	80065cc <__cvt+0xbc>
 80065bc:	9b03      	ldr	r3, [sp, #12]
 80065be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065c0:	1bdb      	subs	r3, r3, r7
 80065c2:	4638      	mov	r0, r7
 80065c4:	6013      	str	r3, [r2, #0]
 80065c6:	b004      	add	sp, #16
 80065c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065cc:	1c59      	adds	r1, r3, #1
 80065ce:	9103      	str	r1, [sp, #12]
 80065d0:	701a      	strb	r2, [r3, #0]
 80065d2:	e7f0      	b.n	80065b6 <__cvt+0xa6>

080065d4 <__exponent>:
 80065d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065d6:	4603      	mov	r3, r0
 80065d8:	2900      	cmp	r1, #0
 80065da:	bfb8      	it	lt
 80065dc:	4249      	neglt	r1, r1
 80065de:	f803 2b02 	strb.w	r2, [r3], #2
 80065e2:	bfb4      	ite	lt
 80065e4:	222d      	movlt	r2, #45	; 0x2d
 80065e6:	222b      	movge	r2, #43	; 0x2b
 80065e8:	2909      	cmp	r1, #9
 80065ea:	7042      	strb	r2, [r0, #1]
 80065ec:	dd2a      	ble.n	8006644 <__exponent+0x70>
 80065ee:	f10d 0407 	add.w	r4, sp, #7
 80065f2:	46a4      	mov	ip, r4
 80065f4:	270a      	movs	r7, #10
 80065f6:	46a6      	mov	lr, r4
 80065f8:	460a      	mov	r2, r1
 80065fa:	fb91 f6f7 	sdiv	r6, r1, r7
 80065fe:	fb07 1516 	mls	r5, r7, r6, r1
 8006602:	3530      	adds	r5, #48	; 0x30
 8006604:	2a63      	cmp	r2, #99	; 0x63
 8006606:	f104 34ff 	add.w	r4, r4, #4294967295
 800660a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800660e:	4631      	mov	r1, r6
 8006610:	dcf1      	bgt.n	80065f6 <__exponent+0x22>
 8006612:	3130      	adds	r1, #48	; 0x30
 8006614:	f1ae 0502 	sub.w	r5, lr, #2
 8006618:	f804 1c01 	strb.w	r1, [r4, #-1]
 800661c:	1c44      	adds	r4, r0, #1
 800661e:	4629      	mov	r1, r5
 8006620:	4561      	cmp	r1, ip
 8006622:	d30a      	bcc.n	800663a <__exponent+0x66>
 8006624:	f10d 0209 	add.w	r2, sp, #9
 8006628:	eba2 020e 	sub.w	r2, r2, lr
 800662c:	4565      	cmp	r5, ip
 800662e:	bf88      	it	hi
 8006630:	2200      	movhi	r2, #0
 8006632:	4413      	add	r3, r2
 8006634:	1a18      	subs	r0, r3, r0
 8006636:	b003      	add	sp, #12
 8006638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800663a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800663e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006642:	e7ed      	b.n	8006620 <__exponent+0x4c>
 8006644:	2330      	movs	r3, #48	; 0x30
 8006646:	3130      	adds	r1, #48	; 0x30
 8006648:	7083      	strb	r3, [r0, #2]
 800664a:	70c1      	strb	r1, [r0, #3]
 800664c:	1d03      	adds	r3, r0, #4
 800664e:	e7f1      	b.n	8006634 <__exponent+0x60>

08006650 <_printf_float>:
 8006650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006654:	ed2d 8b02 	vpush	{d8}
 8006658:	b08d      	sub	sp, #52	; 0x34
 800665a:	460c      	mov	r4, r1
 800665c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006660:	4616      	mov	r6, r2
 8006662:	461f      	mov	r7, r3
 8006664:	4605      	mov	r5, r0
 8006666:	f001 faad 	bl	8007bc4 <_localeconv_r>
 800666a:	f8d0 a000 	ldr.w	sl, [r0]
 800666e:	4650      	mov	r0, sl
 8006670:	f7f9 fdb6 	bl	80001e0 <strlen>
 8006674:	2300      	movs	r3, #0
 8006676:	930a      	str	r3, [sp, #40]	; 0x28
 8006678:	6823      	ldr	r3, [r4, #0]
 800667a:	9305      	str	r3, [sp, #20]
 800667c:	f8d8 3000 	ldr.w	r3, [r8]
 8006680:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006684:	3307      	adds	r3, #7
 8006686:	f023 0307 	bic.w	r3, r3, #7
 800668a:	f103 0208 	add.w	r2, r3, #8
 800668e:	f8c8 2000 	str.w	r2, [r8]
 8006692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006696:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800669a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800669e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80066a2:	9307      	str	r3, [sp, #28]
 80066a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80066a8:	ee08 0a10 	vmov	s16, r0
 80066ac:	4b9f      	ldr	r3, [pc, #636]	; (800692c <_printf_float+0x2dc>)
 80066ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066b2:	f04f 32ff 	mov.w	r2, #4294967295
 80066b6:	f7fa fa41 	bl	8000b3c <__aeabi_dcmpun>
 80066ba:	bb88      	cbnz	r0, 8006720 <_printf_float+0xd0>
 80066bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066c0:	4b9a      	ldr	r3, [pc, #616]	; (800692c <_printf_float+0x2dc>)
 80066c2:	f04f 32ff 	mov.w	r2, #4294967295
 80066c6:	f7fa fa1b 	bl	8000b00 <__aeabi_dcmple>
 80066ca:	bb48      	cbnz	r0, 8006720 <_printf_float+0xd0>
 80066cc:	2200      	movs	r2, #0
 80066ce:	2300      	movs	r3, #0
 80066d0:	4640      	mov	r0, r8
 80066d2:	4649      	mov	r1, r9
 80066d4:	f7fa fa0a 	bl	8000aec <__aeabi_dcmplt>
 80066d8:	b110      	cbz	r0, 80066e0 <_printf_float+0x90>
 80066da:	232d      	movs	r3, #45	; 0x2d
 80066dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066e0:	4b93      	ldr	r3, [pc, #588]	; (8006930 <_printf_float+0x2e0>)
 80066e2:	4894      	ldr	r0, [pc, #592]	; (8006934 <_printf_float+0x2e4>)
 80066e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80066e8:	bf94      	ite	ls
 80066ea:	4698      	movls	r8, r3
 80066ec:	4680      	movhi	r8, r0
 80066ee:	2303      	movs	r3, #3
 80066f0:	6123      	str	r3, [r4, #16]
 80066f2:	9b05      	ldr	r3, [sp, #20]
 80066f4:	f023 0204 	bic.w	r2, r3, #4
 80066f8:	6022      	str	r2, [r4, #0]
 80066fa:	f04f 0900 	mov.w	r9, #0
 80066fe:	9700      	str	r7, [sp, #0]
 8006700:	4633      	mov	r3, r6
 8006702:	aa0b      	add	r2, sp, #44	; 0x2c
 8006704:	4621      	mov	r1, r4
 8006706:	4628      	mov	r0, r5
 8006708:	f000 f9d8 	bl	8006abc <_printf_common>
 800670c:	3001      	adds	r0, #1
 800670e:	f040 8090 	bne.w	8006832 <_printf_float+0x1e2>
 8006712:	f04f 30ff 	mov.w	r0, #4294967295
 8006716:	b00d      	add	sp, #52	; 0x34
 8006718:	ecbd 8b02 	vpop	{d8}
 800671c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006720:	4642      	mov	r2, r8
 8006722:	464b      	mov	r3, r9
 8006724:	4640      	mov	r0, r8
 8006726:	4649      	mov	r1, r9
 8006728:	f7fa fa08 	bl	8000b3c <__aeabi_dcmpun>
 800672c:	b140      	cbz	r0, 8006740 <_printf_float+0xf0>
 800672e:	464b      	mov	r3, r9
 8006730:	2b00      	cmp	r3, #0
 8006732:	bfbc      	itt	lt
 8006734:	232d      	movlt	r3, #45	; 0x2d
 8006736:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800673a:	487f      	ldr	r0, [pc, #508]	; (8006938 <_printf_float+0x2e8>)
 800673c:	4b7f      	ldr	r3, [pc, #508]	; (800693c <_printf_float+0x2ec>)
 800673e:	e7d1      	b.n	80066e4 <_printf_float+0x94>
 8006740:	6863      	ldr	r3, [r4, #4]
 8006742:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006746:	9206      	str	r2, [sp, #24]
 8006748:	1c5a      	adds	r2, r3, #1
 800674a:	d13f      	bne.n	80067cc <_printf_float+0x17c>
 800674c:	2306      	movs	r3, #6
 800674e:	6063      	str	r3, [r4, #4]
 8006750:	9b05      	ldr	r3, [sp, #20]
 8006752:	6861      	ldr	r1, [r4, #4]
 8006754:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006758:	2300      	movs	r3, #0
 800675a:	9303      	str	r3, [sp, #12]
 800675c:	ab0a      	add	r3, sp, #40	; 0x28
 800675e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006762:	ab09      	add	r3, sp, #36	; 0x24
 8006764:	ec49 8b10 	vmov	d0, r8, r9
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	6022      	str	r2, [r4, #0]
 800676c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006770:	4628      	mov	r0, r5
 8006772:	f7ff fecd 	bl	8006510 <__cvt>
 8006776:	9b06      	ldr	r3, [sp, #24]
 8006778:	9909      	ldr	r1, [sp, #36]	; 0x24
 800677a:	2b47      	cmp	r3, #71	; 0x47
 800677c:	4680      	mov	r8, r0
 800677e:	d108      	bne.n	8006792 <_printf_float+0x142>
 8006780:	1cc8      	adds	r0, r1, #3
 8006782:	db02      	blt.n	800678a <_printf_float+0x13a>
 8006784:	6863      	ldr	r3, [r4, #4]
 8006786:	4299      	cmp	r1, r3
 8006788:	dd41      	ble.n	800680e <_printf_float+0x1be>
 800678a:	f1ab 0b02 	sub.w	fp, fp, #2
 800678e:	fa5f fb8b 	uxtb.w	fp, fp
 8006792:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006796:	d820      	bhi.n	80067da <_printf_float+0x18a>
 8006798:	3901      	subs	r1, #1
 800679a:	465a      	mov	r2, fp
 800679c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80067a0:	9109      	str	r1, [sp, #36]	; 0x24
 80067a2:	f7ff ff17 	bl	80065d4 <__exponent>
 80067a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067a8:	1813      	adds	r3, r2, r0
 80067aa:	2a01      	cmp	r2, #1
 80067ac:	4681      	mov	r9, r0
 80067ae:	6123      	str	r3, [r4, #16]
 80067b0:	dc02      	bgt.n	80067b8 <_printf_float+0x168>
 80067b2:	6822      	ldr	r2, [r4, #0]
 80067b4:	07d2      	lsls	r2, r2, #31
 80067b6:	d501      	bpl.n	80067bc <_printf_float+0x16c>
 80067b8:	3301      	adds	r3, #1
 80067ba:	6123      	str	r3, [r4, #16]
 80067bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d09c      	beq.n	80066fe <_printf_float+0xae>
 80067c4:	232d      	movs	r3, #45	; 0x2d
 80067c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067ca:	e798      	b.n	80066fe <_printf_float+0xae>
 80067cc:	9a06      	ldr	r2, [sp, #24]
 80067ce:	2a47      	cmp	r2, #71	; 0x47
 80067d0:	d1be      	bne.n	8006750 <_printf_float+0x100>
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1bc      	bne.n	8006750 <_printf_float+0x100>
 80067d6:	2301      	movs	r3, #1
 80067d8:	e7b9      	b.n	800674e <_printf_float+0xfe>
 80067da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80067de:	d118      	bne.n	8006812 <_printf_float+0x1c2>
 80067e0:	2900      	cmp	r1, #0
 80067e2:	6863      	ldr	r3, [r4, #4]
 80067e4:	dd0b      	ble.n	80067fe <_printf_float+0x1ae>
 80067e6:	6121      	str	r1, [r4, #16]
 80067e8:	b913      	cbnz	r3, 80067f0 <_printf_float+0x1a0>
 80067ea:	6822      	ldr	r2, [r4, #0]
 80067ec:	07d0      	lsls	r0, r2, #31
 80067ee:	d502      	bpl.n	80067f6 <_printf_float+0x1a6>
 80067f0:	3301      	adds	r3, #1
 80067f2:	440b      	add	r3, r1
 80067f4:	6123      	str	r3, [r4, #16]
 80067f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80067f8:	f04f 0900 	mov.w	r9, #0
 80067fc:	e7de      	b.n	80067bc <_printf_float+0x16c>
 80067fe:	b913      	cbnz	r3, 8006806 <_printf_float+0x1b6>
 8006800:	6822      	ldr	r2, [r4, #0]
 8006802:	07d2      	lsls	r2, r2, #31
 8006804:	d501      	bpl.n	800680a <_printf_float+0x1ba>
 8006806:	3302      	adds	r3, #2
 8006808:	e7f4      	b.n	80067f4 <_printf_float+0x1a4>
 800680a:	2301      	movs	r3, #1
 800680c:	e7f2      	b.n	80067f4 <_printf_float+0x1a4>
 800680e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006814:	4299      	cmp	r1, r3
 8006816:	db05      	blt.n	8006824 <_printf_float+0x1d4>
 8006818:	6823      	ldr	r3, [r4, #0]
 800681a:	6121      	str	r1, [r4, #16]
 800681c:	07d8      	lsls	r0, r3, #31
 800681e:	d5ea      	bpl.n	80067f6 <_printf_float+0x1a6>
 8006820:	1c4b      	adds	r3, r1, #1
 8006822:	e7e7      	b.n	80067f4 <_printf_float+0x1a4>
 8006824:	2900      	cmp	r1, #0
 8006826:	bfd4      	ite	le
 8006828:	f1c1 0202 	rsble	r2, r1, #2
 800682c:	2201      	movgt	r2, #1
 800682e:	4413      	add	r3, r2
 8006830:	e7e0      	b.n	80067f4 <_printf_float+0x1a4>
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	055a      	lsls	r2, r3, #21
 8006836:	d407      	bmi.n	8006848 <_printf_float+0x1f8>
 8006838:	6923      	ldr	r3, [r4, #16]
 800683a:	4642      	mov	r2, r8
 800683c:	4631      	mov	r1, r6
 800683e:	4628      	mov	r0, r5
 8006840:	47b8      	blx	r7
 8006842:	3001      	adds	r0, #1
 8006844:	d12c      	bne.n	80068a0 <_printf_float+0x250>
 8006846:	e764      	b.n	8006712 <_printf_float+0xc2>
 8006848:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800684c:	f240 80e0 	bls.w	8006a10 <_printf_float+0x3c0>
 8006850:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006854:	2200      	movs	r2, #0
 8006856:	2300      	movs	r3, #0
 8006858:	f7fa f93e 	bl	8000ad8 <__aeabi_dcmpeq>
 800685c:	2800      	cmp	r0, #0
 800685e:	d034      	beq.n	80068ca <_printf_float+0x27a>
 8006860:	4a37      	ldr	r2, [pc, #220]	; (8006940 <_printf_float+0x2f0>)
 8006862:	2301      	movs	r3, #1
 8006864:	4631      	mov	r1, r6
 8006866:	4628      	mov	r0, r5
 8006868:	47b8      	blx	r7
 800686a:	3001      	adds	r0, #1
 800686c:	f43f af51 	beq.w	8006712 <_printf_float+0xc2>
 8006870:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006874:	429a      	cmp	r2, r3
 8006876:	db02      	blt.n	800687e <_printf_float+0x22e>
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	07d8      	lsls	r0, r3, #31
 800687c:	d510      	bpl.n	80068a0 <_printf_float+0x250>
 800687e:	ee18 3a10 	vmov	r3, s16
 8006882:	4652      	mov	r2, sl
 8006884:	4631      	mov	r1, r6
 8006886:	4628      	mov	r0, r5
 8006888:	47b8      	blx	r7
 800688a:	3001      	adds	r0, #1
 800688c:	f43f af41 	beq.w	8006712 <_printf_float+0xc2>
 8006890:	f04f 0800 	mov.w	r8, #0
 8006894:	f104 091a 	add.w	r9, r4, #26
 8006898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800689a:	3b01      	subs	r3, #1
 800689c:	4543      	cmp	r3, r8
 800689e:	dc09      	bgt.n	80068b4 <_printf_float+0x264>
 80068a0:	6823      	ldr	r3, [r4, #0]
 80068a2:	079b      	lsls	r3, r3, #30
 80068a4:	f100 8105 	bmi.w	8006ab2 <_printf_float+0x462>
 80068a8:	68e0      	ldr	r0, [r4, #12]
 80068aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068ac:	4298      	cmp	r0, r3
 80068ae:	bfb8      	it	lt
 80068b0:	4618      	movlt	r0, r3
 80068b2:	e730      	b.n	8006716 <_printf_float+0xc6>
 80068b4:	2301      	movs	r3, #1
 80068b6:	464a      	mov	r2, r9
 80068b8:	4631      	mov	r1, r6
 80068ba:	4628      	mov	r0, r5
 80068bc:	47b8      	blx	r7
 80068be:	3001      	adds	r0, #1
 80068c0:	f43f af27 	beq.w	8006712 <_printf_float+0xc2>
 80068c4:	f108 0801 	add.w	r8, r8, #1
 80068c8:	e7e6      	b.n	8006898 <_printf_float+0x248>
 80068ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	dc39      	bgt.n	8006944 <_printf_float+0x2f4>
 80068d0:	4a1b      	ldr	r2, [pc, #108]	; (8006940 <_printf_float+0x2f0>)
 80068d2:	2301      	movs	r3, #1
 80068d4:	4631      	mov	r1, r6
 80068d6:	4628      	mov	r0, r5
 80068d8:	47b8      	blx	r7
 80068da:	3001      	adds	r0, #1
 80068dc:	f43f af19 	beq.w	8006712 <_printf_float+0xc2>
 80068e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068e4:	4313      	orrs	r3, r2
 80068e6:	d102      	bne.n	80068ee <_printf_float+0x29e>
 80068e8:	6823      	ldr	r3, [r4, #0]
 80068ea:	07d9      	lsls	r1, r3, #31
 80068ec:	d5d8      	bpl.n	80068a0 <_printf_float+0x250>
 80068ee:	ee18 3a10 	vmov	r3, s16
 80068f2:	4652      	mov	r2, sl
 80068f4:	4631      	mov	r1, r6
 80068f6:	4628      	mov	r0, r5
 80068f8:	47b8      	blx	r7
 80068fa:	3001      	adds	r0, #1
 80068fc:	f43f af09 	beq.w	8006712 <_printf_float+0xc2>
 8006900:	f04f 0900 	mov.w	r9, #0
 8006904:	f104 0a1a 	add.w	sl, r4, #26
 8006908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800690a:	425b      	negs	r3, r3
 800690c:	454b      	cmp	r3, r9
 800690e:	dc01      	bgt.n	8006914 <_printf_float+0x2c4>
 8006910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006912:	e792      	b.n	800683a <_printf_float+0x1ea>
 8006914:	2301      	movs	r3, #1
 8006916:	4652      	mov	r2, sl
 8006918:	4631      	mov	r1, r6
 800691a:	4628      	mov	r0, r5
 800691c:	47b8      	blx	r7
 800691e:	3001      	adds	r0, #1
 8006920:	f43f aef7 	beq.w	8006712 <_printf_float+0xc2>
 8006924:	f109 0901 	add.w	r9, r9, #1
 8006928:	e7ee      	b.n	8006908 <_printf_float+0x2b8>
 800692a:	bf00      	nop
 800692c:	7fefffff 	.word	0x7fefffff
 8006930:	080094e8 	.word	0x080094e8
 8006934:	080094ec 	.word	0x080094ec
 8006938:	080094f4 	.word	0x080094f4
 800693c:	080094f0 	.word	0x080094f0
 8006940:	080094f8 	.word	0x080094f8
 8006944:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006946:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006948:	429a      	cmp	r2, r3
 800694a:	bfa8      	it	ge
 800694c:	461a      	movge	r2, r3
 800694e:	2a00      	cmp	r2, #0
 8006950:	4691      	mov	r9, r2
 8006952:	dc37      	bgt.n	80069c4 <_printf_float+0x374>
 8006954:	f04f 0b00 	mov.w	fp, #0
 8006958:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800695c:	f104 021a 	add.w	r2, r4, #26
 8006960:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006962:	9305      	str	r3, [sp, #20]
 8006964:	eba3 0309 	sub.w	r3, r3, r9
 8006968:	455b      	cmp	r3, fp
 800696a:	dc33      	bgt.n	80069d4 <_printf_float+0x384>
 800696c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006970:	429a      	cmp	r2, r3
 8006972:	db3b      	blt.n	80069ec <_printf_float+0x39c>
 8006974:	6823      	ldr	r3, [r4, #0]
 8006976:	07da      	lsls	r2, r3, #31
 8006978:	d438      	bmi.n	80069ec <_printf_float+0x39c>
 800697a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800697c:	9a05      	ldr	r2, [sp, #20]
 800697e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006980:	1a9a      	subs	r2, r3, r2
 8006982:	eba3 0901 	sub.w	r9, r3, r1
 8006986:	4591      	cmp	r9, r2
 8006988:	bfa8      	it	ge
 800698a:	4691      	movge	r9, r2
 800698c:	f1b9 0f00 	cmp.w	r9, #0
 8006990:	dc35      	bgt.n	80069fe <_printf_float+0x3ae>
 8006992:	f04f 0800 	mov.w	r8, #0
 8006996:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800699a:	f104 0a1a 	add.w	sl, r4, #26
 800699e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069a2:	1a9b      	subs	r3, r3, r2
 80069a4:	eba3 0309 	sub.w	r3, r3, r9
 80069a8:	4543      	cmp	r3, r8
 80069aa:	f77f af79 	ble.w	80068a0 <_printf_float+0x250>
 80069ae:	2301      	movs	r3, #1
 80069b0:	4652      	mov	r2, sl
 80069b2:	4631      	mov	r1, r6
 80069b4:	4628      	mov	r0, r5
 80069b6:	47b8      	blx	r7
 80069b8:	3001      	adds	r0, #1
 80069ba:	f43f aeaa 	beq.w	8006712 <_printf_float+0xc2>
 80069be:	f108 0801 	add.w	r8, r8, #1
 80069c2:	e7ec      	b.n	800699e <_printf_float+0x34e>
 80069c4:	4613      	mov	r3, r2
 80069c6:	4631      	mov	r1, r6
 80069c8:	4642      	mov	r2, r8
 80069ca:	4628      	mov	r0, r5
 80069cc:	47b8      	blx	r7
 80069ce:	3001      	adds	r0, #1
 80069d0:	d1c0      	bne.n	8006954 <_printf_float+0x304>
 80069d2:	e69e      	b.n	8006712 <_printf_float+0xc2>
 80069d4:	2301      	movs	r3, #1
 80069d6:	4631      	mov	r1, r6
 80069d8:	4628      	mov	r0, r5
 80069da:	9205      	str	r2, [sp, #20]
 80069dc:	47b8      	blx	r7
 80069de:	3001      	adds	r0, #1
 80069e0:	f43f ae97 	beq.w	8006712 <_printf_float+0xc2>
 80069e4:	9a05      	ldr	r2, [sp, #20]
 80069e6:	f10b 0b01 	add.w	fp, fp, #1
 80069ea:	e7b9      	b.n	8006960 <_printf_float+0x310>
 80069ec:	ee18 3a10 	vmov	r3, s16
 80069f0:	4652      	mov	r2, sl
 80069f2:	4631      	mov	r1, r6
 80069f4:	4628      	mov	r0, r5
 80069f6:	47b8      	blx	r7
 80069f8:	3001      	adds	r0, #1
 80069fa:	d1be      	bne.n	800697a <_printf_float+0x32a>
 80069fc:	e689      	b.n	8006712 <_printf_float+0xc2>
 80069fe:	9a05      	ldr	r2, [sp, #20]
 8006a00:	464b      	mov	r3, r9
 8006a02:	4442      	add	r2, r8
 8006a04:	4631      	mov	r1, r6
 8006a06:	4628      	mov	r0, r5
 8006a08:	47b8      	blx	r7
 8006a0a:	3001      	adds	r0, #1
 8006a0c:	d1c1      	bne.n	8006992 <_printf_float+0x342>
 8006a0e:	e680      	b.n	8006712 <_printf_float+0xc2>
 8006a10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a12:	2a01      	cmp	r2, #1
 8006a14:	dc01      	bgt.n	8006a1a <_printf_float+0x3ca>
 8006a16:	07db      	lsls	r3, r3, #31
 8006a18:	d538      	bpl.n	8006a8c <_printf_float+0x43c>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	4642      	mov	r2, r8
 8006a1e:	4631      	mov	r1, r6
 8006a20:	4628      	mov	r0, r5
 8006a22:	47b8      	blx	r7
 8006a24:	3001      	adds	r0, #1
 8006a26:	f43f ae74 	beq.w	8006712 <_printf_float+0xc2>
 8006a2a:	ee18 3a10 	vmov	r3, s16
 8006a2e:	4652      	mov	r2, sl
 8006a30:	4631      	mov	r1, r6
 8006a32:	4628      	mov	r0, r5
 8006a34:	47b8      	blx	r7
 8006a36:	3001      	adds	r0, #1
 8006a38:	f43f ae6b 	beq.w	8006712 <_printf_float+0xc2>
 8006a3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a40:	2200      	movs	r2, #0
 8006a42:	2300      	movs	r3, #0
 8006a44:	f7fa f848 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a48:	b9d8      	cbnz	r0, 8006a82 <_printf_float+0x432>
 8006a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a4c:	f108 0201 	add.w	r2, r8, #1
 8006a50:	3b01      	subs	r3, #1
 8006a52:	4631      	mov	r1, r6
 8006a54:	4628      	mov	r0, r5
 8006a56:	47b8      	blx	r7
 8006a58:	3001      	adds	r0, #1
 8006a5a:	d10e      	bne.n	8006a7a <_printf_float+0x42a>
 8006a5c:	e659      	b.n	8006712 <_printf_float+0xc2>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	4652      	mov	r2, sl
 8006a62:	4631      	mov	r1, r6
 8006a64:	4628      	mov	r0, r5
 8006a66:	47b8      	blx	r7
 8006a68:	3001      	adds	r0, #1
 8006a6a:	f43f ae52 	beq.w	8006712 <_printf_float+0xc2>
 8006a6e:	f108 0801 	add.w	r8, r8, #1
 8006a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a74:	3b01      	subs	r3, #1
 8006a76:	4543      	cmp	r3, r8
 8006a78:	dcf1      	bgt.n	8006a5e <_printf_float+0x40e>
 8006a7a:	464b      	mov	r3, r9
 8006a7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a80:	e6dc      	b.n	800683c <_printf_float+0x1ec>
 8006a82:	f04f 0800 	mov.w	r8, #0
 8006a86:	f104 0a1a 	add.w	sl, r4, #26
 8006a8a:	e7f2      	b.n	8006a72 <_printf_float+0x422>
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	4642      	mov	r2, r8
 8006a90:	e7df      	b.n	8006a52 <_printf_float+0x402>
 8006a92:	2301      	movs	r3, #1
 8006a94:	464a      	mov	r2, r9
 8006a96:	4631      	mov	r1, r6
 8006a98:	4628      	mov	r0, r5
 8006a9a:	47b8      	blx	r7
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	f43f ae38 	beq.w	8006712 <_printf_float+0xc2>
 8006aa2:	f108 0801 	add.w	r8, r8, #1
 8006aa6:	68e3      	ldr	r3, [r4, #12]
 8006aa8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006aaa:	1a5b      	subs	r3, r3, r1
 8006aac:	4543      	cmp	r3, r8
 8006aae:	dcf0      	bgt.n	8006a92 <_printf_float+0x442>
 8006ab0:	e6fa      	b.n	80068a8 <_printf_float+0x258>
 8006ab2:	f04f 0800 	mov.w	r8, #0
 8006ab6:	f104 0919 	add.w	r9, r4, #25
 8006aba:	e7f4      	b.n	8006aa6 <_printf_float+0x456>

08006abc <_printf_common>:
 8006abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac0:	4616      	mov	r6, r2
 8006ac2:	4699      	mov	r9, r3
 8006ac4:	688a      	ldr	r2, [r1, #8]
 8006ac6:	690b      	ldr	r3, [r1, #16]
 8006ac8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006acc:	4293      	cmp	r3, r2
 8006ace:	bfb8      	it	lt
 8006ad0:	4613      	movlt	r3, r2
 8006ad2:	6033      	str	r3, [r6, #0]
 8006ad4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ad8:	4607      	mov	r7, r0
 8006ada:	460c      	mov	r4, r1
 8006adc:	b10a      	cbz	r2, 8006ae2 <_printf_common+0x26>
 8006ade:	3301      	adds	r3, #1
 8006ae0:	6033      	str	r3, [r6, #0]
 8006ae2:	6823      	ldr	r3, [r4, #0]
 8006ae4:	0699      	lsls	r1, r3, #26
 8006ae6:	bf42      	ittt	mi
 8006ae8:	6833      	ldrmi	r3, [r6, #0]
 8006aea:	3302      	addmi	r3, #2
 8006aec:	6033      	strmi	r3, [r6, #0]
 8006aee:	6825      	ldr	r5, [r4, #0]
 8006af0:	f015 0506 	ands.w	r5, r5, #6
 8006af4:	d106      	bne.n	8006b04 <_printf_common+0x48>
 8006af6:	f104 0a19 	add.w	sl, r4, #25
 8006afa:	68e3      	ldr	r3, [r4, #12]
 8006afc:	6832      	ldr	r2, [r6, #0]
 8006afe:	1a9b      	subs	r3, r3, r2
 8006b00:	42ab      	cmp	r3, r5
 8006b02:	dc26      	bgt.n	8006b52 <_printf_common+0x96>
 8006b04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b08:	1e13      	subs	r3, r2, #0
 8006b0a:	6822      	ldr	r2, [r4, #0]
 8006b0c:	bf18      	it	ne
 8006b0e:	2301      	movne	r3, #1
 8006b10:	0692      	lsls	r2, r2, #26
 8006b12:	d42b      	bmi.n	8006b6c <_printf_common+0xb0>
 8006b14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b18:	4649      	mov	r1, r9
 8006b1a:	4638      	mov	r0, r7
 8006b1c:	47c0      	blx	r8
 8006b1e:	3001      	adds	r0, #1
 8006b20:	d01e      	beq.n	8006b60 <_printf_common+0xa4>
 8006b22:	6823      	ldr	r3, [r4, #0]
 8006b24:	68e5      	ldr	r5, [r4, #12]
 8006b26:	6832      	ldr	r2, [r6, #0]
 8006b28:	f003 0306 	and.w	r3, r3, #6
 8006b2c:	2b04      	cmp	r3, #4
 8006b2e:	bf08      	it	eq
 8006b30:	1aad      	subeq	r5, r5, r2
 8006b32:	68a3      	ldr	r3, [r4, #8]
 8006b34:	6922      	ldr	r2, [r4, #16]
 8006b36:	bf0c      	ite	eq
 8006b38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b3c:	2500      	movne	r5, #0
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	bfc4      	itt	gt
 8006b42:	1a9b      	subgt	r3, r3, r2
 8006b44:	18ed      	addgt	r5, r5, r3
 8006b46:	2600      	movs	r6, #0
 8006b48:	341a      	adds	r4, #26
 8006b4a:	42b5      	cmp	r5, r6
 8006b4c:	d11a      	bne.n	8006b84 <_printf_common+0xc8>
 8006b4e:	2000      	movs	r0, #0
 8006b50:	e008      	b.n	8006b64 <_printf_common+0xa8>
 8006b52:	2301      	movs	r3, #1
 8006b54:	4652      	mov	r2, sl
 8006b56:	4649      	mov	r1, r9
 8006b58:	4638      	mov	r0, r7
 8006b5a:	47c0      	blx	r8
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	d103      	bne.n	8006b68 <_printf_common+0xac>
 8006b60:	f04f 30ff 	mov.w	r0, #4294967295
 8006b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b68:	3501      	adds	r5, #1
 8006b6a:	e7c6      	b.n	8006afa <_printf_common+0x3e>
 8006b6c:	18e1      	adds	r1, r4, r3
 8006b6e:	1c5a      	adds	r2, r3, #1
 8006b70:	2030      	movs	r0, #48	; 0x30
 8006b72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b76:	4422      	add	r2, r4
 8006b78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b80:	3302      	adds	r3, #2
 8006b82:	e7c7      	b.n	8006b14 <_printf_common+0x58>
 8006b84:	2301      	movs	r3, #1
 8006b86:	4622      	mov	r2, r4
 8006b88:	4649      	mov	r1, r9
 8006b8a:	4638      	mov	r0, r7
 8006b8c:	47c0      	blx	r8
 8006b8e:	3001      	adds	r0, #1
 8006b90:	d0e6      	beq.n	8006b60 <_printf_common+0xa4>
 8006b92:	3601      	adds	r6, #1
 8006b94:	e7d9      	b.n	8006b4a <_printf_common+0x8e>
	...

08006b98 <_printf_i>:
 8006b98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b9c:	7e0f      	ldrb	r7, [r1, #24]
 8006b9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ba0:	2f78      	cmp	r7, #120	; 0x78
 8006ba2:	4691      	mov	r9, r2
 8006ba4:	4680      	mov	r8, r0
 8006ba6:	460c      	mov	r4, r1
 8006ba8:	469a      	mov	sl, r3
 8006baa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006bae:	d807      	bhi.n	8006bc0 <_printf_i+0x28>
 8006bb0:	2f62      	cmp	r7, #98	; 0x62
 8006bb2:	d80a      	bhi.n	8006bca <_printf_i+0x32>
 8006bb4:	2f00      	cmp	r7, #0
 8006bb6:	f000 80d8 	beq.w	8006d6a <_printf_i+0x1d2>
 8006bba:	2f58      	cmp	r7, #88	; 0x58
 8006bbc:	f000 80a3 	beq.w	8006d06 <_printf_i+0x16e>
 8006bc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bc8:	e03a      	b.n	8006c40 <_printf_i+0xa8>
 8006bca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bce:	2b15      	cmp	r3, #21
 8006bd0:	d8f6      	bhi.n	8006bc0 <_printf_i+0x28>
 8006bd2:	a101      	add	r1, pc, #4	; (adr r1, 8006bd8 <_printf_i+0x40>)
 8006bd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bd8:	08006c31 	.word	0x08006c31
 8006bdc:	08006c45 	.word	0x08006c45
 8006be0:	08006bc1 	.word	0x08006bc1
 8006be4:	08006bc1 	.word	0x08006bc1
 8006be8:	08006bc1 	.word	0x08006bc1
 8006bec:	08006bc1 	.word	0x08006bc1
 8006bf0:	08006c45 	.word	0x08006c45
 8006bf4:	08006bc1 	.word	0x08006bc1
 8006bf8:	08006bc1 	.word	0x08006bc1
 8006bfc:	08006bc1 	.word	0x08006bc1
 8006c00:	08006bc1 	.word	0x08006bc1
 8006c04:	08006d51 	.word	0x08006d51
 8006c08:	08006c75 	.word	0x08006c75
 8006c0c:	08006d33 	.word	0x08006d33
 8006c10:	08006bc1 	.word	0x08006bc1
 8006c14:	08006bc1 	.word	0x08006bc1
 8006c18:	08006d73 	.word	0x08006d73
 8006c1c:	08006bc1 	.word	0x08006bc1
 8006c20:	08006c75 	.word	0x08006c75
 8006c24:	08006bc1 	.word	0x08006bc1
 8006c28:	08006bc1 	.word	0x08006bc1
 8006c2c:	08006d3b 	.word	0x08006d3b
 8006c30:	682b      	ldr	r3, [r5, #0]
 8006c32:	1d1a      	adds	r2, r3, #4
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	602a      	str	r2, [r5, #0]
 8006c38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c40:	2301      	movs	r3, #1
 8006c42:	e0a3      	b.n	8006d8c <_printf_i+0x1f4>
 8006c44:	6820      	ldr	r0, [r4, #0]
 8006c46:	6829      	ldr	r1, [r5, #0]
 8006c48:	0606      	lsls	r6, r0, #24
 8006c4a:	f101 0304 	add.w	r3, r1, #4
 8006c4e:	d50a      	bpl.n	8006c66 <_printf_i+0xce>
 8006c50:	680e      	ldr	r6, [r1, #0]
 8006c52:	602b      	str	r3, [r5, #0]
 8006c54:	2e00      	cmp	r6, #0
 8006c56:	da03      	bge.n	8006c60 <_printf_i+0xc8>
 8006c58:	232d      	movs	r3, #45	; 0x2d
 8006c5a:	4276      	negs	r6, r6
 8006c5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c60:	485e      	ldr	r0, [pc, #376]	; (8006ddc <_printf_i+0x244>)
 8006c62:	230a      	movs	r3, #10
 8006c64:	e019      	b.n	8006c9a <_printf_i+0x102>
 8006c66:	680e      	ldr	r6, [r1, #0]
 8006c68:	602b      	str	r3, [r5, #0]
 8006c6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c6e:	bf18      	it	ne
 8006c70:	b236      	sxthne	r6, r6
 8006c72:	e7ef      	b.n	8006c54 <_printf_i+0xbc>
 8006c74:	682b      	ldr	r3, [r5, #0]
 8006c76:	6820      	ldr	r0, [r4, #0]
 8006c78:	1d19      	adds	r1, r3, #4
 8006c7a:	6029      	str	r1, [r5, #0]
 8006c7c:	0601      	lsls	r1, r0, #24
 8006c7e:	d501      	bpl.n	8006c84 <_printf_i+0xec>
 8006c80:	681e      	ldr	r6, [r3, #0]
 8006c82:	e002      	b.n	8006c8a <_printf_i+0xf2>
 8006c84:	0646      	lsls	r6, r0, #25
 8006c86:	d5fb      	bpl.n	8006c80 <_printf_i+0xe8>
 8006c88:	881e      	ldrh	r6, [r3, #0]
 8006c8a:	4854      	ldr	r0, [pc, #336]	; (8006ddc <_printf_i+0x244>)
 8006c8c:	2f6f      	cmp	r7, #111	; 0x6f
 8006c8e:	bf0c      	ite	eq
 8006c90:	2308      	moveq	r3, #8
 8006c92:	230a      	movne	r3, #10
 8006c94:	2100      	movs	r1, #0
 8006c96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c9a:	6865      	ldr	r5, [r4, #4]
 8006c9c:	60a5      	str	r5, [r4, #8]
 8006c9e:	2d00      	cmp	r5, #0
 8006ca0:	bfa2      	ittt	ge
 8006ca2:	6821      	ldrge	r1, [r4, #0]
 8006ca4:	f021 0104 	bicge.w	r1, r1, #4
 8006ca8:	6021      	strge	r1, [r4, #0]
 8006caa:	b90e      	cbnz	r6, 8006cb0 <_printf_i+0x118>
 8006cac:	2d00      	cmp	r5, #0
 8006cae:	d04d      	beq.n	8006d4c <_printf_i+0x1b4>
 8006cb0:	4615      	mov	r5, r2
 8006cb2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006cb6:	fb03 6711 	mls	r7, r3, r1, r6
 8006cba:	5dc7      	ldrb	r7, [r0, r7]
 8006cbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006cc0:	4637      	mov	r7, r6
 8006cc2:	42bb      	cmp	r3, r7
 8006cc4:	460e      	mov	r6, r1
 8006cc6:	d9f4      	bls.n	8006cb2 <_printf_i+0x11a>
 8006cc8:	2b08      	cmp	r3, #8
 8006cca:	d10b      	bne.n	8006ce4 <_printf_i+0x14c>
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	07de      	lsls	r6, r3, #31
 8006cd0:	d508      	bpl.n	8006ce4 <_printf_i+0x14c>
 8006cd2:	6923      	ldr	r3, [r4, #16]
 8006cd4:	6861      	ldr	r1, [r4, #4]
 8006cd6:	4299      	cmp	r1, r3
 8006cd8:	bfde      	ittt	le
 8006cda:	2330      	movle	r3, #48	; 0x30
 8006cdc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ce0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ce4:	1b52      	subs	r2, r2, r5
 8006ce6:	6122      	str	r2, [r4, #16]
 8006ce8:	f8cd a000 	str.w	sl, [sp]
 8006cec:	464b      	mov	r3, r9
 8006cee:	aa03      	add	r2, sp, #12
 8006cf0:	4621      	mov	r1, r4
 8006cf2:	4640      	mov	r0, r8
 8006cf4:	f7ff fee2 	bl	8006abc <_printf_common>
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	d14c      	bne.n	8006d96 <_printf_i+0x1fe>
 8006cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006d00:	b004      	add	sp, #16
 8006d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d06:	4835      	ldr	r0, [pc, #212]	; (8006ddc <_printf_i+0x244>)
 8006d08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d0c:	6829      	ldr	r1, [r5, #0]
 8006d0e:	6823      	ldr	r3, [r4, #0]
 8006d10:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d14:	6029      	str	r1, [r5, #0]
 8006d16:	061d      	lsls	r5, r3, #24
 8006d18:	d514      	bpl.n	8006d44 <_printf_i+0x1ac>
 8006d1a:	07df      	lsls	r7, r3, #31
 8006d1c:	bf44      	itt	mi
 8006d1e:	f043 0320 	orrmi.w	r3, r3, #32
 8006d22:	6023      	strmi	r3, [r4, #0]
 8006d24:	b91e      	cbnz	r6, 8006d2e <_printf_i+0x196>
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	f023 0320 	bic.w	r3, r3, #32
 8006d2c:	6023      	str	r3, [r4, #0]
 8006d2e:	2310      	movs	r3, #16
 8006d30:	e7b0      	b.n	8006c94 <_printf_i+0xfc>
 8006d32:	6823      	ldr	r3, [r4, #0]
 8006d34:	f043 0320 	orr.w	r3, r3, #32
 8006d38:	6023      	str	r3, [r4, #0]
 8006d3a:	2378      	movs	r3, #120	; 0x78
 8006d3c:	4828      	ldr	r0, [pc, #160]	; (8006de0 <_printf_i+0x248>)
 8006d3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d42:	e7e3      	b.n	8006d0c <_printf_i+0x174>
 8006d44:	0659      	lsls	r1, r3, #25
 8006d46:	bf48      	it	mi
 8006d48:	b2b6      	uxthmi	r6, r6
 8006d4a:	e7e6      	b.n	8006d1a <_printf_i+0x182>
 8006d4c:	4615      	mov	r5, r2
 8006d4e:	e7bb      	b.n	8006cc8 <_printf_i+0x130>
 8006d50:	682b      	ldr	r3, [r5, #0]
 8006d52:	6826      	ldr	r6, [r4, #0]
 8006d54:	6961      	ldr	r1, [r4, #20]
 8006d56:	1d18      	adds	r0, r3, #4
 8006d58:	6028      	str	r0, [r5, #0]
 8006d5a:	0635      	lsls	r5, r6, #24
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	d501      	bpl.n	8006d64 <_printf_i+0x1cc>
 8006d60:	6019      	str	r1, [r3, #0]
 8006d62:	e002      	b.n	8006d6a <_printf_i+0x1d2>
 8006d64:	0670      	lsls	r0, r6, #25
 8006d66:	d5fb      	bpl.n	8006d60 <_printf_i+0x1c8>
 8006d68:	8019      	strh	r1, [r3, #0]
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	6123      	str	r3, [r4, #16]
 8006d6e:	4615      	mov	r5, r2
 8006d70:	e7ba      	b.n	8006ce8 <_printf_i+0x150>
 8006d72:	682b      	ldr	r3, [r5, #0]
 8006d74:	1d1a      	adds	r2, r3, #4
 8006d76:	602a      	str	r2, [r5, #0]
 8006d78:	681d      	ldr	r5, [r3, #0]
 8006d7a:	6862      	ldr	r2, [r4, #4]
 8006d7c:	2100      	movs	r1, #0
 8006d7e:	4628      	mov	r0, r5
 8006d80:	f7f9 fa36 	bl	80001f0 <memchr>
 8006d84:	b108      	cbz	r0, 8006d8a <_printf_i+0x1f2>
 8006d86:	1b40      	subs	r0, r0, r5
 8006d88:	6060      	str	r0, [r4, #4]
 8006d8a:	6863      	ldr	r3, [r4, #4]
 8006d8c:	6123      	str	r3, [r4, #16]
 8006d8e:	2300      	movs	r3, #0
 8006d90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d94:	e7a8      	b.n	8006ce8 <_printf_i+0x150>
 8006d96:	6923      	ldr	r3, [r4, #16]
 8006d98:	462a      	mov	r2, r5
 8006d9a:	4649      	mov	r1, r9
 8006d9c:	4640      	mov	r0, r8
 8006d9e:	47d0      	blx	sl
 8006da0:	3001      	adds	r0, #1
 8006da2:	d0ab      	beq.n	8006cfc <_printf_i+0x164>
 8006da4:	6823      	ldr	r3, [r4, #0]
 8006da6:	079b      	lsls	r3, r3, #30
 8006da8:	d413      	bmi.n	8006dd2 <_printf_i+0x23a>
 8006daa:	68e0      	ldr	r0, [r4, #12]
 8006dac:	9b03      	ldr	r3, [sp, #12]
 8006dae:	4298      	cmp	r0, r3
 8006db0:	bfb8      	it	lt
 8006db2:	4618      	movlt	r0, r3
 8006db4:	e7a4      	b.n	8006d00 <_printf_i+0x168>
 8006db6:	2301      	movs	r3, #1
 8006db8:	4632      	mov	r2, r6
 8006dba:	4649      	mov	r1, r9
 8006dbc:	4640      	mov	r0, r8
 8006dbe:	47d0      	blx	sl
 8006dc0:	3001      	adds	r0, #1
 8006dc2:	d09b      	beq.n	8006cfc <_printf_i+0x164>
 8006dc4:	3501      	adds	r5, #1
 8006dc6:	68e3      	ldr	r3, [r4, #12]
 8006dc8:	9903      	ldr	r1, [sp, #12]
 8006dca:	1a5b      	subs	r3, r3, r1
 8006dcc:	42ab      	cmp	r3, r5
 8006dce:	dcf2      	bgt.n	8006db6 <_printf_i+0x21e>
 8006dd0:	e7eb      	b.n	8006daa <_printf_i+0x212>
 8006dd2:	2500      	movs	r5, #0
 8006dd4:	f104 0619 	add.w	r6, r4, #25
 8006dd8:	e7f5      	b.n	8006dc6 <_printf_i+0x22e>
 8006dda:	bf00      	nop
 8006ddc:	080094fa 	.word	0x080094fa
 8006de0:	0800950b 	.word	0x0800950b

08006de4 <_sbrk_r>:
 8006de4:	b538      	push	{r3, r4, r5, lr}
 8006de6:	4d06      	ldr	r5, [pc, #24]	; (8006e00 <_sbrk_r+0x1c>)
 8006de8:	2300      	movs	r3, #0
 8006dea:	4604      	mov	r4, r0
 8006dec:	4608      	mov	r0, r1
 8006dee:	602b      	str	r3, [r5, #0]
 8006df0:	f7fb f900 	bl	8001ff4 <_sbrk>
 8006df4:	1c43      	adds	r3, r0, #1
 8006df6:	d102      	bne.n	8006dfe <_sbrk_r+0x1a>
 8006df8:	682b      	ldr	r3, [r5, #0]
 8006dfa:	b103      	cbz	r3, 8006dfe <_sbrk_r+0x1a>
 8006dfc:	6023      	str	r3, [r4, #0]
 8006dfe:	bd38      	pop	{r3, r4, r5, pc}
 8006e00:	20000864 	.word	0x20000864

08006e04 <_raise_r>:
 8006e04:	291f      	cmp	r1, #31
 8006e06:	b538      	push	{r3, r4, r5, lr}
 8006e08:	4604      	mov	r4, r0
 8006e0a:	460d      	mov	r5, r1
 8006e0c:	d904      	bls.n	8006e18 <_raise_r+0x14>
 8006e0e:	2316      	movs	r3, #22
 8006e10:	6003      	str	r3, [r0, #0]
 8006e12:	f04f 30ff 	mov.w	r0, #4294967295
 8006e16:	bd38      	pop	{r3, r4, r5, pc}
 8006e18:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006e1a:	b112      	cbz	r2, 8006e22 <_raise_r+0x1e>
 8006e1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e20:	b94b      	cbnz	r3, 8006e36 <_raise_r+0x32>
 8006e22:	4620      	mov	r0, r4
 8006e24:	f000 f830 	bl	8006e88 <_getpid_r>
 8006e28:	462a      	mov	r2, r5
 8006e2a:	4601      	mov	r1, r0
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e32:	f000 b817 	b.w	8006e64 <_kill_r>
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d00a      	beq.n	8006e50 <_raise_r+0x4c>
 8006e3a:	1c59      	adds	r1, r3, #1
 8006e3c:	d103      	bne.n	8006e46 <_raise_r+0x42>
 8006e3e:	2316      	movs	r3, #22
 8006e40:	6003      	str	r3, [r0, #0]
 8006e42:	2001      	movs	r0, #1
 8006e44:	e7e7      	b.n	8006e16 <_raise_r+0x12>
 8006e46:	2400      	movs	r4, #0
 8006e48:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006e4c:	4628      	mov	r0, r5
 8006e4e:	4798      	blx	r3
 8006e50:	2000      	movs	r0, #0
 8006e52:	e7e0      	b.n	8006e16 <_raise_r+0x12>

08006e54 <raise>:
 8006e54:	4b02      	ldr	r3, [pc, #8]	; (8006e60 <raise+0xc>)
 8006e56:	4601      	mov	r1, r0
 8006e58:	6818      	ldr	r0, [r3, #0]
 8006e5a:	f7ff bfd3 	b.w	8006e04 <_raise_r>
 8006e5e:	bf00      	nop
 8006e60:	2000043c 	.word	0x2000043c

08006e64 <_kill_r>:
 8006e64:	b538      	push	{r3, r4, r5, lr}
 8006e66:	4d07      	ldr	r5, [pc, #28]	; (8006e84 <_kill_r+0x20>)
 8006e68:	2300      	movs	r3, #0
 8006e6a:	4604      	mov	r4, r0
 8006e6c:	4608      	mov	r0, r1
 8006e6e:	4611      	mov	r1, r2
 8006e70:	602b      	str	r3, [r5, #0]
 8006e72:	f002 f951 	bl	8009118 <_kill>
 8006e76:	1c43      	adds	r3, r0, #1
 8006e78:	d102      	bne.n	8006e80 <_kill_r+0x1c>
 8006e7a:	682b      	ldr	r3, [r5, #0]
 8006e7c:	b103      	cbz	r3, 8006e80 <_kill_r+0x1c>
 8006e7e:	6023      	str	r3, [r4, #0]
 8006e80:	bd38      	pop	{r3, r4, r5, pc}
 8006e82:	bf00      	nop
 8006e84:	20000864 	.word	0x20000864

08006e88 <_getpid_r>:
 8006e88:	f002 b936 	b.w	80090f8 <_getpid>

08006e8c <siprintf>:
 8006e8c:	b40e      	push	{r1, r2, r3}
 8006e8e:	b500      	push	{lr}
 8006e90:	b09c      	sub	sp, #112	; 0x70
 8006e92:	ab1d      	add	r3, sp, #116	; 0x74
 8006e94:	9002      	str	r0, [sp, #8]
 8006e96:	9006      	str	r0, [sp, #24]
 8006e98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e9c:	4809      	ldr	r0, [pc, #36]	; (8006ec4 <siprintf+0x38>)
 8006e9e:	9107      	str	r1, [sp, #28]
 8006ea0:	9104      	str	r1, [sp, #16]
 8006ea2:	4909      	ldr	r1, [pc, #36]	; (8006ec8 <siprintf+0x3c>)
 8006ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ea8:	9105      	str	r1, [sp, #20]
 8006eaa:	6800      	ldr	r0, [r0, #0]
 8006eac:	9301      	str	r3, [sp, #4]
 8006eae:	a902      	add	r1, sp, #8
 8006eb0:	f001 fabc 	bl	800842c <_svfiprintf_r>
 8006eb4:	9b02      	ldr	r3, [sp, #8]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	701a      	strb	r2, [r3, #0]
 8006eba:	b01c      	add	sp, #112	; 0x70
 8006ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ec0:	b003      	add	sp, #12
 8006ec2:	4770      	bx	lr
 8006ec4:	2000043c 	.word	0x2000043c
 8006ec8:	ffff0208 	.word	0xffff0208

08006ecc <quorem>:
 8006ecc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed0:	6903      	ldr	r3, [r0, #16]
 8006ed2:	690c      	ldr	r4, [r1, #16]
 8006ed4:	42a3      	cmp	r3, r4
 8006ed6:	4607      	mov	r7, r0
 8006ed8:	f2c0 8081 	blt.w	8006fde <quorem+0x112>
 8006edc:	3c01      	subs	r4, #1
 8006ede:	f101 0814 	add.w	r8, r1, #20
 8006ee2:	f100 0514 	add.w	r5, r0, #20
 8006ee6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006eea:	9301      	str	r3, [sp, #4]
 8006eec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ef0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006efc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f00:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f04:	d331      	bcc.n	8006f6a <quorem+0x9e>
 8006f06:	f04f 0e00 	mov.w	lr, #0
 8006f0a:	4640      	mov	r0, r8
 8006f0c:	46ac      	mov	ip, r5
 8006f0e:	46f2      	mov	sl, lr
 8006f10:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f14:	b293      	uxth	r3, r2
 8006f16:	fb06 e303 	mla	r3, r6, r3, lr
 8006f1a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	ebaa 0303 	sub.w	r3, sl, r3
 8006f24:	f8dc a000 	ldr.w	sl, [ip]
 8006f28:	0c12      	lsrs	r2, r2, #16
 8006f2a:	fa13 f38a 	uxtah	r3, r3, sl
 8006f2e:	fb06 e202 	mla	r2, r6, r2, lr
 8006f32:	9300      	str	r3, [sp, #0]
 8006f34:	9b00      	ldr	r3, [sp, #0]
 8006f36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f3a:	b292      	uxth	r2, r2
 8006f3c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006f40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f44:	f8bd 3000 	ldrh.w	r3, [sp]
 8006f48:	4581      	cmp	r9, r0
 8006f4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f4e:	f84c 3b04 	str.w	r3, [ip], #4
 8006f52:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f56:	d2db      	bcs.n	8006f10 <quorem+0x44>
 8006f58:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f5c:	b92b      	cbnz	r3, 8006f6a <quorem+0x9e>
 8006f5e:	9b01      	ldr	r3, [sp, #4]
 8006f60:	3b04      	subs	r3, #4
 8006f62:	429d      	cmp	r5, r3
 8006f64:	461a      	mov	r2, r3
 8006f66:	d32e      	bcc.n	8006fc6 <quorem+0xfa>
 8006f68:	613c      	str	r4, [r7, #16]
 8006f6a:	4638      	mov	r0, r7
 8006f6c:	f001 f8bc 	bl	80080e8 <__mcmp>
 8006f70:	2800      	cmp	r0, #0
 8006f72:	db24      	blt.n	8006fbe <quorem+0xf2>
 8006f74:	3601      	adds	r6, #1
 8006f76:	4628      	mov	r0, r5
 8006f78:	f04f 0c00 	mov.w	ip, #0
 8006f7c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f80:	f8d0 e000 	ldr.w	lr, [r0]
 8006f84:	b293      	uxth	r3, r2
 8006f86:	ebac 0303 	sub.w	r3, ip, r3
 8006f8a:	0c12      	lsrs	r2, r2, #16
 8006f8c:	fa13 f38e 	uxtah	r3, r3, lr
 8006f90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006f94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f9e:	45c1      	cmp	r9, r8
 8006fa0:	f840 3b04 	str.w	r3, [r0], #4
 8006fa4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006fa8:	d2e8      	bcs.n	8006f7c <quorem+0xb0>
 8006faa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fb2:	b922      	cbnz	r2, 8006fbe <quorem+0xf2>
 8006fb4:	3b04      	subs	r3, #4
 8006fb6:	429d      	cmp	r5, r3
 8006fb8:	461a      	mov	r2, r3
 8006fba:	d30a      	bcc.n	8006fd2 <quorem+0x106>
 8006fbc:	613c      	str	r4, [r7, #16]
 8006fbe:	4630      	mov	r0, r6
 8006fc0:	b003      	add	sp, #12
 8006fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fc6:	6812      	ldr	r2, [r2, #0]
 8006fc8:	3b04      	subs	r3, #4
 8006fca:	2a00      	cmp	r2, #0
 8006fcc:	d1cc      	bne.n	8006f68 <quorem+0x9c>
 8006fce:	3c01      	subs	r4, #1
 8006fd0:	e7c7      	b.n	8006f62 <quorem+0x96>
 8006fd2:	6812      	ldr	r2, [r2, #0]
 8006fd4:	3b04      	subs	r3, #4
 8006fd6:	2a00      	cmp	r2, #0
 8006fd8:	d1f0      	bne.n	8006fbc <quorem+0xf0>
 8006fda:	3c01      	subs	r4, #1
 8006fdc:	e7eb      	b.n	8006fb6 <quorem+0xea>
 8006fde:	2000      	movs	r0, #0
 8006fe0:	e7ee      	b.n	8006fc0 <quorem+0xf4>
 8006fe2:	0000      	movs	r0, r0
 8006fe4:	0000      	movs	r0, r0
	...

08006fe8 <_dtoa_r>:
 8006fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fec:	ed2d 8b04 	vpush	{d8-d9}
 8006ff0:	ec57 6b10 	vmov	r6, r7, d0
 8006ff4:	b093      	sub	sp, #76	; 0x4c
 8006ff6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006ff8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006ffc:	9106      	str	r1, [sp, #24]
 8006ffe:	ee10 aa10 	vmov	sl, s0
 8007002:	4604      	mov	r4, r0
 8007004:	9209      	str	r2, [sp, #36]	; 0x24
 8007006:	930c      	str	r3, [sp, #48]	; 0x30
 8007008:	46bb      	mov	fp, r7
 800700a:	b975      	cbnz	r5, 800702a <_dtoa_r+0x42>
 800700c:	2010      	movs	r0, #16
 800700e:	f7ff f979 	bl	8006304 <malloc>
 8007012:	4602      	mov	r2, r0
 8007014:	6260      	str	r0, [r4, #36]	; 0x24
 8007016:	b920      	cbnz	r0, 8007022 <_dtoa_r+0x3a>
 8007018:	4ba7      	ldr	r3, [pc, #668]	; (80072b8 <_dtoa_r+0x2d0>)
 800701a:	21ea      	movs	r1, #234	; 0xea
 800701c:	48a7      	ldr	r0, [pc, #668]	; (80072bc <_dtoa_r+0x2d4>)
 800701e:	f001 fb05 	bl	800862c <__assert_func>
 8007022:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007026:	6005      	str	r5, [r0, #0]
 8007028:	60c5      	str	r5, [r0, #12]
 800702a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800702c:	6819      	ldr	r1, [r3, #0]
 800702e:	b151      	cbz	r1, 8007046 <_dtoa_r+0x5e>
 8007030:	685a      	ldr	r2, [r3, #4]
 8007032:	604a      	str	r2, [r1, #4]
 8007034:	2301      	movs	r3, #1
 8007036:	4093      	lsls	r3, r2
 8007038:	608b      	str	r3, [r1, #8]
 800703a:	4620      	mov	r0, r4
 800703c:	f000 fe12 	bl	8007c64 <_Bfree>
 8007040:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007042:	2200      	movs	r2, #0
 8007044:	601a      	str	r2, [r3, #0]
 8007046:	1e3b      	subs	r3, r7, #0
 8007048:	bfaa      	itet	ge
 800704a:	2300      	movge	r3, #0
 800704c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007050:	f8c8 3000 	strge.w	r3, [r8]
 8007054:	4b9a      	ldr	r3, [pc, #616]	; (80072c0 <_dtoa_r+0x2d8>)
 8007056:	bfbc      	itt	lt
 8007058:	2201      	movlt	r2, #1
 800705a:	f8c8 2000 	strlt.w	r2, [r8]
 800705e:	ea33 030b 	bics.w	r3, r3, fp
 8007062:	d11b      	bne.n	800709c <_dtoa_r+0xb4>
 8007064:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007066:	f242 730f 	movw	r3, #9999	; 0x270f
 800706a:	6013      	str	r3, [r2, #0]
 800706c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007070:	4333      	orrs	r3, r6
 8007072:	f000 8592 	beq.w	8007b9a <_dtoa_r+0xbb2>
 8007076:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007078:	b963      	cbnz	r3, 8007094 <_dtoa_r+0xac>
 800707a:	4b92      	ldr	r3, [pc, #584]	; (80072c4 <_dtoa_r+0x2dc>)
 800707c:	e022      	b.n	80070c4 <_dtoa_r+0xdc>
 800707e:	4b92      	ldr	r3, [pc, #584]	; (80072c8 <_dtoa_r+0x2e0>)
 8007080:	9301      	str	r3, [sp, #4]
 8007082:	3308      	adds	r3, #8
 8007084:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007086:	6013      	str	r3, [r2, #0]
 8007088:	9801      	ldr	r0, [sp, #4]
 800708a:	b013      	add	sp, #76	; 0x4c
 800708c:	ecbd 8b04 	vpop	{d8-d9}
 8007090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007094:	4b8b      	ldr	r3, [pc, #556]	; (80072c4 <_dtoa_r+0x2dc>)
 8007096:	9301      	str	r3, [sp, #4]
 8007098:	3303      	adds	r3, #3
 800709a:	e7f3      	b.n	8007084 <_dtoa_r+0x9c>
 800709c:	2200      	movs	r2, #0
 800709e:	2300      	movs	r3, #0
 80070a0:	4650      	mov	r0, sl
 80070a2:	4659      	mov	r1, fp
 80070a4:	f7f9 fd18 	bl	8000ad8 <__aeabi_dcmpeq>
 80070a8:	ec4b ab19 	vmov	d9, sl, fp
 80070ac:	4680      	mov	r8, r0
 80070ae:	b158      	cbz	r0, 80070c8 <_dtoa_r+0xe0>
 80070b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070b2:	2301      	movs	r3, #1
 80070b4:	6013      	str	r3, [r2, #0]
 80070b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f000 856b 	beq.w	8007b94 <_dtoa_r+0xbac>
 80070be:	4883      	ldr	r0, [pc, #524]	; (80072cc <_dtoa_r+0x2e4>)
 80070c0:	6018      	str	r0, [r3, #0]
 80070c2:	1e43      	subs	r3, r0, #1
 80070c4:	9301      	str	r3, [sp, #4]
 80070c6:	e7df      	b.n	8007088 <_dtoa_r+0xa0>
 80070c8:	ec4b ab10 	vmov	d0, sl, fp
 80070cc:	aa10      	add	r2, sp, #64	; 0x40
 80070ce:	a911      	add	r1, sp, #68	; 0x44
 80070d0:	4620      	mov	r0, r4
 80070d2:	f001 f8af 	bl	8008234 <__d2b>
 80070d6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80070da:	ee08 0a10 	vmov	s16, r0
 80070de:	2d00      	cmp	r5, #0
 80070e0:	f000 8084 	beq.w	80071ec <_dtoa_r+0x204>
 80070e4:	ee19 3a90 	vmov	r3, s19
 80070e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070ec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80070f0:	4656      	mov	r6, sl
 80070f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80070f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80070fa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80070fe:	4b74      	ldr	r3, [pc, #464]	; (80072d0 <_dtoa_r+0x2e8>)
 8007100:	2200      	movs	r2, #0
 8007102:	4630      	mov	r0, r6
 8007104:	4639      	mov	r1, r7
 8007106:	f7f9 f8c7 	bl	8000298 <__aeabi_dsub>
 800710a:	a365      	add	r3, pc, #404	; (adr r3, 80072a0 <_dtoa_r+0x2b8>)
 800710c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007110:	f7f9 fa7a 	bl	8000608 <__aeabi_dmul>
 8007114:	a364      	add	r3, pc, #400	; (adr r3, 80072a8 <_dtoa_r+0x2c0>)
 8007116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711a:	f7f9 f8bf 	bl	800029c <__adddf3>
 800711e:	4606      	mov	r6, r0
 8007120:	4628      	mov	r0, r5
 8007122:	460f      	mov	r7, r1
 8007124:	f7f9 fa06 	bl	8000534 <__aeabi_i2d>
 8007128:	a361      	add	r3, pc, #388	; (adr r3, 80072b0 <_dtoa_r+0x2c8>)
 800712a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712e:	f7f9 fa6b 	bl	8000608 <__aeabi_dmul>
 8007132:	4602      	mov	r2, r0
 8007134:	460b      	mov	r3, r1
 8007136:	4630      	mov	r0, r6
 8007138:	4639      	mov	r1, r7
 800713a:	f7f9 f8af 	bl	800029c <__adddf3>
 800713e:	4606      	mov	r6, r0
 8007140:	460f      	mov	r7, r1
 8007142:	f7f9 fd11 	bl	8000b68 <__aeabi_d2iz>
 8007146:	2200      	movs	r2, #0
 8007148:	9000      	str	r0, [sp, #0]
 800714a:	2300      	movs	r3, #0
 800714c:	4630      	mov	r0, r6
 800714e:	4639      	mov	r1, r7
 8007150:	f7f9 fccc 	bl	8000aec <__aeabi_dcmplt>
 8007154:	b150      	cbz	r0, 800716c <_dtoa_r+0x184>
 8007156:	9800      	ldr	r0, [sp, #0]
 8007158:	f7f9 f9ec 	bl	8000534 <__aeabi_i2d>
 800715c:	4632      	mov	r2, r6
 800715e:	463b      	mov	r3, r7
 8007160:	f7f9 fcba 	bl	8000ad8 <__aeabi_dcmpeq>
 8007164:	b910      	cbnz	r0, 800716c <_dtoa_r+0x184>
 8007166:	9b00      	ldr	r3, [sp, #0]
 8007168:	3b01      	subs	r3, #1
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	9b00      	ldr	r3, [sp, #0]
 800716e:	2b16      	cmp	r3, #22
 8007170:	d85a      	bhi.n	8007228 <_dtoa_r+0x240>
 8007172:	9a00      	ldr	r2, [sp, #0]
 8007174:	4b57      	ldr	r3, [pc, #348]	; (80072d4 <_dtoa_r+0x2ec>)
 8007176:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800717a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717e:	ec51 0b19 	vmov	r0, r1, d9
 8007182:	f7f9 fcb3 	bl	8000aec <__aeabi_dcmplt>
 8007186:	2800      	cmp	r0, #0
 8007188:	d050      	beq.n	800722c <_dtoa_r+0x244>
 800718a:	9b00      	ldr	r3, [sp, #0]
 800718c:	3b01      	subs	r3, #1
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	2300      	movs	r3, #0
 8007192:	930b      	str	r3, [sp, #44]	; 0x2c
 8007194:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007196:	1b5d      	subs	r5, r3, r5
 8007198:	1e6b      	subs	r3, r5, #1
 800719a:	9305      	str	r3, [sp, #20]
 800719c:	bf45      	ittet	mi
 800719e:	f1c5 0301 	rsbmi	r3, r5, #1
 80071a2:	9304      	strmi	r3, [sp, #16]
 80071a4:	2300      	movpl	r3, #0
 80071a6:	2300      	movmi	r3, #0
 80071a8:	bf4c      	ite	mi
 80071aa:	9305      	strmi	r3, [sp, #20]
 80071ac:	9304      	strpl	r3, [sp, #16]
 80071ae:	9b00      	ldr	r3, [sp, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	db3d      	blt.n	8007230 <_dtoa_r+0x248>
 80071b4:	9b05      	ldr	r3, [sp, #20]
 80071b6:	9a00      	ldr	r2, [sp, #0]
 80071b8:	920a      	str	r2, [sp, #40]	; 0x28
 80071ba:	4413      	add	r3, r2
 80071bc:	9305      	str	r3, [sp, #20]
 80071be:	2300      	movs	r3, #0
 80071c0:	9307      	str	r3, [sp, #28]
 80071c2:	9b06      	ldr	r3, [sp, #24]
 80071c4:	2b09      	cmp	r3, #9
 80071c6:	f200 8089 	bhi.w	80072dc <_dtoa_r+0x2f4>
 80071ca:	2b05      	cmp	r3, #5
 80071cc:	bfc4      	itt	gt
 80071ce:	3b04      	subgt	r3, #4
 80071d0:	9306      	strgt	r3, [sp, #24]
 80071d2:	9b06      	ldr	r3, [sp, #24]
 80071d4:	f1a3 0302 	sub.w	r3, r3, #2
 80071d8:	bfcc      	ite	gt
 80071da:	2500      	movgt	r5, #0
 80071dc:	2501      	movle	r5, #1
 80071de:	2b03      	cmp	r3, #3
 80071e0:	f200 8087 	bhi.w	80072f2 <_dtoa_r+0x30a>
 80071e4:	e8df f003 	tbb	[pc, r3]
 80071e8:	59383a2d 	.word	0x59383a2d
 80071ec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80071f0:	441d      	add	r5, r3
 80071f2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80071f6:	2b20      	cmp	r3, #32
 80071f8:	bfc1      	itttt	gt
 80071fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80071fe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007202:	fa0b f303 	lslgt.w	r3, fp, r3
 8007206:	fa26 f000 	lsrgt.w	r0, r6, r0
 800720a:	bfda      	itte	le
 800720c:	f1c3 0320 	rsble	r3, r3, #32
 8007210:	fa06 f003 	lslle.w	r0, r6, r3
 8007214:	4318      	orrgt	r0, r3
 8007216:	f7f9 f97d 	bl	8000514 <__aeabi_ui2d>
 800721a:	2301      	movs	r3, #1
 800721c:	4606      	mov	r6, r0
 800721e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007222:	3d01      	subs	r5, #1
 8007224:	930e      	str	r3, [sp, #56]	; 0x38
 8007226:	e76a      	b.n	80070fe <_dtoa_r+0x116>
 8007228:	2301      	movs	r3, #1
 800722a:	e7b2      	b.n	8007192 <_dtoa_r+0x1aa>
 800722c:	900b      	str	r0, [sp, #44]	; 0x2c
 800722e:	e7b1      	b.n	8007194 <_dtoa_r+0x1ac>
 8007230:	9b04      	ldr	r3, [sp, #16]
 8007232:	9a00      	ldr	r2, [sp, #0]
 8007234:	1a9b      	subs	r3, r3, r2
 8007236:	9304      	str	r3, [sp, #16]
 8007238:	4253      	negs	r3, r2
 800723a:	9307      	str	r3, [sp, #28]
 800723c:	2300      	movs	r3, #0
 800723e:	930a      	str	r3, [sp, #40]	; 0x28
 8007240:	e7bf      	b.n	80071c2 <_dtoa_r+0x1da>
 8007242:	2300      	movs	r3, #0
 8007244:	9308      	str	r3, [sp, #32]
 8007246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007248:	2b00      	cmp	r3, #0
 800724a:	dc55      	bgt.n	80072f8 <_dtoa_r+0x310>
 800724c:	2301      	movs	r3, #1
 800724e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007252:	461a      	mov	r2, r3
 8007254:	9209      	str	r2, [sp, #36]	; 0x24
 8007256:	e00c      	b.n	8007272 <_dtoa_r+0x28a>
 8007258:	2301      	movs	r3, #1
 800725a:	e7f3      	b.n	8007244 <_dtoa_r+0x25c>
 800725c:	2300      	movs	r3, #0
 800725e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007260:	9308      	str	r3, [sp, #32]
 8007262:	9b00      	ldr	r3, [sp, #0]
 8007264:	4413      	add	r3, r2
 8007266:	9302      	str	r3, [sp, #8]
 8007268:	3301      	adds	r3, #1
 800726a:	2b01      	cmp	r3, #1
 800726c:	9303      	str	r3, [sp, #12]
 800726e:	bfb8      	it	lt
 8007270:	2301      	movlt	r3, #1
 8007272:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007274:	2200      	movs	r2, #0
 8007276:	6042      	str	r2, [r0, #4]
 8007278:	2204      	movs	r2, #4
 800727a:	f102 0614 	add.w	r6, r2, #20
 800727e:	429e      	cmp	r6, r3
 8007280:	6841      	ldr	r1, [r0, #4]
 8007282:	d93d      	bls.n	8007300 <_dtoa_r+0x318>
 8007284:	4620      	mov	r0, r4
 8007286:	f000 fcad 	bl	8007be4 <_Balloc>
 800728a:	9001      	str	r0, [sp, #4]
 800728c:	2800      	cmp	r0, #0
 800728e:	d13b      	bne.n	8007308 <_dtoa_r+0x320>
 8007290:	4b11      	ldr	r3, [pc, #68]	; (80072d8 <_dtoa_r+0x2f0>)
 8007292:	4602      	mov	r2, r0
 8007294:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007298:	e6c0      	b.n	800701c <_dtoa_r+0x34>
 800729a:	2301      	movs	r3, #1
 800729c:	e7df      	b.n	800725e <_dtoa_r+0x276>
 800729e:	bf00      	nop
 80072a0:	636f4361 	.word	0x636f4361
 80072a4:	3fd287a7 	.word	0x3fd287a7
 80072a8:	8b60c8b3 	.word	0x8b60c8b3
 80072ac:	3fc68a28 	.word	0x3fc68a28
 80072b0:	509f79fb 	.word	0x509f79fb
 80072b4:	3fd34413 	.word	0x3fd34413
 80072b8:	08009529 	.word	0x08009529
 80072bc:	08009540 	.word	0x08009540
 80072c0:	7ff00000 	.word	0x7ff00000
 80072c4:	08009525 	.word	0x08009525
 80072c8:	0800951c 	.word	0x0800951c
 80072cc:	080094f9 	.word	0x080094f9
 80072d0:	3ff80000 	.word	0x3ff80000
 80072d4:	08009630 	.word	0x08009630
 80072d8:	0800959b 	.word	0x0800959b
 80072dc:	2501      	movs	r5, #1
 80072de:	2300      	movs	r3, #0
 80072e0:	9306      	str	r3, [sp, #24]
 80072e2:	9508      	str	r5, [sp, #32]
 80072e4:	f04f 33ff 	mov.w	r3, #4294967295
 80072e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80072ec:	2200      	movs	r2, #0
 80072ee:	2312      	movs	r3, #18
 80072f0:	e7b0      	b.n	8007254 <_dtoa_r+0x26c>
 80072f2:	2301      	movs	r3, #1
 80072f4:	9308      	str	r3, [sp, #32]
 80072f6:	e7f5      	b.n	80072e4 <_dtoa_r+0x2fc>
 80072f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80072fe:	e7b8      	b.n	8007272 <_dtoa_r+0x28a>
 8007300:	3101      	adds	r1, #1
 8007302:	6041      	str	r1, [r0, #4]
 8007304:	0052      	lsls	r2, r2, #1
 8007306:	e7b8      	b.n	800727a <_dtoa_r+0x292>
 8007308:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800730a:	9a01      	ldr	r2, [sp, #4]
 800730c:	601a      	str	r2, [r3, #0]
 800730e:	9b03      	ldr	r3, [sp, #12]
 8007310:	2b0e      	cmp	r3, #14
 8007312:	f200 809d 	bhi.w	8007450 <_dtoa_r+0x468>
 8007316:	2d00      	cmp	r5, #0
 8007318:	f000 809a 	beq.w	8007450 <_dtoa_r+0x468>
 800731c:	9b00      	ldr	r3, [sp, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	dd32      	ble.n	8007388 <_dtoa_r+0x3a0>
 8007322:	4ab7      	ldr	r2, [pc, #732]	; (8007600 <_dtoa_r+0x618>)
 8007324:	f003 030f 	and.w	r3, r3, #15
 8007328:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800732c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007330:	9b00      	ldr	r3, [sp, #0]
 8007332:	05d8      	lsls	r0, r3, #23
 8007334:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007338:	d516      	bpl.n	8007368 <_dtoa_r+0x380>
 800733a:	4bb2      	ldr	r3, [pc, #712]	; (8007604 <_dtoa_r+0x61c>)
 800733c:	ec51 0b19 	vmov	r0, r1, d9
 8007340:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007344:	f7f9 fa8a 	bl	800085c <__aeabi_ddiv>
 8007348:	f007 070f 	and.w	r7, r7, #15
 800734c:	4682      	mov	sl, r0
 800734e:	468b      	mov	fp, r1
 8007350:	2503      	movs	r5, #3
 8007352:	4eac      	ldr	r6, [pc, #688]	; (8007604 <_dtoa_r+0x61c>)
 8007354:	b957      	cbnz	r7, 800736c <_dtoa_r+0x384>
 8007356:	4642      	mov	r2, r8
 8007358:	464b      	mov	r3, r9
 800735a:	4650      	mov	r0, sl
 800735c:	4659      	mov	r1, fp
 800735e:	f7f9 fa7d 	bl	800085c <__aeabi_ddiv>
 8007362:	4682      	mov	sl, r0
 8007364:	468b      	mov	fp, r1
 8007366:	e028      	b.n	80073ba <_dtoa_r+0x3d2>
 8007368:	2502      	movs	r5, #2
 800736a:	e7f2      	b.n	8007352 <_dtoa_r+0x36a>
 800736c:	07f9      	lsls	r1, r7, #31
 800736e:	d508      	bpl.n	8007382 <_dtoa_r+0x39a>
 8007370:	4640      	mov	r0, r8
 8007372:	4649      	mov	r1, r9
 8007374:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007378:	f7f9 f946 	bl	8000608 <__aeabi_dmul>
 800737c:	3501      	adds	r5, #1
 800737e:	4680      	mov	r8, r0
 8007380:	4689      	mov	r9, r1
 8007382:	107f      	asrs	r7, r7, #1
 8007384:	3608      	adds	r6, #8
 8007386:	e7e5      	b.n	8007354 <_dtoa_r+0x36c>
 8007388:	f000 809b 	beq.w	80074c2 <_dtoa_r+0x4da>
 800738c:	9b00      	ldr	r3, [sp, #0]
 800738e:	4f9d      	ldr	r7, [pc, #628]	; (8007604 <_dtoa_r+0x61c>)
 8007390:	425e      	negs	r6, r3
 8007392:	4b9b      	ldr	r3, [pc, #620]	; (8007600 <_dtoa_r+0x618>)
 8007394:	f006 020f 	and.w	r2, r6, #15
 8007398:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800739c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a0:	ec51 0b19 	vmov	r0, r1, d9
 80073a4:	f7f9 f930 	bl	8000608 <__aeabi_dmul>
 80073a8:	1136      	asrs	r6, r6, #4
 80073aa:	4682      	mov	sl, r0
 80073ac:	468b      	mov	fp, r1
 80073ae:	2300      	movs	r3, #0
 80073b0:	2502      	movs	r5, #2
 80073b2:	2e00      	cmp	r6, #0
 80073b4:	d17a      	bne.n	80074ac <_dtoa_r+0x4c4>
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1d3      	bne.n	8007362 <_dtoa_r+0x37a>
 80073ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f000 8082 	beq.w	80074c6 <_dtoa_r+0x4de>
 80073c2:	4b91      	ldr	r3, [pc, #580]	; (8007608 <_dtoa_r+0x620>)
 80073c4:	2200      	movs	r2, #0
 80073c6:	4650      	mov	r0, sl
 80073c8:	4659      	mov	r1, fp
 80073ca:	f7f9 fb8f 	bl	8000aec <__aeabi_dcmplt>
 80073ce:	2800      	cmp	r0, #0
 80073d0:	d079      	beq.n	80074c6 <_dtoa_r+0x4de>
 80073d2:	9b03      	ldr	r3, [sp, #12]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d076      	beq.n	80074c6 <_dtoa_r+0x4de>
 80073d8:	9b02      	ldr	r3, [sp, #8]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	dd36      	ble.n	800744c <_dtoa_r+0x464>
 80073de:	9b00      	ldr	r3, [sp, #0]
 80073e0:	4650      	mov	r0, sl
 80073e2:	4659      	mov	r1, fp
 80073e4:	1e5f      	subs	r7, r3, #1
 80073e6:	2200      	movs	r2, #0
 80073e8:	4b88      	ldr	r3, [pc, #544]	; (800760c <_dtoa_r+0x624>)
 80073ea:	f7f9 f90d 	bl	8000608 <__aeabi_dmul>
 80073ee:	9e02      	ldr	r6, [sp, #8]
 80073f0:	4682      	mov	sl, r0
 80073f2:	468b      	mov	fp, r1
 80073f4:	3501      	adds	r5, #1
 80073f6:	4628      	mov	r0, r5
 80073f8:	f7f9 f89c 	bl	8000534 <__aeabi_i2d>
 80073fc:	4652      	mov	r2, sl
 80073fe:	465b      	mov	r3, fp
 8007400:	f7f9 f902 	bl	8000608 <__aeabi_dmul>
 8007404:	4b82      	ldr	r3, [pc, #520]	; (8007610 <_dtoa_r+0x628>)
 8007406:	2200      	movs	r2, #0
 8007408:	f7f8 ff48 	bl	800029c <__adddf3>
 800740c:	46d0      	mov	r8, sl
 800740e:	46d9      	mov	r9, fp
 8007410:	4682      	mov	sl, r0
 8007412:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007416:	2e00      	cmp	r6, #0
 8007418:	d158      	bne.n	80074cc <_dtoa_r+0x4e4>
 800741a:	4b7e      	ldr	r3, [pc, #504]	; (8007614 <_dtoa_r+0x62c>)
 800741c:	2200      	movs	r2, #0
 800741e:	4640      	mov	r0, r8
 8007420:	4649      	mov	r1, r9
 8007422:	f7f8 ff39 	bl	8000298 <__aeabi_dsub>
 8007426:	4652      	mov	r2, sl
 8007428:	465b      	mov	r3, fp
 800742a:	4680      	mov	r8, r0
 800742c:	4689      	mov	r9, r1
 800742e:	f7f9 fb7b 	bl	8000b28 <__aeabi_dcmpgt>
 8007432:	2800      	cmp	r0, #0
 8007434:	f040 8295 	bne.w	8007962 <_dtoa_r+0x97a>
 8007438:	4652      	mov	r2, sl
 800743a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800743e:	4640      	mov	r0, r8
 8007440:	4649      	mov	r1, r9
 8007442:	f7f9 fb53 	bl	8000aec <__aeabi_dcmplt>
 8007446:	2800      	cmp	r0, #0
 8007448:	f040 8289 	bne.w	800795e <_dtoa_r+0x976>
 800744c:	ec5b ab19 	vmov	sl, fp, d9
 8007450:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007452:	2b00      	cmp	r3, #0
 8007454:	f2c0 8148 	blt.w	80076e8 <_dtoa_r+0x700>
 8007458:	9a00      	ldr	r2, [sp, #0]
 800745a:	2a0e      	cmp	r2, #14
 800745c:	f300 8144 	bgt.w	80076e8 <_dtoa_r+0x700>
 8007460:	4b67      	ldr	r3, [pc, #412]	; (8007600 <_dtoa_r+0x618>)
 8007462:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007466:	e9d3 8900 	ldrd	r8, r9, [r3]
 800746a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800746c:	2b00      	cmp	r3, #0
 800746e:	f280 80d5 	bge.w	800761c <_dtoa_r+0x634>
 8007472:	9b03      	ldr	r3, [sp, #12]
 8007474:	2b00      	cmp	r3, #0
 8007476:	f300 80d1 	bgt.w	800761c <_dtoa_r+0x634>
 800747a:	f040 826f 	bne.w	800795c <_dtoa_r+0x974>
 800747e:	4b65      	ldr	r3, [pc, #404]	; (8007614 <_dtoa_r+0x62c>)
 8007480:	2200      	movs	r2, #0
 8007482:	4640      	mov	r0, r8
 8007484:	4649      	mov	r1, r9
 8007486:	f7f9 f8bf 	bl	8000608 <__aeabi_dmul>
 800748a:	4652      	mov	r2, sl
 800748c:	465b      	mov	r3, fp
 800748e:	f7f9 fb41 	bl	8000b14 <__aeabi_dcmpge>
 8007492:	9e03      	ldr	r6, [sp, #12]
 8007494:	4637      	mov	r7, r6
 8007496:	2800      	cmp	r0, #0
 8007498:	f040 8245 	bne.w	8007926 <_dtoa_r+0x93e>
 800749c:	9d01      	ldr	r5, [sp, #4]
 800749e:	2331      	movs	r3, #49	; 0x31
 80074a0:	f805 3b01 	strb.w	r3, [r5], #1
 80074a4:	9b00      	ldr	r3, [sp, #0]
 80074a6:	3301      	adds	r3, #1
 80074a8:	9300      	str	r3, [sp, #0]
 80074aa:	e240      	b.n	800792e <_dtoa_r+0x946>
 80074ac:	07f2      	lsls	r2, r6, #31
 80074ae:	d505      	bpl.n	80074bc <_dtoa_r+0x4d4>
 80074b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074b4:	f7f9 f8a8 	bl	8000608 <__aeabi_dmul>
 80074b8:	3501      	adds	r5, #1
 80074ba:	2301      	movs	r3, #1
 80074bc:	1076      	asrs	r6, r6, #1
 80074be:	3708      	adds	r7, #8
 80074c0:	e777      	b.n	80073b2 <_dtoa_r+0x3ca>
 80074c2:	2502      	movs	r5, #2
 80074c4:	e779      	b.n	80073ba <_dtoa_r+0x3d2>
 80074c6:	9f00      	ldr	r7, [sp, #0]
 80074c8:	9e03      	ldr	r6, [sp, #12]
 80074ca:	e794      	b.n	80073f6 <_dtoa_r+0x40e>
 80074cc:	9901      	ldr	r1, [sp, #4]
 80074ce:	4b4c      	ldr	r3, [pc, #304]	; (8007600 <_dtoa_r+0x618>)
 80074d0:	4431      	add	r1, r6
 80074d2:	910d      	str	r1, [sp, #52]	; 0x34
 80074d4:	9908      	ldr	r1, [sp, #32]
 80074d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80074da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80074de:	2900      	cmp	r1, #0
 80074e0:	d043      	beq.n	800756a <_dtoa_r+0x582>
 80074e2:	494d      	ldr	r1, [pc, #308]	; (8007618 <_dtoa_r+0x630>)
 80074e4:	2000      	movs	r0, #0
 80074e6:	f7f9 f9b9 	bl	800085c <__aeabi_ddiv>
 80074ea:	4652      	mov	r2, sl
 80074ec:	465b      	mov	r3, fp
 80074ee:	f7f8 fed3 	bl	8000298 <__aeabi_dsub>
 80074f2:	9d01      	ldr	r5, [sp, #4]
 80074f4:	4682      	mov	sl, r0
 80074f6:	468b      	mov	fp, r1
 80074f8:	4649      	mov	r1, r9
 80074fa:	4640      	mov	r0, r8
 80074fc:	f7f9 fb34 	bl	8000b68 <__aeabi_d2iz>
 8007500:	4606      	mov	r6, r0
 8007502:	f7f9 f817 	bl	8000534 <__aeabi_i2d>
 8007506:	4602      	mov	r2, r0
 8007508:	460b      	mov	r3, r1
 800750a:	4640      	mov	r0, r8
 800750c:	4649      	mov	r1, r9
 800750e:	f7f8 fec3 	bl	8000298 <__aeabi_dsub>
 8007512:	3630      	adds	r6, #48	; 0x30
 8007514:	f805 6b01 	strb.w	r6, [r5], #1
 8007518:	4652      	mov	r2, sl
 800751a:	465b      	mov	r3, fp
 800751c:	4680      	mov	r8, r0
 800751e:	4689      	mov	r9, r1
 8007520:	f7f9 fae4 	bl	8000aec <__aeabi_dcmplt>
 8007524:	2800      	cmp	r0, #0
 8007526:	d163      	bne.n	80075f0 <_dtoa_r+0x608>
 8007528:	4642      	mov	r2, r8
 800752a:	464b      	mov	r3, r9
 800752c:	4936      	ldr	r1, [pc, #216]	; (8007608 <_dtoa_r+0x620>)
 800752e:	2000      	movs	r0, #0
 8007530:	f7f8 feb2 	bl	8000298 <__aeabi_dsub>
 8007534:	4652      	mov	r2, sl
 8007536:	465b      	mov	r3, fp
 8007538:	f7f9 fad8 	bl	8000aec <__aeabi_dcmplt>
 800753c:	2800      	cmp	r0, #0
 800753e:	f040 80b5 	bne.w	80076ac <_dtoa_r+0x6c4>
 8007542:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007544:	429d      	cmp	r5, r3
 8007546:	d081      	beq.n	800744c <_dtoa_r+0x464>
 8007548:	4b30      	ldr	r3, [pc, #192]	; (800760c <_dtoa_r+0x624>)
 800754a:	2200      	movs	r2, #0
 800754c:	4650      	mov	r0, sl
 800754e:	4659      	mov	r1, fp
 8007550:	f7f9 f85a 	bl	8000608 <__aeabi_dmul>
 8007554:	4b2d      	ldr	r3, [pc, #180]	; (800760c <_dtoa_r+0x624>)
 8007556:	4682      	mov	sl, r0
 8007558:	468b      	mov	fp, r1
 800755a:	4640      	mov	r0, r8
 800755c:	4649      	mov	r1, r9
 800755e:	2200      	movs	r2, #0
 8007560:	f7f9 f852 	bl	8000608 <__aeabi_dmul>
 8007564:	4680      	mov	r8, r0
 8007566:	4689      	mov	r9, r1
 8007568:	e7c6      	b.n	80074f8 <_dtoa_r+0x510>
 800756a:	4650      	mov	r0, sl
 800756c:	4659      	mov	r1, fp
 800756e:	f7f9 f84b 	bl	8000608 <__aeabi_dmul>
 8007572:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007574:	9d01      	ldr	r5, [sp, #4]
 8007576:	930f      	str	r3, [sp, #60]	; 0x3c
 8007578:	4682      	mov	sl, r0
 800757a:	468b      	mov	fp, r1
 800757c:	4649      	mov	r1, r9
 800757e:	4640      	mov	r0, r8
 8007580:	f7f9 faf2 	bl	8000b68 <__aeabi_d2iz>
 8007584:	4606      	mov	r6, r0
 8007586:	f7f8 ffd5 	bl	8000534 <__aeabi_i2d>
 800758a:	3630      	adds	r6, #48	; 0x30
 800758c:	4602      	mov	r2, r0
 800758e:	460b      	mov	r3, r1
 8007590:	4640      	mov	r0, r8
 8007592:	4649      	mov	r1, r9
 8007594:	f7f8 fe80 	bl	8000298 <__aeabi_dsub>
 8007598:	f805 6b01 	strb.w	r6, [r5], #1
 800759c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800759e:	429d      	cmp	r5, r3
 80075a0:	4680      	mov	r8, r0
 80075a2:	4689      	mov	r9, r1
 80075a4:	f04f 0200 	mov.w	r2, #0
 80075a8:	d124      	bne.n	80075f4 <_dtoa_r+0x60c>
 80075aa:	4b1b      	ldr	r3, [pc, #108]	; (8007618 <_dtoa_r+0x630>)
 80075ac:	4650      	mov	r0, sl
 80075ae:	4659      	mov	r1, fp
 80075b0:	f7f8 fe74 	bl	800029c <__adddf3>
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	4640      	mov	r0, r8
 80075ba:	4649      	mov	r1, r9
 80075bc:	f7f9 fab4 	bl	8000b28 <__aeabi_dcmpgt>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	d173      	bne.n	80076ac <_dtoa_r+0x6c4>
 80075c4:	4652      	mov	r2, sl
 80075c6:	465b      	mov	r3, fp
 80075c8:	4913      	ldr	r1, [pc, #76]	; (8007618 <_dtoa_r+0x630>)
 80075ca:	2000      	movs	r0, #0
 80075cc:	f7f8 fe64 	bl	8000298 <__aeabi_dsub>
 80075d0:	4602      	mov	r2, r0
 80075d2:	460b      	mov	r3, r1
 80075d4:	4640      	mov	r0, r8
 80075d6:	4649      	mov	r1, r9
 80075d8:	f7f9 fa88 	bl	8000aec <__aeabi_dcmplt>
 80075dc:	2800      	cmp	r0, #0
 80075de:	f43f af35 	beq.w	800744c <_dtoa_r+0x464>
 80075e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80075e4:	1e6b      	subs	r3, r5, #1
 80075e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80075e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80075ec:	2b30      	cmp	r3, #48	; 0x30
 80075ee:	d0f8      	beq.n	80075e2 <_dtoa_r+0x5fa>
 80075f0:	9700      	str	r7, [sp, #0]
 80075f2:	e049      	b.n	8007688 <_dtoa_r+0x6a0>
 80075f4:	4b05      	ldr	r3, [pc, #20]	; (800760c <_dtoa_r+0x624>)
 80075f6:	f7f9 f807 	bl	8000608 <__aeabi_dmul>
 80075fa:	4680      	mov	r8, r0
 80075fc:	4689      	mov	r9, r1
 80075fe:	e7bd      	b.n	800757c <_dtoa_r+0x594>
 8007600:	08009630 	.word	0x08009630
 8007604:	08009608 	.word	0x08009608
 8007608:	3ff00000 	.word	0x3ff00000
 800760c:	40240000 	.word	0x40240000
 8007610:	401c0000 	.word	0x401c0000
 8007614:	40140000 	.word	0x40140000
 8007618:	3fe00000 	.word	0x3fe00000
 800761c:	9d01      	ldr	r5, [sp, #4]
 800761e:	4656      	mov	r6, sl
 8007620:	465f      	mov	r7, fp
 8007622:	4642      	mov	r2, r8
 8007624:	464b      	mov	r3, r9
 8007626:	4630      	mov	r0, r6
 8007628:	4639      	mov	r1, r7
 800762a:	f7f9 f917 	bl	800085c <__aeabi_ddiv>
 800762e:	f7f9 fa9b 	bl	8000b68 <__aeabi_d2iz>
 8007632:	4682      	mov	sl, r0
 8007634:	f7f8 ff7e 	bl	8000534 <__aeabi_i2d>
 8007638:	4642      	mov	r2, r8
 800763a:	464b      	mov	r3, r9
 800763c:	f7f8 ffe4 	bl	8000608 <__aeabi_dmul>
 8007640:	4602      	mov	r2, r0
 8007642:	460b      	mov	r3, r1
 8007644:	4630      	mov	r0, r6
 8007646:	4639      	mov	r1, r7
 8007648:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800764c:	f7f8 fe24 	bl	8000298 <__aeabi_dsub>
 8007650:	f805 6b01 	strb.w	r6, [r5], #1
 8007654:	9e01      	ldr	r6, [sp, #4]
 8007656:	9f03      	ldr	r7, [sp, #12]
 8007658:	1bae      	subs	r6, r5, r6
 800765a:	42b7      	cmp	r7, r6
 800765c:	4602      	mov	r2, r0
 800765e:	460b      	mov	r3, r1
 8007660:	d135      	bne.n	80076ce <_dtoa_r+0x6e6>
 8007662:	f7f8 fe1b 	bl	800029c <__adddf3>
 8007666:	4642      	mov	r2, r8
 8007668:	464b      	mov	r3, r9
 800766a:	4606      	mov	r6, r0
 800766c:	460f      	mov	r7, r1
 800766e:	f7f9 fa5b 	bl	8000b28 <__aeabi_dcmpgt>
 8007672:	b9d0      	cbnz	r0, 80076aa <_dtoa_r+0x6c2>
 8007674:	4642      	mov	r2, r8
 8007676:	464b      	mov	r3, r9
 8007678:	4630      	mov	r0, r6
 800767a:	4639      	mov	r1, r7
 800767c:	f7f9 fa2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007680:	b110      	cbz	r0, 8007688 <_dtoa_r+0x6a0>
 8007682:	f01a 0f01 	tst.w	sl, #1
 8007686:	d110      	bne.n	80076aa <_dtoa_r+0x6c2>
 8007688:	4620      	mov	r0, r4
 800768a:	ee18 1a10 	vmov	r1, s16
 800768e:	f000 fae9 	bl	8007c64 <_Bfree>
 8007692:	2300      	movs	r3, #0
 8007694:	9800      	ldr	r0, [sp, #0]
 8007696:	702b      	strb	r3, [r5, #0]
 8007698:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800769a:	3001      	adds	r0, #1
 800769c:	6018      	str	r0, [r3, #0]
 800769e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f43f acf1 	beq.w	8007088 <_dtoa_r+0xa0>
 80076a6:	601d      	str	r5, [r3, #0]
 80076a8:	e4ee      	b.n	8007088 <_dtoa_r+0xa0>
 80076aa:	9f00      	ldr	r7, [sp, #0]
 80076ac:	462b      	mov	r3, r5
 80076ae:	461d      	mov	r5, r3
 80076b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076b4:	2a39      	cmp	r2, #57	; 0x39
 80076b6:	d106      	bne.n	80076c6 <_dtoa_r+0x6de>
 80076b8:	9a01      	ldr	r2, [sp, #4]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d1f7      	bne.n	80076ae <_dtoa_r+0x6c6>
 80076be:	9901      	ldr	r1, [sp, #4]
 80076c0:	2230      	movs	r2, #48	; 0x30
 80076c2:	3701      	adds	r7, #1
 80076c4:	700a      	strb	r2, [r1, #0]
 80076c6:	781a      	ldrb	r2, [r3, #0]
 80076c8:	3201      	adds	r2, #1
 80076ca:	701a      	strb	r2, [r3, #0]
 80076cc:	e790      	b.n	80075f0 <_dtoa_r+0x608>
 80076ce:	4ba6      	ldr	r3, [pc, #664]	; (8007968 <_dtoa_r+0x980>)
 80076d0:	2200      	movs	r2, #0
 80076d2:	f7f8 ff99 	bl	8000608 <__aeabi_dmul>
 80076d6:	2200      	movs	r2, #0
 80076d8:	2300      	movs	r3, #0
 80076da:	4606      	mov	r6, r0
 80076dc:	460f      	mov	r7, r1
 80076de:	f7f9 f9fb 	bl	8000ad8 <__aeabi_dcmpeq>
 80076e2:	2800      	cmp	r0, #0
 80076e4:	d09d      	beq.n	8007622 <_dtoa_r+0x63a>
 80076e6:	e7cf      	b.n	8007688 <_dtoa_r+0x6a0>
 80076e8:	9a08      	ldr	r2, [sp, #32]
 80076ea:	2a00      	cmp	r2, #0
 80076ec:	f000 80d7 	beq.w	800789e <_dtoa_r+0x8b6>
 80076f0:	9a06      	ldr	r2, [sp, #24]
 80076f2:	2a01      	cmp	r2, #1
 80076f4:	f300 80ba 	bgt.w	800786c <_dtoa_r+0x884>
 80076f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076fa:	2a00      	cmp	r2, #0
 80076fc:	f000 80b2 	beq.w	8007864 <_dtoa_r+0x87c>
 8007700:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007704:	9e07      	ldr	r6, [sp, #28]
 8007706:	9d04      	ldr	r5, [sp, #16]
 8007708:	9a04      	ldr	r2, [sp, #16]
 800770a:	441a      	add	r2, r3
 800770c:	9204      	str	r2, [sp, #16]
 800770e:	9a05      	ldr	r2, [sp, #20]
 8007710:	2101      	movs	r1, #1
 8007712:	441a      	add	r2, r3
 8007714:	4620      	mov	r0, r4
 8007716:	9205      	str	r2, [sp, #20]
 8007718:	f000 fb5c 	bl	8007dd4 <__i2b>
 800771c:	4607      	mov	r7, r0
 800771e:	2d00      	cmp	r5, #0
 8007720:	dd0c      	ble.n	800773c <_dtoa_r+0x754>
 8007722:	9b05      	ldr	r3, [sp, #20]
 8007724:	2b00      	cmp	r3, #0
 8007726:	dd09      	ble.n	800773c <_dtoa_r+0x754>
 8007728:	42ab      	cmp	r3, r5
 800772a:	9a04      	ldr	r2, [sp, #16]
 800772c:	bfa8      	it	ge
 800772e:	462b      	movge	r3, r5
 8007730:	1ad2      	subs	r2, r2, r3
 8007732:	9204      	str	r2, [sp, #16]
 8007734:	9a05      	ldr	r2, [sp, #20]
 8007736:	1aed      	subs	r5, r5, r3
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	9305      	str	r3, [sp, #20]
 800773c:	9b07      	ldr	r3, [sp, #28]
 800773e:	b31b      	cbz	r3, 8007788 <_dtoa_r+0x7a0>
 8007740:	9b08      	ldr	r3, [sp, #32]
 8007742:	2b00      	cmp	r3, #0
 8007744:	f000 80af 	beq.w	80078a6 <_dtoa_r+0x8be>
 8007748:	2e00      	cmp	r6, #0
 800774a:	dd13      	ble.n	8007774 <_dtoa_r+0x78c>
 800774c:	4639      	mov	r1, r7
 800774e:	4632      	mov	r2, r6
 8007750:	4620      	mov	r0, r4
 8007752:	f000 fbff 	bl	8007f54 <__pow5mult>
 8007756:	ee18 2a10 	vmov	r2, s16
 800775a:	4601      	mov	r1, r0
 800775c:	4607      	mov	r7, r0
 800775e:	4620      	mov	r0, r4
 8007760:	f000 fb4e 	bl	8007e00 <__multiply>
 8007764:	ee18 1a10 	vmov	r1, s16
 8007768:	4680      	mov	r8, r0
 800776a:	4620      	mov	r0, r4
 800776c:	f000 fa7a 	bl	8007c64 <_Bfree>
 8007770:	ee08 8a10 	vmov	s16, r8
 8007774:	9b07      	ldr	r3, [sp, #28]
 8007776:	1b9a      	subs	r2, r3, r6
 8007778:	d006      	beq.n	8007788 <_dtoa_r+0x7a0>
 800777a:	ee18 1a10 	vmov	r1, s16
 800777e:	4620      	mov	r0, r4
 8007780:	f000 fbe8 	bl	8007f54 <__pow5mult>
 8007784:	ee08 0a10 	vmov	s16, r0
 8007788:	2101      	movs	r1, #1
 800778a:	4620      	mov	r0, r4
 800778c:	f000 fb22 	bl	8007dd4 <__i2b>
 8007790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007792:	2b00      	cmp	r3, #0
 8007794:	4606      	mov	r6, r0
 8007796:	f340 8088 	ble.w	80078aa <_dtoa_r+0x8c2>
 800779a:	461a      	mov	r2, r3
 800779c:	4601      	mov	r1, r0
 800779e:	4620      	mov	r0, r4
 80077a0:	f000 fbd8 	bl	8007f54 <__pow5mult>
 80077a4:	9b06      	ldr	r3, [sp, #24]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	4606      	mov	r6, r0
 80077aa:	f340 8081 	ble.w	80078b0 <_dtoa_r+0x8c8>
 80077ae:	f04f 0800 	mov.w	r8, #0
 80077b2:	6933      	ldr	r3, [r6, #16]
 80077b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80077b8:	6918      	ldr	r0, [r3, #16]
 80077ba:	f000 fabb 	bl	8007d34 <__hi0bits>
 80077be:	f1c0 0020 	rsb	r0, r0, #32
 80077c2:	9b05      	ldr	r3, [sp, #20]
 80077c4:	4418      	add	r0, r3
 80077c6:	f010 001f 	ands.w	r0, r0, #31
 80077ca:	f000 8092 	beq.w	80078f2 <_dtoa_r+0x90a>
 80077ce:	f1c0 0320 	rsb	r3, r0, #32
 80077d2:	2b04      	cmp	r3, #4
 80077d4:	f340 808a 	ble.w	80078ec <_dtoa_r+0x904>
 80077d8:	f1c0 001c 	rsb	r0, r0, #28
 80077dc:	9b04      	ldr	r3, [sp, #16]
 80077de:	4403      	add	r3, r0
 80077e0:	9304      	str	r3, [sp, #16]
 80077e2:	9b05      	ldr	r3, [sp, #20]
 80077e4:	4403      	add	r3, r0
 80077e6:	4405      	add	r5, r0
 80077e8:	9305      	str	r3, [sp, #20]
 80077ea:	9b04      	ldr	r3, [sp, #16]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	dd07      	ble.n	8007800 <_dtoa_r+0x818>
 80077f0:	ee18 1a10 	vmov	r1, s16
 80077f4:	461a      	mov	r2, r3
 80077f6:	4620      	mov	r0, r4
 80077f8:	f000 fc06 	bl	8008008 <__lshift>
 80077fc:	ee08 0a10 	vmov	s16, r0
 8007800:	9b05      	ldr	r3, [sp, #20]
 8007802:	2b00      	cmp	r3, #0
 8007804:	dd05      	ble.n	8007812 <_dtoa_r+0x82a>
 8007806:	4631      	mov	r1, r6
 8007808:	461a      	mov	r2, r3
 800780a:	4620      	mov	r0, r4
 800780c:	f000 fbfc 	bl	8008008 <__lshift>
 8007810:	4606      	mov	r6, r0
 8007812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007814:	2b00      	cmp	r3, #0
 8007816:	d06e      	beq.n	80078f6 <_dtoa_r+0x90e>
 8007818:	ee18 0a10 	vmov	r0, s16
 800781c:	4631      	mov	r1, r6
 800781e:	f000 fc63 	bl	80080e8 <__mcmp>
 8007822:	2800      	cmp	r0, #0
 8007824:	da67      	bge.n	80078f6 <_dtoa_r+0x90e>
 8007826:	9b00      	ldr	r3, [sp, #0]
 8007828:	3b01      	subs	r3, #1
 800782a:	ee18 1a10 	vmov	r1, s16
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	220a      	movs	r2, #10
 8007832:	2300      	movs	r3, #0
 8007834:	4620      	mov	r0, r4
 8007836:	f000 fa37 	bl	8007ca8 <__multadd>
 800783a:	9b08      	ldr	r3, [sp, #32]
 800783c:	ee08 0a10 	vmov	s16, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	f000 81b1 	beq.w	8007ba8 <_dtoa_r+0xbc0>
 8007846:	2300      	movs	r3, #0
 8007848:	4639      	mov	r1, r7
 800784a:	220a      	movs	r2, #10
 800784c:	4620      	mov	r0, r4
 800784e:	f000 fa2b 	bl	8007ca8 <__multadd>
 8007852:	9b02      	ldr	r3, [sp, #8]
 8007854:	2b00      	cmp	r3, #0
 8007856:	4607      	mov	r7, r0
 8007858:	f300 808e 	bgt.w	8007978 <_dtoa_r+0x990>
 800785c:	9b06      	ldr	r3, [sp, #24]
 800785e:	2b02      	cmp	r3, #2
 8007860:	dc51      	bgt.n	8007906 <_dtoa_r+0x91e>
 8007862:	e089      	b.n	8007978 <_dtoa_r+0x990>
 8007864:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007866:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800786a:	e74b      	b.n	8007704 <_dtoa_r+0x71c>
 800786c:	9b03      	ldr	r3, [sp, #12]
 800786e:	1e5e      	subs	r6, r3, #1
 8007870:	9b07      	ldr	r3, [sp, #28]
 8007872:	42b3      	cmp	r3, r6
 8007874:	bfbf      	itttt	lt
 8007876:	9b07      	ldrlt	r3, [sp, #28]
 8007878:	9607      	strlt	r6, [sp, #28]
 800787a:	1af2      	sublt	r2, r6, r3
 800787c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800787e:	bfb6      	itet	lt
 8007880:	189b      	addlt	r3, r3, r2
 8007882:	1b9e      	subge	r6, r3, r6
 8007884:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007886:	9b03      	ldr	r3, [sp, #12]
 8007888:	bfb8      	it	lt
 800788a:	2600      	movlt	r6, #0
 800788c:	2b00      	cmp	r3, #0
 800788e:	bfb7      	itett	lt
 8007890:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007894:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007898:	1a9d      	sublt	r5, r3, r2
 800789a:	2300      	movlt	r3, #0
 800789c:	e734      	b.n	8007708 <_dtoa_r+0x720>
 800789e:	9e07      	ldr	r6, [sp, #28]
 80078a0:	9d04      	ldr	r5, [sp, #16]
 80078a2:	9f08      	ldr	r7, [sp, #32]
 80078a4:	e73b      	b.n	800771e <_dtoa_r+0x736>
 80078a6:	9a07      	ldr	r2, [sp, #28]
 80078a8:	e767      	b.n	800777a <_dtoa_r+0x792>
 80078aa:	9b06      	ldr	r3, [sp, #24]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	dc18      	bgt.n	80078e2 <_dtoa_r+0x8fa>
 80078b0:	f1ba 0f00 	cmp.w	sl, #0
 80078b4:	d115      	bne.n	80078e2 <_dtoa_r+0x8fa>
 80078b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078ba:	b993      	cbnz	r3, 80078e2 <_dtoa_r+0x8fa>
 80078bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80078c0:	0d1b      	lsrs	r3, r3, #20
 80078c2:	051b      	lsls	r3, r3, #20
 80078c4:	b183      	cbz	r3, 80078e8 <_dtoa_r+0x900>
 80078c6:	9b04      	ldr	r3, [sp, #16]
 80078c8:	3301      	adds	r3, #1
 80078ca:	9304      	str	r3, [sp, #16]
 80078cc:	9b05      	ldr	r3, [sp, #20]
 80078ce:	3301      	adds	r3, #1
 80078d0:	9305      	str	r3, [sp, #20]
 80078d2:	f04f 0801 	mov.w	r8, #1
 80078d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f47f af6a 	bne.w	80077b2 <_dtoa_r+0x7ca>
 80078de:	2001      	movs	r0, #1
 80078e0:	e76f      	b.n	80077c2 <_dtoa_r+0x7da>
 80078e2:	f04f 0800 	mov.w	r8, #0
 80078e6:	e7f6      	b.n	80078d6 <_dtoa_r+0x8ee>
 80078e8:	4698      	mov	r8, r3
 80078ea:	e7f4      	b.n	80078d6 <_dtoa_r+0x8ee>
 80078ec:	f43f af7d 	beq.w	80077ea <_dtoa_r+0x802>
 80078f0:	4618      	mov	r0, r3
 80078f2:	301c      	adds	r0, #28
 80078f4:	e772      	b.n	80077dc <_dtoa_r+0x7f4>
 80078f6:	9b03      	ldr	r3, [sp, #12]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	dc37      	bgt.n	800796c <_dtoa_r+0x984>
 80078fc:	9b06      	ldr	r3, [sp, #24]
 80078fe:	2b02      	cmp	r3, #2
 8007900:	dd34      	ble.n	800796c <_dtoa_r+0x984>
 8007902:	9b03      	ldr	r3, [sp, #12]
 8007904:	9302      	str	r3, [sp, #8]
 8007906:	9b02      	ldr	r3, [sp, #8]
 8007908:	b96b      	cbnz	r3, 8007926 <_dtoa_r+0x93e>
 800790a:	4631      	mov	r1, r6
 800790c:	2205      	movs	r2, #5
 800790e:	4620      	mov	r0, r4
 8007910:	f000 f9ca 	bl	8007ca8 <__multadd>
 8007914:	4601      	mov	r1, r0
 8007916:	4606      	mov	r6, r0
 8007918:	ee18 0a10 	vmov	r0, s16
 800791c:	f000 fbe4 	bl	80080e8 <__mcmp>
 8007920:	2800      	cmp	r0, #0
 8007922:	f73f adbb 	bgt.w	800749c <_dtoa_r+0x4b4>
 8007926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007928:	9d01      	ldr	r5, [sp, #4]
 800792a:	43db      	mvns	r3, r3
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	f04f 0800 	mov.w	r8, #0
 8007932:	4631      	mov	r1, r6
 8007934:	4620      	mov	r0, r4
 8007936:	f000 f995 	bl	8007c64 <_Bfree>
 800793a:	2f00      	cmp	r7, #0
 800793c:	f43f aea4 	beq.w	8007688 <_dtoa_r+0x6a0>
 8007940:	f1b8 0f00 	cmp.w	r8, #0
 8007944:	d005      	beq.n	8007952 <_dtoa_r+0x96a>
 8007946:	45b8      	cmp	r8, r7
 8007948:	d003      	beq.n	8007952 <_dtoa_r+0x96a>
 800794a:	4641      	mov	r1, r8
 800794c:	4620      	mov	r0, r4
 800794e:	f000 f989 	bl	8007c64 <_Bfree>
 8007952:	4639      	mov	r1, r7
 8007954:	4620      	mov	r0, r4
 8007956:	f000 f985 	bl	8007c64 <_Bfree>
 800795a:	e695      	b.n	8007688 <_dtoa_r+0x6a0>
 800795c:	2600      	movs	r6, #0
 800795e:	4637      	mov	r7, r6
 8007960:	e7e1      	b.n	8007926 <_dtoa_r+0x93e>
 8007962:	9700      	str	r7, [sp, #0]
 8007964:	4637      	mov	r7, r6
 8007966:	e599      	b.n	800749c <_dtoa_r+0x4b4>
 8007968:	40240000 	.word	0x40240000
 800796c:	9b08      	ldr	r3, [sp, #32]
 800796e:	2b00      	cmp	r3, #0
 8007970:	f000 80ca 	beq.w	8007b08 <_dtoa_r+0xb20>
 8007974:	9b03      	ldr	r3, [sp, #12]
 8007976:	9302      	str	r3, [sp, #8]
 8007978:	2d00      	cmp	r5, #0
 800797a:	dd05      	ble.n	8007988 <_dtoa_r+0x9a0>
 800797c:	4639      	mov	r1, r7
 800797e:	462a      	mov	r2, r5
 8007980:	4620      	mov	r0, r4
 8007982:	f000 fb41 	bl	8008008 <__lshift>
 8007986:	4607      	mov	r7, r0
 8007988:	f1b8 0f00 	cmp.w	r8, #0
 800798c:	d05b      	beq.n	8007a46 <_dtoa_r+0xa5e>
 800798e:	6879      	ldr	r1, [r7, #4]
 8007990:	4620      	mov	r0, r4
 8007992:	f000 f927 	bl	8007be4 <_Balloc>
 8007996:	4605      	mov	r5, r0
 8007998:	b928      	cbnz	r0, 80079a6 <_dtoa_r+0x9be>
 800799a:	4b87      	ldr	r3, [pc, #540]	; (8007bb8 <_dtoa_r+0xbd0>)
 800799c:	4602      	mov	r2, r0
 800799e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80079a2:	f7ff bb3b 	b.w	800701c <_dtoa_r+0x34>
 80079a6:	693a      	ldr	r2, [r7, #16]
 80079a8:	3202      	adds	r2, #2
 80079aa:	0092      	lsls	r2, r2, #2
 80079ac:	f107 010c 	add.w	r1, r7, #12
 80079b0:	300c      	adds	r0, #12
 80079b2:	f7fe fcb7 	bl	8006324 <memcpy>
 80079b6:	2201      	movs	r2, #1
 80079b8:	4629      	mov	r1, r5
 80079ba:	4620      	mov	r0, r4
 80079bc:	f000 fb24 	bl	8008008 <__lshift>
 80079c0:	9b01      	ldr	r3, [sp, #4]
 80079c2:	f103 0901 	add.w	r9, r3, #1
 80079c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80079ca:	4413      	add	r3, r2
 80079cc:	9305      	str	r3, [sp, #20]
 80079ce:	f00a 0301 	and.w	r3, sl, #1
 80079d2:	46b8      	mov	r8, r7
 80079d4:	9304      	str	r3, [sp, #16]
 80079d6:	4607      	mov	r7, r0
 80079d8:	4631      	mov	r1, r6
 80079da:	ee18 0a10 	vmov	r0, s16
 80079de:	f7ff fa75 	bl	8006ecc <quorem>
 80079e2:	4641      	mov	r1, r8
 80079e4:	9002      	str	r0, [sp, #8]
 80079e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80079ea:	ee18 0a10 	vmov	r0, s16
 80079ee:	f000 fb7b 	bl	80080e8 <__mcmp>
 80079f2:	463a      	mov	r2, r7
 80079f4:	9003      	str	r0, [sp, #12]
 80079f6:	4631      	mov	r1, r6
 80079f8:	4620      	mov	r0, r4
 80079fa:	f000 fb91 	bl	8008120 <__mdiff>
 80079fe:	68c2      	ldr	r2, [r0, #12]
 8007a00:	f109 3bff 	add.w	fp, r9, #4294967295
 8007a04:	4605      	mov	r5, r0
 8007a06:	bb02      	cbnz	r2, 8007a4a <_dtoa_r+0xa62>
 8007a08:	4601      	mov	r1, r0
 8007a0a:	ee18 0a10 	vmov	r0, s16
 8007a0e:	f000 fb6b 	bl	80080e8 <__mcmp>
 8007a12:	4602      	mov	r2, r0
 8007a14:	4629      	mov	r1, r5
 8007a16:	4620      	mov	r0, r4
 8007a18:	9207      	str	r2, [sp, #28]
 8007a1a:	f000 f923 	bl	8007c64 <_Bfree>
 8007a1e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007a22:	ea43 0102 	orr.w	r1, r3, r2
 8007a26:	9b04      	ldr	r3, [sp, #16]
 8007a28:	430b      	orrs	r3, r1
 8007a2a:	464d      	mov	r5, r9
 8007a2c:	d10f      	bne.n	8007a4e <_dtoa_r+0xa66>
 8007a2e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007a32:	d02a      	beq.n	8007a8a <_dtoa_r+0xaa2>
 8007a34:	9b03      	ldr	r3, [sp, #12]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	dd02      	ble.n	8007a40 <_dtoa_r+0xa58>
 8007a3a:	9b02      	ldr	r3, [sp, #8]
 8007a3c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007a40:	f88b a000 	strb.w	sl, [fp]
 8007a44:	e775      	b.n	8007932 <_dtoa_r+0x94a>
 8007a46:	4638      	mov	r0, r7
 8007a48:	e7ba      	b.n	80079c0 <_dtoa_r+0x9d8>
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	e7e2      	b.n	8007a14 <_dtoa_r+0xa2c>
 8007a4e:	9b03      	ldr	r3, [sp, #12]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	db04      	blt.n	8007a5e <_dtoa_r+0xa76>
 8007a54:	9906      	ldr	r1, [sp, #24]
 8007a56:	430b      	orrs	r3, r1
 8007a58:	9904      	ldr	r1, [sp, #16]
 8007a5a:	430b      	orrs	r3, r1
 8007a5c:	d122      	bne.n	8007aa4 <_dtoa_r+0xabc>
 8007a5e:	2a00      	cmp	r2, #0
 8007a60:	ddee      	ble.n	8007a40 <_dtoa_r+0xa58>
 8007a62:	ee18 1a10 	vmov	r1, s16
 8007a66:	2201      	movs	r2, #1
 8007a68:	4620      	mov	r0, r4
 8007a6a:	f000 facd 	bl	8008008 <__lshift>
 8007a6e:	4631      	mov	r1, r6
 8007a70:	ee08 0a10 	vmov	s16, r0
 8007a74:	f000 fb38 	bl	80080e8 <__mcmp>
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	dc03      	bgt.n	8007a84 <_dtoa_r+0xa9c>
 8007a7c:	d1e0      	bne.n	8007a40 <_dtoa_r+0xa58>
 8007a7e:	f01a 0f01 	tst.w	sl, #1
 8007a82:	d0dd      	beq.n	8007a40 <_dtoa_r+0xa58>
 8007a84:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007a88:	d1d7      	bne.n	8007a3a <_dtoa_r+0xa52>
 8007a8a:	2339      	movs	r3, #57	; 0x39
 8007a8c:	f88b 3000 	strb.w	r3, [fp]
 8007a90:	462b      	mov	r3, r5
 8007a92:	461d      	mov	r5, r3
 8007a94:	3b01      	subs	r3, #1
 8007a96:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007a9a:	2a39      	cmp	r2, #57	; 0x39
 8007a9c:	d071      	beq.n	8007b82 <_dtoa_r+0xb9a>
 8007a9e:	3201      	adds	r2, #1
 8007aa0:	701a      	strb	r2, [r3, #0]
 8007aa2:	e746      	b.n	8007932 <_dtoa_r+0x94a>
 8007aa4:	2a00      	cmp	r2, #0
 8007aa6:	dd07      	ble.n	8007ab8 <_dtoa_r+0xad0>
 8007aa8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007aac:	d0ed      	beq.n	8007a8a <_dtoa_r+0xaa2>
 8007aae:	f10a 0301 	add.w	r3, sl, #1
 8007ab2:	f88b 3000 	strb.w	r3, [fp]
 8007ab6:	e73c      	b.n	8007932 <_dtoa_r+0x94a>
 8007ab8:	9b05      	ldr	r3, [sp, #20]
 8007aba:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007abe:	4599      	cmp	r9, r3
 8007ac0:	d047      	beq.n	8007b52 <_dtoa_r+0xb6a>
 8007ac2:	ee18 1a10 	vmov	r1, s16
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	220a      	movs	r2, #10
 8007aca:	4620      	mov	r0, r4
 8007acc:	f000 f8ec 	bl	8007ca8 <__multadd>
 8007ad0:	45b8      	cmp	r8, r7
 8007ad2:	ee08 0a10 	vmov	s16, r0
 8007ad6:	f04f 0300 	mov.w	r3, #0
 8007ada:	f04f 020a 	mov.w	r2, #10
 8007ade:	4641      	mov	r1, r8
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	d106      	bne.n	8007af2 <_dtoa_r+0xb0a>
 8007ae4:	f000 f8e0 	bl	8007ca8 <__multadd>
 8007ae8:	4680      	mov	r8, r0
 8007aea:	4607      	mov	r7, r0
 8007aec:	f109 0901 	add.w	r9, r9, #1
 8007af0:	e772      	b.n	80079d8 <_dtoa_r+0x9f0>
 8007af2:	f000 f8d9 	bl	8007ca8 <__multadd>
 8007af6:	4639      	mov	r1, r7
 8007af8:	4680      	mov	r8, r0
 8007afa:	2300      	movs	r3, #0
 8007afc:	220a      	movs	r2, #10
 8007afe:	4620      	mov	r0, r4
 8007b00:	f000 f8d2 	bl	8007ca8 <__multadd>
 8007b04:	4607      	mov	r7, r0
 8007b06:	e7f1      	b.n	8007aec <_dtoa_r+0xb04>
 8007b08:	9b03      	ldr	r3, [sp, #12]
 8007b0a:	9302      	str	r3, [sp, #8]
 8007b0c:	9d01      	ldr	r5, [sp, #4]
 8007b0e:	ee18 0a10 	vmov	r0, s16
 8007b12:	4631      	mov	r1, r6
 8007b14:	f7ff f9da 	bl	8006ecc <quorem>
 8007b18:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007b1c:	9b01      	ldr	r3, [sp, #4]
 8007b1e:	f805 ab01 	strb.w	sl, [r5], #1
 8007b22:	1aea      	subs	r2, r5, r3
 8007b24:	9b02      	ldr	r3, [sp, #8]
 8007b26:	4293      	cmp	r3, r2
 8007b28:	dd09      	ble.n	8007b3e <_dtoa_r+0xb56>
 8007b2a:	ee18 1a10 	vmov	r1, s16
 8007b2e:	2300      	movs	r3, #0
 8007b30:	220a      	movs	r2, #10
 8007b32:	4620      	mov	r0, r4
 8007b34:	f000 f8b8 	bl	8007ca8 <__multadd>
 8007b38:	ee08 0a10 	vmov	s16, r0
 8007b3c:	e7e7      	b.n	8007b0e <_dtoa_r+0xb26>
 8007b3e:	9b02      	ldr	r3, [sp, #8]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	bfc8      	it	gt
 8007b44:	461d      	movgt	r5, r3
 8007b46:	9b01      	ldr	r3, [sp, #4]
 8007b48:	bfd8      	it	le
 8007b4a:	2501      	movle	r5, #1
 8007b4c:	441d      	add	r5, r3
 8007b4e:	f04f 0800 	mov.w	r8, #0
 8007b52:	ee18 1a10 	vmov	r1, s16
 8007b56:	2201      	movs	r2, #1
 8007b58:	4620      	mov	r0, r4
 8007b5a:	f000 fa55 	bl	8008008 <__lshift>
 8007b5e:	4631      	mov	r1, r6
 8007b60:	ee08 0a10 	vmov	s16, r0
 8007b64:	f000 fac0 	bl	80080e8 <__mcmp>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	dc91      	bgt.n	8007a90 <_dtoa_r+0xaa8>
 8007b6c:	d102      	bne.n	8007b74 <_dtoa_r+0xb8c>
 8007b6e:	f01a 0f01 	tst.w	sl, #1
 8007b72:	d18d      	bne.n	8007a90 <_dtoa_r+0xaa8>
 8007b74:	462b      	mov	r3, r5
 8007b76:	461d      	mov	r5, r3
 8007b78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b7c:	2a30      	cmp	r2, #48	; 0x30
 8007b7e:	d0fa      	beq.n	8007b76 <_dtoa_r+0xb8e>
 8007b80:	e6d7      	b.n	8007932 <_dtoa_r+0x94a>
 8007b82:	9a01      	ldr	r2, [sp, #4]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d184      	bne.n	8007a92 <_dtoa_r+0xaaa>
 8007b88:	9b00      	ldr	r3, [sp, #0]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	2331      	movs	r3, #49	; 0x31
 8007b90:	7013      	strb	r3, [r2, #0]
 8007b92:	e6ce      	b.n	8007932 <_dtoa_r+0x94a>
 8007b94:	4b09      	ldr	r3, [pc, #36]	; (8007bbc <_dtoa_r+0xbd4>)
 8007b96:	f7ff ba95 	b.w	80070c4 <_dtoa_r+0xdc>
 8007b9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f47f aa6e 	bne.w	800707e <_dtoa_r+0x96>
 8007ba2:	4b07      	ldr	r3, [pc, #28]	; (8007bc0 <_dtoa_r+0xbd8>)
 8007ba4:	f7ff ba8e 	b.w	80070c4 <_dtoa_r+0xdc>
 8007ba8:	9b02      	ldr	r3, [sp, #8]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	dcae      	bgt.n	8007b0c <_dtoa_r+0xb24>
 8007bae:	9b06      	ldr	r3, [sp, #24]
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	f73f aea8 	bgt.w	8007906 <_dtoa_r+0x91e>
 8007bb6:	e7a9      	b.n	8007b0c <_dtoa_r+0xb24>
 8007bb8:	0800959b 	.word	0x0800959b
 8007bbc:	080094f8 	.word	0x080094f8
 8007bc0:	0800951c 	.word	0x0800951c

08007bc4 <_localeconv_r>:
 8007bc4:	4800      	ldr	r0, [pc, #0]	; (8007bc8 <_localeconv_r+0x4>)
 8007bc6:	4770      	bx	lr
 8007bc8:	20000590 	.word	0x20000590

08007bcc <__malloc_lock>:
 8007bcc:	4801      	ldr	r0, [pc, #4]	; (8007bd4 <__malloc_lock+0x8>)
 8007bce:	f000 bd5e 	b.w	800868e <__retarget_lock_acquire_recursive>
 8007bd2:	bf00      	nop
 8007bd4:	20000868 	.word	0x20000868

08007bd8 <__malloc_unlock>:
 8007bd8:	4801      	ldr	r0, [pc, #4]	; (8007be0 <__malloc_unlock+0x8>)
 8007bda:	f000 bd59 	b.w	8008690 <__retarget_lock_release_recursive>
 8007bde:	bf00      	nop
 8007be0:	20000868 	.word	0x20000868

08007be4 <_Balloc>:
 8007be4:	b570      	push	{r4, r5, r6, lr}
 8007be6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007be8:	4604      	mov	r4, r0
 8007bea:	460d      	mov	r5, r1
 8007bec:	b976      	cbnz	r6, 8007c0c <_Balloc+0x28>
 8007bee:	2010      	movs	r0, #16
 8007bf0:	f7fe fb88 	bl	8006304 <malloc>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	6260      	str	r0, [r4, #36]	; 0x24
 8007bf8:	b920      	cbnz	r0, 8007c04 <_Balloc+0x20>
 8007bfa:	4b18      	ldr	r3, [pc, #96]	; (8007c5c <_Balloc+0x78>)
 8007bfc:	4818      	ldr	r0, [pc, #96]	; (8007c60 <_Balloc+0x7c>)
 8007bfe:	2166      	movs	r1, #102	; 0x66
 8007c00:	f000 fd14 	bl	800862c <__assert_func>
 8007c04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c08:	6006      	str	r6, [r0, #0]
 8007c0a:	60c6      	str	r6, [r0, #12]
 8007c0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c0e:	68f3      	ldr	r3, [r6, #12]
 8007c10:	b183      	cbz	r3, 8007c34 <_Balloc+0x50>
 8007c12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c1a:	b9b8      	cbnz	r0, 8007c4c <_Balloc+0x68>
 8007c1c:	2101      	movs	r1, #1
 8007c1e:	fa01 f605 	lsl.w	r6, r1, r5
 8007c22:	1d72      	adds	r2, r6, #5
 8007c24:	0092      	lsls	r2, r2, #2
 8007c26:	4620      	mov	r0, r4
 8007c28:	f000 fb60 	bl	80082ec <_calloc_r>
 8007c2c:	b160      	cbz	r0, 8007c48 <_Balloc+0x64>
 8007c2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c32:	e00e      	b.n	8007c52 <_Balloc+0x6e>
 8007c34:	2221      	movs	r2, #33	; 0x21
 8007c36:	2104      	movs	r1, #4
 8007c38:	4620      	mov	r0, r4
 8007c3a:	f000 fb57 	bl	80082ec <_calloc_r>
 8007c3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c40:	60f0      	str	r0, [r6, #12]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1e4      	bne.n	8007c12 <_Balloc+0x2e>
 8007c48:	2000      	movs	r0, #0
 8007c4a:	bd70      	pop	{r4, r5, r6, pc}
 8007c4c:	6802      	ldr	r2, [r0, #0]
 8007c4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c52:	2300      	movs	r3, #0
 8007c54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c58:	e7f7      	b.n	8007c4a <_Balloc+0x66>
 8007c5a:	bf00      	nop
 8007c5c:	08009529 	.word	0x08009529
 8007c60:	080095ac 	.word	0x080095ac

08007c64 <_Bfree>:
 8007c64:	b570      	push	{r4, r5, r6, lr}
 8007c66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c68:	4605      	mov	r5, r0
 8007c6a:	460c      	mov	r4, r1
 8007c6c:	b976      	cbnz	r6, 8007c8c <_Bfree+0x28>
 8007c6e:	2010      	movs	r0, #16
 8007c70:	f7fe fb48 	bl	8006304 <malloc>
 8007c74:	4602      	mov	r2, r0
 8007c76:	6268      	str	r0, [r5, #36]	; 0x24
 8007c78:	b920      	cbnz	r0, 8007c84 <_Bfree+0x20>
 8007c7a:	4b09      	ldr	r3, [pc, #36]	; (8007ca0 <_Bfree+0x3c>)
 8007c7c:	4809      	ldr	r0, [pc, #36]	; (8007ca4 <_Bfree+0x40>)
 8007c7e:	218a      	movs	r1, #138	; 0x8a
 8007c80:	f000 fcd4 	bl	800862c <__assert_func>
 8007c84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c88:	6006      	str	r6, [r0, #0]
 8007c8a:	60c6      	str	r6, [r0, #12]
 8007c8c:	b13c      	cbz	r4, 8007c9e <_Bfree+0x3a>
 8007c8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007c90:	6862      	ldr	r2, [r4, #4]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c98:	6021      	str	r1, [r4, #0]
 8007c9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ca0:	08009529 	.word	0x08009529
 8007ca4:	080095ac 	.word	0x080095ac

08007ca8 <__multadd>:
 8007ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cac:	690d      	ldr	r5, [r1, #16]
 8007cae:	4607      	mov	r7, r0
 8007cb0:	460c      	mov	r4, r1
 8007cb2:	461e      	mov	r6, r3
 8007cb4:	f101 0c14 	add.w	ip, r1, #20
 8007cb8:	2000      	movs	r0, #0
 8007cba:	f8dc 3000 	ldr.w	r3, [ip]
 8007cbe:	b299      	uxth	r1, r3
 8007cc0:	fb02 6101 	mla	r1, r2, r1, r6
 8007cc4:	0c1e      	lsrs	r6, r3, #16
 8007cc6:	0c0b      	lsrs	r3, r1, #16
 8007cc8:	fb02 3306 	mla	r3, r2, r6, r3
 8007ccc:	b289      	uxth	r1, r1
 8007cce:	3001      	adds	r0, #1
 8007cd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007cd4:	4285      	cmp	r5, r0
 8007cd6:	f84c 1b04 	str.w	r1, [ip], #4
 8007cda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007cde:	dcec      	bgt.n	8007cba <__multadd+0x12>
 8007ce0:	b30e      	cbz	r6, 8007d26 <__multadd+0x7e>
 8007ce2:	68a3      	ldr	r3, [r4, #8]
 8007ce4:	42ab      	cmp	r3, r5
 8007ce6:	dc19      	bgt.n	8007d1c <__multadd+0x74>
 8007ce8:	6861      	ldr	r1, [r4, #4]
 8007cea:	4638      	mov	r0, r7
 8007cec:	3101      	adds	r1, #1
 8007cee:	f7ff ff79 	bl	8007be4 <_Balloc>
 8007cf2:	4680      	mov	r8, r0
 8007cf4:	b928      	cbnz	r0, 8007d02 <__multadd+0x5a>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	4b0c      	ldr	r3, [pc, #48]	; (8007d2c <__multadd+0x84>)
 8007cfa:	480d      	ldr	r0, [pc, #52]	; (8007d30 <__multadd+0x88>)
 8007cfc:	21b5      	movs	r1, #181	; 0xb5
 8007cfe:	f000 fc95 	bl	800862c <__assert_func>
 8007d02:	6922      	ldr	r2, [r4, #16]
 8007d04:	3202      	adds	r2, #2
 8007d06:	f104 010c 	add.w	r1, r4, #12
 8007d0a:	0092      	lsls	r2, r2, #2
 8007d0c:	300c      	adds	r0, #12
 8007d0e:	f7fe fb09 	bl	8006324 <memcpy>
 8007d12:	4621      	mov	r1, r4
 8007d14:	4638      	mov	r0, r7
 8007d16:	f7ff ffa5 	bl	8007c64 <_Bfree>
 8007d1a:	4644      	mov	r4, r8
 8007d1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d20:	3501      	adds	r5, #1
 8007d22:	615e      	str	r6, [r3, #20]
 8007d24:	6125      	str	r5, [r4, #16]
 8007d26:	4620      	mov	r0, r4
 8007d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d2c:	0800959b 	.word	0x0800959b
 8007d30:	080095ac 	.word	0x080095ac

08007d34 <__hi0bits>:
 8007d34:	0c03      	lsrs	r3, r0, #16
 8007d36:	041b      	lsls	r3, r3, #16
 8007d38:	b9d3      	cbnz	r3, 8007d70 <__hi0bits+0x3c>
 8007d3a:	0400      	lsls	r0, r0, #16
 8007d3c:	2310      	movs	r3, #16
 8007d3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007d42:	bf04      	itt	eq
 8007d44:	0200      	lsleq	r0, r0, #8
 8007d46:	3308      	addeq	r3, #8
 8007d48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007d4c:	bf04      	itt	eq
 8007d4e:	0100      	lsleq	r0, r0, #4
 8007d50:	3304      	addeq	r3, #4
 8007d52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007d56:	bf04      	itt	eq
 8007d58:	0080      	lsleq	r0, r0, #2
 8007d5a:	3302      	addeq	r3, #2
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	db05      	blt.n	8007d6c <__hi0bits+0x38>
 8007d60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007d64:	f103 0301 	add.w	r3, r3, #1
 8007d68:	bf08      	it	eq
 8007d6a:	2320      	moveq	r3, #32
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	4770      	bx	lr
 8007d70:	2300      	movs	r3, #0
 8007d72:	e7e4      	b.n	8007d3e <__hi0bits+0xa>

08007d74 <__lo0bits>:
 8007d74:	6803      	ldr	r3, [r0, #0]
 8007d76:	f013 0207 	ands.w	r2, r3, #7
 8007d7a:	4601      	mov	r1, r0
 8007d7c:	d00b      	beq.n	8007d96 <__lo0bits+0x22>
 8007d7e:	07da      	lsls	r2, r3, #31
 8007d80:	d423      	bmi.n	8007dca <__lo0bits+0x56>
 8007d82:	0798      	lsls	r0, r3, #30
 8007d84:	bf49      	itett	mi
 8007d86:	085b      	lsrmi	r3, r3, #1
 8007d88:	089b      	lsrpl	r3, r3, #2
 8007d8a:	2001      	movmi	r0, #1
 8007d8c:	600b      	strmi	r3, [r1, #0]
 8007d8e:	bf5c      	itt	pl
 8007d90:	600b      	strpl	r3, [r1, #0]
 8007d92:	2002      	movpl	r0, #2
 8007d94:	4770      	bx	lr
 8007d96:	b298      	uxth	r0, r3
 8007d98:	b9a8      	cbnz	r0, 8007dc6 <__lo0bits+0x52>
 8007d9a:	0c1b      	lsrs	r3, r3, #16
 8007d9c:	2010      	movs	r0, #16
 8007d9e:	b2da      	uxtb	r2, r3
 8007da0:	b90a      	cbnz	r2, 8007da6 <__lo0bits+0x32>
 8007da2:	3008      	adds	r0, #8
 8007da4:	0a1b      	lsrs	r3, r3, #8
 8007da6:	071a      	lsls	r2, r3, #28
 8007da8:	bf04      	itt	eq
 8007daa:	091b      	lsreq	r3, r3, #4
 8007dac:	3004      	addeq	r0, #4
 8007dae:	079a      	lsls	r2, r3, #30
 8007db0:	bf04      	itt	eq
 8007db2:	089b      	lsreq	r3, r3, #2
 8007db4:	3002      	addeq	r0, #2
 8007db6:	07da      	lsls	r2, r3, #31
 8007db8:	d403      	bmi.n	8007dc2 <__lo0bits+0x4e>
 8007dba:	085b      	lsrs	r3, r3, #1
 8007dbc:	f100 0001 	add.w	r0, r0, #1
 8007dc0:	d005      	beq.n	8007dce <__lo0bits+0x5a>
 8007dc2:	600b      	str	r3, [r1, #0]
 8007dc4:	4770      	bx	lr
 8007dc6:	4610      	mov	r0, r2
 8007dc8:	e7e9      	b.n	8007d9e <__lo0bits+0x2a>
 8007dca:	2000      	movs	r0, #0
 8007dcc:	4770      	bx	lr
 8007dce:	2020      	movs	r0, #32
 8007dd0:	4770      	bx	lr
	...

08007dd4 <__i2b>:
 8007dd4:	b510      	push	{r4, lr}
 8007dd6:	460c      	mov	r4, r1
 8007dd8:	2101      	movs	r1, #1
 8007dda:	f7ff ff03 	bl	8007be4 <_Balloc>
 8007dde:	4602      	mov	r2, r0
 8007de0:	b928      	cbnz	r0, 8007dee <__i2b+0x1a>
 8007de2:	4b05      	ldr	r3, [pc, #20]	; (8007df8 <__i2b+0x24>)
 8007de4:	4805      	ldr	r0, [pc, #20]	; (8007dfc <__i2b+0x28>)
 8007de6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007dea:	f000 fc1f 	bl	800862c <__assert_func>
 8007dee:	2301      	movs	r3, #1
 8007df0:	6144      	str	r4, [r0, #20]
 8007df2:	6103      	str	r3, [r0, #16]
 8007df4:	bd10      	pop	{r4, pc}
 8007df6:	bf00      	nop
 8007df8:	0800959b 	.word	0x0800959b
 8007dfc:	080095ac 	.word	0x080095ac

08007e00 <__multiply>:
 8007e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e04:	4691      	mov	r9, r2
 8007e06:	690a      	ldr	r2, [r1, #16]
 8007e08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	bfb8      	it	lt
 8007e10:	460b      	movlt	r3, r1
 8007e12:	460c      	mov	r4, r1
 8007e14:	bfbc      	itt	lt
 8007e16:	464c      	movlt	r4, r9
 8007e18:	4699      	movlt	r9, r3
 8007e1a:	6927      	ldr	r7, [r4, #16]
 8007e1c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007e20:	68a3      	ldr	r3, [r4, #8]
 8007e22:	6861      	ldr	r1, [r4, #4]
 8007e24:	eb07 060a 	add.w	r6, r7, sl
 8007e28:	42b3      	cmp	r3, r6
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	bfb8      	it	lt
 8007e2e:	3101      	addlt	r1, #1
 8007e30:	f7ff fed8 	bl	8007be4 <_Balloc>
 8007e34:	b930      	cbnz	r0, 8007e44 <__multiply+0x44>
 8007e36:	4602      	mov	r2, r0
 8007e38:	4b44      	ldr	r3, [pc, #272]	; (8007f4c <__multiply+0x14c>)
 8007e3a:	4845      	ldr	r0, [pc, #276]	; (8007f50 <__multiply+0x150>)
 8007e3c:	f240 115d 	movw	r1, #349	; 0x15d
 8007e40:	f000 fbf4 	bl	800862c <__assert_func>
 8007e44:	f100 0514 	add.w	r5, r0, #20
 8007e48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e4c:	462b      	mov	r3, r5
 8007e4e:	2200      	movs	r2, #0
 8007e50:	4543      	cmp	r3, r8
 8007e52:	d321      	bcc.n	8007e98 <__multiply+0x98>
 8007e54:	f104 0314 	add.w	r3, r4, #20
 8007e58:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007e5c:	f109 0314 	add.w	r3, r9, #20
 8007e60:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007e64:	9202      	str	r2, [sp, #8]
 8007e66:	1b3a      	subs	r2, r7, r4
 8007e68:	3a15      	subs	r2, #21
 8007e6a:	f022 0203 	bic.w	r2, r2, #3
 8007e6e:	3204      	adds	r2, #4
 8007e70:	f104 0115 	add.w	r1, r4, #21
 8007e74:	428f      	cmp	r7, r1
 8007e76:	bf38      	it	cc
 8007e78:	2204      	movcc	r2, #4
 8007e7a:	9201      	str	r2, [sp, #4]
 8007e7c:	9a02      	ldr	r2, [sp, #8]
 8007e7e:	9303      	str	r3, [sp, #12]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d80c      	bhi.n	8007e9e <__multiply+0x9e>
 8007e84:	2e00      	cmp	r6, #0
 8007e86:	dd03      	ble.n	8007e90 <__multiply+0x90>
 8007e88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d05a      	beq.n	8007f46 <__multiply+0x146>
 8007e90:	6106      	str	r6, [r0, #16]
 8007e92:	b005      	add	sp, #20
 8007e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e98:	f843 2b04 	str.w	r2, [r3], #4
 8007e9c:	e7d8      	b.n	8007e50 <__multiply+0x50>
 8007e9e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007ea2:	f1ba 0f00 	cmp.w	sl, #0
 8007ea6:	d024      	beq.n	8007ef2 <__multiply+0xf2>
 8007ea8:	f104 0e14 	add.w	lr, r4, #20
 8007eac:	46a9      	mov	r9, r5
 8007eae:	f04f 0c00 	mov.w	ip, #0
 8007eb2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007eb6:	f8d9 1000 	ldr.w	r1, [r9]
 8007eba:	fa1f fb82 	uxth.w	fp, r2
 8007ebe:	b289      	uxth	r1, r1
 8007ec0:	fb0a 110b 	mla	r1, sl, fp, r1
 8007ec4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007ec8:	f8d9 2000 	ldr.w	r2, [r9]
 8007ecc:	4461      	add	r1, ip
 8007ece:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007ed2:	fb0a c20b 	mla	r2, sl, fp, ip
 8007ed6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007eda:	b289      	uxth	r1, r1
 8007edc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007ee0:	4577      	cmp	r7, lr
 8007ee2:	f849 1b04 	str.w	r1, [r9], #4
 8007ee6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007eea:	d8e2      	bhi.n	8007eb2 <__multiply+0xb2>
 8007eec:	9a01      	ldr	r2, [sp, #4]
 8007eee:	f845 c002 	str.w	ip, [r5, r2]
 8007ef2:	9a03      	ldr	r2, [sp, #12]
 8007ef4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007ef8:	3304      	adds	r3, #4
 8007efa:	f1b9 0f00 	cmp.w	r9, #0
 8007efe:	d020      	beq.n	8007f42 <__multiply+0x142>
 8007f00:	6829      	ldr	r1, [r5, #0]
 8007f02:	f104 0c14 	add.w	ip, r4, #20
 8007f06:	46ae      	mov	lr, r5
 8007f08:	f04f 0a00 	mov.w	sl, #0
 8007f0c:	f8bc b000 	ldrh.w	fp, [ip]
 8007f10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007f14:	fb09 220b 	mla	r2, r9, fp, r2
 8007f18:	4492      	add	sl, r2
 8007f1a:	b289      	uxth	r1, r1
 8007f1c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007f20:	f84e 1b04 	str.w	r1, [lr], #4
 8007f24:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007f28:	f8be 1000 	ldrh.w	r1, [lr]
 8007f2c:	0c12      	lsrs	r2, r2, #16
 8007f2e:	fb09 1102 	mla	r1, r9, r2, r1
 8007f32:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007f36:	4567      	cmp	r7, ip
 8007f38:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007f3c:	d8e6      	bhi.n	8007f0c <__multiply+0x10c>
 8007f3e:	9a01      	ldr	r2, [sp, #4]
 8007f40:	50a9      	str	r1, [r5, r2]
 8007f42:	3504      	adds	r5, #4
 8007f44:	e79a      	b.n	8007e7c <__multiply+0x7c>
 8007f46:	3e01      	subs	r6, #1
 8007f48:	e79c      	b.n	8007e84 <__multiply+0x84>
 8007f4a:	bf00      	nop
 8007f4c:	0800959b 	.word	0x0800959b
 8007f50:	080095ac 	.word	0x080095ac

08007f54 <__pow5mult>:
 8007f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f58:	4615      	mov	r5, r2
 8007f5a:	f012 0203 	ands.w	r2, r2, #3
 8007f5e:	4606      	mov	r6, r0
 8007f60:	460f      	mov	r7, r1
 8007f62:	d007      	beq.n	8007f74 <__pow5mult+0x20>
 8007f64:	4c25      	ldr	r4, [pc, #148]	; (8007ffc <__pow5mult+0xa8>)
 8007f66:	3a01      	subs	r2, #1
 8007f68:	2300      	movs	r3, #0
 8007f6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f6e:	f7ff fe9b 	bl	8007ca8 <__multadd>
 8007f72:	4607      	mov	r7, r0
 8007f74:	10ad      	asrs	r5, r5, #2
 8007f76:	d03d      	beq.n	8007ff4 <__pow5mult+0xa0>
 8007f78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007f7a:	b97c      	cbnz	r4, 8007f9c <__pow5mult+0x48>
 8007f7c:	2010      	movs	r0, #16
 8007f7e:	f7fe f9c1 	bl	8006304 <malloc>
 8007f82:	4602      	mov	r2, r0
 8007f84:	6270      	str	r0, [r6, #36]	; 0x24
 8007f86:	b928      	cbnz	r0, 8007f94 <__pow5mult+0x40>
 8007f88:	4b1d      	ldr	r3, [pc, #116]	; (8008000 <__pow5mult+0xac>)
 8007f8a:	481e      	ldr	r0, [pc, #120]	; (8008004 <__pow5mult+0xb0>)
 8007f8c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007f90:	f000 fb4c 	bl	800862c <__assert_func>
 8007f94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f98:	6004      	str	r4, [r0, #0]
 8007f9a:	60c4      	str	r4, [r0, #12]
 8007f9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007fa0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007fa4:	b94c      	cbnz	r4, 8007fba <__pow5mult+0x66>
 8007fa6:	f240 2171 	movw	r1, #625	; 0x271
 8007faa:	4630      	mov	r0, r6
 8007fac:	f7ff ff12 	bl	8007dd4 <__i2b>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007fb6:	4604      	mov	r4, r0
 8007fb8:	6003      	str	r3, [r0, #0]
 8007fba:	f04f 0900 	mov.w	r9, #0
 8007fbe:	07eb      	lsls	r3, r5, #31
 8007fc0:	d50a      	bpl.n	8007fd8 <__pow5mult+0x84>
 8007fc2:	4639      	mov	r1, r7
 8007fc4:	4622      	mov	r2, r4
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	f7ff ff1a 	bl	8007e00 <__multiply>
 8007fcc:	4639      	mov	r1, r7
 8007fce:	4680      	mov	r8, r0
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	f7ff fe47 	bl	8007c64 <_Bfree>
 8007fd6:	4647      	mov	r7, r8
 8007fd8:	106d      	asrs	r5, r5, #1
 8007fda:	d00b      	beq.n	8007ff4 <__pow5mult+0xa0>
 8007fdc:	6820      	ldr	r0, [r4, #0]
 8007fde:	b938      	cbnz	r0, 8007ff0 <__pow5mult+0x9c>
 8007fe0:	4622      	mov	r2, r4
 8007fe2:	4621      	mov	r1, r4
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	f7ff ff0b 	bl	8007e00 <__multiply>
 8007fea:	6020      	str	r0, [r4, #0]
 8007fec:	f8c0 9000 	str.w	r9, [r0]
 8007ff0:	4604      	mov	r4, r0
 8007ff2:	e7e4      	b.n	8007fbe <__pow5mult+0x6a>
 8007ff4:	4638      	mov	r0, r7
 8007ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ffa:	bf00      	nop
 8007ffc:	080096f8 	.word	0x080096f8
 8008000:	08009529 	.word	0x08009529
 8008004:	080095ac 	.word	0x080095ac

08008008 <__lshift>:
 8008008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800800c:	460c      	mov	r4, r1
 800800e:	6849      	ldr	r1, [r1, #4]
 8008010:	6923      	ldr	r3, [r4, #16]
 8008012:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008016:	68a3      	ldr	r3, [r4, #8]
 8008018:	4607      	mov	r7, r0
 800801a:	4691      	mov	r9, r2
 800801c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008020:	f108 0601 	add.w	r6, r8, #1
 8008024:	42b3      	cmp	r3, r6
 8008026:	db0b      	blt.n	8008040 <__lshift+0x38>
 8008028:	4638      	mov	r0, r7
 800802a:	f7ff fddb 	bl	8007be4 <_Balloc>
 800802e:	4605      	mov	r5, r0
 8008030:	b948      	cbnz	r0, 8008046 <__lshift+0x3e>
 8008032:	4602      	mov	r2, r0
 8008034:	4b2a      	ldr	r3, [pc, #168]	; (80080e0 <__lshift+0xd8>)
 8008036:	482b      	ldr	r0, [pc, #172]	; (80080e4 <__lshift+0xdc>)
 8008038:	f240 11d9 	movw	r1, #473	; 0x1d9
 800803c:	f000 faf6 	bl	800862c <__assert_func>
 8008040:	3101      	adds	r1, #1
 8008042:	005b      	lsls	r3, r3, #1
 8008044:	e7ee      	b.n	8008024 <__lshift+0x1c>
 8008046:	2300      	movs	r3, #0
 8008048:	f100 0114 	add.w	r1, r0, #20
 800804c:	f100 0210 	add.w	r2, r0, #16
 8008050:	4618      	mov	r0, r3
 8008052:	4553      	cmp	r3, sl
 8008054:	db37      	blt.n	80080c6 <__lshift+0xbe>
 8008056:	6920      	ldr	r0, [r4, #16]
 8008058:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800805c:	f104 0314 	add.w	r3, r4, #20
 8008060:	f019 091f 	ands.w	r9, r9, #31
 8008064:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008068:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800806c:	d02f      	beq.n	80080ce <__lshift+0xc6>
 800806e:	f1c9 0e20 	rsb	lr, r9, #32
 8008072:	468a      	mov	sl, r1
 8008074:	f04f 0c00 	mov.w	ip, #0
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	fa02 f209 	lsl.w	r2, r2, r9
 800807e:	ea42 020c 	orr.w	r2, r2, ip
 8008082:	f84a 2b04 	str.w	r2, [sl], #4
 8008086:	f853 2b04 	ldr.w	r2, [r3], #4
 800808a:	4298      	cmp	r0, r3
 800808c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008090:	d8f2      	bhi.n	8008078 <__lshift+0x70>
 8008092:	1b03      	subs	r3, r0, r4
 8008094:	3b15      	subs	r3, #21
 8008096:	f023 0303 	bic.w	r3, r3, #3
 800809a:	3304      	adds	r3, #4
 800809c:	f104 0215 	add.w	r2, r4, #21
 80080a0:	4290      	cmp	r0, r2
 80080a2:	bf38      	it	cc
 80080a4:	2304      	movcc	r3, #4
 80080a6:	f841 c003 	str.w	ip, [r1, r3]
 80080aa:	f1bc 0f00 	cmp.w	ip, #0
 80080ae:	d001      	beq.n	80080b4 <__lshift+0xac>
 80080b0:	f108 0602 	add.w	r6, r8, #2
 80080b4:	3e01      	subs	r6, #1
 80080b6:	4638      	mov	r0, r7
 80080b8:	612e      	str	r6, [r5, #16]
 80080ba:	4621      	mov	r1, r4
 80080bc:	f7ff fdd2 	bl	8007c64 <_Bfree>
 80080c0:	4628      	mov	r0, r5
 80080c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80080ca:	3301      	adds	r3, #1
 80080cc:	e7c1      	b.n	8008052 <__lshift+0x4a>
 80080ce:	3904      	subs	r1, #4
 80080d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80080d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80080d8:	4298      	cmp	r0, r3
 80080da:	d8f9      	bhi.n	80080d0 <__lshift+0xc8>
 80080dc:	e7ea      	b.n	80080b4 <__lshift+0xac>
 80080de:	bf00      	nop
 80080e0:	0800959b 	.word	0x0800959b
 80080e4:	080095ac 	.word	0x080095ac

080080e8 <__mcmp>:
 80080e8:	b530      	push	{r4, r5, lr}
 80080ea:	6902      	ldr	r2, [r0, #16]
 80080ec:	690c      	ldr	r4, [r1, #16]
 80080ee:	1b12      	subs	r2, r2, r4
 80080f0:	d10e      	bne.n	8008110 <__mcmp+0x28>
 80080f2:	f100 0314 	add.w	r3, r0, #20
 80080f6:	3114      	adds	r1, #20
 80080f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80080fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008100:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008104:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008108:	42a5      	cmp	r5, r4
 800810a:	d003      	beq.n	8008114 <__mcmp+0x2c>
 800810c:	d305      	bcc.n	800811a <__mcmp+0x32>
 800810e:	2201      	movs	r2, #1
 8008110:	4610      	mov	r0, r2
 8008112:	bd30      	pop	{r4, r5, pc}
 8008114:	4283      	cmp	r3, r0
 8008116:	d3f3      	bcc.n	8008100 <__mcmp+0x18>
 8008118:	e7fa      	b.n	8008110 <__mcmp+0x28>
 800811a:	f04f 32ff 	mov.w	r2, #4294967295
 800811e:	e7f7      	b.n	8008110 <__mcmp+0x28>

08008120 <__mdiff>:
 8008120:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008124:	460c      	mov	r4, r1
 8008126:	4606      	mov	r6, r0
 8008128:	4611      	mov	r1, r2
 800812a:	4620      	mov	r0, r4
 800812c:	4690      	mov	r8, r2
 800812e:	f7ff ffdb 	bl	80080e8 <__mcmp>
 8008132:	1e05      	subs	r5, r0, #0
 8008134:	d110      	bne.n	8008158 <__mdiff+0x38>
 8008136:	4629      	mov	r1, r5
 8008138:	4630      	mov	r0, r6
 800813a:	f7ff fd53 	bl	8007be4 <_Balloc>
 800813e:	b930      	cbnz	r0, 800814e <__mdiff+0x2e>
 8008140:	4b3a      	ldr	r3, [pc, #232]	; (800822c <__mdiff+0x10c>)
 8008142:	4602      	mov	r2, r0
 8008144:	f240 2132 	movw	r1, #562	; 0x232
 8008148:	4839      	ldr	r0, [pc, #228]	; (8008230 <__mdiff+0x110>)
 800814a:	f000 fa6f 	bl	800862c <__assert_func>
 800814e:	2301      	movs	r3, #1
 8008150:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008154:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008158:	bfa4      	itt	ge
 800815a:	4643      	movge	r3, r8
 800815c:	46a0      	movge	r8, r4
 800815e:	4630      	mov	r0, r6
 8008160:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008164:	bfa6      	itte	ge
 8008166:	461c      	movge	r4, r3
 8008168:	2500      	movge	r5, #0
 800816a:	2501      	movlt	r5, #1
 800816c:	f7ff fd3a 	bl	8007be4 <_Balloc>
 8008170:	b920      	cbnz	r0, 800817c <__mdiff+0x5c>
 8008172:	4b2e      	ldr	r3, [pc, #184]	; (800822c <__mdiff+0x10c>)
 8008174:	4602      	mov	r2, r0
 8008176:	f44f 7110 	mov.w	r1, #576	; 0x240
 800817a:	e7e5      	b.n	8008148 <__mdiff+0x28>
 800817c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008180:	6926      	ldr	r6, [r4, #16]
 8008182:	60c5      	str	r5, [r0, #12]
 8008184:	f104 0914 	add.w	r9, r4, #20
 8008188:	f108 0514 	add.w	r5, r8, #20
 800818c:	f100 0e14 	add.w	lr, r0, #20
 8008190:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008194:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008198:	f108 0210 	add.w	r2, r8, #16
 800819c:	46f2      	mov	sl, lr
 800819e:	2100      	movs	r1, #0
 80081a0:	f859 3b04 	ldr.w	r3, [r9], #4
 80081a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80081a8:	fa1f f883 	uxth.w	r8, r3
 80081ac:	fa11 f18b 	uxtah	r1, r1, fp
 80081b0:	0c1b      	lsrs	r3, r3, #16
 80081b2:	eba1 0808 	sub.w	r8, r1, r8
 80081b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80081ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80081be:	fa1f f888 	uxth.w	r8, r8
 80081c2:	1419      	asrs	r1, r3, #16
 80081c4:	454e      	cmp	r6, r9
 80081c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80081ca:	f84a 3b04 	str.w	r3, [sl], #4
 80081ce:	d8e7      	bhi.n	80081a0 <__mdiff+0x80>
 80081d0:	1b33      	subs	r3, r6, r4
 80081d2:	3b15      	subs	r3, #21
 80081d4:	f023 0303 	bic.w	r3, r3, #3
 80081d8:	3304      	adds	r3, #4
 80081da:	3415      	adds	r4, #21
 80081dc:	42a6      	cmp	r6, r4
 80081de:	bf38      	it	cc
 80081e0:	2304      	movcc	r3, #4
 80081e2:	441d      	add	r5, r3
 80081e4:	4473      	add	r3, lr
 80081e6:	469e      	mov	lr, r3
 80081e8:	462e      	mov	r6, r5
 80081ea:	4566      	cmp	r6, ip
 80081ec:	d30e      	bcc.n	800820c <__mdiff+0xec>
 80081ee:	f10c 0203 	add.w	r2, ip, #3
 80081f2:	1b52      	subs	r2, r2, r5
 80081f4:	f022 0203 	bic.w	r2, r2, #3
 80081f8:	3d03      	subs	r5, #3
 80081fa:	45ac      	cmp	ip, r5
 80081fc:	bf38      	it	cc
 80081fe:	2200      	movcc	r2, #0
 8008200:	441a      	add	r2, r3
 8008202:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008206:	b17b      	cbz	r3, 8008228 <__mdiff+0x108>
 8008208:	6107      	str	r7, [r0, #16]
 800820a:	e7a3      	b.n	8008154 <__mdiff+0x34>
 800820c:	f856 8b04 	ldr.w	r8, [r6], #4
 8008210:	fa11 f288 	uxtah	r2, r1, r8
 8008214:	1414      	asrs	r4, r2, #16
 8008216:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800821a:	b292      	uxth	r2, r2
 800821c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008220:	f84e 2b04 	str.w	r2, [lr], #4
 8008224:	1421      	asrs	r1, r4, #16
 8008226:	e7e0      	b.n	80081ea <__mdiff+0xca>
 8008228:	3f01      	subs	r7, #1
 800822a:	e7ea      	b.n	8008202 <__mdiff+0xe2>
 800822c:	0800959b 	.word	0x0800959b
 8008230:	080095ac 	.word	0x080095ac

08008234 <__d2b>:
 8008234:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008238:	4689      	mov	r9, r1
 800823a:	2101      	movs	r1, #1
 800823c:	ec57 6b10 	vmov	r6, r7, d0
 8008240:	4690      	mov	r8, r2
 8008242:	f7ff fccf 	bl	8007be4 <_Balloc>
 8008246:	4604      	mov	r4, r0
 8008248:	b930      	cbnz	r0, 8008258 <__d2b+0x24>
 800824a:	4602      	mov	r2, r0
 800824c:	4b25      	ldr	r3, [pc, #148]	; (80082e4 <__d2b+0xb0>)
 800824e:	4826      	ldr	r0, [pc, #152]	; (80082e8 <__d2b+0xb4>)
 8008250:	f240 310a 	movw	r1, #778	; 0x30a
 8008254:	f000 f9ea 	bl	800862c <__assert_func>
 8008258:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800825c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008260:	bb35      	cbnz	r5, 80082b0 <__d2b+0x7c>
 8008262:	2e00      	cmp	r6, #0
 8008264:	9301      	str	r3, [sp, #4]
 8008266:	d028      	beq.n	80082ba <__d2b+0x86>
 8008268:	4668      	mov	r0, sp
 800826a:	9600      	str	r6, [sp, #0]
 800826c:	f7ff fd82 	bl	8007d74 <__lo0bits>
 8008270:	9900      	ldr	r1, [sp, #0]
 8008272:	b300      	cbz	r0, 80082b6 <__d2b+0x82>
 8008274:	9a01      	ldr	r2, [sp, #4]
 8008276:	f1c0 0320 	rsb	r3, r0, #32
 800827a:	fa02 f303 	lsl.w	r3, r2, r3
 800827e:	430b      	orrs	r3, r1
 8008280:	40c2      	lsrs	r2, r0
 8008282:	6163      	str	r3, [r4, #20]
 8008284:	9201      	str	r2, [sp, #4]
 8008286:	9b01      	ldr	r3, [sp, #4]
 8008288:	61a3      	str	r3, [r4, #24]
 800828a:	2b00      	cmp	r3, #0
 800828c:	bf14      	ite	ne
 800828e:	2202      	movne	r2, #2
 8008290:	2201      	moveq	r2, #1
 8008292:	6122      	str	r2, [r4, #16]
 8008294:	b1d5      	cbz	r5, 80082cc <__d2b+0x98>
 8008296:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800829a:	4405      	add	r5, r0
 800829c:	f8c9 5000 	str.w	r5, [r9]
 80082a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80082a4:	f8c8 0000 	str.w	r0, [r8]
 80082a8:	4620      	mov	r0, r4
 80082aa:	b003      	add	sp, #12
 80082ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082b4:	e7d5      	b.n	8008262 <__d2b+0x2e>
 80082b6:	6161      	str	r1, [r4, #20]
 80082b8:	e7e5      	b.n	8008286 <__d2b+0x52>
 80082ba:	a801      	add	r0, sp, #4
 80082bc:	f7ff fd5a 	bl	8007d74 <__lo0bits>
 80082c0:	9b01      	ldr	r3, [sp, #4]
 80082c2:	6163      	str	r3, [r4, #20]
 80082c4:	2201      	movs	r2, #1
 80082c6:	6122      	str	r2, [r4, #16]
 80082c8:	3020      	adds	r0, #32
 80082ca:	e7e3      	b.n	8008294 <__d2b+0x60>
 80082cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80082d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80082d4:	f8c9 0000 	str.w	r0, [r9]
 80082d8:	6918      	ldr	r0, [r3, #16]
 80082da:	f7ff fd2b 	bl	8007d34 <__hi0bits>
 80082de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80082e2:	e7df      	b.n	80082a4 <__d2b+0x70>
 80082e4:	0800959b 	.word	0x0800959b
 80082e8:	080095ac 	.word	0x080095ac

080082ec <_calloc_r>:
 80082ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082ee:	fba1 2402 	umull	r2, r4, r1, r2
 80082f2:	b94c      	cbnz	r4, 8008308 <_calloc_r+0x1c>
 80082f4:	4611      	mov	r1, r2
 80082f6:	9201      	str	r2, [sp, #4]
 80082f8:	f7fe f896 	bl	8006428 <_malloc_r>
 80082fc:	9a01      	ldr	r2, [sp, #4]
 80082fe:	4605      	mov	r5, r0
 8008300:	b930      	cbnz	r0, 8008310 <_calloc_r+0x24>
 8008302:	4628      	mov	r0, r5
 8008304:	b003      	add	sp, #12
 8008306:	bd30      	pop	{r4, r5, pc}
 8008308:	220c      	movs	r2, #12
 800830a:	6002      	str	r2, [r0, #0]
 800830c:	2500      	movs	r5, #0
 800830e:	e7f8      	b.n	8008302 <_calloc_r+0x16>
 8008310:	4621      	mov	r1, r4
 8008312:	f7fe f815 	bl	8006340 <memset>
 8008316:	e7f4      	b.n	8008302 <_calloc_r+0x16>

08008318 <_realloc_r>:
 8008318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800831c:	4680      	mov	r8, r0
 800831e:	4614      	mov	r4, r2
 8008320:	460e      	mov	r6, r1
 8008322:	b921      	cbnz	r1, 800832e <_realloc_r+0x16>
 8008324:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008328:	4611      	mov	r1, r2
 800832a:	f7fe b87d 	b.w	8006428 <_malloc_r>
 800832e:	b92a      	cbnz	r2, 800833c <_realloc_r+0x24>
 8008330:	f7fe f80e 	bl	8006350 <_free_r>
 8008334:	4625      	mov	r5, r4
 8008336:	4628      	mov	r0, r5
 8008338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800833c:	f000 f9d5 	bl	80086ea <_malloc_usable_size_r>
 8008340:	4284      	cmp	r4, r0
 8008342:	4607      	mov	r7, r0
 8008344:	d802      	bhi.n	800834c <_realloc_r+0x34>
 8008346:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800834a:	d812      	bhi.n	8008372 <_realloc_r+0x5a>
 800834c:	4621      	mov	r1, r4
 800834e:	4640      	mov	r0, r8
 8008350:	f7fe f86a 	bl	8006428 <_malloc_r>
 8008354:	4605      	mov	r5, r0
 8008356:	2800      	cmp	r0, #0
 8008358:	d0ed      	beq.n	8008336 <_realloc_r+0x1e>
 800835a:	42bc      	cmp	r4, r7
 800835c:	4622      	mov	r2, r4
 800835e:	4631      	mov	r1, r6
 8008360:	bf28      	it	cs
 8008362:	463a      	movcs	r2, r7
 8008364:	f7fd ffde 	bl	8006324 <memcpy>
 8008368:	4631      	mov	r1, r6
 800836a:	4640      	mov	r0, r8
 800836c:	f7fd fff0 	bl	8006350 <_free_r>
 8008370:	e7e1      	b.n	8008336 <_realloc_r+0x1e>
 8008372:	4635      	mov	r5, r6
 8008374:	e7df      	b.n	8008336 <_realloc_r+0x1e>

08008376 <__ssputs_r>:
 8008376:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800837a:	688e      	ldr	r6, [r1, #8]
 800837c:	429e      	cmp	r6, r3
 800837e:	4682      	mov	sl, r0
 8008380:	460c      	mov	r4, r1
 8008382:	4690      	mov	r8, r2
 8008384:	461f      	mov	r7, r3
 8008386:	d838      	bhi.n	80083fa <__ssputs_r+0x84>
 8008388:	898a      	ldrh	r2, [r1, #12]
 800838a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800838e:	d032      	beq.n	80083f6 <__ssputs_r+0x80>
 8008390:	6825      	ldr	r5, [r4, #0]
 8008392:	6909      	ldr	r1, [r1, #16]
 8008394:	eba5 0901 	sub.w	r9, r5, r1
 8008398:	6965      	ldr	r5, [r4, #20]
 800839a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800839e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083a2:	3301      	adds	r3, #1
 80083a4:	444b      	add	r3, r9
 80083a6:	106d      	asrs	r5, r5, #1
 80083a8:	429d      	cmp	r5, r3
 80083aa:	bf38      	it	cc
 80083ac:	461d      	movcc	r5, r3
 80083ae:	0553      	lsls	r3, r2, #21
 80083b0:	d531      	bpl.n	8008416 <__ssputs_r+0xa0>
 80083b2:	4629      	mov	r1, r5
 80083b4:	f7fe f838 	bl	8006428 <_malloc_r>
 80083b8:	4606      	mov	r6, r0
 80083ba:	b950      	cbnz	r0, 80083d2 <__ssputs_r+0x5c>
 80083bc:	230c      	movs	r3, #12
 80083be:	f8ca 3000 	str.w	r3, [sl]
 80083c2:	89a3      	ldrh	r3, [r4, #12]
 80083c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083c8:	81a3      	strh	r3, [r4, #12]
 80083ca:	f04f 30ff 	mov.w	r0, #4294967295
 80083ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083d2:	6921      	ldr	r1, [r4, #16]
 80083d4:	464a      	mov	r2, r9
 80083d6:	f7fd ffa5 	bl	8006324 <memcpy>
 80083da:	89a3      	ldrh	r3, [r4, #12]
 80083dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80083e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083e4:	81a3      	strh	r3, [r4, #12]
 80083e6:	6126      	str	r6, [r4, #16]
 80083e8:	6165      	str	r5, [r4, #20]
 80083ea:	444e      	add	r6, r9
 80083ec:	eba5 0509 	sub.w	r5, r5, r9
 80083f0:	6026      	str	r6, [r4, #0]
 80083f2:	60a5      	str	r5, [r4, #8]
 80083f4:	463e      	mov	r6, r7
 80083f6:	42be      	cmp	r6, r7
 80083f8:	d900      	bls.n	80083fc <__ssputs_r+0x86>
 80083fa:	463e      	mov	r6, r7
 80083fc:	6820      	ldr	r0, [r4, #0]
 80083fe:	4632      	mov	r2, r6
 8008400:	4641      	mov	r1, r8
 8008402:	f000 f958 	bl	80086b6 <memmove>
 8008406:	68a3      	ldr	r3, [r4, #8]
 8008408:	1b9b      	subs	r3, r3, r6
 800840a:	60a3      	str	r3, [r4, #8]
 800840c:	6823      	ldr	r3, [r4, #0]
 800840e:	4433      	add	r3, r6
 8008410:	6023      	str	r3, [r4, #0]
 8008412:	2000      	movs	r0, #0
 8008414:	e7db      	b.n	80083ce <__ssputs_r+0x58>
 8008416:	462a      	mov	r2, r5
 8008418:	f7ff ff7e 	bl	8008318 <_realloc_r>
 800841c:	4606      	mov	r6, r0
 800841e:	2800      	cmp	r0, #0
 8008420:	d1e1      	bne.n	80083e6 <__ssputs_r+0x70>
 8008422:	6921      	ldr	r1, [r4, #16]
 8008424:	4650      	mov	r0, sl
 8008426:	f7fd ff93 	bl	8006350 <_free_r>
 800842a:	e7c7      	b.n	80083bc <__ssputs_r+0x46>

0800842c <_svfiprintf_r>:
 800842c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008430:	4698      	mov	r8, r3
 8008432:	898b      	ldrh	r3, [r1, #12]
 8008434:	061b      	lsls	r3, r3, #24
 8008436:	b09d      	sub	sp, #116	; 0x74
 8008438:	4607      	mov	r7, r0
 800843a:	460d      	mov	r5, r1
 800843c:	4614      	mov	r4, r2
 800843e:	d50e      	bpl.n	800845e <_svfiprintf_r+0x32>
 8008440:	690b      	ldr	r3, [r1, #16]
 8008442:	b963      	cbnz	r3, 800845e <_svfiprintf_r+0x32>
 8008444:	2140      	movs	r1, #64	; 0x40
 8008446:	f7fd ffef 	bl	8006428 <_malloc_r>
 800844a:	6028      	str	r0, [r5, #0]
 800844c:	6128      	str	r0, [r5, #16]
 800844e:	b920      	cbnz	r0, 800845a <_svfiprintf_r+0x2e>
 8008450:	230c      	movs	r3, #12
 8008452:	603b      	str	r3, [r7, #0]
 8008454:	f04f 30ff 	mov.w	r0, #4294967295
 8008458:	e0d1      	b.n	80085fe <_svfiprintf_r+0x1d2>
 800845a:	2340      	movs	r3, #64	; 0x40
 800845c:	616b      	str	r3, [r5, #20]
 800845e:	2300      	movs	r3, #0
 8008460:	9309      	str	r3, [sp, #36]	; 0x24
 8008462:	2320      	movs	r3, #32
 8008464:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008468:	f8cd 800c 	str.w	r8, [sp, #12]
 800846c:	2330      	movs	r3, #48	; 0x30
 800846e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008618 <_svfiprintf_r+0x1ec>
 8008472:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008476:	f04f 0901 	mov.w	r9, #1
 800847a:	4623      	mov	r3, r4
 800847c:	469a      	mov	sl, r3
 800847e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008482:	b10a      	cbz	r2, 8008488 <_svfiprintf_r+0x5c>
 8008484:	2a25      	cmp	r2, #37	; 0x25
 8008486:	d1f9      	bne.n	800847c <_svfiprintf_r+0x50>
 8008488:	ebba 0b04 	subs.w	fp, sl, r4
 800848c:	d00b      	beq.n	80084a6 <_svfiprintf_r+0x7a>
 800848e:	465b      	mov	r3, fp
 8008490:	4622      	mov	r2, r4
 8008492:	4629      	mov	r1, r5
 8008494:	4638      	mov	r0, r7
 8008496:	f7ff ff6e 	bl	8008376 <__ssputs_r>
 800849a:	3001      	adds	r0, #1
 800849c:	f000 80aa 	beq.w	80085f4 <_svfiprintf_r+0x1c8>
 80084a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084a2:	445a      	add	r2, fp
 80084a4:	9209      	str	r2, [sp, #36]	; 0x24
 80084a6:	f89a 3000 	ldrb.w	r3, [sl]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f000 80a2 	beq.w	80085f4 <_svfiprintf_r+0x1c8>
 80084b0:	2300      	movs	r3, #0
 80084b2:	f04f 32ff 	mov.w	r2, #4294967295
 80084b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084ba:	f10a 0a01 	add.w	sl, sl, #1
 80084be:	9304      	str	r3, [sp, #16]
 80084c0:	9307      	str	r3, [sp, #28]
 80084c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084c6:	931a      	str	r3, [sp, #104]	; 0x68
 80084c8:	4654      	mov	r4, sl
 80084ca:	2205      	movs	r2, #5
 80084cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084d0:	4851      	ldr	r0, [pc, #324]	; (8008618 <_svfiprintf_r+0x1ec>)
 80084d2:	f7f7 fe8d 	bl	80001f0 <memchr>
 80084d6:	9a04      	ldr	r2, [sp, #16]
 80084d8:	b9d8      	cbnz	r0, 8008512 <_svfiprintf_r+0xe6>
 80084da:	06d0      	lsls	r0, r2, #27
 80084dc:	bf44      	itt	mi
 80084de:	2320      	movmi	r3, #32
 80084e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084e4:	0711      	lsls	r1, r2, #28
 80084e6:	bf44      	itt	mi
 80084e8:	232b      	movmi	r3, #43	; 0x2b
 80084ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084ee:	f89a 3000 	ldrb.w	r3, [sl]
 80084f2:	2b2a      	cmp	r3, #42	; 0x2a
 80084f4:	d015      	beq.n	8008522 <_svfiprintf_r+0xf6>
 80084f6:	9a07      	ldr	r2, [sp, #28]
 80084f8:	4654      	mov	r4, sl
 80084fa:	2000      	movs	r0, #0
 80084fc:	f04f 0c0a 	mov.w	ip, #10
 8008500:	4621      	mov	r1, r4
 8008502:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008506:	3b30      	subs	r3, #48	; 0x30
 8008508:	2b09      	cmp	r3, #9
 800850a:	d94e      	bls.n	80085aa <_svfiprintf_r+0x17e>
 800850c:	b1b0      	cbz	r0, 800853c <_svfiprintf_r+0x110>
 800850e:	9207      	str	r2, [sp, #28]
 8008510:	e014      	b.n	800853c <_svfiprintf_r+0x110>
 8008512:	eba0 0308 	sub.w	r3, r0, r8
 8008516:	fa09 f303 	lsl.w	r3, r9, r3
 800851a:	4313      	orrs	r3, r2
 800851c:	9304      	str	r3, [sp, #16]
 800851e:	46a2      	mov	sl, r4
 8008520:	e7d2      	b.n	80084c8 <_svfiprintf_r+0x9c>
 8008522:	9b03      	ldr	r3, [sp, #12]
 8008524:	1d19      	adds	r1, r3, #4
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	9103      	str	r1, [sp, #12]
 800852a:	2b00      	cmp	r3, #0
 800852c:	bfbb      	ittet	lt
 800852e:	425b      	neglt	r3, r3
 8008530:	f042 0202 	orrlt.w	r2, r2, #2
 8008534:	9307      	strge	r3, [sp, #28]
 8008536:	9307      	strlt	r3, [sp, #28]
 8008538:	bfb8      	it	lt
 800853a:	9204      	strlt	r2, [sp, #16]
 800853c:	7823      	ldrb	r3, [r4, #0]
 800853e:	2b2e      	cmp	r3, #46	; 0x2e
 8008540:	d10c      	bne.n	800855c <_svfiprintf_r+0x130>
 8008542:	7863      	ldrb	r3, [r4, #1]
 8008544:	2b2a      	cmp	r3, #42	; 0x2a
 8008546:	d135      	bne.n	80085b4 <_svfiprintf_r+0x188>
 8008548:	9b03      	ldr	r3, [sp, #12]
 800854a:	1d1a      	adds	r2, r3, #4
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	9203      	str	r2, [sp, #12]
 8008550:	2b00      	cmp	r3, #0
 8008552:	bfb8      	it	lt
 8008554:	f04f 33ff 	movlt.w	r3, #4294967295
 8008558:	3402      	adds	r4, #2
 800855a:	9305      	str	r3, [sp, #20]
 800855c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008628 <_svfiprintf_r+0x1fc>
 8008560:	7821      	ldrb	r1, [r4, #0]
 8008562:	2203      	movs	r2, #3
 8008564:	4650      	mov	r0, sl
 8008566:	f7f7 fe43 	bl	80001f0 <memchr>
 800856a:	b140      	cbz	r0, 800857e <_svfiprintf_r+0x152>
 800856c:	2340      	movs	r3, #64	; 0x40
 800856e:	eba0 000a 	sub.w	r0, r0, sl
 8008572:	fa03 f000 	lsl.w	r0, r3, r0
 8008576:	9b04      	ldr	r3, [sp, #16]
 8008578:	4303      	orrs	r3, r0
 800857a:	3401      	adds	r4, #1
 800857c:	9304      	str	r3, [sp, #16]
 800857e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008582:	4826      	ldr	r0, [pc, #152]	; (800861c <_svfiprintf_r+0x1f0>)
 8008584:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008588:	2206      	movs	r2, #6
 800858a:	f7f7 fe31 	bl	80001f0 <memchr>
 800858e:	2800      	cmp	r0, #0
 8008590:	d038      	beq.n	8008604 <_svfiprintf_r+0x1d8>
 8008592:	4b23      	ldr	r3, [pc, #140]	; (8008620 <_svfiprintf_r+0x1f4>)
 8008594:	bb1b      	cbnz	r3, 80085de <_svfiprintf_r+0x1b2>
 8008596:	9b03      	ldr	r3, [sp, #12]
 8008598:	3307      	adds	r3, #7
 800859a:	f023 0307 	bic.w	r3, r3, #7
 800859e:	3308      	adds	r3, #8
 80085a0:	9303      	str	r3, [sp, #12]
 80085a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085a4:	4433      	add	r3, r6
 80085a6:	9309      	str	r3, [sp, #36]	; 0x24
 80085a8:	e767      	b.n	800847a <_svfiprintf_r+0x4e>
 80085aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80085ae:	460c      	mov	r4, r1
 80085b0:	2001      	movs	r0, #1
 80085b2:	e7a5      	b.n	8008500 <_svfiprintf_r+0xd4>
 80085b4:	2300      	movs	r3, #0
 80085b6:	3401      	adds	r4, #1
 80085b8:	9305      	str	r3, [sp, #20]
 80085ba:	4619      	mov	r1, r3
 80085bc:	f04f 0c0a 	mov.w	ip, #10
 80085c0:	4620      	mov	r0, r4
 80085c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085c6:	3a30      	subs	r2, #48	; 0x30
 80085c8:	2a09      	cmp	r2, #9
 80085ca:	d903      	bls.n	80085d4 <_svfiprintf_r+0x1a8>
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d0c5      	beq.n	800855c <_svfiprintf_r+0x130>
 80085d0:	9105      	str	r1, [sp, #20]
 80085d2:	e7c3      	b.n	800855c <_svfiprintf_r+0x130>
 80085d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80085d8:	4604      	mov	r4, r0
 80085da:	2301      	movs	r3, #1
 80085dc:	e7f0      	b.n	80085c0 <_svfiprintf_r+0x194>
 80085de:	ab03      	add	r3, sp, #12
 80085e0:	9300      	str	r3, [sp, #0]
 80085e2:	462a      	mov	r2, r5
 80085e4:	4b0f      	ldr	r3, [pc, #60]	; (8008624 <_svfiprintf_r+0x1f8>)
 80085e6:	a904      	add	r1, sp, #16
 80085e8:	4638      	mov	r0, r7
 80085ea:	f7fe f831 	bl	8006650 <_printf_float>
 80085ee:	1c42      	adds	r2, r0, #1
 80085f0:	4606      	mov	r6, r0
 80085f2:	d1d6      	bne.n	80085a2 <_svfiprintf_r+0x176>
 80085f4:	89ab      	ldrh	r3, [r5, #12]
 80085f6:	065b      	lsls	r3, r3, #25
 80085f8:	f53f af2c 	bmi.w	8008454 <_svfiprintf_r+0x28>
 80085fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085fe:	b01d      	add	sp, #116	; 0x74
 8008600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008604:	ab03      	add	r3, sp, #12
 8008606:	9300      	str	r3, [sp, #0]
 8008608:	462a      	mov	r2, r5
 800860a:	4b06      	ldr	r3, [pc, #24]	; (8008624 <_svfiprintf_r+0x1f8>)
 800860c:	a904      	add	r1, sp, #16
 800860e:	4638      	mov	r0, r7
 8008610:	f7fe fac2 	bl	8006b98 <_printf_i>
 8008614:	e7eb      	b.n	80085ee <_svfiprintf_r+0x1c2>
 8008616:	bf00      	nop
 8008618:	08009704 	.word	0x08009704
 800861c:	0800970e 	.word	0x0800970e
 8008620:	08006651 	.word	0x08006651
 8008624:	08008377 	.word	0x08008377
 8008628:	0800970a 	.word	0x0800970a

0800862c <__assert_func>:
 800862c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800862e:	4614      	mov	r4, r2
 8008630:	461a      	mov	r2, r3
 8008632:	4b09      	ldr	r3, [pc, #36]	; (8008658 <__assert_func+0x2c>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4605      	mov	r5, r0
 8008638:	68d8      	ldr	r0, [r3, #12]
 800863a:	b14c      	cbz	r4, 8008650 <__assert_func+0x24>
 800863c:	4b07      	ldr	r3, [pc, #28]	; (800865c <__assert_func+0x30>)
 800863e:	9100      	str	r1, [sp, #0]
 8008640:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008644:	4906      	ldr	r1, [pc, #24]	; (8008660 <__assert_func+0x34>)
 8008646:	462b      	mov	r3, r5
 8008648:	f000 f80e 	bl	8008668 <fiprintf>
 800864c:	f7fd fe28 	bl	80062a0 <abort>
 8008650:	4b04      	ldr	r3, [pc, #16]	; (8008664 <__assert_func+0x38>)
 8008652:	461c      	mov	r4, r3
 8008654:	e7f3      	b.n	800863e <__assert_func+0x12>
 8008656:	bf00      	nop
 8008658:	2000043c 	.word	0x2000043c
 800865c:	08009715 	.word	0x08009715
 8008660:	08009722 	.word	0x08009722
 8008664:	08009750 	.word	0x08009750

08008668 <fiprintf>:
 8008668:	b40e      	push	{r1, r2, r3}
 800866a:	b503      	push	{r0, r1, lr}
 800866c:	4601      	mov	r1, r0
 800866e:	ab03      	add	r3, sp, #12
 8008670:	4805      	ldr	r0, [pc, #20]	; (8008688 <fiprintf+0x20>)
 8008672:	f853 2b04 	ldr.w	r2, [r3], #4
 8008676:	6800      	ldr	r0, [r0, #0]
 8008678:	9301      	str	r3, [sp, #4]
 800867a:	f000 f867 	bl	800874c <_vfiprintf_r>
 800867e:	b002      	add	sp, #8
 8008680:	f85d eb04 	ldr.w	lr, [sp], #4
 8008684:	b003      	add	sp, #12
 8008686:	4770      	bx	lr
 8008688:	2000043c 	.word	0x2000043c

0800868c <__retarget_lock_init_recursive>:
 800868c:	4770      	bx	lr

0800868e <__retarget_lock_acquire_recursive>:
 800868e:	4770      	bx	lr

08008690 <__retarget_lock_release_recursive>:
 8008690:	4770      	bx	lr

08008692 <__ascii_mbtowc>:
 8008692:	b082      	sub	sp, #8
 8008694:	b901      	cbnz	r1, 8008698 <__ascii_mbtowc+0x6>
 8008696:	a901      	add	r1, sp, #4
 8008698:	b142      	cbz	r2, 80086ac <__ascii_mbtowc+0x1a>
 800869a:	b14b      	cbz	r3, 80086b0 <__ascii_mbtowc+0x1e>
 800869c:	7813      	ldrb	r3, [r2, #0]
 800869e:	600b      	str	r3, [r1, #0]
 80086a0:	7812      	ldrb	r2, [r2, #0]
 80086a2:	1e10      	subs	r0, r2, #0
 80086a4:	bf18      	it	ne
 80086a6:	2001      	movne	r0, #1
 80086a8:	b002      	add	sp, #8
 80086aa:	4770      	bx	lr
 80086ac:	4610      	mov	r0, r2
 80086ae:	e7fb      	b.n	80086a8 <__ascii_mbtowc+0x16>
 80086b0:	f06f 0001 	mvn.w	r0, #1
 80086b4:	e7f8      	b.n	80086a8 <__ascii_mbtowc+0x16>

080086b6 <memmove>:
 80086b6:	4288      	cmp	r0, r1
 80086b8:	b510      	push	{r4, lr}
 80086ba:	eb01 0402 	add.w	r4, r1, r2
 80086be:	d902      	bls.n	80086c6 <memmove+0x10>
 80086c0:	4284      	cmp	r4, r0
 80086c2:	4623      	mov	r3, r4
 80086c4:	d807      	bhi.n	80086d6 <memmove+0x20>
 80086c6:	1e43      	subs	r3, r0, #1
 80086c8:	42a1      	cmp	r1, r4
 80086ca:	d008      	beq.n	80086de <memmove+0x28>
 80086cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086d0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086d4:	e7f8      	b.n	80086c8 <memmove+0x12>
 80086d6:	4402      	add	r2, r0
 80086d8:	4601      	mov	r1, r0
 80086da:	428a      	cmp	r2, r1
 80086dc:	d100      	bne.n	80086e0 <memmove+0x2a>
 80086de:	bd10      	pop	{r4, pc}
 80086e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086e4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086e8:	e7f7      	b.n	80086da <memmove+0x24>

080086ea <_malloc_usable_size_r>:
 80086ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086ee:	1f18      	subs	r0, r3, #4
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	bfbc      	itt	lt
 80086f4:	580b      	ldrlt	r3, [r1, r0]
 80086f6:	18c0      	addlt	r0, r0, r3
 80086f8:	4770      	bx	lr

080086fa <__sfputc_r>:
 80086fa:	6893      	ldr	r3, [r2, #8]
 80086fc:	3b01      	subs	r3, #1
 80086fe:	2b00      	cmp	r3, #0
 8008700:	b410      	push	{r4}
 8008702:	6093      	str	r3, [r2, #8]
 8008704:	da08      	bge.n	8008718 <__sfputc_r+0x1e>
 8008706:	6994      	ldr	r4, [r2, #24]
 8008708:	42a3      	cmp	r3, r4
 800870a:	db01      	blt.n	8008710 <__sfputc_r+0x16>
 800870c:	290a      	cmp	r1, #10
 800870e:	d103      	bne.n	8008718 <__sfputc_r+0x1e>
 8008710:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008714:	f000 b94a 	b.w	80089ac <__swbuf_r>
 8008718:	6813      	ldr	r3, [r2, #0]
 800871a:	1c58      	adds	r0, r3, #1
 800871c:	6010      	str	r0, [r2, #0]
 800871e:	7019      	strb	r1, [r3, #0]
 8008720:	4608      	mov	r0, r1
 8008722:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008726:	4770      	bx	lr

08008728 <__sfputs_r>:
 8008728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872a:	4606      	mov	r6, r0
 800872c:	460f      	mov	r7, r1
 800872e:	4614      	mov	r4, r2
 8008730:	18d5      	adds	r5, r2, r3
 8008732:	42ac      	cmp	r4, r5
 8008734:	d101      	bne.n	800873a <__sfputs_r+0x12>
 8008736:	2000      	movs	r0, #0
 8008738:	e007      	b.n	800874a <__sfputs_r+0x22>
 800873a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800873e:	463a      	mov	r2, r7
 8008740:	4630      	mov	r0, r6
 8008742:	f7ff ffda 	bl	80086fa <__sfputc_r>
 8008746:	1c43      	adds	r3, r0, #1
 8008748:	d1f3      	bne.n	8008732 <__sfputs_r+0xa>
 800874a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800874c <_vfiprintf_r>:
 800874c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008750:	460d      	mov	r5, r1
 8008752:	b09d      	sub	sp, #116	; 0x74
 8008754:	4614      	mov	r4, r2
 8008756:	4698      	mov	r8, r3
 8008758:	4606      	mov	r6, r0
 800875a:	b118      	cbz	r0, 8008764 <_vfiprintf_r+0x18>
 800875c:	6983      	ldr	r3, [r0, #24]
 800875e:	b90b      	cbnz	r3, 8008764 <_vfiprintf_r+0x18>
 8008760:	f000 fb0c 	bl	8008d7c <__sinit>
 8008764:	4b89      	ldr	r3, [pc, #548]	; (800898c <_vfiprintf_r+0x240>)
 8008766:	429d      	cmp	r5, r3
 8008768:	d11b      	bne.n	80087a2 <_vfiprintf_r+0x56>
 800876a:	6875      	ldr	r5, [r6, #4]
 800876c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800876e:	07d9      	lsls	r1, r3, #31
 8008770:	d405      	bmi.n	800877e <_vfiprintf_r+0x32>
 8008772:	89ab      	ldrh	r3, [r5, #12]
 8008774:	059a      	lsls	r2, r3, #22
 8008776:	d402      	bmi.n	800877e <_vfiprintf_r+0x32>
 8008778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800877a:	f7ff ff88 	bl	800868e <__retarget_lock_acquire_recursive>
 800877e:	89ab      	ldrh	r3, [r5, #12]
 8008780:	071b      	lsls	r3, r3, #28
 8008782:	d501      	bpl.n	8008788 <_vfiprintf_r+0x3c>
 8008784:	692b      	ldr	r3, [r5, #16]
 8008786:	b9eb      	cbnz	r3, 80087c4 <_vfiprintf_r+0x78>
 8008788:	4629      	mov	r1, r5
 800878a:	4630      	mov	r0, r6
 800878c:	f000 f96e 	bl	8008a6c <__swsetup_r>
 8008790:	b1c0      	cbz	r0, 80087c4 <_vfiprintf_r+0x78>
 8008792:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008794:	07dc      	lsls	r4, r3, #31
 8008796:	d50e      	bpl.n	80087b6 <_vfiprintf_r+0x6a>
 8008798:	f04f 30ff 	mov.w	r0, #4294967295
 800879c:	b01d      	add	sp, #116	; 0x74
 800879e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087a2:	4b7b      	ldr	r3, [pc, #492]	; (8008990 <_vfiprintf_r+0x244>)
 80087a4:	429d      	cmp	r5, r3
 80087a6:	d101      	bne.n	80087ac <_vfiprintf_r+0x60>
 80087a8:	68b5      	ldr	r5, [r6, #8]
 80087aa:	e7df      	b.n	800876c <_vfiprintf_r+0x20>
 80087ac:	4b79      	ldr	r3, [pc, #484]	; (8008994 <_vfiprintf_r+0x248>)
 80087ae:	429d      	cmp	r5, r3
 80087b0:	bf08      	it	eq
 80087b2:	68f5      	ldreq	r5, [r6, #12]
 80087b4:	e7da      	b.n	800876c <_vfiprintf_r+0x20>
 80087b6:	89ab      	ldrh	r3, [r5, #12]
 80087b8:	0598      	lsls	r0, r3, #22
 80087ba:	d4ed      	bmi.n	8008798 <_vfiprintf_r+0x4c>
 80087bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087be:	f7ff ff67 	bl	8008690 <__retarget_lock_release_recursive>
 80087c2:	e7e9      	b.n	8008798 <_vfiprintf_r+0x4c>
 80087c4:	2300      	movs	r3, #0
 80087c6:	9309      	str	r3, [sp, #36]	; 0x24
 80087c8:	2320      	movs	r3, #32
 80087ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80087d2:	2330      	movs	r3, #48	; 0x30
 80087d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008998 <_vfiprintf_r+0x24c>
 80087d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087dc:	f04f 0901 	mov.w	r9, #1
 80087e0:	4623      	mov	r3, r4
 80087e2:	469a      	mov	sl, r3
 80087e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087e8:	b10a      	cbz	r2, 80087ee <_vfiprintf_r+0xa2>
 80087ea:	2a25      	cmp	r2, #37	; 0x25
 80087ec:	d1f9      	bne.n	80087e2 <_vfiprintf_r+0x96>
 80087ee:	ebba 0b04 	subs.w	fp, sl, r4
 80087f2:	d00b      	beq.n	800880c <_vfiprintf_r+0xc0>
 80087f4:	465b      	mov	r3, fp
 80087f6:	4622      	mov	r2, r4
 80087f8:	4629      	mov	r1, r5
 80087fa:	4630      	mov	r0, r6
 80087fc:	f7ff ff94 	bl	8008728 <__sfputs_r>
 8008800:	3001      	adds	r0, #1
 8008802:	f000 80aa 	beq.w	800895a <_vfiprintf_r+0x20e>
 8008806:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008808:	445a      	add	r2, fp
 800880a:	9209      	str	r2, [sp, #36]	; 0x24
 800880c:	f89a 3000 	ldrb.w	r3, [sl]
 8008810:	2b00      	cmp	r3, #0
 8008812:	f000 80a2 	beq.w	800895a <_vfiprintf_r+0x20e>
 8008816:	2300      	movs	r3, #0
 8008818:	f04f 32ff 	mov.w	r2, #4294967295
 800881c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008820:	f10a 0a01 	add.w	sl, sl, #1
 8008824:	9304      	str	r3, [sp, #16]
 8008826:	9307      	str	r3, [sp, #28]
 8008828:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800882c:	931a      	str	r3, [sp, #104]	; 0x68
 800882e:	4654      	mov	r4, sl
 8008830:	2205      	movs	r2, #5
 8008832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008836:	4858      	ldr	r0, [pc, #352]	; (8008998 <_vfiprintf_r+0x24c>)
 8008838:	f7f7 fcda 	bl	80001f0 <memchr>
 800883c:	9a04      	ldr	r2, [sp, #16]
 800883e:	b9d8      	cbnz	r0, 8008878 <_vfiprintf_r+0x12c>
 8008840:	06d1      	lsls	r1, r2, #27
 8008842:	bf44      	itt	mi
 8008844:	2320      	movmi	r3, #32
 8008846:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800884a:	0713      	lsls	r3, r2, #28
 800884c:	bf44      	itt	mi
 800884e:	232b      	movmi	r3, #43	; 0x2b
 8008850:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008854:	f89a 3000 	ldrb.w	r3, [sl]
 8008858:	2b2a      	cmp	r3, #42	; 0x2a
 800885a:	d015      	beq.n	8008888 <_vfiprintf_r+0x13c>
 800885c:	9a07      	ldr	r2, [sp, #28]
 800885e:	4654      	mov	r4, sl
 8008860:	2000      	movs	r0, #0
 8008862:	f04f 0c0a 	mov.w	ip, #10
 8008866:	4621      	mov	r1, r4
 8008868:	f811 3b01 	ldrb.w	r3, [r1], #1
 800886c:	3b30      	subs	r3, #48	; 0x30
 800886e:	2b09      	cmp	r3, #9
 8008870:	d94e      	bls.n	8008910 <_vfiprintf_r+0x1c4>
 8008872:	b1b0      	cbz	r0, 80088a2 <_vfiprintf_r+0x156>
 8008874:	9207      	str	r2, [sp, #28]
 8008876:	e014      	b.n	80088a2 <_vfiprintf_r+0x156>
 8008878:	eba0 0308 	sub.w	r3, r0, r8
 800887c:	fa09 f303 	lsl.w	r3, r9, r3
 8008880:	4313      	orrs	r3, r2
 8008882:	9304      	str	r3, [sp, #16]
 8008884:	46a2      	mov	sl, r4
 8008886:	e7d2      	b.n	800882e <_vfiprintf_r+0xe2>
 8008888:	9b03      	ldr	r3, [sp, #12]
 800888a:	1d19      	adds	r1, r3, #4
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	9103      	str	r1, [sp, #12]
 8008890:	2b00      	cmp	r3, #0
 8008892:	bfbb      	ittet	lt
 8008894:	425b      	neglt	r3, r3
 8008896:	f042 0202 	orrlt.w	r2, r2, #2
 800889a:	9307      	strge	r3, [sp, #28]
 800889c:	9307      	strlt	r3, [sp, #28]
 800889e:	bfb8      	it	lt
 80088a0:	9204      	strlt	r2, [sp, #16]
 80088a2:	7823      	ldrb	r3, [r4, #0]
 80088a4:	2b2e      	cmp	r3, #46	; 0x2e
 80088a6:	d10c      	bne.n	80088c2 <_vfiprintf_r+0x176>
 80088a8:	7863      	ldrb	r3, [r4, #1]
 80088aa:	2b2a      	cmp	r3, #42	; 0x2a
 80088ac:	d135      	bne.n	800891a <_vfiprintf_r+0x1ce>
 80088ae:	9b03      	ldr	r3, [sp, #12]
 80088b0:	1d1a      	adds	r2, r3, #4
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	9203      	str	r2, [sp, #12]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	bfb8      	it	lt
 80088ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80088be:	3402      	adds	r4, #2
 80088c0:	9305      	str	r3, [sp, #20]
 80088c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80089a8 <_vfiprintf_r+0x25c>
 80088c6:	7821      	ldrb	r1, [r4, #0]
 80088c8:	2203      	movs	r2, #3
 80088ca:	4650      	mov	r0, sl
 80088cc:	f7f7 fc90 	bl	80001f0 <memchr>
 80088d0:	b140      	cbz	r0, 80088e4 <_vfiprintf_r+0x198>
 80088d2:	2340      	movs	r3, #64	; 0x40
 80088d4:	eba0 000a 	sub.w	r0, r0, sl
 80088d8:	fa03 f000 	lsl.w	r0, r3, r0
 80088dc:	9b04      	ldr	r3, [sp, #16]
 80088de:	4303      	orrs	r3, r0
 80088e0:	3401      	adds	r4, #1
 80088e2:	9304      	str	r3, [sp, #16]
 80088e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088e8:	482c      	ldr	r0, [pc, #176]	; (800899c <_vfiprintf_r+0x250>)
 80088ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088ee:	2206      	movs	r2, #6
 80088f0:	f7f7 fc7e 	bl	80001f0 <memchr>
 80088f4:	2800      	cmp	r0, #0
 80088f6:	d03f      	beq.n	8008978 <_vfiprintf_r+0x22c>
 80088f8:	4b29      	ldr	r3, [pc, #164]	; (80089a0 <_vfiprintf_r+0x254>)
 80088fa:	bb1b      	cbnz	r3, 8008944 <_vfiprintf_r+0x1f8>
 80088fc:	9b03      	ldr	r3, [sp, #12]
 80088fe:	3307      	adds	r3, #7
 8008900:	f023 0307 	bic.w	r3, r3, #7
 8008904:	3308      	adds	r3, #8
 8008906:	9303      	str	r3, [sp, #12]
 8008908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800890a:	443b      	add	r3, r7
 800890c:	9309      	str	r3, [sp, #36]	; 0x24
 800890e:	e767      	b.n	80087e0 <_vfiprintf_r+0x94>
 8008910:	fb0c 3202 	mla	r2, ip, r2, r3
 8008914:	460c      	mov	r4, r1
 8008916:	2001      	movs	r0, #1
 8008918:	e7a5      	b.n	8008866 <_vfiprintf_r+0x11a>
 800891a:	2300      	movs	r3, #0
 800891c:	3401      	adds	r4, #1
 800891e:	9305      	str	r3, [sp, #20]
 8008920:	4619      	mov	r1, r3
 8008922:	f04f 0c0a 	mov.w	ip, #10
 8008926:	4620      	mov	r0, r4
 8008928:	f810 2b01 	ldrb.w	r2, [r0], #1
 800892c:	3a30      	subs	r2, #48	; 0x30
 800892e:	2a09      	cmp	r2, #9
 8008930:	d903      	bls.n	800893a <_vfiprintf_r+0x1ee>
 8008932:	2b00      	cmp	r3, #0
 8008934:	d0c5      	beq.n	80088c2 <_vfiprintf_r+0x176>
 8008936:	9105      	str	r1, [sp, #20]
 8008938:	e7c3      	b.n	80088c2 <_vfiprintf_r+0x176>
 800893a:	fb0c 2101 	mla	r1, ip, r1, r2
 800893e:	4604      	mov	r4, r0
 8008940:	2301      	movs	r3, #1
 8008942:	e7f0      	b.n	8008926 <_vfiprintf_r+0x1da>
 8008944:	ab03      	add	r3, sp, #12
 8008946:	9300      	str	r3, [sp, #0]
 8008948:	462a      	mov	r2, r5
 800894a:	4b16      	ldr	r3, [pc, #88]	; (80089a4 <_vfiprintf_r+0x258>)
 800894c:	a904      	add	r1, sp, #16
 800894e:	4630      	mov	r0, r6
 8008950:	f7fd fe7e 	bl	8006650 <_printf_float>
 8008954:	4607      	mov	r7, r0
 8008956:	1c78      	adds	r0, r7, #1
 8008958:	d1d6      	bne.n	8008908 <_vfiprintf_r+0x1bc>
 800895a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800895c:	07d9      	lsls	r1, r3, #31
 800895e:	d405      	bmi.n	800896c <_vfiprintf_r+0x220>
 8008960:	89ab      	ldrh	r3, [r5, #12]
 8008962:	059a      	lsls	r2, r3, #22
 8008964:	d402      	bmi.n	800896c <_vfiprintf_r+0x220>
 8008966:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008968:	f7ff fe92 	bl	8008690 <__retarget_lock_release_recursive>
 800896c:	89ab      	ldrh	r3, [r5, #12]
 800896e:	065b      	lsls	r3, r3, #25
 8008970:	f53f af12 	bmi.w	8008798 <_vfiprintf_r+0x4c>
 8008974:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008976:	e711      	b.n	800879c <_vfiprintf_r+0x50>
 8008978:	ab03      	add	r3, sp, #12
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	462a      	mov	r2, r5
 800897e:	4b09      	ldr	r3, [pc, #36]	; (80089a4 <_vfiprintf_r+0x258>)
 8008980:	a904      	add	r1, sp, #16
 8008982:	4630      	mov	r0, r6
 8008984:	f7fe f908 	bl	8006b98 <_printf_i>
 8008988:	e7e4      	b.n	8008954 <_vfiprintf_r+0x208>
 800898a:	bf00      	nop
 800898c:	0800987c 	.word	0x0800987c
 8008990:	0800989c 	.word	0x0800989c
 8008994:	0800985c 	.word	0x0800985c
 8008998:	08009704 	.word	0x08009704
 800899c:	0800970e 	.word	0x0800970e
 80089a0:	08006651 	.word	0x08006651
 80089a4:	08008729 	.word	0x08008729
 80089a8:	0800970a 	.word	0x0800970a

080089ac <__swbuf_r>:
 80089ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ae:	460e      	mov	r6, r1
 80089b0:	4614      	mov	r4, r2
 80089b2:	4605      	mov	r5, r0
 80089b4:	b118      	cbz	r0, 80089be <__swbuf_r+0x12>
 80089b6:	6983      	ldr	r3, [r0, #24]
 80089b8:	b90b      	cbnz	r3, 80089be <__swbuf_r+0x12>
 80089ba:	f000 f9df 	bl	8008d7c <__sinit>
 80089be:	4b21      	ldr	r3, [pc, #132]	; (8008a44 <__swbuf_r+0x98>)
 80089c0:	429c      	cmp	r4, r3
 80089c2:	d12b      	bne.n	8008a1c <__swbuf_r+0x70>
 80089c4:	686c      	ldr	r4, [r5, #4]
 80089c6:	69a3      	ldr	r3, [r4, #24]
 80089c8:	60a3      	str	r3, [r4, #8]
 80089ca:	89a3      	ldrh	r3, [r4, #12]
 80089cc:	071a      	lsls	r2, r3, #28
 80089ce:	d52f      	bpl.n	8008a30 <__swbuf_r+0x84>
 80089d0:	6923      	ldr	r3, [r4, #16]
 80089d2:	b36b      	cbz	r3, 8008a30 <__swbuf_r+0x84>
 80089d4:	6923      	ldr	r3, [r4, #16]
 80089d6:	6820      	ldr	r0, [r4, #0]
 80089d8:	1ac0      	subs	r0, r0, r3
 80089da:	6963      	ldr	r3, [r4, #20]
 80089dc:	b2f6      	uxtb	r6, r6
 80089de:	4283      	cmp	r3, r0
 80089e0:	4637      	mov	r7, r6
 80089e2:	dc04      	bgt.n	80089ee <__swbuf_r+0x42>
 80089e4:	4621      	mov	r1, r4
 80089e6:	4628      	mov	r0, r5
 80089e8:	f000 f934 	bl	8008c54 <_fflush_r>
 80089ec:	bb30      	cbnz	r0, 8008a3c <__swbuf_r+0x90>
 80089ee:	68a3      	ldr	r3, [r4, #8]
 80089f0:	3b01      	subs	r3, #1
 80089f2:	60a3      	str	r3, [r4, #8]
 80089f4:	6823      	ldr	r3, [r4, #0]
 80089f6:	1c5a      	adds	r2, r3, #1
 80089f8:	6022      	str	r2, [r4, #0]
 80089fa:	701e      	strb	r6, [r3, #0]
 80089fc:	6963      	ldr	r3, [r4, #20]
 80089fe:	3001      	adds	r0, #1
 8008a00:	4283      	cmp	r3, r0
 8008a02:	d004      	beq.n	8008a0e <__swbuf_r+0x62>
 8008a04:	89a3      	ldrh	r3, [r4, #12]
 8008a06:	07db      	lsls	r3, r3, #31
 8008a08:	d506      	bpl.n	8008a18 <__swbuf_r+0x6c>
 8008a0a:	2e0a      	cmp	r6, #10
 8008a0c:	d104      	bne.n	8008a18 <__swbuf_r+0x6c>
 8008a0e:	4621      	mov	r1, r4
 8008a10:	4628      	mov	r0, r5
 8008a12:	f000 f91f 	bl	8008c54 <_fflush_r>
 8008a16:	b988      	cbnz	r0, 8008a3c <__swbuf_r+0x90>
 8008a18:	4638      	mov	r0, r7
 8008a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a1c:	4b0a      	ldr	r3, [pc, #40]	; (8008a48 <__swbuf_r+0x9c>)
 8008a1e:	429c      	cmp	r4, r3
 8008a20:	d101      	bne.n	8008a26 <__swbuf_r+0x7a>
 8008a22:	68ac      	ldr	r4, [r5, #8]
 8008a24:	e7cf      	b.n	80089c6 <__swbuf_r+0x1a>
 8008a26:	4b09      	ldr	r3, [pc, #36]	; (8008a4c <__swbuf_r+0xa0>)
 8008a28:	429c      	cmp	r4, r3
 8008a2a:	bf08      	it	eq
 8008a2c:	68ec      	ldreq	r4, [r5, #12]
 8008a2e:	e7ca      	b.n	80089c6 <__swbuf_r+0x1a>
 8008a30:	4621      	mov	r1, r4
 8008a32:	4628      	mov	r0, r5
 8008a34:	f000 f81a 	bl	8008a6c <__swsetup_r>
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	d0cb      	beq.n	80089d4 <__swbuf_r+0x28>
 8008a3c:	f04f 37ff 	mov.w	r7, #4294967295
 8008a40:	e7ea      	b.n	8008a18 <__swbuf_r+0x6c>
 8008a42:	bf00      	nop
 8008a44:	0800987c 	.word	0x0800987c
 8008a48:	0800989c 	.word	0x0800989c
 8008a4c:	0800985c 	.word	0x0800985c

08008a50 <__ascii_wctomb>:
 8008a50:	b149      	cbz	r1, 8008a66 <__ascii_wctomb+0x16>
 8008a52:	2aff      	cmp	r2, #255	; 0xff
 8008a54:	bf85      	ittet	hi
 8008a56:	238a      	movhi	r3, #138	; 0x8a
 8008a58:	6003      	strhi	r3, [r0, #0]
 8008a5a:	700a      	strbls	r2, [r1, #0]
 8008a5c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008a60:	bf98      	it	ls
 8008a62:	2001      	movls	r0, #1
 8008a64:	4770      	bx	lr
 8008a66:	4608      	mov	r0, r1
 8008a68:	4770      	bx	lr
	...

08008a6c <__swsetup_r>:
 8008a6c:	4b32      	ldr	r3, [pc, #200]	; (8008b38 <__swsetup_r+0xcc>)
 8008a6e:	b570      	push	{r4, r5, r6, lr}
 8008a70:	681d      	ldr	r5, [r3, #0]
 8008a72:	4606      	mov	r6, r0
 8008a74:	460c      	mov	r4, r1
 8008a76:	b125      	cbz	r5, 8008a82 <__swsetup_r+0x16>
 8008a78:	69ab      	ldr	r3, [r5, #24]
 8008a7a:	b913      	cbnz	r3, 8008a82 <__swsetup_r+0x16>
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	f000 f97d 	bl	8008d7c <__sinit>
 8008a82:	4b2e      	ldr	r3, [pc, #184]	; (8008b3c <__swsetup_r+0xd0>)
 8008a84:	429c      	cmp	r4, r3
 8008a86:	d10f      	bne.n	8008aa8 <__swsetup_r+0x3c>
 8008a88:	686c      	ldr	r4, [r5, #4]
 8008a8a:	89a3      	ldrh	r3, [r4, #12]
 8008a8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a90:	0719      	lsls	r1, r3, #28
 8008a92:	d42c      	bmi.n	8008aee <__swsetup_r+0x82>
 8008a94:	06dd      	lsls	r5, r3, #27
 8008a96:	d411      	bmi.n	8008abc <__swsetup_r+0x50>
 8008a98:	2309      	movs	r3, #9
 8008a9a:	6033      	str	r3, [r6, #0]
 8008a9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008aa0:	81a3      	strh	r3, [r4, #12]
 8008aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa6:	e03e      	b.n	8008b26 <__swsetup_r+0xba>
 8008aa8:	4b25      	ldr	r3, [pc, #148]	; (8008b40 <__swsetup_r+0xd4>)
 8008aaa:	429c      	cmp	r4, r3
 8008aac:	d101      	bne.n	8008ab2 <__swsetup_r+0x46>
 8008aae:	68ac      	ldr	r4, [r5, #8]
 8008ab0:	e7eb      	b.n	8008a8a <__swsetup_r+0x1e>
 8008ab2:	4b24      	ldr	r3, [pc, #144]	; (8008b44 <__swsetup_r+0xd8>)
 8008ab4:	429c      	cmp	r4, r3
 8008ab6:	bf08      	it	eq
 8008ab8:	68ec      	ldreq	r4, [r5, #12]
 8008aba:	e7e6      	b.n	8008a8a <__swsetup_r+0x1e>
 8008abc:	0758      	lsls	r0, r3, #29
 8008abe:	d512      	bpl.n	8008ae6 <__swsetup_r+0x7a>
 8008ac0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ac2:	b141      	cbz	r1, 8008ad6 <__swsetup_r+0x6a>
 8008ac4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ac8:	4299      	cmp	r1, r3
 8008aca:	d002      	beq.n	8008ad2 <__swsetup_r+0x66>
 8008acc:	4630      	mov	r0, r6
 8008ace:	f7fd fc3f 	bl	8006350 <_free_r>
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	6363      	str	r3, [r4, #52]	; 0x34
 8008ad6:	89a3      	ldrh	r3, [r4, #12]
 8008ad8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008adc:	81a3      	strh	r3, [r4, #12]
 8008ade:	2300      	movs	r3, #0
 8008ae0:	6063      	str	r3, [r4, #4]
 8008ae2:	6923      	ldr	r3, [r4, #16]
 8008ae4:	6023      	str	r3, [r4, #0]
 8008ae6:	89a3      	ldrh	r3, [r4, #12]
 8008ae8:	f043 0308 	orr.w	r3, r3, #8
 8008aec:	81a3      	strh	r3, [r4, #12]
 8008aee:	6923      	ldr	r3, [r4, #16]
 8008af0:	b94b      	cbnz	r3, 8008b06 <__swsetup_r+0x9a>
 8008af2:	89a3      	ldrh	r3, [r4, #12]
 8008af4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008afc:	d003      	beq.n	8008b06 <__swsetup_r+0x9a>
 8008afe:	4621      	mov	r1, r4
 8008b00:	4630      	mov	r0, r6
 8008b02:	f000 f9fd 	bl	8008f00 <__smakebuf_r>
 8008b06:	89a0      	ldrh	r0, [r4, #12]
 8008b08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b0c:	f010 0301 	ands.w	r3, r0, #1
 8008b10:	d00a      	beq.n	8008b28 <__swsetup_r+0xbc>
 8008b12:	2300      	movs	r3, #0
 8008b14:	60a3      	str	r3, [r4, #8]
 8008b16:	6963      	ldr	r3, [r4, #20]
 8008b18:	425b      	negs	r3, r3
 8008b1a:	61a3      	str	r3, [r4, #24]
 8008b1c:	6923      	ldr	r3, [r4, #16]
 8008b1e:	b943      	cbnz	r3, 8008b32 <__swsetup_r+0xc6>
 8008b20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b24:	d1ba      	bne.n	8008a9c <__swsetup_r+0x30>
 8008b26:	bd70      	pop	{r4, r5, r6, pc}
 8008b28:	0781      	lsls	r1, r0, #30
 8008b2a:	bf58      	it	pl
 8008b2c:	6963      	ldrpl	r3, [r4, #20]
 8008b2e:	60a3      	str	r3, [r4, #8]
 8008b30:	e7f4      	b.n	8008b1c <__swsetup_r+0xb0>
 8008b32:	2000      	movs	r0, #0
 8008b34:	e7f7      	b.n	8008b26 <__swsetup_r+0xba>
 8008b36:	bf00      	nop
 8008b38:	2000043c 	.word	0x2000043c
 8008b3c:	0800987c 	.word	0x0800987c
 8008b40:	0800989c 	.word	0x0800989c
 8008b44:	0800985c 	.word	0x0800985c

08008b48 <__sflush_r>:
 8008b48:	898a      	ldrh	r2, [r1, #12]
 8008b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b4e:	4605      	mov	r5, r0
 8008b50:	0710      	lsls	r0, r2, #28
 8008b52:	460c      	mov	r4, r1
 8008b54:	d458      	bmi.n	8008c08 <__sflush_r+0xc0>
 8008b56:	684b      	ldr	r3, [r1, #4]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	dc05      	bgt.n	8008b68 <__sflush_r+0x20>
 8008b5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	dc02      	bgt.n	8008b68 <__sflush_r+0x20>
 8008b62:	2000      	movs	r0, #0
 8008b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b6a:	2e00      	cmp	r6, #0
 8008b6c:	d0f9      	beq.n	8008b62 <__sflush_r+0x1a>
 8008b6e:	2300      	movs	r3, #0
 8008b70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b74:	682f      	ldr	r7, [r5, #0]
 8008b76:	602b      	str	r3, [r5, #0]
 8008b78:	d032      	beq.n	8008be0 <__sflush_r+0x98>
 8008b7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b7c:	89a3      	ldrh	r3, [r4, #12]
 8008b7e:	075a      	lsls	r2, r3, #29
 8008b80:	d505      	bpl.n	8008b8e <__sflush_r+0x46>
 8008b82:	6863      	ldr	r3, [r4, #4]
 8008b84:	1ac0      	subs	r0, r0, r3
 8008b86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b88:	b10b      	cbz	r3, 8008b8e <__sflush_r+0x46>
 8008b8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b8c:	1ac0      	subs	r0, r0, r3
 8008b8e:	2300      	movs	r3, #0
 8008b90:	4602      	mov	r2, r0
 8008b92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b94:	6a21      	ldr	r1, [r4, #32]
 8008b96:	4628      	mov	r0, r5
 8008b98:	47b0      	blx	r6
 8008b9a:	1c43      	adds	r3, r0, #1
 8008b9c:	89a3      	ldrh	r3, [r4, #12]
 8008b9e:	d106      	bne.n	8008bae <__sflush_r+0x66>
 8008ba0:	6829      	ldr	r1, [r5, #0]
 8008ba2:	291d      	cmp	r1, #29
 8008ba4:	d82c      	bhi.n	8008c00 <__sflush_r+0xb8>
 8008ba6:	4a2a      	ldr	r2, [pc, #168]	; (8008c50 <__sflush_r+0x108>)
 8008ba8:	40ca      	lsrs	r2, r1
 8008baa:	07d6      	lsls	r6, r2, #31
 8008bac:	d528      	bpl.n	8008c00 <__sflush_r+0xb8>
 8008bae:	2200      	movs	r2, #0
 8008bb0:	6062      	str	r2, [r4, #4]
 8008bb2:	04d9      	lsls	r1, r3, #19
 8008bb4:	6922      	ldr	r2, [r4, #16]
 8008bb6:	6022      	str	r2, [r4, #0]
 8008bb8:	d504      	bpl.n	8008bc4 <__sflush_r+0x7c>
 8008bba:	1c42      	adds	r2, r0, #1
 8008bbc:	d101      	bne.n	8008bc2 <__sflush_r+0x7a>
 8008bbe:	682b      	ldr	r3, [r5, #0]
 8008bc0:	b903      	cbnz	r3, 8008bc4 <__sflush_r+0x7c>
 8008bc2:	6560      	str	r0, [r4, #84]	; 0x54
 8008bc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bc6:	602f      	str	r7, [r5, #0]
 8008bc8:	2900      	cmp	r1, #0
 8008bca:	d0ca      	beq.n	8008b62 <__sflush_r+0x1a>
 8008bcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bd0:	4299      	cmp	r1, r3
 8008bd2:	d002      	beq.n	8008bda <__sflush_r+0x92>
 8008bd4:	4628      	mov	r0, r5
 8008bd6:	f7fd fbbb 	bl	8006350 <_free_r>
 8008bda:	2000      	movs	r0, #0
 8008bdc:	6360      	str	r0, [r4, #52]	; 0x34
 8008bde:	e7c1      	b.n	8008b64 <__sflush_r+0x1c>
 8008be0:	6a21      	ldr	r1, [r4, #32]
 8008be2:	2301      	movs	r3, #1
 8008be4:	4628      	mov	r0, r5
 8008be6:	47b0      	blx	r6
 8008be8:	1c41      	adds	r1, r0, #1
 8008bea:	d1c7      	bne.n	8008b7c <__sflush_r+0x34>
 8008bec:	682b      	ldr	r3, [r5, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d0c4      	beq.n	8008b7c <__sflush_r+0x34>
 8008bf2:	2b1d      	cmp	r3, #29
 8008bf4:	d001      	beq.n	8008bfa <__sflush_r+0xb2>
 8008bf6:	2b16      	cmp	r3, #22
 8008bf8:	d101      	bne.n	8008bfe <__sflush_r+0xb6>
 8008bfa:	602f      	str	r7, [r5, #0]
 8008bfc:	e7b1      	b.n	8008b62 <__sflush_r+0x1a>
 8008bfe:	89a3      	ldrh	r3, [r4, #12]
 8008c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c04:	81a3      	strh	r3, [r4, #12]
 8008c06:	e7ad      	b.n	8008b64 <__sflush_r+0x1c>
 8008c08:	690f      	ldr	r7, [r1, #16]
 8008c0a:	2f00      	cmp	r7, #0
 8008c0c:	d0a9      	beq.n	8008b62 <__sflush_r+0x1a>
 8008c0e:	0793      	lsls	r3, r2, #30
 8008c10:	680e      	ldr	r6, [r1, #0]
 8008c12:	bf08      	it	eq
 8008c14:	694b      	ldreq	r3, [r1, #20]
 8008c16:	600f      	str	r7, [r1, #0]
 8008c18:	bf18      	it	ne
 8008c1a:	2300      	movne	r3, #0
 8008c1c:	eba6 0807 	sub.w	r8, r6, r7
 8008c20:	608b      	str	r3, [r1, #8]
 8008c22:	f1b8 0f00 	cmp.w	r8, #0
 8008c26:	dd9c      	ble.n	8008b62 <__sflush_r+0x1a>
 8008c28:	6a21      	ldr	r1, [r4, #32]
 8008c2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c2c:	4643      	mov	r3, r8
 8008c2e:	463a      	mov	r2, r7
 8008c30:	4628      	mov	r0, r5
 8008c32:	47b0      	blx	r6
 8008c34:	2800      	cmp	r0, #0
 8008c36:	dc06      	bgt.n	8008c46 <__sflush_r+0xfe>
 8008c38:	89a3      	ldrh	r3, [r4, #12]
 8008c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c3e:	81a3      	strh	r3, [r4, #12]
 8008c40:	f04f 30ff 	mov.w	r0, #4294967295
 8008c44:	e78e      	b.n	8008b64 <__sflush_r+0x1c>
 8008c46:	4407      	add	r7, r0
 8008c48:	eba8 0800 	sub.w	r8, r8, r0
 8008c4c:	e7e9      	b.n	8008c22 <__sflush_r+0xda>
 8008c4e:	bf00      	nop
 8008c50:	20400001 	.word	0x20400001

08008c54 <_fflush_r>:
 8008c54:	b538      	push	{r3, r4, r5, lr}
 8008c56:	690b      	ldr	r3, [r1, #16]
 8008c58:	4605      	mov	r5, r0
 8008c5a:	460c      	mov	r4, r1
 8008c5c:	b913      	cbnz	r3, 8008c64 <_fflush_r+0x10>
 8008c5e:	2500      	movs	r5, #0
 8008c60:	4628      	mov	r0, r5
 8008c62:	bd38      	pop	{r3, r4, r5, pc}
 8008c64:	b118      	cbz	r0, 8008c6e <_fflush_r+0x1a>
 8008c66:	6983      	ldr	r3, [r0, #24]
 8008c68:	b90b      	cbnz	r3, 8008c6e <_fflush_r+0x1a>
 8008c6a:	f000 f887 	bl	8008d7c <__sinit>
 8008c6e:	4b14      	ldr	r3, [pc, #80]	; (8008cc0 <_fflush_r+0x6c>)
 8008c70:	429c      	cmp	r4, r3
 8008c72:	d11b      	bne.n	8008cac <_fflush_r+0x58>
 8008c74:	686c      	ldr	r4, [r5, #4]
 8008c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d0ef      	beq.n	8008c5e <_fflush_r+0xa>
 8008c7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c80:	07d0      	lsls	r0, r2, #31
 8008c82:	d404      	bmi.n	8008c8e <_fflush_r+0x3a>
 8008c84:	0599      	lsls	r1, r3, #22
 8008c86:	d402      	bmi.n	8008c8e <_fflush_r+0x3a>
 8008c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c8a:	f7ff fd00 	bl	800868e <__retarget_lock_acquire_recursive>
 8008c8e:	4628      	mov	r0, r5
 8008c90:	4621      	mov	r1, r4
 8008c92:	f7ff ff59 	bl	8008b48 <__sflush_r>
 8008c96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c98:	07da      	lsls	r2, r3, #31
 8008c9a:	4605      	mov	r5, r0
 8008c9c:	d4e0      	bmi.n	8008c60 <_fflush_r+0xc>
 8008c9e:	89a3      	ldrh	r3, [r4, #12]
 8008ca0:	059b      	lsls	r3, r3, #22
 8008ca2:	d4dd      	bmi.n	8008c60 <_fflush_r+0xc>
 8008ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ca6:	f7ff fcf3 	bl	8008690 <__retarget_lock_release_recursive>
 8008caa:	e7d9      	b.n	8008c60 <_fflush_r+0xc>
 8008cac:	4b05      	ldr	r3, [pc, #20]	; (8008cc4 <_fflush_r+0x70>)
 8008cae:	429c      	cmp	r4, r3
 8008cb0:	d101      	bne.n	8008cb6 <_fflush_r+0x62>
 8008cb2:	68ac      	ldr	r4, [r5, #8]
 8008cb4:	e7df      	b.n	8008c76 <_fflush_r+0x22>
 8008cb6:	4b04      	ldr	r3, [pc, #16]	; (8008cc8 <_fflush_r+0x74>)
 8008cb8:	429c      	cmp	r4, r3
 8008cba:	bf08      	it	eq
 8008cbc:	68ec      	ldreq	r4, [r5, #12]
 8008cbe:	e7da      	b.n	8008c76 <_fflush_r+0x22>
 8008cc0:	0800987c 	.word	0x0800987c
 8008cc4:	0800989c 	.word	0x0800989c
 8008cc8:	0800985c 	.word	0x0800985c

08008ccc <std>:
 8008ccc:	2300      	movs	r3, #0
 8008cce:	b510      	push	{r4, lr}
 8008cd0:	4604      	mov	r4, r0
 8008cd2:	e9c0 3300 	strd	r3, r3, [r0]
 8008cd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cda:	6083      	str	r3, [r0, #8]
 8008cdc:	8181      	strh	r1, [r0, #12]
 8008cde:	6643      	str	r3, [r0, #100]	; 0x64
 8008ce0:	81c2      	strh	r2, [r0, #14]
 8008ce2:	6183      	str	r3, [r0, #24]
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	2208      	movs	r2, #8
 8008ce8:	305c      	adds	r0, #92	; 0x5c
 8008cea:	f7fd fb29 	bl	8006340 <memset>
 8008cee:	4b05      	ldr	r3, [pc, #20]	; (8008d04 <std+0x38>)
 8008cf0:	6263      	str	r3, [r4, #36]	; 0x24
 8008cf2:	4b05      	ldr	r3, [pc, #20]	; (8008d08 <std+0x3c>)
 8008cf4:	62a3      	str	r3, [r4, #40]	; 0x28
 8008cf6:	4b05      	ldr	r3, [pc, #20]	; (8008d0c <std+0x40>)
 8008cf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008cfa:	4b05      	ldr	r3, [pc, #20]	; (8008d10 <std+0x44>)
 8008cfc:	6224      	str	r4, [r4, #32]
 8008cfe:	6323      	str	r3, [r4, #48]	; 0x30
 8008d00:	bd10      	pop	{r4, pc}
 8008d02:	bf00      	nop
 8008d04:	08008f81 	.word	0x08008f81
 8008d08:	08008fa3 	.word	0x08008fa3
 8008d0c:	08008fdb 	.word	0x08008fdb
 8008d10:	08008fff 	.word	0x08008fff

08008d14 <_cleanup_r>:
 8008d14:	4901      	ldr	r1, [pc, #4]	; (8008d1c <_cleanup_r+0x8>)
 8008d16:	f000 b8af 	b.w	8008e78 <_fwalk_reent>
 8008d1a:	bf00      	nop
 8008d1c:	08008c55 	.word	0x08008c55

08008d20 <__sfmoreglue>:
 8008d20:	b570      	push	{r4, r5, r6, lr}
 8008d22:	2268      	movs	r2, #104	; 0x68
 8008d24:	1e4d      	subs	r5, r1, #1
 8008d26:	4355      	muls	r5, r2
 8008d28:	460e      	mov	r6, r1
 8008d2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d2e:	f7fd fb7b 	bl	8006428 <_malloc_r>
 8008d32:	4604      	mov	r4, r0
 8008d34:	b140      	cbz	r0, 8008d48 <__sfmoreglue+0x28>
 8008d36:	2100      	movs	r1, #0
 8008d38:	e9c0 1600 	strd	r1, r6, [r0]
 8008d3c:	300c      	adds	r0, #12
 8008d3e:	60a0      	str	r0, [r4, #8]
 8008d40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d44:	f7fd fafc 	bl	8006340 <memset>
 8008d48:	4620      	mov	r0, r4
 8008d4a:	bd70      	pop	{r4, r5, r6, pc}

08008d4c <__sfp_lock_acquire>:
 8008d4c:	4801      	ldr	r0, [pc, #4]	; (8008d54 <__sfp_lock_acquire+0x8>)
 8008d4e:	f7ff bc9e 	b.w	800868e <__retarget_lock_acquire_recursive>
 8008d52:	bf00      	nop
 8008d54:	20000869 	.word	0x20000869

08008d58 <__sfp_lock_release>:
 8008d58:	4801      	ldr	r0, [pc, #4]	; (8008d60 <__sfp_lock_release+0x8>)
 8008d5a:	f7ff bc99 	b.w	8008690 <__retarget_lock_release_recursive>
 8008d5e:	bf00      	nop
 8008d60:	20000869 	.word	0x20000869

08008d64 <__sinit_lock_acquire>:
 8008d64:	4801      	ldr	r0, [pc, #4]	; (8008d6c <__sinit_lock_acquire+0x8>)
 8008d66:	f7ff bc92 	b.w	800868e <__retarget_lock_acquire_recursive>
 8008d6a:	bf00      	nop
 8008d6c:	2000086a 	.word	0x2000086a

08008d70 <__sinit_lock_release>:
 8008d70:	4801      	ldr	r0, [pc, #4]	; (8008d78 <__sinit_lock_release+0x8>)
 8008d72:	f7ff bc8d 	b.w	8008690 <__retarget_lock_release_recursive>
 8008d76:	bf00      	nop
 8008d78:	2000086a 	.word	0x2000086a

08008d7c <__sinit>:
 8008d7c:	b510      	push	{r4, lr}
 8008d7e:	4604      	mov	r4, r0
 8008d80:	f7ff fff0 	bl	8008d64 <__sinit_lock_acquire>
 8008d84:	69a3      	ldr	r3, [r4, #24]
 8008d86:	b11b      	cbz	r3, 8008d90 <__sinit+0x14>
 8008d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d8c:	f7ff bff0 	b.w	8008d70 <__sinit_lock_release>
 8008d90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d94:	6523      	str	r3, [r4, #80]	; 0x50
 8008d96:	4b13      	ldr	r3, [pc, #76]	; (8008de4 <__sinit+0x68>)
 8008d98:	4a13      	ldr	r2, [pc, #76]	; (8008de8 <__sinit+0x6c>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d9e:	42a3      	cmp	r3, r4
 8008da0:	bf04      	itt	eq
 8008da2:	2301      	moveq	r3, #1
 8008da4:	61a3      	streq	r3, [r4, #24]
 8008da6:	4620      	mov	r0, r4
 8008da8:	f000 f820 	bl	8008dec <__sfp>
 8008dac:	6060      	str	r0, [r4, #4]
 8008dae:	4620      	mov	r0, r4
 8008db0:	f000 f81c 	bl	8008dec <__sfp>
 8008db4:	60a0      	str	r0, [r4, #8]
 8008db6:	4620      	mov	r0, r4
 8008db8:	f000 f818 	bl	8008dec <__sfp>
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	60e0      	str	r0, [r4, #12]
 8008dc0:	2104      	movs	r1, #4
 8008dc2:	6860      	ldr	r0, [r4, #4]
 8008dc4:	f7ff ff82 	bl	8008ccc <std>
 8008dc8:	68a0      	ldr	r0, [r4, #8]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	2109      	movs	r1, #9
 8008dce:	f7ff ff7d 	bl	8008ccc <std>
 8008dd2:	68e0      	ldr	r0, [r4, #12]
 8008dd4:	2202      	movs	r2, #2
 8008dd6:	2112      	movs	r1, #18
 8008dd8:	f7ff ff78 	bl	8008ccc <std>
 8008ddc:	2301      	movs	r3, #1
 8008dde:	61a3      	str	r3, [r4, #24]
 8008de0:	e7d2      	b.n	8008d88 <__sinit+0xc>
 8008de2:	bf00      	nop
 8008de4:	080094e4 	.word	0x080094e4
 8008de8:	08008d15 	.word	0x08008d15

08008dec <__sfp>:
 8008dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dee:	4607      	mov	r7, r0
 8008df0:	f7ff ffac 	bl	8008d4c <__sfp_lock_acquire>
 8008df4:	4b1e      	ldr	r3, [pc, #120]	; (8008e70 <__sfp+0x84>)
 8008df6:	681e      	ldr	r6, [r3, #0]
 8008df8:	69b3      	ldr	r3, [r6, #24]
 8008dfa:	b913      	cbnz	r3, 8008e02 <__sfp+0x16>
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	f7ff ffbd 	bl	8008d7c <__sinit>
 8008e02:	3648      	adds	r6, #72	; 0x48
 8008e04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	d503      	bpl.n	8008e14 <__sfp+0x28>
 8008e0c:	6833      	ldr	r3, [r6, #0]
 8008e0e:	b30b      	cbz	r3, 8008e54 <__sfp+0x68>
 8008e10:	6836      	ldr	r6, [r6, #0]
 8008e12:	e7f7      	b.n	8008e04 <__sfp+0x18>
 8008e14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e18:	b9d5      	cbnz	r5, 8008e50 <__sfp+0x64>
 8008e1a:	4b16      	ldr	r3, [pc, #88]	; (8008e74 <__sfp+0x88>)
 8008e1c:	60e3      	str	r3, [r4, #12]
 8008e1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e22:	6665      	str	r5, [r4, #100]	; 0x64
 8008e24:	f7ff fc32 	bl	800868c <__retarget_lock_init_recursive>
 8008e28:	f7ff ff96 	bl	8008d58 <__sfp_lock_release>
 8008e2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e34:	6025      	str	r5, [r4, #0]
 8008e36:	61a5      	str	r5, [r4, #24]
 8008e38:	2208      	movs	r2, #8
 8008e3a:	4629      	mov	r1, r5
 8008e3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e40:	f7fd fa7e 	bl	8006340 <memset>
 8008e44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e50:	3468      	adds	r4, #104	; 0x68
 8008e52:	e7d9      	b.n	8008e08 <__sfp+0x1c>
 8008e54:	2104      	movs	r1, #4
 8008e56:	4638      	mov	r0, r7
 8008e58:	f7ff ff62 	bl	8008d20 <__sfmoreglue>
 8008e5c:	4604      	mov	r4, r0
 8008e5e:	6030      	str	r0, [r6, #0]
 8008e60:	2800      	cmp	r0, #0
 8008e62:	d1d5      	bne.n	8008e10 <__sfp+0x24>
 8008e64:	f7ff ff78 	bl	8008d58 <__sfp_lock_release>
 8008e68:	230c      	movs	r3, #12
 8008e6a:	603b      	str	r3, [r7, #0]
 8008e6c:	e7ee      	b.n	8008e4c <__sfp+0x60>
 8008e6e:	bf00      	nop
 8008e70:	080094e4 	.word	0x080094e4
 8008e74:	ffff0001 	.word	0xffff0001

08008e78 <_fwalk_reent>:
 8008e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e7c:	4606      	mov	r6, r0
 8008e7e:	4688      	mov	r8, r1
 8008e80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e84:	2700      	movs	r7, #0
 8008e86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e8a:	f1b9 0901 	subs.w	r9, r9, #1
 8008e8e:	d505      	bpl.n	8008e9c <_fwalk_reent+0x24>
 8008e90:	6824      	ldr	r4, [r4, #0]
 8008e92:	2c00      	cmp	r4, #0
 8008e94:	d1f7      	bne.n	8008e86 <_fwalk_reent+0xe>
 8008e96:	4638      	mov	r0, r7
 8008e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e9c:	89ab      	ldrh	r3, [r5, #12]
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d907      	bls.n	8008eb2 <_fwalk_reent+0x3a>
 8008ea2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	d003      	beq.n	8008eb2 <_fwalk_reent+0x3a>
 8008eaa:	4629      	mov	r1, r5
 8008eac:	4630      	mov	r0, r6
 8008eae:	47c0      	blx	r8
 8008eb0:	4307      	orrs	r7, r0
 8008eb2:	3568      	adds	r5, #104	; 0x68
 8008eb4:	e7e9      	b.n	8008e8a <_fwalk_reent+0x12>

08008eb6 <__swhatbuf_r>:
 8008eb6:	b570      	push	{r4, r5, r6, lr}
 8008eb8:	460e      	mov	r6, r1
 8008eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ebe:	2900      	cmp	r1, #0
 8008ec0:	b096      	sub	sp, #88	; 0x58
 8008ec2:	4614      	mov	r4, r2
 8008ec4:	461d      	mov	r5, r3
 8008ec6:	da08      	bge.n	8008eda <__swhatbuf_r+0x24>
 8008ec8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	602a      	str	r2, [r5, #0]
 8008ed0:	061a      	lsls	r2, r3, #24
 8008ed2:	d410      	bmi.n	8008ef6 <__swhatbuf_r+0x40>
 8008ed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ed8:	e00e      	b.n	8008ef8 <__swhatbuf_r+0x42>
 8008eda:	466a      	mov	r2, sp
 8008edc:	f000 f8b6 	bl	800904c <_fstat_r>
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	dbf1      	blt.n	8008ec8 <__swhatbuf_r+0x12>
 8008ee4:	9a01      	ldr	r2, [sp, #4]
 8008ee6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008eea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008eee:	425a      	negs	r2, r3
 8008ef0:	415a      	adcs	r2, r3
 8008ef2:	602a      	str	r2, [r5, #0]
 8008ef4:	e7ee      	b.n	8008ed4 <__swhatbuf_r+0x1e>
 8008ef6:	2340      	movs	r3, #64	; 0x40
 8008ef8:	2000      	movs	r0, #0
 8008efa:	6023      	str	r3, [r4, #0]
 8008efc:	b016      	add	sp, #88	; 0x58
 8008efe:	bd70      	pop	{r4, r5, r6, pc}

08008f00 <__smakebuf_r>:
 8008f00:	898b      	ldrh	r3, [r1, #12]
 8008f02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f04:	079d      	lsls	r5, r3, #30
 8008f06:	4606      	mov	r6, r0
 8008f08:	460c      	mov	r4, r1
 8008f0a:	d507      	bpl.n	8008f1c <__smakebuf_r+0x1c>
 8008f0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f10:	6023      	str	r3, [r4, #0]
 8008f12:	6123      	str	r3, [r4, #16]
 8008f14:	2301      	movs	r3, #1
 8008f16:	6163      	str	r3, [r4, #20]
 8008f18:	b002      	add	sp, #8
 8008f1a:	bd70      	pop	{r4, r5, r6, pc}
 8008f1c:	ab01      	add	r3, sp, #4
 8008f1e:	466a      	mov	r2, sp
 8008f20:	f7ff ffc9 	bl	8008eb6 <__swhatbuf_r>
 8008f24:	9900      	ldr	r1, [sp, #0]
 8008f26:	4605      	mov	r5, r0
 8008f28:	4630      	mov	r0, r6
 8008f2a:	f7fd fa7d 	bl	8006428 <_malloc_r>
 8008f2e:	b948      	cbnz	r0, 8008f44 <__smakebuf_r+0x44>
 8008f30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f34:	059a      	lsls	r2, r3, #22
 8008f36:	d4ef      	bmi.n	8008f18 <__smakebuf_r+0x18>
 8008f38:	f023 0303 	bic.w	r3, r3, #3
 8008f3c:	f043 0302 	orr.w	r3, r3, #2
 8008f40:	81a3      	strh	r3, [r4, #12]
 8008f42:	e7e3      	b.n	8008f0c <__smakebuf_r+0xc>
 8008f44:	4b0d      	ldr	r3, [pc, #52]	; (8008f7c <__smakebuf_r+0x7c>)
 8008f46:	62b3      	str	r3, [r6, #40]	; 0x28
 8008f48:	89a3      	ldrh	r3, [r4, #12]
 8008f4a:	6020      	str	r0, [r4, #0]
 8008f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f50:	81a3      	strh	r3, [r4, #12]
 8008f52:	9b00      	ldr	r3, [sp, #0]
 8008f54:	6163      	str	r3, [r4, #20]
 8008f56:	9b01      	ldr	r3, [sp, #4]
 8008f58:	6120      	str	r0, [r4, #16]
 8008f5a:	b15b      	cbz	r3, 8008f74 <__smakebuf_r+0x74>
 8008f5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f60:	4630      	mov	r0, r6
 8008f62:	f000 f885 	bl	8009070 <_isatty_r>
 8008f66:	b128      	cbz	r0, 8008f74 <__smakebuf_r+0x74>
 8008f68:	89a3      	ldrh	r3, [r4, #12]
 8008f6a:	f023 0303 	bic.w	r3, r3, #3
 8008f6e:	f043 0301 	orr.w	r3, r3, #1
 8008f72:	81a3      	strh	r3, [r4, #12]
 8008f74:	89a0      	ldrh	r0, [r4, #12]
 8008f76:	4305      	orrs	r5, r0
 8008f78:	81a5      	strh	r5, [r4, #12]
 8008f7a:	e7cd      	b.n	8008f18 <__smakebuf_r+0x18>
 8008f7c:	08008d15 	.word	0x08008d15

08008f80 <__sread>:
 8008f80:	b510      	push	{r4, lr}
 8008f82:	460c      	mov	r4, r1
 8008f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f88:	f000 f894 	bl	80090b4 <_read_r>
 8008f8c:	2800      	cmp	r0, #0
 8008f8e:	bfab      	itete	ge
 8008f90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f92:	89a3      	ldrhlt	r3, [r4, #12]
 8008f94:	181b      	addge	r3, r3, r0
 8008f96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f9a:	bfac      	ite	ge
 8008f9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f9e:	81a3      	strhlt	r3, [r4, #12]
 8008fa0:	bd10      	pop	{r4, pc}

08008fa2 <__swrite>:
 8008fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fa6:	461f      	mov	r7, r3
 8008fa8:	898b      	ldrh	r3, [r1, #12]
 8008faa:	05db      	lsls	r3, r3, #23
 8008fac:	4605      	mov	r5, r0
 8008fae:	460c      	mov	r4, r1
 8008fb0:	4616      	mov	r6, r2
 8008fb2:	d505      	bpl.n	8008fc0 <__swrite+0x1e>
 8008fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fb8:	2302      	movs	r3, #2
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f000 f868 	bl	8009090 <_lseek_r>
 8008fc0:	89a3      	ldrh	r3, [r4, #12]
 8008fc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fca:	81a3      	strh	r3, [r4, #12]
 8008fcc:	4632      	mov	r2, r6
 8008fce:	463b      	mov	r3, r7
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fd6:	f000 b817 	b.w	8009008 <_write_r>

08008fda <__sseek>:
 8008fda:	b510      	push	{r4, lr}
 8008fdc:	460c      	mov	r4, r1
 8008fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fe2:	f000 f855 	bl	8009090 <_lseek_r>
 8008fe6:	1c43      	adds	r3, r0, #1
 8008fe8:	89a3      	ldrh	r3, [r4, #12]
 8008fea:	bf15      	itete	ne
 8008fec:	6560      	strne	r0, [r4, #84]	; 0x54
 8008fee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ff2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ff6:	81a3      	strheq	r3, [r4, #12]
 8008ff8:	bf18      	it	ne
 8008ffa:	81a3      	strhne	r3, [r4, #12]
 8008ffc:	bd10      	pop	{r4, pc}

08008ffe <__sclose>:
 8008ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009002:	f000 b813 	b.w	800902c <_close_r>
	...

08009008 <_write_r>:
 8009008:	b538      	push	{r3, r4, r5, lr}
 800900a:	4d07      	ldr	r5, [pc, #28]	; (8009028 <_write_r+0x20>)
 800900c:	4604      	mov	r4, r0
 800900e:	4608      	mov	r0, r1
 8009010:	4611      	mov	r1, r2
 8009012:	2200      	movs	r2, #0
 8009014:	602a      	str	r2, [r5, #0]
 8009016:	461a      	mov	r2, r3
 8009018:	f000 f896 	bl	8009148 <_write>
 800901c:	1c43      	adds	r3, r0, #1
 800901e:	d102      	bne.n	8009026 <_write_r+0x1e>
 8009020:	682b      	ldr	r3, [r5, #0]
 8009022:	b103      	cbz	r3, 8009026 <_write_r+0x1e>
 8009024:	6023      	str	r3, [r4, #0]
 8009026:	bd38      	pop	{r3, r4, r5, pc}
 8009028:	20000864 	.word	0x20000864

0800902c <_close_r>:
 800902c:	b538      	push	{r3, r4, r5, lr}
 800902e:	4d06      	ldr	r5, [pc, #24]	; (8009048 <_close_r+0x1c>)
 8009030:	2300      	movs	r3, #0
 8009032:	4604      	mov	r4, r0
 8009034:	4608      	mov	r0, r1
 8009036:	602b      	str	r3, [r5, #0]
 8009038:	f000 f84e 	bl	80090d8 <_close>
 800903c:	1c43      	adds	r3, r0, #1
 800903e:	d102      	bne.n	8009046 <_close_r+0x1a>
 8009040:	682b      	ldr	r3, [r5, #0]
 8009042:	b103      	cbz	r3, 8009046 <_close_r+0x1a>
 8009044:	6023      	str	r3, [r4, #0]
 8009046:	bd38      	pop	{r3, r4, r5, pc}
 8009048:	20000864 	.word	0x20000864

0800904c <_fstat_r>:
 800904c:	b538      	push	{r3, r4, r5, lr}
 800904e:	4d07      	ldr	r5, [pc, #28]	; (800906c <_fstat_r+0x20>)
 8009050:	2300      	movs	r3, #0
 8009052:	4604      	mov	r4, r0
 8009054:	4608      	mov	r0, r1
 8009056:	4611      	mov	r1, r2
 8009058:	602b      	str	r3, [r5, #0]
 800905a:	f000 f845 	bl	80090e8 <_fstat>
 800905e:	1c43      	adds	r3, r0, #1
 8009060:	d102      	bne.n	8009068 <_fstat_r+0x1c>
 8009062:	682b      	ldr	r3, [r5, #0]
 8009064:	b103      	cbz	r3, 8009068 <_fstat_r+0x1c>
 8009066:	6023      	str	r3, [r4, #0]
 8009068:	bd38      	pop	{r3, r4, r5, pc}
 800906a:	bf00      	nop
 800906c:	20000864 	.word	0x20000864

08009070 <_isatty_r>:
 8009070:	b538      	push	{r3, r4, r5, lr}
 8009072:	4d06      	ldr	r5, [pc, #24]	; (800908c <_isatty_r+0x1c>)
 8009074:	2300      	movs	r3, #0
 8009076:	4604      	mov	r4, r0
 8009078:	4608      	mov	r0, r1
 800907a:	602b      	str	r3, [r5, #0]
 800907c:	f000 f844 	bl	8009108 <_isatty>
 8009080:	1c43      	adds	r3, r0, #1
 8009082:	d102      	bne.n	800908a <_isatty_r+0x1a>
 8009084:	682b      	ldr	r3, [r5, #0]
 8009086:	b103      	cbz	r3, 800908a <_isatty_r+0x1a>
 8009088:	6023      	str	r3, [r4, #0]
 800908a:	bd38      	pop	{r3, r4, r5, pc}
 800908c:	20000864 	.word	0x20000864

08009090 <_lseek_r>:
 8009090:	b538      	push	{r3, r4, r5, lr}
 8009092:	4d07      	ldr	r5, [pc, #28]	; (80090b0 <_lseek_r+0x20>)
 8009094:	4604      	mov	r4, r0
 8009096:	4608      	mov	r0, r1
 8009098:	4611      	mov	r1, r2
 800909a:	2200      	movs	r2, #0
 800909c:	602a      	str	r2, [r5, #0]
 800909e:	461a      	mov	r2, r3
 80090a0:	f000 f842 	bl	8009128 <_lseek>
 80090a4:	1c43      	adds	r3, r0, #1
 80090a6:	d102      	bne.n	80090ae <_lseek_r+0x1e>
 80090a8:	682b      	ldr	r3, [r5, #0]
 80090aa:	b103      	cbz	r3, 80090ae <_lseek_r+0x1e>
 80090ac:	6023      	str	r3, [r4, #0]
 80090ae:	bd38      	pop	{r3, r4, r5, pc}
 80090b0:	20000864 	.word	0x20000864

080090b4 <_read_r>:
 80090b4:	b538      	push	{r3, r4, r5, lr}
 80090b6:	4d07      	ldr	r5, [pc, #28]	; (80090d4 <_read_r+0x20>)
 80090b8:	4604      	mov	r4, r0
 80090ba:	4608      	mov	r0, r1
 80090bc:	4611      	mov	r1, r2
 80090be:	2200      	movs	r2, #0
 80090c0:	602a      	str	r2, [r5, #0]
 80090c2:	461a      	mov	r2, r3
 80090c4:	f000 f838 	bl	8009138 <_read>
 80090c8:	1c43      	adds	r3, r0, #1
 80090ca:	d102      	bne.n	80090d2 <_read_r+0x1e>
 80090cc:	682b      	ldr	r3, [r5, #0]
 80090ce:	b103      	cbz	r3, 80090d2 <_read_r+0x1e>
 80090d0:	6023      	str	r3, [r4, #0]
 80090d2:	bd38      	pop	{r3, r4, r5, pc}
 80090d4:	20000864 	.word	0x20000864

080090d8 <_close>:
 80090d8:	4b02      	ldr	r3, [pc, #8]	; (80090e4 <_close+0xc>)
 80090da:	2258      	movs	r2, #88	; 0x58
 80090dc:	601a      	str	r2, [r3, #0]
 80090de:	f04f 30ff 	mov.w	r0, #4294967295
 80090e2:	4770      	bx	lr
 80090e4:	20000864 	.word	0x20000864

080090e8 <_fstat>:
 80090e8:	4b02      	ldr	r3, [pc, #8]	; (80090f4 <_fstat+0xc>)
 80090ea:	2258      	movs	r2, #88	; 0x58
 80090ec:	601a      	str	r2, [r3, #0]
 80090ee:	f04f 30ff 	mov.w	r0, #4294967295
 80090f2:	4770      	bx	lr
 80090f4:	20000864 	.word	0x20000864

080090f8 <_getpid>:
 80090f8:	4b02      	ldr	r3, [pc, #8]	; (8009104 <_getpid+0xc>)
 80090fa:	2258      	movs	r2, #88	; 0x58
 80090fc:	601a      	str	r2, [r3, #0]
 80090fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009102:	4770      	bx	lr
 8009104:	20000864 	.word	0x20000864

08009108 <_isatty>:
 8009108:	4b02      	ldr	r3, [pc, #8]	; (8009114 <_isatty+0xc>)
 800910a:	2258      	movs	r2, #88	; 0x58
 800910c:	601a      	str	r2, [r3, #0]
 800910e:	2000      	movs	r0, #0
 8009110:	4770      	bx	lr
 8009112:	bf00      	nop
 8009114:	20000864 	.word	0x20000864

08009118 <_kill>:
 8009118:	4b02      	ldr	r3, [pc, #8]	; (8009124 <_kill+0xc>)
 800911a:	2258      	movs	r2, #88	; 0x58
 800911c:	601a      	str	r2, [r3, #0]
 800911e:	f04f 30ff 	mov.w	r0, #4294967295
 8009122:	4770      	bx	lr
 8009124:	20000864 	.word	0x20000864

08009128 <_lseek>:
 8009128:	4b02      	ldr	r3, [pc, #8]	; (8009134 <_lseek+0xc>)
 800912a:	2258      	movs	r2, #88	; 0x58
 800912c:	601a      	str	r2, [r3, #0]
 800912e:	f04f 30ff 	mov.w	r0, #4294967295
 8009132:	4770      	bx	lr
 8009134:	20000864 	.word	0x20000864

08009138 <_read>:
 8009138:	4b02      	ldr	r3, [pc, #8]	; (8009144 <_read+0xc>)
 800913a:	2258      	movs	r2, #88	; 0x58
 800913c:	601a      	str	r2, [r3, #0]
 800913e:	f04f 30ff 	mov.w	r0, #4294967295
 8009142:	4770      	bx	lr
 8009144:	20000864 	.word	0x20000864

08009148 <_write>:
 8009148:	4b02      	ldr	r3, [pc, #8]	; (8009154 <_write+0xc>)
 800914a:	2258      	movs	r2, #88	; 0x58
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	f04f 30ff 	mov.w	r0, #4294967295
 8009152:	4770      	bx	lr
 8009154:	20000864 	.word	0x20000864

08009158 <_exit>:
 8009158:	e7fe      	b.n	8009158 <_exit>
	...

0800915c <_init>:
 800915c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800915e:	bf00      	nop
 8009160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009162:	bc08      	pop	{r3}
 8009164:	469e      	mov	lr, r3
 8009166:	4770      	bx	lr

08009168 <_fini>:
 8009168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800916a:	bf00      	nop
 800916c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800916e:	bc08      	pop	{r3}
 8009170:	469e      	mov	lr, r3
 8009172:	4770      	bx	lr
