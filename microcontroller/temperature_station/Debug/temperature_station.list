
temperature_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009064  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000784  08009208  08009208  00019208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800998c  0800998c  0002060c  2**0
                  CONTENTS
  4 .ARM          00000008  0800998c  0800998c  0001998c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009994  08009994  0002060c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009994  08009994  00019994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800999c  0800999c  0001999c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000060c  20000000  080099a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  2000060c  08009fac  0002060c  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20000870  08009fac  00020870  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002060c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001974e  00000000  00000000  0002063c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ba4  00000000  00000000  00039d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  0003d930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001040  00000000  00000000  0003eae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d1c0  00000000  00000000  0003fb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001822e  00000000  00000000  0005cce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ed19  00000000  00000000  00074f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cb  00000000  00000000  00113c27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cf0  00000000  00000000  00113cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001199e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00119ab0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000060c 	.word	0x2000060c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080091ec 	.word	0x080091ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000610 	.word	0x20000610
 80001dc:	080091ec 	.word	0x080091ec

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <_ZN7MPU60504initEv>:
 */


#include "MPU6050.h"

void MPU6050::init(){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af04      	add	r7, sp, #16
 8000f62:	6078      	str	r0, [r7, #4]
	uint8_t check, data;

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 8000f64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f68:	9302      	str	r3, [sp, #8]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	f107 030f 	add.w	r3, r7, #15
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	2301      	movs	r3, #1
 8000f76:	2275      	movs	r2, #117	; 0x75
 8000f78:	21d0      	movs	r1, #208	; 0xd0
 8000f7a:	4815      	ldr	r0, [pc, #84]	; (8000fd0 <_ZN7MPU60504initEv+0x74>)
 8000f7c:	f001 ff32 	bl	8002de4 <HAL_I2C_Mem_Read>

	if(check == 104){
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	2b68      	cmp	r3, #104	; 0x68
 8000f84:	d11f      	bne.n	8000fc6 <_ZN7MPU60504initEv+0x6a>
			data = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	73bb      	strb	r3, [r7, #14]
			HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_REG, 1, &data, 1, 1000);
 8000f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8e:	9302      	str	r3, [sp, #8]
 8000f90:	2301      	movs	r3, #1
 8000f92:	9301      	str	r3, [sp, #4]
 8000f94:	f107 030e 	add.w	r3, r7, #14
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	226b      	movs	r2, #107	; 0x6b
 8000f9e:	21d0      	movs	r1, #208	; 0xd0
 8000fa0:	480b      	ldr	r0, [pc, #44]	; (8000fd0 <_ZN7MPU60504initEv+0x74>)
 8000fa2:	f001 fe25 	bl	8002bf0 <HAL_I2C_Mem_Write>
			data = 0x01;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73bb      	strb	r3, [r7, #14]
			HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_REG, 1, &data, 1, 1000);
 8000faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	f107 030e 	add.w	r3, r7, #14
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	2219      	movs	r2, #25
 8000fbe:	21d0      	movs	r1, #208	; 0xd0
 8000fc0:	4803      	ldr	r0, [pc, #12]	; (8000fd0 <_ZN7MPU60504initEv+0x74>)
 8000fc2:	f001 fe15 	bl	8002bf0 <HAL_I2C_Mem_Write>
	}
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000630 	.word	0x20000630
 8000fd4:	00000000 	.word	0x00000000

08000fd8 <_ZN7MPU605015readTemperatureEv>:

void MPU6050::readTemperature(){
 8000fd8:	b5b0      	push	{r4, r5, r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af04      	add	r7, sp, #16
 8000fde:	6078      	str	r0, [r7, #4]
	uint8_t data[2];
	int16_t temp_raw;

	for(uint8_t j = 0; j<20; j++){
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	2b13      	cmp	r3, #19
 8000fe8:	d842      	bhi.n	8001070 <_ZN7MPU605015readTemperatureEv+0x98>

		HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, TEMP_REG, 1, data, 2, 1000);
 8000fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fee:	9302      	str	r3, [sp, #8]
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	f107 0308 	add.w	r3, r7, #8
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	2241      	movs	r2, #65	; 0x41
 8000ffe:	21d0      	movs	r1, #208	; 0xd0
 8001000:	4825      	ldr	r0, [pc, #148]	; (8001098 <_ZN7MPU605015readTemperatureEv+0xc0>)
 8001002:	f001 feef 	bl	8002de4 <HAL_I2C_Mem_Read>

		temp_raw = (int16_t)(data[0]<<8 | data[1]);
 8001006:	7a3b      	ldrb	r3, [r7, #8]
 8001008:	021b      	lsls	r3, r3, #8
 800100a:	b21a      	sxth	r2, r3
 800100c:	7a7b      	ldrb	r3, [r7, #9]
 800100e:	b21b      	sxth	r3, r3
 8001010:	4313      	orrs	r3, r2
 8001012:	81bb      	strh	r3, [r7, #12]
		temperature += ((temp_raw/340) + 36.53);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fa9d 	bl	8000558 <__aeabi_f2d>
 800101e:	4604      	mov	r4, r0
 8001020:	460d      	mov	r5, r1
 8001022:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001026:	4a1d      	ldr	r2, [pc, #116]	; (800109c <_ZN7MPU605015readTemperatureEv+0xc4>)
 8001028:	fb82 1203 	smull	r1, r2, r2, r3
 800102c:	11d2      	asrs	r2, r2, #7
 800102e:	17db      	asrs	r3, r3, #31
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	b21b      	sxth	r3, r3
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fa7d 	bl	8000534 <__aeabi_i2d>
 800103a:	a315      	add	r3, pc, #84	; (adr r3, 8001090 <_ZN7MPU605015readTemperatureEv+0xb8>)
 800103c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001040:	f7ff f92c 	bl	800029c <__adddf3>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4620      	mov	r0, r4
 800104a:	4629      	mov	r1, r5
 800104c:	f7ff f926 	bl	800029c <__adddf3>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4610      	mov	r0, r2
 8001056:	4619      	mov	r1, r3
 8001058:	f7ff fdae 	bl	8000bb8 <__aeabi_d2f>
 800105c:	4602      	mov	r2, r0
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	601a      	str	r2, [r3, #0]
		HAL_Delay(50);
 8001062:	2032      	movs	r0, #50	; 0x32
 8001064:	f001 f978 	bl	8002358 <HAL_Delay>
	for(uint8_t j = 0; j<20; j++){
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	3301      	adds	r3, #1
 800106c:	73fb      	strb	r3, [r7, #15]
 800106e:	e7b9      	b.n	8000fe4 <_ZN7MPU605015readTemperatureEv+0xc>
	}

	temperature = temperature/20;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	ed93 7a00 	vldr	s14, [r3]
 8001076:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800107a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	edc3 7a00 	vstr	s15, [r3]
}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bdb0      	pop	{r4, r5, r7, pc}
 800108c:	f3af 8000 	nop.w
 8001090:	0a3d70a4 	.word	0x0a3d70a4
 8001094:	404243d7 	.word	0x404243d7
 8001098:	20000630 	.word	0x20000630
 800109c:	60606061 	.word	0x60606061

080010a0 <_ZN7MPU605014getTemperatureEv>:

float MPU6050::getTemperature(){
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	return temperature;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	ee07 3a90 	vmov	s15, r3
}
 80010b0:	eeb0 0a67 	vmov.f32	s0, s15
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <_ZN5ClockC1Ehhhb>:
 *  Created on: 30 de nov de 2022
 *      Author: leocl
 */
#include "clockcalendar.h"

Clock::Clock(uint8_t h, uint8_t s, uint8_t m, bool pm){
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	4608      	mov	r0, r1
 80010c8:	4611      	mov	r1, r2
 80010ca:	461a      	mov	r2, r3
 80010cc:	4603      	mov	r3, r0
 80010ce:	70fb      	strb	r3, [r7, #3]
 80010d0:	460b      	mov	r3, r1
 80010d2:	70bb      	strb	r3, [r7, #2]
 80010d4:	4613      	mov	r3, r2
 80010d6:	707b      	strb	r3, [r7, #1]
			hr = h;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	78fa      	ldrb	r2, [r7, #3]
 80010dc:	701a      	strb	r2, [r3, #0]
			min = m;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	787a      	ldrb	r2, [r7, #1]
 80010e2:	705a      	strb	r2, [r3, #1]
			sec = s;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	78ba      	ldrb	r2, [r7, #2]
 80010e8:	709a      	strb	r2, [r3, #2]
			is_pm = pm;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	7c3a      	ldrb	r2, [r7, #16]
 80010ee:	70da      	strb	r2, [r3, #3]
		}
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4618      	mov	r0, r3
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <_ZN5ClockC1Ev>:

Clock::Clock(){
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
	hr = 0;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
	min = 0;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	705a      	strb	r2, [r3, #1]
	sec = 0;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	709a      	strb	r2, [r3, #2]
	is_pm = 0;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	70da      	strb	r2, [r3, #3]
}
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <_ZN5Clock9getSecondEv>:

uint8_t Clock::getSecond(){
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	return sec;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	789b      	ldrb	r3, [r3, #2]
}
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <_ZN5Clock9getMinuteEv>:

uint8_t Clock::getMinute(){
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	return min;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	785b      	ldrb	r3, [r3, #1]
}
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <_ZN5Clock7getHourEv>:

uint8_t Clock::getHour(){
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	return hr;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	781b      	ldrb	r3, [r3, #0]
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <_ZN5Clock7getPMAMEv>:

bool Clock::getPMAM(){
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	return is_pm;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	78db      	ldrb	r3, [r3, #3]
}
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <_ZN5Clock7advanceEv>:

void Clock::advance(){
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
			sec++;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	789b      	ldrb	r3, [r3, #2]
 8001198:	3301      	adds	r3, #1
 800119a:	b2da      	uxtb	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	709a      	strb	r2, [r3, #2]
			if(sec == 60){
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	789b      	ldrb	r3, [r3, #2]
 80011a4:	2b3c      	cmp	r3, #60	; 0x3c
 80011a6:	d108      	bne.n	80011ba <_ZN5Clock7advanceEv+0x2e>
				sec = 0;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	709a      	strb	r2, [r3, #2]
				min++;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	785b      	ldrb	r3, [r3, #1]
 80011b2:	3301      	adds	r3, #1
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	705a      	strb	r2, [r3, #1]
			}
			if(min == 60){
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	785b      	ldrb	r3, [r3, #1]
 80011be:	2b3c      	cmp	r3, #60	; 0x3c
 80011c0:	d108      	bne.n	80011d4 <_ZN5Clock7advanceEv+0x48>
				min = 0;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	705a      	strb	r2, [r3, #1]
				hr++;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	3301      	adds	r3, #1
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	701a      	strb	r2, [r3, #0]
			}
			if(hr > 12){
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b0c      	cmp	r3, #12
 80011da:	d909      	bls.n	80011f0 <_ZN5Clock7advanceEv+0x64>
				hr = 1;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
				is_pm = !(is_pm);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	78db      	ldrb	r3, [r3, #3]
 80011e6:	f083 0301 	eor.w	r3, r3, #1
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	70da      	strb	r2, [r3, #3]
			}
		}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <_ZN8CalendarC1Ehhh>:


//Calendar

Calendar::Calendar(uint8_t m, uint8_t d, uint8_t y){
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	4608      	mov	r0, r1
 8001206:	4611      	mov	r1, r2
 8001208:	461a      	mov	r2, r3
 800120a:	4603      	mov	r3, r0
 800120c:	70fb      	strb	r3, [r7, #3]
 800120e:	460b      	mov	r3, r1
 8001210:	70bb      	strb	r3, [r7, #2]
 8001212:	4613      	mov	r3, r2
 8001214:	707b      	strb	r3, [r7, #1]
			mo = m;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	78fa      	ldrb	r2, [r7, #3]
 800121a:	701a      	strb	r2, [r3, #0]
			day = d;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	78ba      	ldrb	r2, [r7, #2]
 8001220:	705a      	strb	r2, [r3, #1]
			yr = y;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	787a      	ldrb	r2, [r7, #1]
 8001226:	709a      	strb	r2, [r3, #2]
		}
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4618      	mov	r0, r3
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <_ZN8CalendarC1Ev>:

Calendar::Calendar(){
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
	mo = 0;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	701a      	strb	r2, [r3, #0]
	day = 0;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	705a      	strb	r2, [r3, #1]
	yr = 0;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	709a      	strb	r2, [r3, #2]
}
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4618      	mov	r0, r3
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <_ZN8Calendar7advanceEv>:

void Calendar::advance(){
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
			day++;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	785b      	ldrb	r3, [r3, #1]
 800126a:	3301      	adds	r3, #1
 800126c:	b2da      	uxtb	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	705a      	strb	r2, [r3, #1]
			if(day >= 30){
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	785b      	ldrb	r3, [r3, #1]
 8001276:	2b1d      	cmp	r3, #29
 8001278:	d908      	bls.n	800128c <_ZN8Calendar7advanceEv+0x2e>
				day = 1;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	705a      	strb	r2, [r3, #1]
				mo++;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	3301      	adds	r3, #1
 8001286:	b2da      	uxtb	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	701a      	strb	r2, [r3, #0]
			}
			if(mo > 12){
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b0c      	cmp	r3, #12
 8001292:	d908      	bls.n	80012a6 <_ZN8Calendar7advanceEv+0x48>
				mo = 1;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2201      	movs	r2, #1
 8001298:	701a      	strb	r2, [r3, #0]
				yr++;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	789b      	ldrb	r3, [r3, #2]
 800129e:	3301      	adds	r3, #1
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	709a      	strb	r2, [r3, #2]
			}
		}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <_ZN8Calendar6getDayEv>:

uint8_t Calendar::getDay(){
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
	return day;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	785b      	ldrb	r3, [r3, #1]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <_ZN8Calendar8getMonthEv>:

uint8_t Calendar::getMonth(){
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
	return mo;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	781b      	ldrb	r3, [r3, #0]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <_ZN8Calendar7getYearEv>:

uint8_t Calendar::getYear(){
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
	return yr;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	789b      	ldrb	r3, [r3, #2]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <_ZN13ClockCalendar7advanceEv>:

//ClockCalendar

void ClockCalendar::advance(){
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b084      	sub	sp, #16
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
	bool wasPm = is_pm;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	78db      	ldrb	r3, [r3, #3]
 8001306:	73fb      	strb	r3, [r7, #15]
	Clock::advance();
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff ff3e 	bl	800118c <_ZN5Clock7advanceEv>
	if(wasPm && !is_pm) Calendar::advance();
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00b      	beq.n	800132e <_ZN13ClockCalendar7advanceEv+0x34>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	78db      	ldrb	r3, [r3, #3]
 800131a:	f083 0301 	eor.w	r3, r3, #1
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	d004      	beq.n	800132e <_ZN13ClockCalendar7advanceEv+0x34>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3304      	adds	r3, #4
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff98 	bl	800125e <_ZN8Calendar7advanceEv>
}
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	ed87 0a01 	vstr	s0, [r7, #4]
 8001340:	edd7 7a01 	vldr	s15, [r7, #4]
 8001344:	eef0 7ae7 	vabs.f32	s15, s15
 8001348:	eeb0 0a67 	vmov.f32	s0, s15
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <_ZN13Communication14addDataToQueueEP4Data>:
 *      Author: leocl
 */

#include "communication.h"

void Communication::addDataToQueue(Data* data){
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	6039      	str	r1, [r7, #0]
	q.insert(data);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3304      	adds	r3, #4
 8001364:	6839      	ldr	r1, [r7, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f000 fd5a 	bl	8001e20 <_ZN5Queue6insertEP4Data>
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <_ZN13Communication16verifyPredictionEff>:

bool Communication::verifyPrediction(float measure, float prediction){
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001380:	edc7 0a01 	vstr	s1, [r7, #4]

	if(abs(prediction-measure)<0.5) {
 8001384:	ed97 7a01 	vldr	s14, [r7, #4]
 8001388:	edd7 7a02 	vldr	s15, [r7, #8]
 800138c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001390:	eeb0 0a67 	vmov.f32	s0, s15
 8001394:	f7ff ffcf 	bl	8001336 <_ZSt3absf>
 8001398:	eef0 7a40 	vmov.f32	s15, s0
 800139c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a8:	bf4c      	ite	mi
 80013aa:	2301      	movmi	r3, #1
 80013ac:	2300      	movpl	r3, #0
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <_ZN13Communication16verifyPredictionEff+0x44>
		return true;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e000      	b.n	80013ba <_ZN13Communication16verifyPredictionEff+0x46>
	}
	else{
		return false;
 80013b8:	2300      	movs	r3, #0
	}
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <_ZN6Serial8sendDataEv>:

void Serial::sendData(){
 80013c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013c8:	b0ad      	sub	sp, #180	; 0xb4
 80013ca:	af0a      	add	r7, sp, #40	; 0x28
 80013cc:	60f8      	str	r0, [r7, #12]
	uint32_t i, length;
	Data* aux;
	char msg[100];
	uint8_t len = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
	uint8_t t1, t2;

	length = q.getLength();
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	3304      	adds	r3, #4
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 fd9a 	bl	8001f12 <_ZN5Queue9getLengthEv>
 80013de:	67f8      	str	r0, [r7, #124]	; 0x7c

	for(i = 0; i<length; i++){
 80013e0:	2300      	movs	r3, #0
 80013e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80013e6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80013ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80013ec:	429a      	cmp	r2, r3
 80013ee:	f080 8086 	bcs.w	80014fe <_ZN6Serial8sendDataEv+0x13a>
		aux = q.remove();
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	3304      	adds	r3, #4
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 fd4a 	bl	8001e90 <_ZN5Queue6removeEv>
 80013fc:	67b8      	str	r0, [r7, #120]	; 0x78

		t1 = (uint8_t)aux->temperature;
 80013fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001400:	edd3 7a02 	vldr	s15, [r3, #8]
 8001404:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001408:	edc7 7a02 	vstr	s15, [r7, #8]
 800140c:	7a3b      	ldrb	r3, [r7, #8]
 800140e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		t2 = (uint8_t)((aux->temperature - t1)*100);
 8001412:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001414:	ed93 7a02 	vldr	s14, [r3, #8]
 8001418:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800141c:	ee07 3a90 	vmov	s15, r3
 8001420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001424:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001428:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001508 <_ZN6Serial8sendDataEv+0x144>
 800142c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001434:	edc7 7a02 	vstr	s15, [r7, #8]
 8001438:	7a3b      	ldrb	r3, [r7, #8]
 800143a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

		len = sprintf(msg, "ID:%d | Data:%d/%d/%d %d:%d:%d PM:%d | Temperatura:%d,%d | Predição correta:%d\r\n", aux->id, aux->datetime.getMonth(),aux->datetime.getDay(),
 800143e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	4698      	mov	r8, r3
 8001444:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001446:	3305      	adds	r3, #5
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff3e 	bl	80012ca <_ZN8Calendar8getMonthEv>
 800144e:	4603      	mov	r3, r0
 8001450:	4699      	mov	r9, r3
 8001452:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001454:	3305      	adds	r3, #5
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff ff2b 	bl	80012b2 <_ZN8Calendar6getDayEv>
 800145c:	4603      	mov	r3, r0
 800145e:	461c      	mov	r4, r3
							aux->datetime.getYear(), aux->datetime.getHour(), aux->datetime.getMinute(),
 8001460:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001462:	3305      	adds	r3, #5
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff3c 	bl	80012e2 <_ZN8Calendar7getYearEv>
 800146a:	4603      	mov	r3, r0
		len = sprintf(msg, "ID:%d | Data:%d/%d/%d %d:%d:%d PM:%d | Temperatura:%d,%d | Predição correta:%d\r\n", aux->id, aux->datetime.getMonth(),aux->datetime.getDay(),
 800146c:	461d      	mov	r5, r3
							aux->datetime.getYear(), aux->datetime.getHour(), aux->datetime.getMinute(),
 800146e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001470:	3301      	adds	r3, #1
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fe72 	bl	800115c <_ZN5Clock7getHourEv>
 8001478:	4603      	mov	r3, r0
		len = sprintf(msg, "ID:%d | Data:%d/%d/%d %d:%d:%d PM:%d | Temperatura:%d,%d | Predição correta:%d\r\n", aux->id, aux->datetime.getMonth(),aux->datetime.getDay(),
 800147a:	461e      	mov	r6, r3
							aux->datetime.getYear(), aux->datetime.getHour(), aux->datetime.getMinute(),
 800147c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800147e:	3301      	adds	r3, #1
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fe5f 	bl	8001144 <_ZN5Clock9getMinuteEv>
 8001486:	4603      	mov	r3, r0
		len = sprintf(msg, "ID:%d | Data:%d/%d/%d %d:%d:%d PM:%d | Temperatura:%d,%d | Predição correta:%d\r\n", aux->id, aux->datetime.getMonth(),aux->datetime.getDay(),
 8001488:	60bb      	str	r3, [r7, #8]
							aux->datetime.getSecond(),aux->datetime.getPMAM(),t1,t2,aux->pred_is_Correct);
 800148a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800148c:	3301      	adds	r3, #1
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fe4c 	bl	800112c <_ZN5Clock9getSecondEv>
 8001494:	4603      	mov	r3, r0
		len = sprintf(msg, "ID:%d | Data:%d/%d/%d %d:%d:%d PM:%d | Temperatura:%d,%d | Predição correta:%d\r\n", aux->id, aux->datetime.getMonth(),aux->datetime.getDay(),
 8001496:	607b      	str	r3, [r7, #4]
							aux->datetime.getSecond(),aux->datetime.getPMAM(),t1,t2,aux->pred_is_Correct);
 8001498:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800149a:	3301      	adds	r3, #1
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fe69 	bl	8001174 <_ZN5Clock7getPMAMEv>
 80014a2:	4603      	mov	r3, r0
		len = sprintf(msg, "ID:%d | Data:%d/%d/%d %d:%d:%d PM:%d | Temperatura:%d,%d | Predição correta:%d\r\n", aux->id, aux->datetime.getMonth(),aux->datetime.getDay(),
 80014a4:	603b      	str	r3, [r7, #0]
 80014a6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80014aa:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
							aux->datetime.getSecond(),aux->datetime.getPMAM(),t1,t2,aux->pred_is_Correct);
 80014ae:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80014b0:	7b09      	ldrb	r1, [r1, #12]
		len = sprintf(msg, "ID:%d | Data:%d/%d/%d %d:%d:%d PM:%d | Temperatura:%d,%d | Predição correta:%d\r\n", aux->id, aux->datetime.getMonth(),aux->datetime.getDay(),
 80014b2:	f107 0010 	add.w	r0, r7, #16
 80014b6:	9108      	str	r1, [sp, #32]
 80014b8:	9207      	str	r2, [sp, #28]
 80014ba:	9306      	str	r3, [sp, #24]
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	9205      	str	r2, [sp, #20]
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	9204      	str	r2, [sp, #16]
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	9303      	str	r3, [sp, #12]
 80014c8:	9602      	str	r6, [sp, #8]
 80014ca:	9501      	str	r5, [sp, #4]
 80014cc:	9400      	str	r4, [sp, #0]
 80014ce:	464b      	mov	r3, r9
 80014d0:	4642      	mov	r2, r8
 80014d2:	490e      	ldr	r1, [pc, #56]	; (800150c <_ZN6Serial8sendDataEv+0x148>)
 80014d4:	f005 fd22 	bl	8006f1c <siprintf>
 80014d8:	4603      	mov	r3, r0
 80014da:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83


		HAL_UART_Transmit(&huart2, (uint8_t *)msg, len, HAL_MAX_DELAY);
 80014de:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	f107 0110 	add.w	r1, r7, #16
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ec:	4808      	ldr	r0, [pc, #32]	; (8001510 <_ZN6Serial8sendDataEv+0x14c>)
 80014ee:	f003 f956 	bl	800479e <HAL_UART_Transmit>
	for(i = 0; i<length; i++){
 80014f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014f6:	3301      	adds	r3, #1
 80014f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80014fc:	e773      	b.n	80013e6 <_ZN6Serial8sendDataEv+0x22>
	}
}
 80014fe:	bf00      	nop
 8001500:	378c      	adds	r7, #140	; 0x8c
 8001502:	46bd      	mov	sp, r7
 8001504:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001508:	42c80000 	.word	0x42c80000
 800150c:	08009208 	.word	0x08009208
 8001510:	200007a4 	.word	0x200007a4

08001514 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_CRC_Init+0x20>)
 800151a:	4a07      	ldr	r2, [pc, #28]	; (8001538 <MX_CRC_Init+0x24>)
 800151c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_CRC_Init+0x20>)
 8001520:	f001 f84f 	bl	80025c2 <HAL_CRC_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800152a:	f000 fabf 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000628 	.word	0x20000628
 8001538:	40023000 	.word	0x40023000

0800153c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a0b      	ldr	r2, [pc, #44]	; (8001578 <HAL_CRC_MspInit+0x3c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d10d      	bne.n	800156a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	4b0a      	ldr	r3, [pc, #40]	; (800157c <HAL_CRC_MspInit+0x40>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a09      	ldr	r2, [pc, #36]	; (800157c <HAL_CRC_MspInit+0x40>)
 8001558:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b07      	ldr	r3, [pc, #28]	; (800157c <HAL_CRC_MspInit+0x40>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800156a:	bf00      	nop
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40023000 	.word	0x40023000
 800157c:	40023800 	.word	0x40023800

08001580 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	; 0x28
 8001584:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
 8001594:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	4b31      	ldr	r3, [pc, #196]	; (8001660 <MX_GPIO_Init+0xe0>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a30      	ldr	r2, [pc, #192]	; (8001660 <MX_GPIO_Init+0xe0>)
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b2e      	ldr	r3, [pc, #184]	; (8001660 <MX_GPIO_Init+0xe0>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	4b2a      	ldr	r3, [pc, #168]	; (8001660 <MX_GPIO_Init+0xe0>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a29      	ldr	r2, [pc, #164]	; (8001660 <MX_GPIO_Init+0xe0>)
 80015bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b27      	ldr	r3, [pc, #156]	; (8001660 <MX_GPIO_Init+0xe0>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	4b23      	ldr	r3, [pc, #140]	; (8001660 <MX_GPIO_Init+0xe0>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a22      	ldr	r2, [pc, #136]	; (8001660 <MX_GPIO_Init+0xe0>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b20      	ldr	r3, [pc, #128]	; (8001660 <MX_GPIO_Init+0xe0>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <MX_GPIO_Init+0xe0>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a1b      	ldr	r2, [pc, #108]	; (8001660 <MX_GPIO_Init+0xe0>)
 80015f4:	f043 0302 	orr.w	r3, r3, #2
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b19      	ldr	r3, [pc, #100]	; (8001660 <MX_GPIO_Init+0xe0>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001606:	2200      	movs	r2, #0
 8001608:	2120      	movs	r1, #32
 800160a:	4816      	ldr	r0, [pc, #88]	; (8001664 <MX_GPIO_Init+0xe4>)
 800160c:	f001 f97a 	bl	8002904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001610:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001616:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800161a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800161c:	2301      	movs	r3, #1
 800161e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	4619      	mov	r1, r3
 8001626:	4810      	ldr	r0, [pc, #64]	; (8001668 <MX_GPIO_Init+0xe8>)
 8001628:	f000 ffe8 	bl	80025fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800162c:	2320      	movs	r3, #32
 800162e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001630:	2301      	movs	r3, #1
 8001632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001634:	2301      	movs	r3, #1
 8001636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2300      	movs	r3, #0
 800163a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4619      	mov	r1, r3
 8001642:	4808      	ldr	r0, [pc, #32]	; (8001664 <MX_GPIO_Init+0xe4>)
 8001644:	f000 ffda 	bl	80025fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001648:	2200      	movs	r2, #0
 800164a:	2100      	movs	r1, #0
 800164c:	2028      	movs	r0, #40	; 0x28
 800164e:	f000 ff82 	bl	8002556 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001652:	2028      	movs	r0, #40	; 0x28
 8001654:	f000 ff9b 	bl	800258e <HAL_NVIC_EnableIRQ>

}
 8001658:	bf00      	nop
 800165a:	3728      	adds	r7, #40	; 0x28
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40023800 	.word	0x40023800
 8001664:	40020000 	.word	0x40020000
 8001668:	40020800 	.word	0x40020800

0800166c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <MX_I2C1_Init+0x50>)
 8001672:	4a13      	ldr	r2, [pc, #76]	; (80016c0 <MX_I2C1_Init+0x54>)
 8001674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <MX_I2C1_Init+0x50>)
 8001678:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <MX_I2C1_Init+0x58>)
 800167a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <MX_I2C1_Init+0x50>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <MX_I2C1_Init+0x50>)
 8001684:	2200      	movs	r2, #0
 8001686:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <MX_I2C1_Init+0x50>)
 800168a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800168e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001690:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <MX_I2C1_Init+0x50>)
 8001692:	2200      	movs	r2, #0
 8001694:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <MX_I2C1_Init+0x50>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <MX_I2C1_Init+0x50>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <MX_I2C1_Init+0x50>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016a8:	4804      	ldr	r0, [pc, #16]	; (80016bc <MX_I2C1_Init+0x50>)
 80016aa:	f001 f95d 	bl	8002968 <HAL_I2C_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016b4:	f000 f9fa 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000630 	.word	0x20000630
 80016c0:	40005400 	.word	0x40005400
 80016c4:	000186a0 	.word	0x000186a0

080016c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	; 0x28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a19      	ldr	r2, [pc, #100]	; (800174c <HAL_I2C_MspInit+0x84>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d12c      	bne.n	8001744 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	4b18      	ldr	r3, [pc, #96]	; (8001750 <HAL_I2C_MspInit+0x88>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a17      	ldr	r2, [pc, #92]	; (8001750 <HAL_I2C_MspInit+0x88>)
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <HAL_I2C_MspInit+0x88>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001706:	f44f 7340 	mov.w	r3, #768	; 0x300
 800170a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800170c:	2312      	movs	r3, #18
 800170e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001710:	2301      	movs	r3, #1
 8001712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001714:	2303      	movs	r3, #3
 8001716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001718:	2304      	movs	r3, #4
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4619      	mov	r1, r3
 8001722:	480c      	ldr	r0, [pc, #48]	; (8001754 <HAL_I2C_MspInit+0x8c>)
 8001724:	f000 ff6a 	bl	80025fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <HAL_I2C_MspInit+0x88>)
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	4a07      	ldr	r2, [pc, #28]	; (8001750 <HAL_I2C_MspInit+0x88>)
 8001732:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001736:	6413      	str	r3, [r2, #64]	; 0x40
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <HAL_I2C_MspInit+0x88>)
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001744:	bf00      	nop
 8001746:	3728      	adds	r7, #40	; 0x28
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40005400 	.word	0x40005400
 8001750:	40023800 	.word	0x40023800
 8001754:	40020400 	.word	0x40020400

08001758 <_ZN13ClockCalendarC1Ehhhhhhb>:
		void advance();
};

class ClockCalendar: public Clock, public Calendar{
	public:
		ClockCalendar(uint8_t mt, uint8_t d, uint8_t y, uint8_t h, uint8_t m, uint8_t s, bool pm):Clock(h, s, m, pm), Calendar(mt, d, y){};
 8001758:	b590      	push	{r4, r7, lr}
 800175a:	b085      	sub	sp, #20
 800175c:	af02      	add	r7, sp, #8
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	4608      	mov	r0, r1
 8001762:	4611      	mov	r1, r2
 8001764:	461a      	mov	r2, r3
 8001766:	4603      	mov	r3, r0
 8001768:	70fb      	strb	r3, [r7, #3]
 800176a:	460b      	mov	r3, r1
 800176c:	70bb      	strb	r3, [r7, #2]
 800176e:	4613      	mov	r3, r2
 8001770:	707b      	strb	r3, [r7, #1]
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	7f3c      	ldrb	r4, [r7, #28]
 8001776:	f897 2020 	ldrb.w	r2, [r7, #32]
 800177a:	7e39      	ldrb	r1, [r7, #24]
 800177c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	4623      	mov	r3, r4
 8001784:	f7ff fc9b 	bl	80010be <_ZN5ClockC1Ehhhb>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	1d18      	adds	r0, r3, #4
 800178c:	787b      	ldrb	r3, [r7, #1]
 800178e:	78ba      	ldrb	r2, [r7, #2]
 8001790:	78f9      	ldrb	r1, [r7, #3]
 8001792:	f7ff fd33 	bl	80011fc <_ZN8CalendarC1Ehhh>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4618      	mov	r0, r3
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	bd90      	pop	{r4, r7, pc}

080017a0 <_ZN5ModelC1Ev>:
static ai_handle temp_model = AI_HANDLE_NULL;

static ai_buffer ai_input[AI_TEMP_MODEL_IN_NUM] = AI_TEMP_MODEL_IN;
static ai_buffer ai_output[AI_TEMP_MODEL_OUT_NUM] = AI_TEMP_MODEL_OUT;

class Model{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	641a      	str	r2, [r3, #64]	; 0x40
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <_ZN13CommunicationC1Ev>:
#include "usart.h"
#include "queue.h"
#include "math.h"
#include <stdio.h>

class Communication{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	4a06      	ldr	r2, [pc, #24]	; (80017e0 <_ZN13CommunicationC1Ev+0x24>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3304      	adds	r3, #4
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 faf0 	bl	8001db4 <_ZN5QueueC1Ev>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	080092b8 	.word	0x080092b8

080017e4 <_ZN6SerialC1Ev>:
		void addDataToQueue(Data* data);
		bool verifyPrediction(float measure, float prediction);
		virtual void sendData() = 0;
};

class Serial: public Communication{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff ffe4 	bl	80017bc <_ZN13CommunicationC1Ev>
 80017f4:	4a03      	ldr	r2, [pc, #12]	; (8001804 <_ZN6SerialC1Ev+0x20>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	080092ac 	.word	0x080092ac

08001808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	b087      	sub	sp, #28
 800180c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800180e:	f000 fd31 	bl	8002274 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001812:	f000 f8b3 	bl	800197c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001816:	f7ff feb3 	bl	8001580 <MX_GPIO_Init>
  MX_I2C1_Init();
 800181a:	f7ff ff27 	bl	800166c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800181e:	f000 fc7d 	bl	800211c <MX_USART2_UART_Init>
  MX_CRC_Init();
 8001822:	f7ff fe77 	bl	8001514 <MX_CRC_Init>
  MX_TIM10_Init();
 8001826:	f000 fc2d 	bl	8002084 <MX_TIM10_Init>
  __HAL_RCC_CRC_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	603b      	str	r3, [r7, #0]
 800182e:	4b48      	ldr	r3, [pc, #288]	; (8001950 <main+0x148>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a47      	ldr	r2, [pc, #284]	; (8001950 <main+0x148>)
 8001834:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b45      	ldr	r3, [pc, #276]	; (8001950 <main+0x148>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001842:	603b      	str	r3, [r7, #0]
 8001844:	683b      	ldr	r3, [r7, #0]
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim10);
 8001846:	4843      	ldr	r0, [pc, #268]	; (8001954 <main+0x14c>)
 8001848:	f002 fd36 	bl	80042b8 <HAL_TIM_Base_Start_IT>
  mpu.init();
 800184c:	4842      	ldr	r0, [pc, #264]	; (8001958 <main+0x150>)
 800184e:	f7ff fb85 	bl	8000f5c <_ZN7MPU60504initEv>
  model.init();
 8001852:	4842      	ldr	r0, [pc, #264]	; (800195c <main+0x154>)
 8001854:	f000 f95e 	bl	8001b14 <_ZN5Model4initEv>
  comm = new Serial();
 8001858:	2010      	movs	r0, #16
 800185a:	f004 fd39 	bl	80062d0 <_Znwj>
 800185e:	4603      	mov	r3, r0
 8001860:	461c      	mov	r4, r3
 8001862:	4622      	mov	r2, r4
 8001864:	2300      	movs	r3, #0
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	6053      	str	r3, [r2, #4]
 800186a:	6093      	str	r3, [r2, #8]
 800186c:	60d3      	str	r3, [r2, #12]
 800186e:	4620      	mov	r0, r4
 8001870:	f7ff ffb8 	bl	80017e4 <_ZN6SerialC1Ev>
 8001874:	4b3a      	ldr	r3, [pc, #232]	; (8001960 <main+0x158>)
 8001876:	601c      	str	r4, [r3, #0]
  uint8_t deviceID = 2;
 8001878:	2302      	movs	r3, #2
 800187a:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//Realiza a aquisicao das medidas do sensor
	//Acumula 9 medidas para o buffer de entrada do modelo
	for (uint32_t i = 0; i < AI_TEMP_MODEL_IN_1_SIZE; i++)
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2b08      	cmp	r3, #8
 8001884:	d818      	bhi.n	80018b8 <main+0xb0>
	{

	  mpu.readTemperature();
 8001886:	4834      	ldr	r0, [pc, #208]	; (8001958 <main+0x150>)
 8001888:	f7ff fba6 	bl	8000fd8 <_ZN7MPU605015readTemperatureEv>
	  temperature = mpu.getTemperature();
 800188c:	4832      	ldr	r0, [pc, #200]	; (8001958 <main+0x150>)
 800188e:	f7ff fc07 	bl	80010a0 <_ZN7MPU605014getTemperatureEv>
 8001892:	eef0 7a40 	vmov.f32	s15, s0
 8001896:	4b33      	ldr	r3, [pc, #204]	; (8001964 <main+0x15c>)
 8001898:	edc3 7a00 	vstr	s15, [r3]
	  model.fillInput(temperature, i);
 800189c:	4b31      	ldr	r3, [pc, #196]	; (8001964 <main+0x15c>)
 800189e:	edd3 7a00 	vldr	s15, [r3]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4619      	mov	r1, r3
 80018a6:	eeb0 0a67 	vmov.f32	s0, s15
 80018aa:	482c      	ldr	r0, [pc, #176]	; (800195c <main+0x154>)
 80018ac:	f000 f9bc 	bl	8001c28 <_ZN5Model9fillInputEfi>
	for (uint32_t i = 0; i < AI_TEMP_MODEL_IN_1_SIZE; i++)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	3301      	adds	r3, #1
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	e7e3      	b.n	8001880 <main+0x78>

	}

	//Predicao do proximo valor de temperatura
	pred = model.run();
 80018b8:	4828      	ldr	r0, [pc, #160]	; (800195c <main+0x154>)
 80018ba:	f000 f9cb 	bl	8001c54 <_ZN5Model3runEv>
 80018be:	eef0 7a40 	vmov.f32	s15, s0
 80018c2:	4b29      	ldr	r3, [pc, #164]	; (8001968 <main+0x160>)
 80018c4:	edc3 7a00 	vstr	s15, [r3]

	//Aquisicao de um novo valor de temperatura
	measure = mpu.getTemperature();
 80018c8:	4823      	ldr	r0, [pc, #140]	; (8001958 <main+0x150>)
 80018ca:	f7ff fbe9 	bl	80010a0 <_ZN7MPU605014getTemperatureEv>
 80018ce:	eef0 7a40 	vmov.f32	s15, s0
 80018d2:	4b26      	ldr	r3, [pc, #152]	; (800196c <main+0x164>)
 80018d4:	edc3 7a00 	vstr	s15, [r3]

	//Compara a predicao com o valor medido
	predIsCorrect = comm->verifyPrediction(measure, pred);
 80018d8:	4b21      	ldr	r3, [pc, #132]	; (8001960 <main+0x158>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a23      	ldr	r2, [pc, #140]	; (800196c <main+0x164>)
 80018de:	edd2 7a00 	vldr	s15, [r2]
 80018e2:	4a21      	ldr	r2, [pc, #132]	; (8001968 <main+0x160>)
 80018e4:	ed92 7a00 	vldr	s14, [r2]
 80018e8:	eef0 0a47 	vmov.f32	s1, s14
 80018ec:	eeb0 0a67 	vmov.f32	s0, s15
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fd3f 	bl	8001374 <_ZN13Communication16verifyPredictionEff>
 80018f6:	4603      	mov	r3, r0
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <main+0x168>)
 80018fc:	701a      	strb	r2, [r3, #0]

	//Ponteiro com as informacoes para adicionar na fila
	pd = new Data(deviceID, cc, measure, predIsCorrect);
 80018fe:	4a1d      	ldr	r2, [pc, #116]	; (8001974 <main+0x16c>)
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001906:	6018      	str	r0, [r3, #0]
 8001908:	3304      	adds	r3, #4
 800190a:	8019      	strh	r1, [r3, #0]
 800190c:	3302      	adds	r3, #2
 800190e:	0c0a      	lsrs	r2, r1, #16
 8001910:	701a      	strb	r2, [r3, #0]
 8001912:	2010      	movs	r0, #16
 8001914:	f004 fcdc 	bl	80062d0 <_Znwj>
 8001918:	4603      	mov	r3, r0
 800191a:	461c      	mov	r4, r3
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <main+0x164>)
 800191e:	edd3 7a00 	vldr	s15, [r3]
 8001922:	4b13      	ldr	r3, [pc, #76]	; (8001970 <main+0x168>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	7af9      	ldrb	r1, [r7, #11]
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	eeb0 0a67 	vmov.f32	s0, s15
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	cb0c      	ldmia	r3, {r2, r3}
 8001932:	4620      	mov	r0, r4
 8001934:	f000 f9ec 	bl	8001d10 <_ZN4DataC1Eh13ClockCalendarfb>
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <main+0x170>)
 800193a:	601c      	str	r4, [r3, #0]

	//Adiciona elemento na fila
	comm->addDataToQueue(pd);
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <main+0x158>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a0d      	ldr	r2, [pc, #52]	; (8001978 <main+0x170>)
 8001942:	6812      	ldr	r2, [r2, #0]
 8001944:	4611      	mov	r1, r2
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff fd05 	bl	8001356 <_ZN13Communication14addDataToQueueEP4Data>

    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
  }
 800194c:	e796      	b.n	800187c <main+0x74>
 800194e:	bf00      	nop
 8001950:	40023800 	.word	0x40023800
 8001954:	2000075c 	.word	0x2000075c
 8001958:	20000684 	.word	0x20000684
 800195c:	2000068c 	.word	0x2000068c
 8001960:	20000688 	.word	0x20000688
 8001964:	20000748 	.word	0x20000748
 8001968:	2000074c 	.word	0x2000074c
 800196c:	20000750 	.word	0x20000750
 8001970:	20000744 	.word	0x20000744
 8001974:	20000738 	.word	0x20000738
 8001978:	20000740 	.word	0x20000740

0800197c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b094      	sub	sp, #80	; 0x50
 8001980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001982:	f107 0320 	add.w	r3, r7, #32
 8001986:	2230      	movs	r2, #48	; 0x30
 8001988:	2100      	movs	r1, #0
 800198a:	4618      	mov	r0, r3
 800198c:	f004 fd20 	bl	80063d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001990:	f107 030c 	add.w	r3, r7, #12
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a0:	2300      	movs	r3, #0
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	4b2e      	ldr	r3, [pc, #184]	; (8001a60 <_Z18SystemClock_Configv+0xe4>)
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	4a2d      	ldr	r2, [pc, #180]	; (8001a60 <_Z18SystemClock_Configv+0xe4>)
 80019aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ae:	6413      	str	r3, [r2, #64]	; 0x40
 80019b0:	4b2b      	ldr	r3, [pc, #172]	; (8001a60 <_Z18SystemClock_Configv+0xe4>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80019bc:	2300      	movs	r3, #0
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	4b28      	ldr	r3, [pc, #160]	; (8001a64 <_Z18SystemClock_Configv+0xe8>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019c8:	4a26      	ldr	r2, [pc, #152]	; (8001a64 <_Z18SystemClock_Configv+0xe8>)
 80019ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b24      	ldr	r3, [pc, #144]	; (8001a64 <_Z18SystemClock_Configv+0xe8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019dc:	2302      	movs	r3, #2
 80019de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019e0:	2301      	movs	r3, #1
 80019e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019e4:	2310      	movs	r3, #16
 80019e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e8:	2302      	movs	r3, #2
 80019ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019ec:	2300      	movs	r3, #0
 80019ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80019f0:	2310      	movs	r3, #16
 80019f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80019f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80019f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80019fa:	2304      	movs	r3, #4
 80019fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80019fe:	2307      	movs	r3, #7
 8001a00:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a02:	f107 0320 	add.w	r3, r7, #32
 8001a06:	4618      	mov	r0, r3
 8001a08:	f001 ff6e 	bl	80038e8 <HAL_RCC_OscConfig>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	bf14      	ite	ne
 8001a12:	2301      	movne	r3, #1
 8001a14:	2300      	moveq	r3, #0
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 8001a1c:	f000 f846 	bl	8001aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a20:	230f      	movs	r3, #15
 8001a22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a24:	2302      	movs	r3, #2
 8001a26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a36:	f107 030c 	add.w	r3, r7, #12
 8001a3a:	2102      	movs	r1, #2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f002 f9cb 	bl	8003dd8 <HAL_RCC_ClockConfig>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	bf14      	ite	ne
 8001a48:	2301      	movne	r3, #1
 8001a4a:	2300      	moveq	r3, #0
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8001a52:	f000 f82b 	bl	8001aac <Error_Handler>
  }
}
 8001a56:	bf00      	nop
 8001a58:	3750      	adds	r7, #80	; 0x50
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40007000 	.word	0x40007000

08001a68 <HAL_GPIO_EXTI_Callback>:
  * @retval None
  */

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	80fb      	strh	r3, [r7, #6]
	//Envia os dados para o computador
	comm->sendData();
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_GPIO_EXTI_Callback+0x24>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <HAL_GPIO_EXTI_Callback+0x24>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4798      	blx	r3
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000688 	.word	0x20000688

08001a90 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	//Incrementa a timestamp a cada 1 segundo
	cc.advance();
 8001a98:	4803      	ldr	r0, [pc, #12]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001a9a:	f7ff fc2e 	bl	80012fa <_ZN13ClockCalendar7advanceEv>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000738 	.word	0x20000738

08001aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab0:	b672      	cpsid	i
}
 8001ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <Error_Handler+0x8>
	...

08001ab8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af04      	add	r7, sp, #16
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d115      	bne.n	8001af4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d110      	bne.n	8001af4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
Model model;
 8001ad2:	480a      	ldr	r0, [pc, #40]	; (8001afc <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001ad4:	f7ff fe64 	bl	80017a0 <_ZN5ModelC1Ev>
ClockCalendar cc(11, 30, 22, 10, 9, 59, 1);
 8001ad8:	2301      	movs	r3, #1
 8001ada:	9303      	str	r3, [sp, #12]
 8001adc:	233b      	movs	r3, #59	; 0x3b
 8001ade:	9302      	str	r3, [sp, #8]
 8001ae0:	2309      	movs	r3, #9
 8001ae2:	9301      	str	r3, [sp, #4]
 8001ae4:	230a      	movs	r3, #10
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	2316      	movs	r3, #22
 8001aea:	221e      	movs	r2, #30
 8001aec:	210b      	movs	r1, #11
 8001aee:	4804      	ldr	r0, [pc, #16]	; (8001b00 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001af0:	f7ff fe32 	bl	8001758 <_ZN13ClockCalendarC1Ehhhhhhb>
}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	2000068c 	.word	0x2000068c
 8001b00:	20000738 	.word	0x20000738

08001b04 <_GLOBAL__sub_I_mpu>:
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	f7ff ffd3 	bl	8001ab8 <_Z41__static_initialization_and_destruction_0ii>
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <_ZN5Model4initEv>:
 */


#include "model.h"

void Model::init(){
 8001b14:	b590      	push	{r4, r7, lr}
 8001b16:	b08f      	sub	sp, #60	; 0x3c
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]

	ai_network_params ai_params = {
 8001b1c:	f107 0308 	add.w	r3, r7, #8
 8001b20:	2230      	movs	r2, #48	; 0x30
 8001b22:	2100      	movs	r1, #0
 8001b24:	4618      	mov	r0, r3
 8001b26:	f004 fc53 	bl	80063d0 <memset>
 8001b2a:	4b37      	ldr	r3, [pc, #220]	; (8001c08 <_ZN5Model4initEv+0xf4>)
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	2301      	movs	r3, #1
 8001b30:	81bb      	strh	r3, [r7, #12]
 8001b32:	2301      	movs	r3, #1
 8001b34:	81fb      	strh	r3, [r7, #14]
 8001b36:	2301      	movs	r3, #1
 8001b38:	823b      	strh	r3, [r7, #16]
 8001b3a:	f44f 7331 	mov.w	r3, #708	; 0x2c4
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	4b32      	ldr	r3, [pc, #200]	; (8001c0c <_ZN5Model4initEv+0xf8>)
 8001b42:	623b      	str	r3, [r7, #32]
 8001b44:	2301      	movs	r3, #1
 8001b46:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001b48:	2301      	movs	r3, #1
 8001b4a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	853b      	strh	r3, [r7, #40]	; 0x28
 8001b50:	2340      	movs	r3, #64	; 0x40
 8001b52:	62fb      	str	r3, [r7, #44]	; 0x2c
		AI_TEMP_MODEL_DATA_WEIGHTS(ai_temp_model_data_weights_get()),
 8001b54:	f003 fa90 	bl	8005078 <ai_temp_model_data_weights_get>
 8001b58:	4603      	mov	r3, r0
		AI_TEMP_MODEL_DATA_ACTIVATIONS(activations)
	};
 8001b5a:	61bb      	str	r3, [r7, #24]
		AI_TEMP_MODEL_DATA_ACTIVATIONS(activations)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3344      	adds	r3, #68	; 0x44
	};
 8001b60:	633b      	str	r3, [r7, #48]	; 0x30

	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3384      	adds	r3, #132	; 0x84
 8001b66:	4a2a      	ldr	r2, [pc, #168]	; (8001c10 <_ZN5Model4initEv+0xfc>)
 8001b68:	6113      	str	r3, [r2, #16]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	33a8      	adds	r3, #168	; 0xa8
 8001b6e:	4a29      	ldr	r2, [pc, #164]	; (8001c14 <_ZN5Model4initEv+0x100>)
 8001b70:	6113      	str	r3, [r2, #16]

	ai_err = ai_temp_model_create(&temp_model, AI_TEMP_MODEL_DATA_CONFIG);
 8001b72:	687c      	ldr	r4, [r7, #4]
 8001b74:	2100      	movs	r1, #0
 8001b76:	4828      	ldr	r0, [pc, #160]	; (8001c18 <_ZN5Model4initEv+0x104>)
 8001b78:	f003 fa18 	bl	8004fac <ai_temp_model_create>
 8001b7c:	6020      	str	r0, [r4, #0]
	if (ai_err.type != AI_ERROR_NONE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d01a      	beq.n	8001bbc <_ZN5Model4initEv+0xa8>
	{
		buf_len = sprintf(buf, "E: AI error - type=%d code=%d\r\n", ai_err.type, ai_err.code);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f103 000c 	add.w	r0, r3, #12
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001b9a:	4920      	ldr	r1, [pc, #128]	; (8001c1c <_ZN5Model4initEv+0x108>)
 8001b9c:	f005 f9be 	bl	8006f1c <siprintf>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f103 010c 	add.w	r1, r3, #12
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	2364      	movs	r3, #100	; 0x64
 8001bb4:	481a      	ldr	r0, [pc, #104]	; (8001c20 <_ZN5Model4initEv+0x10c>)
 8001bb6:	f002 fdf2 	bl	800479e <HAL_UART_Transmit>
		while(1);
 8001bba:	e7fe      	b.n	8001bba <_ZN5Model4initEv+0xa6>
	}

	if (!ai_temp_model_init(temp_model, &ai_params))
 8001bbc:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <_ZN5Model4initEv+0x104>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f107 0208 	add.w	r2, r7, #8
 8001bc4:	4611      	mov	r1, r2
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f003 fa06 	bl	8004fd8 <ai_temp_model_init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	f083 0301 	eor.w	r3, r3, #1
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d013      	beq.n	8001c00 <_ZN5Model4initEv+0xec>
	{
		buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	330c      	adds	r3, #12
 8001bdc:	4911      	ldr	r1, [pc, #68]	; (8001c24 <_ZN5Model4initEv+0x110>)
 8001bde:	4618      	mov	r0, r3
 8001be0:	f005 f99c 	bl	8006f1c <siprintf>
 8001be4:	4602      	mov	r2, r0
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f103 010c 	add.w	r1, r3, #12
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	2364      	movs	r3, #100	; 0x64
 8001bf8:	4809      	ldr	r0, [pc, #36]	; (8001c20 <_ZN5Model4initEv+0x10c>)
 8001bfa:	f002 fdd0 	bl	800479e <HAL_UART_Transmit>
		while(1);
 8001bfe:	e7fe      	b.n	8001bfe <_ZN5Model4initEv+0xea>
	}
}
 8001c00:	bf00      	nop
 8001c02:	373c      	adds	r7, #60	; 0x3c
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd90      	pop	{r4, r7, pc}
 8001c08:	40040440 	.word	0x40040440
 8001c0c:	00040440 	.word	0x00040440
 8001c10:	20000000 	.word	0x20000000
 8001c14:	20000018 	.word	0x20000018
 8001c18:	20000754 	.word	0x20000754
 8001c1c:	0800925c 	.word	0x0800925c
 8001c20:	200007a4 	.word	0x200007a4
 8001c24:	0800927c 	.word	0x0800927c

08001c28 <_ZN5Model9fillInputEfi>:

void Model::fillInput(float temperature, int position){
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c34:	6079      	str	r1, [r7, #4]
	((ai_float *)in_data)[position] = (ai_float)temperature;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	601a      	str	r2, [r3, #0]
}
 8001c46:	bf00      	nop
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <_ZN5Model3runEv>:


float Model::run(){
 8001c54:	b590      	push	{r4, r7, lr}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	nbatch = ai_temp_model_run(temp_model, &ai_input[0], &ai_output[0]);
 8001c5c:	4b1e      	ldr	r3, [pc, #120]	; (8001cd8 <_ZN5Model3runEv+0x84>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a1e      	ldr	r2, [pc, #120]	; (8001cdc <_ZN5Model3runEv+0x88>)
 8001c62:	491f      	ldr	r1, [pc, #124]	; (8001ce0 <_ZN5Model3runEv+0x8c>)
 8001c64:	4618      	mov	r0, r3
 8001c66:	f003 f9f6 	bl	8005056 <ai_temp_model_run>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	605a      	str	r2, [r3, #4]
	if (nbatch != 1) {
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d020      	beq.n	8001cba <_ZN5Model3runEv+0x66>
		ai_err = ai_temp_model_get_error(temp_model);
 8001c78:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <_ZN5Model3runEv+0x84>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	687c      	ldr	r4, [r7, #4]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f003 f988 	bl	8004f94 <ai_temp_model_get_error>
 8001c84:	6020      	str	r0, [r4, #0]
		buf_len = sprintf(buf, "E: AI error - type=%d code=%d\r\n", ai_err.type, ai_err.code);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f103 000c 	add.w	r0, r3, #12
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	461a      	mov	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001c9a:	4912      	ldr	r1, [pc, #72]	; (8001ce4 <_ZN5Model3runEv+0x90>)
 8001c9c:	f005 f93e 	bl	8006f1c <siprintf>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f103 010c 	add.w	r1, r3, #12
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	2364      	movs	r3, #100	; 0x64
 8001cb4:	480c      	ldr	r0, [pc, #48]	; (8001ce8 <_ZN5Model3runEv+0x94>)
 8001cb6:	f002 fd72 	bl	800479e <HAL_UART_Transmit>
	}

	// Read output (predicted y) of neural network
	prediction = ((float *)out_data)[0];
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	33a8      	adds	r3, #168	; 0xa8
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	609a      	str	r2, [r3, #8]

	return prediction;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	ee07 3a90 	vmov	s15, r3
}
 8001ccc:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd90      	pop	{r4, r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000754 	.word	0x20000754
 8001cdc:	20000018 	.word	0x20000018
 8001ce0:	20000000 	.word	0x20000000
 8001ce4:	0800925c 	.word	0x0800925c
 8001ce8:	200007a4 	.word	0x200007a4

08001cec <_ZN13ClockCalendarC1Ev>:
		ClockCalendar():Clock(), Calendar(){};
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff fa01 	bl	80010fe <_ZN5ClockC1Ev>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3304      	adds	r3, #4
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fa98 	bl	8001236 <_ZN8CalendarC1Ev>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <_ZN4DataC1Eh13ClockCalendarfb>:
 *      Author: leocl
 */

#include "node.h"

Data::Data(uint8_t i, ClockCalendar dat, float t, bool c){
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6178      	str	r0, [r7, #20]
 8001d18:	4608      	mov	r0, r1
 8001d1a:	f107 0108 	add.w	r1, r7, #8
 8001d1e:	e881 000c 	stmia.w	r1, {r2, r3}
 8001d22:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d26:	4603      	mov	r3, r0
 8001d28:	74fb      	strb	r3, [r7, #19]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff ffdc 	bl	8001cec <_ZN13ClockCalendarC1Ev>
		id = i;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	7cfa      	ldrb	r2, [r7, #19]
 8001d38:	701a      	strb	r2, [r3, #0]
		datetime = dat;
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	f107 0208 	add.w	r2, r7, #8
 8001d42:	6810      	ldr	r0, [r2, #0]
 8001d44:	6018      	str	r0, [r3, #0]
 8001d46:	8891      	ldrh	r1, [r2, #4]
 8001d48:	7992      	ldrb	r2, [r2, #6]
 8001d4a:	8099      	strh	r1, [r3, #4]
 8001d4c:	719a      	strb	r2, [r3, #6]
		temperature = t;
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	609a      	str	r2, [r3, #8]
		pred_is_Correct = c;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d5a:	731a      	strb	r2, [r3, #12]
	}
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <_ZN4DataC1Ev>:

Data::Data(){
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b084      	sub	sp, #16
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3301      	adds	r3, #1
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ffba 	bl	8001cec <_ZN13ClockCalendarC1Ev>
	id = 0;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	701a      	strb	r2, [r3, #0]
	datetime = ClockCalendar();
 8001d7e:	f107 0308 	add.w	r3, r7, #8
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff ffb2 	bl	8001cec <_ZN13ClockCalendarC1Ev>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	f107 0208 	add.w	r2, r7, #8
 8001d90:	6810      	ldr	r0, [r2, #0]
 8001d92:	6018      	str	r0, [r3, #0]
 8001d94:	8891      	ldrh	r1, [r2, #4]
 8001d96:	7992      	ldrb	r2, [r2, #6]
 8001d98:	8099      	strh	r1, [r3, #4]
 8001d9a:	719a      	strb	r2, [r3, #6]
	temperature = 0;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
	pred_is_Correct = 0;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	731a      	strb	r2, [r3, #12]
}
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4618      	mov	r0, r3
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <_ZN5QueueC1Ev>:
 *  Created on: 30 de nov de 2022
 *      Author: leocl
 */
#include "queue.h"

Queue::Queue() {
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
   head = 0;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
   tail = 0;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	605a      	str	r2, [r3, #4]
   length = 0;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
}
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <_ZN5Queue4LinkC1EP4DataPS0_S3_>:
  head = 0; // Officially empty
  tail = 0;
  length = 0;
}

Queue::Link::Link(Data* dat, Link* prv, Link* nxt) {
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
 8001de8:	603b      	str	r3, [r7, #0]
  data = dat;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	68ba      	ldr	r2, [r7, #8]
 8001dee:	601a      	str	r2, [r3, #0]
  prev = prv;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	605a      	str	r2, [r3, #4]
  next = nxt;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	609a      	str	r2, [r3, #8]
}
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <_ZN5Queue4LinkD1Ev>:

Queue::Link::~Link() {
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
//  delete prev;
}
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4618      	mov	r0, r3
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <_ZN5Queue6insertEP4Data>:

void Queue::insert(Data* dat) {
 8001e20:	b590      	push	{r4, r7, lr}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  if (head == 0){
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d111      	bne.n	8001e56 <_ZN5Queue6insertEP4Data+0x36>
     tail = new Link(dat, 0, 0);
 8001e32:	200c      	movs	r0, #12
 8001e34:	f004 fa4c 	bl	80062d0 <_Znwj>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	461c      	mov	r4, r3
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	2200      	movs	r2, #0
 8001e40:	6839      	ldr	r1, [r7, #0]
 8001e42:	4620      	mov	r0, r4
 8001e44:	f7ff ffca 	bl	8001ddc <_ZN5Queue4LinkC1EP4DataPS0_S3_>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	605c      	str	r4, [r3, #4]
     head = tail;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	e013      	b.n	8001e7e <_ZN5Queue6insertEP4Data+0x5e>
  } else {
     tail->next = new Link(dat, tail, 0);
 8001e56:	200c      	movs	r0, #12
 8001e58:	f004 fa3a 	bl	80062d0 <_Znwj>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	461c      	mov	r4, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	2300      	movs	r3, #0
 8001e66:	6839      	ldr	r1, [r7, #0]
 8001e68:	4620      	mov	r0, r4
 8001e6a:	f7ff ffb7 	bl	8001ddc <_ZN5Queue4LinkC1EP4DataPS0_S3_>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	609c      	str	r4, [r3, #8]
     tail = tail->next;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	605a      	str	r2, [r3, #4]
  }
  length++;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	1c5a      	adds	r2, r3, #1
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	609a      	str	r2, [r3, #8]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd90      	pop	{r4, r7, pc}

08001e90 <_ZN5Queue6removeEv>:

Data* Queue::remove() {
 8001e90:	b590      	push	{r4, r7, lr}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
   Data* result;
   if(length == 0){
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d109      	bne.n	8001eb4 <_ZN5Queue6removeEv+0x24>
      result = new Data();
 8001ea0:	2010      	movs	r0, #16
 8001ea2:	f004 fa15 	bl	80062d0 <_Znwj>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	461c      	mov	r4, r3
 8001eaa:	4620      	mov	r0, r4
 8001eac:	f7ff ff5b 	bl	8001d66 <_ZN4DataC1Ev>
 8001eb0:	60fc      	str	r4, [r7, #12]
      }
      length--;
      if (length == 0) tail = 0;
      return result;
   }
}
 8001eb2:	e02a      	b.n	8001f0a <_ZN5Queue6removeEv+0x7a>
      result = head->data;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	60fb      	str	r3, [r7, #12]
      Link* oldHead = head;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	60bb      	str	r3, [r7, #8]
      head = head->next;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	601a      	str	r2, [r3, #0]
      if (head != 0){
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00d      	beq.n	8001ef0 <_ZN5Queue6removeEv+0x60>
         head->prev = 0;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	605a      	str	r2, [r3, #4]
         delete oldHead;
 8001edc:	68bc      	ldr	r4, [r7, #8]
 8001ede:	2c00      	cmp	r4, #0
 8001ee0:	d006      	beq.n	8001ef0 <_ZN5Queue6removeEv+0x60>
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	f7ff ff91 	bl	8001e0a <_ZN5Queue4LinkD1Ev>
 8001ee8:	210c      	movs	r1, #12
 8001eea:	4620      	mov	r0, r4
 8001eec:	f004 f9ee 	bl	80062cc <_ZdlPvj>
      length--;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	1e5a      	subs	r2, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
      if (length == 0) tail = 0;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d102      	bne.n	8001f08 <_ZN5Queue6removeEv+0x78>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	605a      	str	r2, [r3, #4]
      return result;
 8001f08:	68fb      	ldr	r3, [r7, #12]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd90      	pop	{r4, r7, pc}

08001f12 <_ZN5Queue9getLengthEv>:

uint32_t Queue::getLength() {
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
	return length;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	607b      	str	r3, [r7, #4]
 8001f36:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <HAL_MspInit+0x4c>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	4a0f      	ldr	r2, [pc, #60]	; (8001f78 <HAL_MspInit+0x4c>)
 8001f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f40:	6453      	str	r3, [r2, #68]	; 0x44
 8001f42:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <HAL_MspInit+0x4c>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	603b      	str	r3, [r7, #0]
 8001f52:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <HAL_MspInit+0x4c>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	4a08      	ldr	r2, [pc, #32]	; (8001f78 <HAL_MspInit+0x4c>)
 8001f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f5e:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <HAL_MspInit+0x4c>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f66:	603b      	str	r3, [r7, #0]
 8001f68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f6a:	2007      	movs	r0, #7
 8001f6c:	f000 fae8 	bl	8002540 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40023800 	.word	0x40023800

08001f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f80:	e7fe      	b.n	8001f80 <NMI_Handler+0x4>

08001f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f86:	e7fe      	b.n	8001f86 <HardFault_Handler+0x4>

08001f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f8c:	e7fe      	b.n	8001f8c <MemManage_Handler+0x4>

08001f8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f92:	e7fe      	b.n	8001f92 <BusFault_Handler+0x4>

08001f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <UsageFault_Handler+0x4>

08001f9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fc8:	f000 f9a6 	bl	8002318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001fd4:	4802      	ldr	r0, [pc, #8]	; (8001fe0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001fd6:	f002 f9d1 	bl	800437c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	2000075c 	.word	0x2000075c

08001fe4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001fe8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001fec:	f000 fca4 	bl	8002938 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ffc:	4a14      	ldr	r2, [pc, #80]	; (8002050 <_sbrk+0x5c>)
 8001ffe:	4b15      	ldr	r3, [pc, #84]	; (8002054 <_sbrk+0x60>)
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002008:	4b13      	ldr	r3, [pc, #76]	; (8002058 <_sbrk+0x64>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d102      	bne.n	8002016 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002010:	4b11      	ldr	r3, [pc, #68]	; (8002058 <_sbrk+0x64>)
 8002012:	4a12      	ldr	r2, [pc, #72]	; (800205c <_sbrk+0x68>)
 8002014:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <_sbrk+0x64>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	429a      	cmp	r2, r3
 8002022:	d207      	bcs.n	8002034 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002024:	f004 f98c 	bl	8006340 <__errno>
 8002028:	4603      	mov	r3, r0
 800202a:	220c      	movs	r2, #12
 800202c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800202e:	f04f 33ff 	mov.w	r3, #4294967295
 8002032:	e009      	b.n	8002048 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002034:	4b08      	ldr	r3, [pc, #32]	; (8002058 <_sbrk+0x64>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800203a:	4b07      	ldr	r3, [pc, #28]	; (8002058 <_sbrk+0x64>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	4a05      	ldr	r2, [pc, #20]	; (8002058 <_sbrk+0x64>)
 8002044:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002046:	68fb      	ldr	r3, [r7, #12]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20018000 	.word	0x20018000
 8002054:	00000800 	.word	0x00000800
 8002058:	20000758 	.word	0x20000758
 800205c:	20000870 	.word	0x20000870

08002060 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <SystemInit+0x20>)
 8002066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206a:	4a05      	ldr	r2, [pc, #20]	; (8002080 <SystemInit+0x20>)
 800206c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002070:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002088:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <MX_TIM10_Init+0x40>)
 800208a:	4a0f      	ldr	r2, [pc, #60]	; (80020c8 <MX_TIM10_Init+0x44>)
 800208c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8400-1;
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <MX_TIM10_Init+0x40>)
 8002090:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002094:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <MX_TIM10_Init+0x40>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000;
 800209c:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <MX_TIM10_Init+0x40>)
 800209e:	f242 7210 	movw	r2, #10000	; 0x2710
 80020a2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a4:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <MX_TIM10_Init+0x40>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <MX_TIM10_Init+0x40>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80020b0:	4804      	ldr	r0, [pc, #16]	; (80020c4 <MX_TIM10_Init+0x40>)
 80020b2:	f002 f8b1 	bl	8004218 <HAL_TIM_Base_Init>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80020bc:	f7ff fcf6 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	2000075c 	.word	0x2000075c
 80020c8:	40014400 	.word	0x40014400

080020cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0e      	ldr	r2, [pc, #56]	; (8002114 <HAL_TIM_Base_MspInit+0x48>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d115      	bne.n	800210a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <HAL_TIM_Base_MspInit+0x4c>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	4a0c      	ldr	r2, [pc, #48]	; (8002118 <HAL_TIM_Base_MspInit+0x4c>)
 80020e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ec:	6453      	str	r3, [r2, #68]	; 0x44
 80020ee:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <HAL_TIM_Base_MspInit+0x4c>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2100      	movs	r1, #0
 80020fe:	2019      	movs	r0, #25
 8002100:	f000 fa29 	bl	8002556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002104:	2019      	movs	r0, #25
 8002106:	f000 fa42 	bl	800258e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40014400 	.word	0x40014400
 8002118:	40023800 	.word	0x40023800

0800211c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002120:	4b11      	ldr	r3, [pc, #68]	; (8002168 <MX_USART2_UART_Init+0x4c>)
 8002122:	4a12      	ldr	r2, [pc, #72]	; (800216c <MX_USART2_UART_Init+0x50>)
 8002124:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <MX_USART2_UART_Init+0x4c>)
 8002128:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800212c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800212e:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <MX_USART2_UART_Init+0x4c>)
 8002130:	2200      	movs	r2, #0
 8002132:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <MX_USART2_UART_Init+0x4c>)
 8002136:	2200      	movs	r2, #0
 8002138:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800213a:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <MX_USART2_UART_Init+0x4c>)
 800213c:	2200      	movs	r2, #0
 800213e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002140:	4b09      	ldr	r3, [pc, #36]	; (8002168 <MX_USART2_UART_Init+0x4c>)
 8002142:	220c      	movs	r2, #12
 8002144:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002146:	4b08      	ldr	r3, [pc, #32]	; (8002168 <MX_USART2_UART_Init+0x4c>)
 8002148:	2200      	movs	r2, #0
 800214a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <MX_USART2_UART_Init+0x4c>)
 800214e:	2200      	movs	r2, #0
 8002150:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002152:	4805      	ldr	r0, [pc, #20]	; (8002168 <MX_USART2_UART_Init+0x4c>)
 8002154:	f002 fad6 	bl	8004704 <HAL_UART_Init>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800215e:	f7ff fca5 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	200007a4 	.word	0x200007a4
 800216c:	40004400 	.word	0x40004400

08002170 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	; 0x28
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a21      	ldr	r2, [pc, #132]	; (8002214 <HAL_UART_MspInit+0xa4>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d13b      	bne.n	800220a <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	4b20      	ldr	r3, [pc, #128]	; (8002218 <HAL_UART_MspInit+0xa8>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	4a1f      	ldr	r2, [pc, #124]	; (8002218 <HAL_UART_MspInit+0xa8>)
 800219c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a0:	6413      	str	r3, [r2, #64]	; 0x40
 80021a2:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <HAL_UART_MspInit+0xa8>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	4b19      	ldr	r3, [pc, #100]	; (8002218 <HAL_UART_MspInit+0xa8>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	4a18      	ldr	r2, [pc, #96]	; (8002218 <HAL_UART_MspInit+0xa8>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6313      	str	r3, [r2, #48]	; 0x30
 80021be:	4b16      	ldr	r3, [pc, #88]	; (8002218 <HAL_UART_MspInit+0xa8>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021ca:	2304      	movs	r3, #4
 80021cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d6:	2303      	movs	r3, #3
 80021d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021da:	2307      	movs	r3, #7
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021de:	f107 0314 	add.w	r3, r7, #20
 80021e2:	4619      	mov	r1, r3
 80021e4:	480d      	ldr	r0, [pc, #52]	; (800221c <HAL_UART_MspInit+0xac>)
 80021e6:	f000 fa09 	bl	80025fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART_RX_Pin;
 80021ea:	2308      	movs	r3, #8
 80021ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ee:	2302      	movs	r3, #2
 80021f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f6:	2300      	movs	r3, #0
 80021f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021fa:	2307      	movs	r3, #7
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 80021fe:	f107 0314 	add.w	r3, r7, #20
 8002202:	4619      	mov	r1, r3
 8002204:	4805      	ldr	r0, [pc, #20]	; (800221c <HAL_UART_MspInit+0xac>)
 8002206:	f000 f9f9 	bl	80025fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800220a:	bf00      	nop
 800220c:	3728      	adds	r7, #40	; 0x28
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40004400 	.word	0x40004400
 8002218:	40023800 	.word	0x40023800
 800221c:	40020000 	.word	0x40020000

08002220 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002220:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002258 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002224:	480d      	ldr	r0, [pc, #52]	; (800225c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002226:	490e      	ldr	r1, [pc, #56]	; (8002260 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002228:	4a0e      	ldr	r2, [pc, #56]	; (8002264 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800222c:	e002      	b.n	8002234 <LoopCopyDataInit>

0800222e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800222e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002232:	3304      	adds	r3, #4

08002234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002238:	d3f9      	bcc.n	800222e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223a:	4a0b      	ldr	r2, [pc, #44]	; (8002268 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800223c:	4c0b      	ldr	r4, [pc, #44]	; (800226c <LoopFillZerobss+0x26>)
  movs r3, #0
 800223e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002240:	e001      	b.n	8002246 <LoopFillZerobss>

08002242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002244:	3204      	adds	r2, #4

08002246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002248:	d3fb      	bcc.n	8002242 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800224a:	f7ff ff09 	bl	8002060 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800224e:	f004 f87d 	bl	800634c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002252:	f7ff fad9 	bl	8001808 <main>
  bx  lr    
 8002256:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002258:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800225c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002260:	2000060c 	.word	0x2000060c
  ldr r2, =_sidata
 8002264:	080099a0 	.word	0x080099a0
  ldr r2, =_sbss
 8002268:	2000060c 	.word	0x2000060c
  ldr r4, =_ebss
 800226c:	20000870 	.word	0x20000870

08002270 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002270:	e7fe      	b.n	8002270 <ADC_IRQHandler>
	...

08002274 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002278:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <HAL_Init+0x40>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a0d      	ldr	r2, [pc, #52]	; (80022b4 <HAL_Init+0x40>)
 800227e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002282:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002284:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <HAL_Init+0x40>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <HAL_Init+0x40>)
 800228a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800228e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <HAL_Init+0x40>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a07      	ldr	r2, [pc, #28]	; (80022b4 <HAL_Init+0x40>)
 8002296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800229c:	2003      	movs	r0, #3
 800229e:	f000 f94f 	bl	8002540 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022a2:	2000      	movs	r0, #0
 80022a4:	f000 f808 	bl	80022b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022a8:	f7ff fe40 	bl	8001f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40023c00 	.word	0x40023c00

080022b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022c0:	4b12      	ldr	r3, [pc, #72]	; (800230c <HAL_InitTick+0x54>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b12      	ldr	r3, [pc, #72]	; (8002310 <HAL_InitTick+0x58>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	4619      	mov	r1, r3
 80022ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80022d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 f967 	bl	80025aa <HAL_SYSTICK_Config>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e00e      	b.n	8002304 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b0f      	cmp	r3, #15
 80022ea:	d80a      	bhi.n	8002302 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022ec:	2200      	movs	r2, #0
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	f04f 30ff 	mov.w	r0, #4294967295
 80022f4:	f000 f92f 	bl	8002556 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022f8:	4a06      	ldr	r2, [pc, #24]	; (8002314 <HAL_InitTick+0x5c>)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	e000      	b.n	8002304 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
}
 8002304:	4618      	mov	r0, r3
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	20000030 	.word	0x20000030
 8002310:	20000038 	.word	0x20000038
 8002314:	20000034 	.word	0x20000034

08002318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_IncTick+0x20>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_IncTick+0x24>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4413      	add	r3, r2
 8002328:	4a04      	ldr	r2, [pc, #16]	; (800233c <HAL_IncTick+0x24>)
 800232a:	6013      	str	r3, [r2, #0]
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	20000038 	.word	0x20000038
 800233c:	200007e8 	.word	0x200007e8

08002340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return uwTick;
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <HAL_GetTick+0x14>)
 8002346:	681b      	ldr	r3, [r3, #0]
}
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	200007e8 	.word	0x200007e8

08002358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002360:	f7ff ffee 	bl	8002340 <HAL_GetTick>
 8002364:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002370:	d005      	beq.n	800237e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002372:	4b0a      	ldr	r3, [pc, #40]	; (800239c <HAL_Delay+0x44>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4413      	add	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800237e:	bf00      	nop
 8002380:	f7ff ffde 	bl	8002340 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	429a      	cmp	r2, r3
 800238e:	d8f7      	bhi.n	8002380 <HAL_Delay+0x28>
  {
  }
}
 8002390:	bf00      	nop
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000038 	.word	0x20000038

080023a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <__NVIC_SetPriorityGrouping+0x44>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023bc:	4013      	ands	r3, r2
 80023be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023d2:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <__NVIC_SetPriorityGrouping+0x44>)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	60d3      	str	r3, [r2, #12]
}
 80023d8:	bf00      	nop
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023ec:	4b04      	ldr	r3, [pc, #16]	; (8002400 <__NVIC_GetPriorityGrouping+0x18>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	0a1b      	lsrs	r3, r3, #8
 80023f2:	f003 0307 	and.w	r3, r3, #7
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	2b00      	cmp	r3, #0
 8002414:	db0b      	blt.n	800242e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	f003 021f 	and.w	r2, r3, #31
 800241c:	4907      	ldr	r1, [pc, #28]	; (800243c <__NVIC_EnableIRQ+0x38>)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	095b      	lsrs	r3, r3, #5
 8002424:	2001      	movs	r0, #1
 8002426:	fa00 f202 	lsl.w	r2, r0, r2
 800242a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	e000e100 	.word	0xe000e100

08002440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	6039      	str	r1, [r7, #0]
 800244a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002450:	2b00      	cmp	r3, #0
 8002452:	db0a      	blt.n	800246a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	b2da      	uxtb	r2, r3
 8002458:	490c      	ldr	r1, [pc, #48]	; (800248c <__NVIC_SetPriority+0x4c>)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	0112      	lsls	r2, r2, #4
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	440b      	add	r3, r1
 8002464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002468:	e00a      	b.n	8002480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4908      	ldr	r1, [pc, #32]	; (8002490 <__NVIC_SetPriority+0x50>)
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	3b04      	subs	r3, #4
 8002478:	0112      	lsls	r2, r2, #4
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	440b      	add	r3, r1
 800247e:	761a      	strb	r2, [r3, #24]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	e000e100 	.word	0xe000e100
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002494:	b480      	push	{r7}
 8002496:	b089      	sub	sp, #36	; 0x24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f1c3 0307 	rsb	r3, r3, #7
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	bf28      	it	cs
 80024b2:	2304      	movcs	r3, #4
 80024b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	3304      	adds	r3, #4
 80024ba:	2b06      	cmp	r3, #6
 80024bc:	d902      	bls.n	80024c4 <NVIC_EncodePriority+0x30>
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3b03      	subs	r3, #3
 80024c2:	e000      	b.n	80024c6 <NVIC_EncodePriority+0x32>
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c8:	f04f 32ff 	mov.w	r2, #4294967295
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43da      	mvns	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	401a      	ands	r2, r3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024dc:	f04f 31ff 	mov.w	r1, #4294967295
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	fa01 f303 	lsl.w	r3, r1, r3
 80024e6:	43d9      	mvns	r1, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ec:	4313      	orrs	r3, r2
         );
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3724      	adds	r7, #36	; 0x24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
	...

080024fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3b01      	subs	r3, #1
 8002508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800250c:	d301      	bcc.n	8002512 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800250e:	2301      	movs	r3, #1
 8002510:	e00f      	b.n	8002532 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002512:	4a0a      	ldr	r2, [pc, #40]	; (800253c <SysTick_Config+0x40>)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3b01      	subs	r3, #1
 8002518:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800251a:	210f      	movs	r1, #15
 800251c:	f04f 30ff 	mov.w	r0, #4294967295
 8002520:	f7ff ff8e 	bl	8002440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002524:	4b05      	ldr	r3, [pc, #20]	; (800253c <SysTick_Config+0x40>)
 8002526:	2200      	movs	r2, #0
 8002528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800252a:	4b04      	ldr	r3, [pc, #16]	; (800253c <SysTick_Config+0x40>)
 800252c:	2207      	movs	r2, #7
 800252e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	e000e010 	.word	0xe000e010

08002540 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff ff29 	bl	80023a0 <__NVIC_SetPriorityGrouping>
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002556:	b580      	push	{r7, lr}
 8002558:	b086      	sub	sp, #24
 800255a:	af00      	add	r7, sp, #0
 800255c:	4603      	mov	r3, r0
 800255e:	60b9      	str	r1, [r7, #8]
 8002560:	607a      	str	r2, [r7, #4]
 8002562:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002568:	f7ff ff3e 	bl	80023e8 <__NVIC_GetPriorityGrouping>
 800256c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	68b9      	ldr	r1, [r7, #8]
 8002572:	6978      	ldr	r0, [r7, #20]
 8002574:	f7ff ff8e 	bl	8002494 <NVIC_EncodePriority>
 8002578:	4602      	mov	r2, r0
 800257a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800257e:	4611      	mov	r1, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff ff5d 	bl	8002440 <__NVIC_SetPriority>
}
 8002586:	bf00      	nop
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	af00      	add	r7, sp, #0
 8002594:	4603      	mov	r3, r0
 8002596:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ff31 	bl	8002404 <__NVIC_EnableIRQ>
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff ffa2 	bl	80024fc <SysTick_Config>
 80025b8:	4603      	mov	r3, r0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e00e      	b.n	80025f2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	795b      	ldrb	r3, [r3, #5]
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d105      	bne.n	80025ea <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7fe ffa9 	bl	800153c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b089      	sub	sp, #36	; 0x24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800260a:	2300      	movs	r3, #0
 800260c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800260e:	2300      	movs	r3, #0
 8002610:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002612:	2300      	movs	r3, #0
 8002614:	61fb      	str	r3, [r7, #28]
 8002616:	e159      	b.n	80028cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002618:	2201      	movs	r2, #1
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	4013      	ands	r3, r2
 800262a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	429a      	cmp	r2, r3
 8002632:	f040 8148 	bne.w	80028c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	2b01      	cmp	r3, #1
 8002640:	d005      	beq.n	800264e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800264a:	2b02      	cmp	r3, #2
 800264c:	d130      	bne.n	80026b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	2203      	movs	r2, #3
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4013      	ands	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4313      	orrs	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002684:	2201      	movs	r2, #1
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	091b      	lsrs	r3, r3, #4
 800269a:	f003 0201 	and.w	r2, r3, #1
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d017      	beq.n	80026ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	2203      	movs	r2, #3
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d123      	bne.n	8002740 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	08da      	lsrs	r2, r3, #3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3208      	adds	r2, #8
 8002700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002704:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	220f      	movs	r2, #15
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	08da      	lsrs	r2, r3, #3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3208      	adds	r2, #8
 800273a:	69b9      	ldr	r1, [r7, #24]
 800273c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	2203      	movs	r2, #3
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4013      	ands	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 0203 	and.w	r2, r3, #3
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 80a2 	beq.w	80028c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	4b57      	ldr	r3, [pc, #348]	; (80028e4 <HAL_GPIO_Init+0x2e8>)
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278a:	4a56      	ldr	r2, [pc, #344]	; (80028e4 <HAL_GPIO_Init+0x2e8>)
 800278c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002790:	6453      	str	r3, [r2, #68]	; 0x44
 8002792:	4b54      	ldr	r3, [pc, #336]	; (80028e4 <HAL_GPIO_Init+0x2e8>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800279e:	4a52      	ldr	r2, [pc, #328]	; (80028e8 <HAL_GPIO_Init+0x2ec>)
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	089b      	lsrs	r3, r3, #2
 80027a4:	3302      	adds	r3, #2
 80027a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	220f      	movs	r2, #15
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4013      	ands	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a49      	ldr	r2, [pc, #292]	; (80028ec <HAL_GPIO_Init+0x2f0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d019      	beq.n	80027fe <HAL_GPIO_Init+0x202>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a48      	ldr	r2, [pc, #288]	; (80028f0 <HAL_GPIO_Init+0x2f4>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d013      	beq.n	80027fa <HAL_GPIO_Init+0x1fe>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a47      	ldr	r2, [pc, #284]	; (80028f4 <HAL_GPIO_Init+0x2f8>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d00d      	beq.n	80027f6 <HAL_GPIO_Init+0x1fa>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a46      	ldr	r2, [pc, #280]	; (80028f8 <HAL_GPIO_Init+0x2fc>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d007      	beq.n	80027f2 <HAL_GPIO_Init+0x1f6>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a45      	ldr	r2, [pc, #276]	; (80028fc <HAL_GPIO_Init+0x300>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d101      	bne.n	80027ee <HAL_GPIO_Init+0x1f2>
 80027ea:	2304      	movs	r3, #4
 80027ec:	e008      	b.n	8002800 <HAL_GPIO_Init+0x204>
 80027ee:	2307      	movs	r3, #7
 80027f0:	e006      	b.n	8002800 <HAL_GPIO_Init+0x204>
 80027f2:	2303      	movs	r3, #3
 80027f4:	e004      	b.n	8002800 <HAL_GPIO_Init+0x204>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e002      	b.n	8002800 <HAL_GPIO_Init+0x204>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <HAL_GPIO_Init+0x204>
 80027fe:	2300      	movs	r3, #0
 8002800:	69fa      	ldr	r2, [r7, #28]
 8002802:	f002 0203 	and.w	r2, r2, #3
 8002806:	0092      	lsls	r2, r2, #2
 8002808:	4093      	lsls	r3, r2
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4313      	orrs	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002810:	4935      	ldr	r1, [pc, #212]	; (80028e8 <HAL_GPIO_Init+0x2ec>)
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	089b      	lsrs	r3, r3, #2
 8002816:	3302      	adds	r3, #2
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800281e:	4b38      	ldr	r3, [pc, #224]	; (8002900 <HAL_GPIO_Init+0x304>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	43db      	mvns	r3, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4013      	ands	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002842:	4a2f      	ldr	r2, [pc, #188]	; (8002900 <HAL_GPIO_Init+0x304>)
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002848:	4b2d      	ldr	r3, [pc, #180]	; (8002900 <HAL_GPIO_Init+0x304>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800286c:	4a24      	ldr	r2, [pc, #144]	; (8002900 <HAL_GPIO_Init+0x304>)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002872:	4b23      	ldr	r3, [pc, #140]	; (8002900 <HAL_GPIO_Init+0x304>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	43db      	mvns	r3, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4013      	ands	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002896:	4a1a      	ldr	r2, [pc, #104]	; (8002900 <HAL_GPIO_Init+0x304>)
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800289c:	4b18      	ldr	r3, [pc, #96]	; (8002900 <HAL_GPIO_Init+0x304>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	43db      	mvns	r3, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4013      	ands	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028c0:	4a0f      	ldr	r2, [pc, #60]	; (8002900 <HAL_GPIO_Init+0x304>)
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	3301      	adds	r3, #1
 80028ca:	61fb      	str	r3, [r7, #28]
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	2b0f      	cmp	r3, #15
 80028d0:	f67f aea2 	bls.w	8002618 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	3724      	adds	r7, #36	; 0x24
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40013800 	.word	0x40013800
 80028ec:	40020000 	.word	0x40020000
 80028f0:	40020400 	.word	0x40020400
 80028f4:	40020800 	.word	0x40020800
 80028f8:	40020c00 	.word	0x40020c00
 80028fc:	40021000 	.word	0x40021000
 8002900:	40013c00 	.word	0x40013c00

08002904 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	807b      	strh	r3, [r7, #2]
 8002910:	4613      	mov	r3, r2
 8002912:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002914:	787b      	ldrb	r3, [r7, #1]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800291a:	887a      	ldrh	r2, [r7, #2]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002920:	e003      	b.n	800292a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002922:	887b      	ldrh	r3, [r7, #2]
 8002924:	041a      	lsls	r2, r3, #16
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	619a      	str	r2, [r3, #24]
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
	...

08002938 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002942:	4b08      	ldr	r3, [pc, #32]	; (8002964 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	88fb      	ldrh	r3, [r7, #6]
 8002948:	4013      	ands	r3, r2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d006      	beq.n	800295c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800294e:	4a05      	ldr	r2, [pc, #20]	; (8002964 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002950:	88fb      	ldrh	r3, [r7, #6]
 8002952:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002954:	88fb      	ldrh	r3, [r7, #6]
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff f886 	bl	8001a68 <HAL_GPIO_EXTI_Callback>
  }
}
 800295c:	bf00      	nop
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40013c00 	.word	0x40013c00

08002968 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e12b      	b.n	8002bd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d106      	bne.n	8002994 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fe fe9a 	bl	80016c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2224      	movs	r2, #36	; 0x24
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0201 	bic.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029cc:	f001 fbfc 	bl	80041c8 <HAL_RCC_GetPCLK1Freq>
 80029d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	4a81      	ldr	r2, [pc, #516]	; (8002bdc <HAL_I2C_Init+0x274>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d807      	bhi.n	80029ec <HAL_I2C_Init+0x84>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4a80      	ldr	r2, [pc, #512]	; (8002be0 <HAL_I2C_Init+0x278>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	bf94      	ite	ls
 80029e4:	2301      	movls	r3, #1
 80029e6:	2300      	movhi	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	e006      	b.n	80029fa <HAL_I2C_Init+0x92>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4a7d      	ldr	r2, [pc, #500]	; (8002be4 <HAL_I2C_Init+0x27c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	bf94      	ite	ls
 80029f4:	2301      	movls	r3, #1
 80029f6:	2300      	movhi	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e0e7      	b.n	8002bd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	4a78      	ldr	r2, [pc, #480]	; (8002be8 <HAL_I2C_Init+0x280>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	0c9b      	lsrs	r3, r3, #18
 8002a0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	4a6a      	ldr	r2, [pc, #424]	; (8002bdc <HAL_I2C_Init+0x274>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d802      	bhi.n	8002a3c <HAL_I2C_Init+0xd4>
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	e009      	b.n	8002a50 <HAL_I2C_Init+0xe8>
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a42:	fb02 f303 	mul.w	r3, r2, r3
 8002a46:	4a69      	ldr	r2, [pc, #420]	; (8002bec <HAL_I2C_Init+0x284>)
 8002a48:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4c:	099b      	lsrs	r3, r3, #6
 8002a4e:	3301      	adds	r3, #1
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	430b      	orrs	r3, r1
 8002a56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	495c      	ldr	r1, [pc, #368]	; (8002bdc <HAL_I2C_Init+0x274>)
 8002a6c:	428b      	cmp	r3, r1
 8002a6e:	d819      	bhi.n	8002aa4 <HAL_I2C_Init+0x13c>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	1e59      	subs	r1, r3, #1
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a7e:	1c59      	adds	r1, r3, #1
 8002a80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a84:	400b      	ands	r3, r1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00a      	beq.n	8002aa0 <HAL_I2C_Init+0x138>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	1e59      	subs	r1, r3, #1
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a98:	3301      	adds	r3, #1
 8002a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a9e:	e051      	b.n	8002b44 <HAL_I2C_Init+0x1dc>
 8002aa0:	2304      	movs	r3, #4
 8002aa2:	e04f      	b.n	8002b44 <HAL_I2C_Init+0x1dc>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d111      	bne.n	8002ad0 <HAL_I2C_Init+0x168>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	1e58      	subs	r0, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6859      	ldr	r1, [r3, #4]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	440b      	add	r3, r1
 8002aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002abe:	3301      	adds	r3, #1
 8002ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	bf0c      	ite	eq
 8002ac8:	2301      	moveq	r3, #1
 8002aca:	2300      	movne	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	e012      	b.n	8002af6 <HAL_I2C_Init+0x18e>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1e58      	subs	r0, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6859      	ldr	r1, [r3, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	0099      	lsls	r1, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	bf0c      	ite	eq
 8002af0:	2301      	moveq	r3, #1
 8002af2:	2300      	movne	r3, #0
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_I2C_Init+0x196>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e022      	b.n	8002b44 <HAL_I2C_Init+0x1dc>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10e      	bne.n	8002b24 <HAL_I2C_Init+0x1bc>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	1e58      	subs	r0, r3, #1
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6859      	ldr	r1, [r3, #4]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	440b      	add	r3, r1
 8002b14:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b18:	3301      	adds	r3, #1
 8002b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b22:	e00f      	b.n	8002b44 <HAL_I2C_Init+0x1dc>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	1e58      	subs	r0, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6859      	ldr	r1, [r3, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	0099      	lsls	r1, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	6809      	ldr	r1, [r1, #0]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69da      	ldr	r2, [r3, #28]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6911      	ldr	r1, [r2, #16]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	68d2      	ldr	r2, [r2, #12]
 8002b7e:	4311      	orrs	r1, r2
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	430b      	orrs	r3, r1
 8002b86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695a      	ldr	r2, [r3, #20]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0201 	orr.w	r2, r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	000186a0 	.word	0x000186a0
 8002be0:	001e847f 	.word	0x001e847f
 8002be4:	003d08ff 	.word	0x003d08ff
 8002be8:	431bde83 	.word	0x431bde83
 8002bec:	10624dd3 	.word	0x10624dd3

08002bf0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	4608      	mov	r0, r1
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4603      	mov	r3, r0
 8002c00:	817b      	strh	r3, [r7, #10]
 8002c02:	460b      	mov	r3, r1
 8002c04:	813b      	strh	r3, [r7, #8]
 8002c06:	4613      	mov	r3, r2
 8002c08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c0a:	f7ff fb99 	bl	8002340 <HAL_GetTick>
 8002c0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	f040 80d9 	bne.w	8002dd0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	2319      	movs	r3, #25
 8002c24:	2201      	movs	r2, #1
 8002c26:	496d      	ldr	r1, [pc, #436]	; (8002ddc <HAL_I2C_Mem_Write+0x1ec>)
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 fc7f 	bl	800352c <I2C_WaitOnFlagUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c34:	2302      	movs	r3, #2
 8002c36:	e0cc      	b.n	8002dd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d101      	bne.n	8002c46 <HAL_I2C_Mem_Write+0x56>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e0c5      	b.n	8002dd2 <HAL_I2C_Mem_Write+0x1e2>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d007      	beq.n	8002c6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0201 	orr.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2221      	movs	r2, #33	; 0x21
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2240      	movs	r2, #64	; 0x40
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a3a      	ldr	r2, [r7, #32]
 8002c96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4a4d      	ldr	r2, [pc, #308]	; (8002de0 <HAL_I2C_Mem_Write+0x1f0>)
 8002cac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cae:	88f8      	ldrh	r0, [r7, #6]
 8002cb0:	893a      	ldrh	r2, [r7, #8]
 8002cb2:	8979      	ldrh	r1, [r7, #10]
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	9301      	str	r3, [sp, #4]
 8002cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 fab6 	bl	8003230 <I2C_RequestMemoryWrite>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d052      	beq.n	8002d70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e081      	b.n	8002dd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 fd00 	bl	80036d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00d      	beq.n	8002cfa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d107      	bne.n	8002cf6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e06b      	b.n	8002dd2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	781a      	ldrb	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	1c5a      	adds	r2, r3, #1
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d11b      	bne.n	8002d70 <HAL_I2C_Mem_Write+0x180>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d017      	beq.n	8002d70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	781a      	ldrb	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	1c5a      	adds	r2, r3, #1
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1aa      	bne.n	8002cce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 fcec 	bl	800375a <I2C_WaitOnBTFFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00d      	beq.n	8002da4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d107      	bne.n	8002da0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e016      	b.n	8002dd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	e000      	b.n	8002dd2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002dd0:	2302      	movs	r3, #2
  }
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	00100002 	.word	0x00100002
 8002de0:	ffff0000 	.word	0xffff0000

08002de4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08c      	sub	sp, #48	; 0x30
 8002de8:	af02      	add	r7, sp, #8
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	4608      	mov	r0, r1
 8002dee:	4611      	mov	r1, r2
 8002df0:	461a      	mov	r2, r3
 8002df2:	4603      	mov	r3, r0
 8002df4:	817b      	strh	r3, [r7, #10]
 8002df6:	460b      	mov	r3, r1
 8002df8:	813b      	strh	r3, [r7, #8]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dfe:	f7ff fa9f 	bl	8002340 <HAL_GetTick>
 8002e02:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b20      	cmp	r3, #32
 8002e0e:	f040 8208 	bne.w	8003222 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	2319      	movs	r3, #25
 8002e18:	2201      	movs	r2, #1
 8002e1a:	497b      	ldr	r1, [pc, #492]	; (8003008 <HAL_I2C_Mem_Read+0x224>)
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 fb85 	bl	800352c <I2C_WaitOnFlagUntilTimeout>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002e28:	2302      	movs	r3, #2
 8002e2a:	e1fb      	b.n	8003224 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_I2C_Mem_Read+0x56>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e1f4      	b.n	8003224 <HAL_I2C_Mem_Read+0x440>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d007      	beq.n	8002e60 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0201 	orr.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2222      	movs	r2, #34	; 0x22
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2240      	movs	r2, #64	; 0x40
 8002e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4a5b      	ldr	r2, [pc, #364]	; (800300c <HAL_I2C_Mem_Read+0x228>)
 8002ea0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ea2:	88f8      	ldrh	r0, [r7, #6]
 8002ea4:	893a      	ldrh	r2, [r7, #8]
 8002ea6:	8979      	ldrh	r1, [r7, #10]
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	9301      	str	r3, [sp, #4]
 8002eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 fa52 	bl	800335c <I2C_RequestMemoryRead>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e1b0      	b.n	8003224 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d113      	bne.n	8002ef2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eca:	2300      	movs	r3, #0
 8002ecc:	623b      	str	r3, [r7, #32]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	623b      	str	r3, [r7, #32]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	623b      	str	r3, [r7, #32]
 8002ede:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	e184      	b.n	80031fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d11b      	bne.n	8002f32 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61fb      	str	r3, [r7, #28]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	61fb      	str	r3, [r7, #28]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	61fb      	str	r3, [r7, #28]
 8002f1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	e164      	b.n	80031fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d11b      	bne.n	8002f72 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f48:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61bb      	str	r3, [r7, #24]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	61bb      	str	r3, [r7, #24]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	61bb      	str	r3, [r7, #24]
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	e144      	b.n	80031fc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	617b      	str	r3, [r7, #20]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	617b      	str	r3, [r7, #20]
 8002f86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f88:	e138      	b.n	80031fc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8e:	2b03      	cmp	r3, #3
 8002f90:	f200 80f1 	bhi.w	8003176 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d123      	bne.n	8002fe4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 fc1b 	bl	80037dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e139      	b.n	8003224 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	691a      	ldr	r2, [r3, #16]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fe2:	e10b      	b.n	80031fc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d14e      	bne.n	800308a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	4906      	ldr	r1, [pc, #24]	; (8003010 <HAL_I2C_Mem_Read+0x22c>)
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 fa98 	bl	800352c <I2C_WaitOnFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d008      	beq.n	8003014 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e10e      	b.n	8003224 <HAL_I2C_Mem_Read+0x440>
 8003006:	bf00      	nop
 8003008:	00100002 	.word	0x00100002
 800300c:	ffff0000 	.word	0xffff0000
 8003010:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003022:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691a      	ldr	r2, [r3, #16]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	1c5a      	adds	r2, r3, #1
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304c:	b29b      	uxth	r3, r3
 800304e:	3b01      	subs	r3, #1
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003072:	3b01      	subs	r3, #1
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003088:	e0b8      	b.n	80031fc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003090:	2200      	movs	r2, #0
 8003092:	4966      	ldr	r1, [pc, #408]	; (800322c <HAL_I2C_Mem_Read+0x448>)
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 fa49 	bl	800352c <I2C_WaitOnFlagUntilTimeout>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e0bf      	b.n	8003224 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691a      	ldr	r2, [r3, #16]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d0:	3b01      	subs	r3, #1
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030dc:	b29b      	uxth	r3, r3
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ec:	2200      	movs	r2, #0
 80030ee:	494f      	ldr	r1, [pc, #316]	; (800322c <HAL_I2C_Mem_Read+0x448>)
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 fa1b 	bl	800352c <I2C_WaitOnFlagUntilTimeout>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e091      	b.n	8003224 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800310e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691a      	ldr	r2, [r3, #16]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003138:	b29b      	uxth	r3, r3
 800313a:	3b01      	subs	r3, #1
 800313c:	b29a      	uxth	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	691a      	ldr	r2, [r3, #16]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315e:	3b01      	subs	r3, #1
 8003160:	b29a      	uxth	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316a:	b29b      	uxth	r3, r3
 800316c:	3b01      	subs	r3, #1
 800316e:	b29a      	uxth	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003174:	e042      	b.n	80031fc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003178:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 fb2e 	bl	80037dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e04c      	b.n	8003224 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	691a      	ldr	r2, [r3, #16]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d118      	bne.n	80031fc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	3b01      	subs	r3, #1
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003200:	2b00      	cmp	r3, #0
 8003202:	f47f aec2 	bne.w	8002f8a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	e000      	b.n	8003224 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003222:	2302      	movs	r3, #2
  }
}
 8003224:	4618      	mov	r0, r3
 8003226:	3728      	adds	r7, #40	; 0x28
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	00010004 	.word	0x00010004

08003230 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af02      	add	r7, sp, #8
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	4608      	mov	r0, r1
 800323a:	4611      	mov	r1, r2
 800323c:	461a      	mov	r2, r3
 800323e:	4603      	mov	r3, r0
 8003240:	817b      	strh	r3, [r7, #10]
 8003242:	460b      	mov	r3, r1
 8003244:	813b      	strh	r3, [r7, #8]
 8003246:	4613      	mov	r3, r2
 8003248:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003258:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	2200      	movs	r2, #0
 8003262:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 f960 	bl	800352c <I2C_WaitOnFlagUntilTimeout>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00d      	beq.n	800328e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003280:	d103      	bne.n	800328a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003288:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e05f      	b.n	800334e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800328e:	897b      	ldrh	r3, [r7, #10]
 8003290:	b2db      	uxtb	r3, r3
 8003292:	461a      	mov	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800329c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	6a3a      	ldr	r2, [r7, #32]
 80032a2:	492d      	ldr	r1, [pc, #180]	; (8003358 <I2C_RequestMemoryWrite+0x128>)
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 f998 	bl	80035da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e04c      	b.n	800334e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032cc:	6a39      	ldr	r1, [r7, #32]
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 fa02 	bl	80036d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00d      	beq.n	80032f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	2b04      	cmp	r3, #4
 80032e0:	d107      	bne.n	80032f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e02b      	b.n	800334e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032f6:	88fb      	ldrh	r3, [r7, #6]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d105      	bne.n	8003308 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032fc:	893b      	ldrh	r3, [r7, #8]
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	611a      	str	r2, [r3, #16]
 8003306:	e021      	b.n	800334c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003308:	893b      	ldrh	r3, [r7, #8]
 800330a:	0a1b      	lsrs	r3, r3, #8
 800330c:	b29b      	uxth	r3, r3
 800330e:	b2da      	uxtb	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003318:	6a39      	ldr	r1, [r7, #32]
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 f9dc 	bl	80036d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00d      	beq.n	8003342 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	2b04      	cmp	r3, #4
 800332c:	d107      	bne.n	800333e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800333c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e005      	b.n	800334e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003342:	893b      	ldrh	r3, [r7, #8]
 8003344:	b2da      	uxtb	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	00010002 	.word	0x00010002

0800335c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af02      	add	r7, sp, #8
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	4608      	mov	r0, r1
 8003366:	4611      	mov	r1, r2
 8003368:	461a      	mov	r2, r3
 800336a:	4603      	mov	r3, r0
 800336c:	817b      	strh	r3, [r7, #10]
 800336e:	460b      	mov	r3, r1
 8003370:	813b      	strh	r3, [r7, #8]
 8003372:	4613      	mov	r3, r2
 8003374:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003384:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003394:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	2200      	movs	r2, #0
 800339e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 f8c2 	bl	800352c <I2C_WaitOnFlagUntilTimeout>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00d      	beq.n	80033ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033bc:	d103      	bne.n	80033c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e0aa      	b.n	8003520 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033ca:	897b      	ldrh	r3, [r7, #10]
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	461a      	mov	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	6a3a      	ldr	r2, [r7, #32]
 80033de:	4952      	ldr	r1, [pc, #328]	; (8003528 <I2C_RequestMemoryRead+0x1cc>)
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 f8fa 	bl	80035da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e097      	b.n	8003520 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003408:	6a39      	ldr	r1, [r7, #32]
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 f964 	bl	80036d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00d      	beq.n	8003432 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	2b04      	cmp	r3, #4
 800341c:	d107      	bne.n	800342e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800342c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e076      	b.n	8003520 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003432:	88fb      	ldrh	r3, [r7, #6]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d105      	bne.n	8003444 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003438:	893b      	ldrh	r3, [r7, #8]
 800343a:	b2da      	uxtb	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	611a      	str	r2, [r3, #16]
 8003442:	e021      	b.n	8003488 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003444:	893b      	ldrh	r3, [r7, #8]
 8003446:	0a1b      	lsrs	r3, r3, #8
 8003448:	b29b      	uxth	r3, r3
 800344a:	b2da      	uxtb	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003454:	6a39      	ldr	r1, [r7, #32]
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 f93e 	bl	80036d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00d      	beq.n	800347e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	2b04      	cmp	r3, #4
 8003468:	d107      	bne.n	800347a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003478:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e050      	b.n	8003520 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800347e:	893b      	ldrh	r3, [r7, #8]
 8003480:	b2da      	uxtb	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800348a:	6a39      	ldr	r1, [r7, #32]
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 f923 	bl	80036d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00d      	beq.n	80034b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	2b04      	cmp	r3, #4
 800349e:	d107      	bne.n	80034b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e035      	b.n	8003520 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 f82b 	bl	800352c <I2C_WaitOnFlagUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00d      	beq.n	80034f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ea:	d103      	bne.n	80034f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e013      	b.n	8003520 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034f8:	897b      	ldrh	r3, [r7, #10]
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	b2da      	uxtb	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	6a3a      	ldr	r2, [r7, #32]
 800350c:	4906      	ldr	r1, [pc, #24]	; (8003528 <I2C_RequestMemoryRead+0x1cc>)
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f863 	bl	80035da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	00010002 	.word	0x00010002

0800352c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	603b      	str	r3, [r7, #0]
 8003538:	4613      	mov	r3, r2
 800353a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800353c:	e025      	b.n	800358a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003544:	d021      	beq.n	800358a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003546:	f7fe fefb 	bl	8002340 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d302      	bcc.n	800355c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d116      	bne.n	800358a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2220      	movs	r2, #32
 8003566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f043 0220 	orr.w	r2, r3, #32
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e023      	b.n	80035d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	0c1b      	lsrs	r3, r3, #16
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b01      	cmp	r3, #1
 8003592:	d10d      	bne.n	80035b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	43da      	mvns	r2, r3
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	4013      	ands	r3, r2
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	bf0c      	ite	eq
 80035a6:	2301      	moveq	r3, #1
 80035a8:	2300      	movne	r3, #0
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	461a      	mov	r2, r3
 80035ae:	e00c      	b.n	80035ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	43da      	mvns	r2, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	4013      	ands	r3, r2
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	bf0c      	ite	eq
 80035c2:	2301      	moveq	r3, #1
 80035c4:	2300      	movne	r3, #0
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	461a      	mov	r2, r3
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d0b6      	beq.n	800353e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b084      	sub	sp, #16
 80035de:	af00      	add	r7, sp, #0
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	607a      	str	r2, [r7, #4]
 80035e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035e8:	e051      	b.n	800368e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f8:	d123      	bne.n	8003642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003608:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003612:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2220      	movs	r2, #32
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f043 0204 	orr.w	r2, r3, #4
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e046      	b.n	80036d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003648:	d021      	beq.n	800368e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800364a:	f7fe fe79 	bl	8002340 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	429a      	cmp	r2, r3
 8003658:	d302      	bcc.n	8003660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d116      	bne.n	800368e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	f043 0220 	orr.w	r2, r3, #32
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e020      	b.n	80036d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	0c1b      	lsrs	r3, r3, #16
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b01      	cmp	r3, #1
 8003696:	d10c      	bne.n	80036b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	43da      	mvns	r2, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4013      	ands	r3, r2
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	bf14      	ite	ne
 80036aa:	2301      	movne	r3, #1
 80036ac:	2300      	moveq	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	e00b      	b.n	80036ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	43da      	mvns	r2, r3
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	4013      	ands	r3, r2
 80036be:	b29b      	uxth	r3, r3
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	bf14      	ite	ne
 80036c4:	2301      	movne	r3, #1
 80036c6:	2300      	moveq	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d18d      	bne.n	80035ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036e4:	e02d      	b.n	8003742 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 f8ce 	bl	8003888 <I2C_IsAcknowledgeFailed>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e02d      	b.n	8003752 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fc:	d021      	beq.n	8003742 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036fe:	f7fe fe1f 	bl	8002340 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	429a      	cmp	r2, r3
 800370c:	d302      	bcc.n	8003714 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d116      	bne.n	8003742 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2220      	movs	r2, #32
 800371e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f043 0220 	orr.w	r2, r3, #32
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e007      	b.n	8003752 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374c:	2b80      	cmp	r3, #128	; 0x80
 800374e:	d1ca      	bne.n	80036e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b084      	sub	sp, #16
 800375e:	af00      	add	r7, sp, #0
 8003760:	60f8      	str	r0, [r7, #12]
 8003762:	60b9      	str	r1, [r7, #8]
 8003764:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003766:	e02d      	b.n	80037c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 f88d 	bl	8003888 <I2C_IsAcknowledgeFailed>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e02d      	b.n	80037d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377e:	d021      	beq.n	80037c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003780:	f7fe fdde 	bl	8002340 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	429a      	cmp	r2, r3
 800378e:	d302      	bcc.n	8003796 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d116      	bne.n	80037c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2220      	movs	r2, #32
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b0:	f043 0220 	orr.w	r2, r3, #32
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e007      	b.n	80037d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d1ca      	bne.n	8003768 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037e8:	e042      	b.n	8003870 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	f003 0310 	and.w	r3, r3, #16
 80037f4:	2b10      	cmp	r3, #16
 80037f6:	d119      	bne.n	800382c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f06f 0210 	mvn.w	r2, #16
 8003800:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2220      	movs	r2, #32
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e029      	b.n	8003880 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800382c:	f7fe fd88 	bl	8002340 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	429a      	cmp	r2, r3
 800383a:	d302      	bcc.n	8003842 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d116      	bne.n	8003870 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	f043 0220 	orr.w	r2, r3, #32
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e007      	b.n	8003880 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387a:	2b40      	cmp	r3, #64	; 0x40
 800387c:	d1b5      	bne.n	80037ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800389a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800389e:	d11b      	bne.n	80038d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	f043 0204 	orr.w	r2, r3, #4
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e000      	b.n	80038da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
	...

080038e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e267      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d075      	beq.n	80039f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003906:	4b88      	ldr	r3, [pc, #544]	; (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 030c 	and.w	r3, r3, #12
 800390e:	2b04      	cmp	r3, #4
 8003910:	d00c      	beq.n	800392c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003912:	4b85      	ldr	r3, [pc, #532]	; (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800391a:	2b08      	cmp	r3, #8
 800391c:	d112      	bne.n	8003944 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800391e:	4b82      	ldr	r3, [pc, #520]	; (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003926:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800392a:	d10b      	bne.n	8003944 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800392c:	4b7e      	ldr	r3, [pc, #504]	; (8003b28 <HAL_RCC_OscConfig+0x240>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d05b      	beq.n	80039f0 <HAL_RCC_OscConfig+0x108>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d157      	bne.n	80039f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e242      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800394c:	d106      	bne.n	800395c <HAL_RCC_OscConfig+0x74>
 800394e:	4b76      	ldr	r3, [pc, #472]	; (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a75      	ldr	r2, [pc, #468]	; (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	e01d      	b.n	8003998 <HAL_RCC_OscConfig+0xb0>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003964:	d10c      	bne.n	8003980 <HAL_RCC_OscConfig+0x98>
 8003966:	4b70      	ldr	r3, [pc, #448]	; (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a6f      	ldr	r2, [pc, #444]	; (8003b28 <HAL_RCC_OscConfig+0x240>)
 800396c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	4b6d      	ldr	r3, [pc, #436]	; (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a6c      	ldr	r2, [pc, #432]	; (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	e00b      	b.n	8003998 <HAL_RCC_OscConfig+0xb0>
 8003980:	4b69      	ldr	r3, [pc, #420]	; (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a68      	ldr	r2, [pc, #416]	; (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800398a:	6013      	str	r3, [r2, #0]
 800398c:	4b66      	ldr	r3, [pc, #408]	; (8003b28 <HAL_RCC_OscConfig+0x240>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a65      	ldr	r2, [pc, #404]	; (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003996:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d013      	beq.n	80039c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a0:	f7fe fcce 	bl	8002340 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039a8:	f7fe fcca 	bl	8002340 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b64      	cmp	r3, #100	; 0x64
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e207      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ba:	4b5b      	ldr	r3, [pc, #364]	; (8003b28 <HAL_RCC_OscConfig+0x240>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCC_OscConfig+0xc0>
 80039c6:	e014      	b.n	80039f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c8:	f7fe fcba 	bl	8002340 <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039d0:	f7fe fcb6 	bl	8002340 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b64      	cmp	r3, #100	; 0x64
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e1f3      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039e2:	4b51      	ldr	r3, [pc, #324]	; (8003b28 <HAL_RCC_OscConfig+0x240>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1f0      	bne.n	80039d0 <HAL_RCC_OscConfig+0xe8>
 80039ee:	e000      	b.n	80039f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d063      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039fe:	4b4a      	ldr	r3, [pc, #296]	; (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 030c 	and.w	r3, r3, #12
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00b      	beq.n	8003a22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a0a:	4b47      	ldr	r3, [pc, #284]	; (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a12:	2b08      	cmp	r3, #8
 8003a14:	d11c      	bne.n	8003a50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a16:	4b44      	ldr	r3, [pc, #272]	; (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d116      	bne.n	8003a50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a22:	4b41      	ldr	r3, [pc, #260]	; (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d005      	beq.n	8003a3a <HAL_RCC_OscConfig+0x152>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d001      	beq.n	8003a3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e1c7      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a3a:	4b3b      	ldr	r3, [pc, #236]	; (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	4937      	ldr	r1, [pc, #220]	; (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a4e:	e03a      	b.n	8003ac6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d020      	beq.n	8003a9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a58:	4b34      	ldr	r3, [pc, #208]	; (8003b2c <HAL_RCC_OscConfig+0x244>)
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5e:	f7fe fc6f 	bl	8002340 <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a66:	f7fe fc6b 	bl	8002340 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e1a8      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a78:	4b2b      	ldr	r3, [pc, #172]	; (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0f0      	beq.n	8003a66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a84:	4b28      	ldr	r3, [pc, #160]	; (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	4925      	ldr	r1, [pc, #148]	; (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	600b      	str	r3, [r1, #0]
 8003a98:	e015      	b.n	8003ac6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a9a:	4b24      	ldr	r3, [pc, #144]	; (8003b2c <HAL_RCC_OscConfig+0x244>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa0:	f7fe fc4e 	bl	8002340 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aa8:	f7fe fc4a 	bl	8002340 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e187      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aba:	4b1b      	ldr	r3, [pc, #108]	; (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d036      	beq.n	8003b40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d016      	beq.n	8003b08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ada:	4b15      	ldr	r3, [pc, #84]	; (8003b30 <HAL_RCC_OscConfig+0x248>)
 8003adc:	2201      	movs	r2, #1
 8003ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae0:	f7fe fc2e 	bl	8002340 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ae8:	f7fe fc2a 	bl	8002340 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e167      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003afa:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0f0      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x200>
 8003b06:	e01b      	b.n	8003b40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b08:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <HAL_RCC_OscConfig+0x248>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b0e:	f7fe fc17 	bl	8002340 <HAL_GetTick>
 8003b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b14:	e00e      	b.n	8003b34 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b16:	f7fe fc13 	bl	8002340 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d907      	bls.n	8003b34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e150      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	42470000 	.word	0x42470000
 8003b30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b34:	4b88      	ldr	r3, [pc, #544]	; (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1ea      	bne.n	8003b16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 8097 	beq.w	8003c7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b52:	4b81      	ldr	r3, [pc, #516]	; (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10f      	bne.n	8003b7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60bb      	str	r3, [r7, #8]
 8003b62:	4b7d      	ldr	r3, [pc, #500]	; (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	4a7c      	ldr	r2, [pc, #496]	; (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b6e:	4b7a      	ldr	r3, [pc, #488]	; (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b76:	60bb      	str	r3, [r7, #8]
 8003b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7e:	4b77      	ldr	r3, [pc, #476]	; (8003d5c <HAL_RCC_OscConfig+0x474>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d118      	bne.n	8003bbc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b8a:	4b74      	ldr	r3, [pc, #464]	; (8003d5c <HAL_RCC_OscConfig+0x474>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a73      	ldr	r2, [pc, #460]	; (8003d5c <HAL_RCC_OscConfig+0x474>)
 8003b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b96:	f7fe fbd3 	bl	8002340 <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b9e:	f7fe fbcf 	bl	8002340 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e10c      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb0:	4b6a      	ldr	r3, [pc, #424]	; (8003d5c <HAL_RCC_OscConfig+0x474>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0f0      	beq.n	8003b9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d106      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x2ea>
 8003bc4:	4b64      	ldr	r3, [pc, #400]	; (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc8:	4a63      	ldr	r2, [pc, #396]	; (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003bca:	f043 0301 	orr.w	r3, r3, #1
 8003bce:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd0:	e01c      	b.n	8003c0c <HAL_RCC_OscConfig+0x324>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	2b05      	cmp	r3, #5
 8003bd8:	d10c      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x30c>
 8003bda:	4b5f      	ldr	r3, [pc, #380]	; (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bde:	4a5e      	ldr	r2, [pc, #376]	; (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003be0:	f043 0304 	orr.w	r3, r3, #4
 8003be4:	6713      	str	r3, [r2, #112]	; 0x70
 8003be6:	4b5c      	ldr	r3, [pc, #368]	; (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bea:	4a5b      	ldr	r2, [pc, #364]	; (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003bec:	f043 0301 	orr.w	r3, r3, #1
 8003bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf2:	e00b      	b.n	8003c0c <HAL_RCC_OscConfig+0x324>
 8003bf4:	4b58      	ldr	r3, [pc, #352]	; (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf8:	4a57      	ldr	r2, [pc, #348]	; (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003bfa:	f023 0301 	bic.w	r3, r3, #1
 8003bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8003c00:	4b55      	ldr	r3, [pc, #340]	; (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c04:	4a54      	ldr	r2, [pc, #336]	; (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003c06:	f023 0304 	bic.w	r3, r3, #4
 8003c0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d015      	beq.n	8003c40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c14:	f7fe fb94 	bl	8002340 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c1a:	e00a      	b.n	8003c32 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c1c:	f7fe fb90 	bl	8002340 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e0cb      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c32:	4b49      	ldr	r3, [pc, #292]	; (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0ee      	beq.n	8003c1c <HAL_RCC_OscConfig+0x334>
 8003c3e:	e014      	b.n	8003c6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c40:	f7fe fb7e 	bl	8002340 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c46:	e00a      	b.n	8003c5e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c48:	f7fe fb7a 	bl	8002340 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e0b5      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c5e:	4b3e      	ldr	r3, [pc, #248]	; (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1ee      	bne.n	8003c48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c6a:	7dfb      	ldrb	r3, [r7, #23]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d105      	bne.n	8003c7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c70:	4b39      	ldr	r3, [pc, #228]	; (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	4a38      	ldr	r2, [pc, #224]	; (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003c76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 80a1 	beq.w	8003dc8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c86:	4b34      	ldr	r3, [pc, #208]	; (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 030c 	and.w	r3, r3, #12
 8003c8e:	2b08      	cmp	r3, #8
 8003c90:	d05c      	beq.n	8003d4c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d141      	bne.n	8003d1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9a:	4b31      	ldr	r3, [pc, #196]	; (8003d60 <HAL_RCC_OscConfig+0x478>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca0:	f7fe fb4e 	bl	8002340 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ca8:	f7fe fb4a 	bl	8002340 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e087      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cba:	4b27      	ldr	r3, [pc, #156]	; (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f0      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69da      	ldr	r2, [r3, #28]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	019b      	lsls	r3, r3, #6
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cdc:	085b      	lsrs	r3, r3, #1
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	041b      	lsls	r3, r3, #16
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce8:	061b      	lsls	r3, r3, #24
 8003cea:	491b      	ldr	r1, [pc, #108]	; (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cf0:	4b1b      	ldr	r3, [pc, #108]	; (8003d60 <HAL_RCC_OscConfig+0x478>)
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf6:	f7fe fb23 	bl	8002340 <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cfe:	f7fe fb1f 	bl	8002340 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e05c      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d10:	4b11      	ldr	r3, [pc, #68]	; (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0f0      	beq.n	8003cfe <HAL_RCC_OscConfig+0x416>
 8003d1c:	e054      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d1e:	4b10      	ldr	r3, [pc, #64]	; (8003d60 <HAL_RCC_OscConfig+0x478>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d24:	f7fe fb0c 	bl	8002340 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d2c:	f7fe fb08 	bl	8002340 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e045      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3e:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f0      	bne.n	8003d2c <HAL_RCC_OscConfig+0x444>
 8003d4a:	e03d      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d107      	bne.n	8003d64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e038      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	40007000 	.word	0x40007000
 8003d60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d64:	4b1b      	ldr	r3, [pc, #108]	; (8003dd4 <HAL_RCC_OscConfig+0x4ec>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d028      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d121      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d11a      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d94:	4013      	ands	r3, r2
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d111      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003daa:	085b      	lsrs	r3, r3, #1
 8003dac:	3b01      	subs	r3, #1
 8003dae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d107      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d001      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40023800 	.word	0x40023800

08003dd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e0cc      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dec:	4b68      	ldr	r3, [pc, #416]	; (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d90c      	bls.n	8003e14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dfa:	4b65      	ldr	r3, [pc, #404]	; (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e02:	4b63      	ldr	r3, [pc, #396]	; (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d001      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e0b8      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d020      	beq.n	8003e62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e2c:	4b59      	ldr	r3, [pc, #356]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	4a58      	ldr	r2, [pc, #352]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d005      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e44:	4b53      	ldr	r3, [pc, #332]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	4a52      	ldr	r2, [pc, #328]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e50:	4b50      	ldr	r3, [pc, #320]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	494d      	ldr	r1, [pc, #308]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d044      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d107      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e76:	4b47      	ldr	r3, [pc, #284]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d119      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e07f      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d003      	beq.n	8003e96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	d107      	bne.n	8003ea6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e96:	4b3f      	ldr	r3, [pc, #252]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d109      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e06f      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea6:	4b3b      	ldr	r3, [pc, #236]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e067      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eb6:	4b37      	ldr	r3, [pc, #220]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f023 0203 	bic.w	r2, r3, #3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	4934      	ldr	r1, [pc, #208]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ec8:	f7fe fa3a 	bl	8002340 <HAL_GetTick>
 8003ecc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ece:	e00a      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ed0:	f7fe fa36 	bl	8002340 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e04f      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee6:	4b2b      	ldr	r3, [pc, #172]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 020c 	and.w	r2, r3, #12
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d1eb      	bne.n	8003ed0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ef8:	4b25      	ldr	r3, [pc, #148]	; (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d20c      	bcs.n	8003f20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f06:	4b22      	ldr	r3, [pc, #136]	; (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	b2d2      	uxtb	r2, r2
 8003f0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f0e:	4b20      	ldr	r3, [pc, #128]	; (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0307 	and.w	r3, r3, #7
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d001      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e032      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d008      	beq.n	8003f3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f2c:	4b19      	ldr	r3, [pc, #100]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	4916      	ldr	r1, [pc, #88]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d009      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f4a:	4b12      	ldr	r3, [pc, #72]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	490e      	ldr	r1, [pc, #56]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f5e:	f000 f821 	bl	8003fa4 <HAL_RCC_GetSysClockFreq>
 8003f62:	4602      	mov	r2, r0
 8003f64:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	091b      	lsrs	r3, r3, #4
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	490a      	ldr	r1, [pc, #40]	; (8003f98 <HAL_RCC_ClockConfig+0x1c0>)
 8003f70:	5ccb      	ldrb	r3, [r1, r3]
 8003f72:	fa22 f303 	lsr.w	r3, r2, r3
 8003f76:	4a09      	ldr	r2, [pc, #36]	; (8003f9c <HAL_RCC_ClockConfig+0x1c4>)
 8003f78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f7a:	4b09      	ldr	r3, [pc, #36]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fe f99a 	bl	80022b8 <HAL_InitTick>

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	40023c00 	.word	0x40023c00
 8003f94:	40023800 	.word	0x40023800
 8003f98:	080092bc 	.word	0x080092bc
 8003f9c:	20000030 	.word	0x20000030
 8003fa0:	20000034 	.word	0x20000034

08003fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fa8:	b094      	sub	sp, #80	; 0x50
 8003faa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fac:	2300      	movs	r3, #0
 8003fae:	647b      	str	r3, [r7, #68]	; 0x44
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fbc:	4b79      	ldr	r3, [pc, #484]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f003 030c 	and.w	r3, r3, #12
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d00d      	beq.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x40>
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	f200 80e1 	bhi.w	8004190 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x34>
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d003      	beq.n	8003fde <HAL_RCC_GetSysClockFreq+0x3a>
 8003fd6:	e0db      	b.n	8004190 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fd8:	4b73      	ldr	r3, [pc, #460]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fda:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003fdc:	e0db      	b.n	8004196 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fde:	4b73      	ldr	r3, [pc, #460]	; (80041ac <HAL_RCC_GetSysClockFreq+0x208>)
 8003fe0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fe2:	e0d8      	b.n	8004196 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fe4:	4b6f      	ldr	r3, [pc, #444]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fee:	4b6d      	ldr	r3, [pc, #436]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d063      	beq.n	80040c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ffa:	4b6a      	ldr	r3, [pc, #424]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	099b      	lsrs	r3, r3, #6
 8004000:	2200      	movs	r2, #0
 8004002:	63bb      	str	r3, [r7, #56]	; 0x38
 8004004:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800400c:	633b      	str	r3, [r7, #48]	; 0x30
 800400e:	2300      	movs	r3, #0
 8004010:	637b      	str	r3, [r7, #52]	; 0x34
 8004012:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004016:	4622      	mov	r2, r4
 8004018:	462b      	mov	r3, r5
 800401a:	f04f 0000 	mov.w	r0, #0
 800401e:	f04f 0100 	mov.w	r1, #0
 8004022:	0159      	lsls	r1, r3, #5
 8004024:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004028:	0150      	lsls	r0, r2, #5
 800402a:	4602      	mov	r2, r0
 800402c:	460b      	mov	r3, r1
 800402e:	4621      	mov	r1, r4
 8004030:	1a51      	subs	r1, r2, r1
 8004032:	6139      	str	r1, [r7, #16]
 8004034:	4629      	mov	r1, r5
 8004036:	eb63 0301 	sbc.w	r3, r3, r1
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	f04f 0300 	mov.w	r3, #0
 8004044:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004048:	4659      	mov	r1, fp
 800404a:	018b      	lsls	r3, r1, #6
 800404c:	4651      	mov	r1, sl
 800404e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004052:	4651      	mov	r1, sl
 8004054:	018a      	lsls	r2, r1, #6
 8004056:	4651      	mov	r1, sl
 8004058:	ebb2 0801 	subs.w	r8, r2, r1
 800405c:	4659      	mov	r1, fp
 800405e:	eb63 0901 	sbc.w	r9, r3, r1
 8004062:	f04f 0200 	mov.w	r2, #0
 8004066:	f04f 0300 	mov.w	r3, #0
 800406a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800406e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004072:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004076:	4690      	mov	r8, r2
 8004078:	4699      	mov	r9, r3
 800407a:	4623      	mov	r3, r4
 800407c:	eb18 0303 	adds.w	r3, r8, r3
 8004080:	60bb      	str	r3, [r7, #8]
 8004082:	462b      	mov	r3, r5
 8004084:	eb49 0303 	adc.w	r3, r9, r3
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	f04f 0200 	mov.w	r2, #0
 800408e:	f04f 0300 	mov.w	r3, #0
 8004092:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004096:	4629      	mov	r1, r5
 8004098:	024b      	lsls	r3, r1, #9
 800409a:	4621      	mov	r1, r4
 800409c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040a0:	4621      	mov	r1, r4
 80040a2:	024a      	lsls	r2, r1, #9
 80040a4:	4610      	mov	r0, r2
 80040a6:	4619      	mov	r1, r3
 80040a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040aa:	2200      	movs	r2, #0
 80040ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040b4:	f7fc fdd0 	bl	8000c58 <__aeabi_uldivmod>
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	4613      	mov	r3, r2
 80040be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040c0:	e058      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040c2:	4b38      	ldr	r3, [pc, #224]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	099b      	lsrs	r3, r3, #6
 80040c8:	2200      	movs	r2, #0
 80040ca:	4618      	mov	r0, r3
 80040cc:	4611      	mov	r1, r2
 80040ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040d2:	623b      	str	r3, [r7, #32]
 80040d4:	2300      	movs	r3, #0
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24
 80040d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040dc:	4642      	mov	r2, r8
 80040de:	464b      	mov	r3, r9
 80040e0:	f04f 0000 	mov.w	r0, #0
 80040e4:	f04f 0100 	mov.w	r1, #0
 80040e8:	0159      	lsls	r1, r3, #5
 80040ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040ee:	0150      	lsls	r0, r2, #5
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	4641      	mov	r1, r8
 80040f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80040fa:	4649      	mov	r1, r9
 80040fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	f04f 0300 	mov.w	r3, #0
 8004108:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800410c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004110:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004114:	ebb2 040a 	subs.w	r4, r2, sl
 8004118:	eb63 050b 	sbc.w	r5, r3, fp
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	f04f 0300 	mov.w	r3, #0
 8004124:	00eb      	lsls	r3, r5, #3
 8004126:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800412a:	00e2      	lsls	r2, r4, #3
 800412c:	4614      	mov	r4, r2
 800412e:	461d      	mov	r5, r3
 8004130:	4643      	mov	r3, r8
 8004132:	18e3      	adds	r3, r4, r3
 8004134:	603b      	str	r3, [r7, #0]
 8004136:	464b      	mov	r3, r9
 8004138:	eb45 0303 	adc.w	r3, r5, r3
 800413c:	607b      	str	r3, [r7, #4]
 800413e:	f04f 0200 	mov.w	r2, #0
 8004142:	f04f 0300 	mov.w	r3, #0
 8004146:	e9d7 4500 	ldrd	r4, r5, [r7]
 800414a:	4629      	mov	r1, r5
 800414c:	028b      	lsls	r3, r1, #10
 800414e:	4621      	mov	r1, r4
 8004150:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004154:	4621      	mov	r1, r4
 8004156:	028a      	lsls	r2, r1, #10
 8004158:	4610      	mov	r0, r2
 800415a:	4619      	mov	r1, r3
 800415c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800415e:	2200      	movs	r2, #0
 8004160:	61bb      	str	r3, [r7, #24]
 8004162:	61fa      	str	r2, [r7, #28]
 8004164:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004168:	f7fc fd76 	bl	8000c58 <__aeabi_uldivmod>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	4613      	mov	r3, r2
 8004172:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004174:	4b0b      	ldr	r3, [pc, #44]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	0c1b      	lsrs	r3, r3, #16
 800417a:	f003 0303 	and.w	r3, r3, #3
 800417e:	3301      	adds	r3, #1
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004184:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004188:	fbb2 f3f3 	udiv	r3, r2, r3
 800418c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800418e:	e002      	b.n	8004196 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004190:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004192:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004194:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004198:	4618      	mov	r0, r3
 800419a:	3750      	adds	r7, #80	; 0x50
 800419c:	46bd      	mov	sp, r7
 800419e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041a2:	bf00      	nop
 80041a4:	40023800 	.word	0x40023800
 80041a8:	00f42400 	.word	0x00f42400
 80041ac:	007a1200 	.word	0x007a1200

080041b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041b4:	4b03      	ldr	r3, [pc, #12]	; (80041c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80041b6:	681b      	ldr	r3, [r3, #0]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	20000030 	.word	0x20000030

080041c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041cc:	f7ff fff0 	bl	80041b0 <HAL_RCC_GetHCLKFreq>
 80041d0:	4602      	mov	r2, r0
 80041d2:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	0a9b      	lsrs	r3, r3, #10
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	4903      	ldr	r1, [pc, #12]	; (80041ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80041de:	5ccb      	ldrb	r3, [r1, r3]
 80041e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40023800 	.word	0x40023800
 80041ec:	080092cc 	.word	0x080092cc

080041f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041f4:	f7ff ffdc 	bl	80041b0 <HAL_RCC_GetHCLKFreq>
 80041f8:	4602      	mov	r2, r0
 80041fa:	4b05      	ldr	r3, [pc, #20]	; (8004210 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	0b5b      	lsrs	r3, r3, #13
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	4903      	ldr	r1, [pc, #12]	; (8004214 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004206:	5ccb      	ldrb	r3, [r1, r3]
 8004208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800420c:	4618      	mov	r0, r3
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40023800 	.word	0x40023800
 8004214:	080092cc 	.word	0x080092cc

08004218 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e041      	b.n	80042ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d106      	bne.n	8004244 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7fd ff44 	bl	80020cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3304      	adds	r3, #4
 8004254:	4619      	mov	r1, r3
 8004256:	4610      	mov	r0, r2
 8004258:	f000 f9c0 	bl	80045dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d001      	beq.n	80042d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e044      	b.n	800435a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0201 	orr.w	r2, r2, #1
 80042e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a1e      	ldr	r2, [pc, #120]	; (8004368 <HAL_TIM_Base_Start_IT+0xb0>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d018      	beq.n	8004324 <HAL_TIM_Base_Start_IT+0x6c>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042fa:	d013      	beq.n	8004324 <HAL_TIM_Base_Start_IT+0x6c>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a1a      	ldr	r2, [pc, #104]	; (800436c <HAL_TIM_Base_Start_IT+0xb4>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d00e      	beq.n	8004324 <HAL_TIM_Base_Start_IT+0x6c>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a19      	ldr	r2, [pc, #100]	; (8004370 <HAL_TIM_Base_Start_IT+0xb8>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d009      	beq.n	8004324 <HAL_TIM_Base_Start_IT+0x6c>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a17      	ldr	r2, [pc, #92]	; (8004374 <HAL_TIM_Base_Start_IT+0xbc>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d004      	beq.n	8004324 <HAL_TIM_Base_Start_IT+0x6c>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a16      	ldr	r2, [pc, #88]	; (8004378 <HAL_TIM_Base_Start_IT+0xc0>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d111      	bne.n	8004348 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2b06      	cmp	r3, #6
 8004334:	d010      	beq.n	8004358 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f042 0201 	orr.w	r2, r2, #1
 8004344:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004346:	e007      	b.n	8004358 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0201 	orr.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	40010000 	.word	0x40010000
 800436c:	40000400 	.word	0x40000400
 8004370:	40000800 	.word	0x40000800
 8004374:	40000c00 	.word	0x40000c00
 8004378:	40014000 	.word	0x40014000

0800437c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b02      	cmp	r3, #2
 8004390:	d122      	bne.n	80043d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b02      	cmp	r3, #2
 800439e:	d11b      	bne.n	80043d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f06f 0202 	mvn.w	r2, #2
 80043a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f8ee 	bl	80045a0 <HAL_TIM_IC_CaptureCallback>
 80043c4:	e005      	b.n	80043d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f8e0 	bl	800458c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f8f1 	bl	80045b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	f003 0304 	and.w	r3, r3, #4
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d122      	bne.n	800442c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b04      	cmp	r3, #4
 80043f2:	d11b      	bne.n	800442c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f06f 0204 	mvn.w	r2, #4
 80043fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2202      	movs	r2, #2
 8004402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f8c4 	bl	80045a0 <HAL_TIM_IC_CaptureCallback>
 8004418:	e005      	b.n	8004426 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f8b6 	bl	800458c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 f8c7 	bl	80045b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b08      	cmp	r3, #8
 8004438:	d122      	bne.n	8004480 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f003 0308 	and.w	r3, r3, #8
 8004444:	2b08      	cmp	r3, #8
 8004446:	d11b      	bne.n	8004480 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f06f 0208 	mvn.w	r2, #8
 8004450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2204      	movs	r2, #4
 8004456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f89a 	bl	80045a0 <HAL_TIM_IC_CaptureCallback>
 800446c:	e005      	b.n	800447a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f88c 	bl	800458c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 f89d 	bl	80045b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f003 0310 	and.w	r3, r3, #16
 800448a:	2b10      	cmp	r3, #16
 800448c:	d122      	bne.n	80044d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f003 0310 	and.w	r3, r3, #16
 8004498:	2b10      	cmp	r3, #16
 800449a:	d11b      	bne.n	80044d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f06f 0210 	mvn.w	r2, #16
 80044a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2208      	movs	r2, #8
 80044aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f870 	bl	80045a0 <HAL_TIM_IC_CaptureCallback>
 80044c0:	e005      	b.n	80044ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f862 	bl	800458c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f873 	bl	80045b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d10e      	bne.n	8004500 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d107      	bne.n	8004500 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f06f 0201 	mvn.w	r2, #1
 80044f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7fd fac8 	bl	8001a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450a:	2b80      	cmp	r3, #128	; 0x80
 800450c:	d10e      	bne.n	800452c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004518:	2b80      	cmp	r3, #128	; 0x80
 800451a:	d107      	bne.n	800452c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f8e2 	bl	80046f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004536:	2b40      	cmp	r3, #64	; 0x40
 8004538:	d10e      	bne.n	8004558 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004544:	2b40      	cmp	r3, #64	; 0x40
 8004546:	d107      	bne.n	8004558 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f838 	bl	80045c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	f003 0320 	and.w	r3, r3, #32
 8004562:	2b20      	cmp	r3, #32
 8004564:	d10e      	bne.n	8004584 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f003 0320 	and.w	r3, r3, #32
 8004570:	2b20      	cmp	r3, #32
 8004572:	d107      	bne.n	8004584 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f06f 0220 	mvn.w	r2, #32
 800457c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f8ac 	bl	80046dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004584:	bf00      	nop
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a34      	ldr	r2, [pc, #208]	; (80046c0 <TIM_Base_SetConfig+0xe4>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d00f      	beq.n	8004614 <TIM_Base_SetConfig+0x38>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045fa:	d00b      	beq.n	8004614 <TIM_Base_SetConfig+0x38>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a31      	ldr	r2, [pc, #196]	; (80046c4 <TIM_Base_SetConfig+0xe8>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d007      	beq.n	8004614 <TIM_Base_SetConfig+0x38>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a30      	ldr	r2, [pc, #192]	; (80046c8 <TIM_Base_SetConfig+0xec>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d003      	beq.n	8004614 <TIM_Base_SetConfig+0x38>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a2f      	ldr	r2, [pc, #188]	; (80046cc <TIM_Base_SetConfig+0xf0>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d108      	bne.n	8004626 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	4313      	orrs	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a25      	ldr	r2, [pc, #148]	; (80046c0 <TIM_Base_SetConfig+0xe4>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d01b      	beq.n	8004666 <TIM_Base_SetConfig+0x8a>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004634:	d017      	beq.n	8004666 <TIM_Base_SetConfig+0x8a>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a22      	ldr	r2, [pc, #136]	; (80046c4 <TIM_Base_SetConfig+0xe8>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d013      	beq.n	8004666 <TIM_Base_SetConfig+0x8a>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a21      	ldr	r2, [pc, #132]	; (80046c8 <TIM_Base_SetConfig+0xec>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d00f      	beq.n	8004666 <TIM_Base_SetConfig+0x8a>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a20      	ldr	r2, [pc, #128]	; (80046cc <TIM_Base_SetConfig+0xf0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d00b      	beq.n	8004666 <TIM_Base_SetConfig+0x8a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a1f      	ldr	r2, [pc, #124]	; (80046d0 <TIM_Base_SetConfig+0xf4>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d007      	beq.n	8004666 <TIM_Base_SetConfig+0x8a>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a1e      	ldr	r2, [pc, #120]	; (80046d4 <TIM_Base_SetConfig+0xf8>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d003      	beq.n	8004666 <TIM_Base_SetConfig+0x8a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a1d      	ldr	r2, [pc, #116]	; (80046d8 <TIM_Base_SetConfig+0xfc>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d108      	bne.n	8004678 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800466c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	4313      	orrs	r3, r2
 8004676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	4313      	orrs	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a08      	ldr	r2, [pc, #32]	; (80046c0 <TIM_Base_SetConfig+0xe4>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d103      	bne.n	80046ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	691a      	ldr	r2, [r3, #16]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	615a      	str	r2, [r3, #20]
}
 80046b2:	bf00      	nop
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	40010000 	.word	0x40010000
 80046c4:	40000400 	.word	0x40000400
 80046c8:	40000800 	.word	0x40000800
 80046cc:	40000c00 	.word	0x40000c00
 80046d0:	40014000 	.word	0x40014000
 80046d4:	40014400 	.word	0x40014400
 80046d8:	40014800 	.word	0x40014800

080046dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e03f      	b.n	8004796 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d106      	bne.n	8004730 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7fd fd20 	bl	8002170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2224      	movs	r2, #36	; 0x24
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004746:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f929 	bl	80049a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	691a      	ldr	r2, [r3, #16]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800475c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	695a      	ldr	r2, [r3, #20]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800476c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68da      	ldr	r2, [r3, #12]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800477c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2220      	movs	r2, #32
 8004790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b08a      	sub	sp, #40	; 0x28
 80047a2:	af02      	add	r7, sp, #8
 80047a4:	60f8      	str	r0, [r7, #12]
 80047a6:	60b9      	str	r1, [r7, #8]
 80047a8:	603b      	str	r3, [r7, #0]
 80047aa:	4613      	mov	r3, r2
 80047ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047ae:	2300      	movs	r3, #0
 80047b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b20      	cmp	r3, #32
 80047bc:	d17c      	bne.n	80048b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d002      	beq.n	80047ca <HAL_UART_Transmit+0x2c>
 80047c4:	88fb      	ldrh	r3, [r7, #6]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e075      	b.n	80048ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <HAL_UART_Transmit+0x3e>
 80047d8:	2302      	movs	r3, #2
 80047da:	e06e      	b.n	80048ba <HAL_UART_Transmit+0x11c>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2221      	movs	r2, #33	; 0x21
 80047ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047f2:	f7fd fda5 	bl	8002340 <HAL_GetTick>
 80047f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	88fa      	ldrh	r2, [r7, #6]
 80047fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	88fa      	ldrh	r2, [r7, #6]
 8004802:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800480c:	d108      	bne.n	8004820 <HAL_UART_Transmit+0x82>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d104      	bne.n	8004820 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004816:	2300      	movs	r3, #0
 8004818:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	61bb      	str	r3, [r7, #24]
 800481e:	e003      	b.n	8004828 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004824:	2300      	movs	r3, #0
 8004826:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004830:	e02a      	b.n	8004888 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2200      	movs	r2, #0
 800483a:	2180      	movs	r1, #128	; 0x80
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 f840 	bl	80048c2 <UART_WaitOnFlagUntilTimeout>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e036      	b.n	80048ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10b      	bne.n	800486a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	881b      	ldrh	r3, [r3, #0]
 8004856:	461a      	mov	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004860:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	3302      	adds	r3, #2
 8004866:	61bb      	str	r3, [r7, #24]
 8004868:	e007      	b.n	800487a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	781a      	ldrb	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	3301      	adds	r3, #1
 8004878:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800487e:	b29b      	uxth	r3, r3
 8004880:	3b01      	subs	r3, #1
 8004882:	b29a      	uxth	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800488c:	b29b      	uxth	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1cf      	bne.n	8004832 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	2200      	movs	r2, #0
 800489a:	2140      	movs	r1, #64	; 0x40
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 f810 	bl	80048c2 <UART_WaitOnFlagUntilTimeout>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e006      	b.n	80048ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2220      	movs	r2, #32
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048b4:	2300      	movs	r3, #0
 80048b6:	e000      	b.n	80048ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80048b8:	2302      	movs	r3, #2
  }
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3720      	adds	r7, #32
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b090      	sub	sp, #64	; 0x40
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	60f8      	str	r0, [r7, #12]
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	603b      	str	r3, [r7, #0]
 80048ce:	4613      	mov	r3, r2
 80048d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048d2:	e050      	b.n	8004976 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048da:	d04c      	beq.n	8004976 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d007      	beq.n	80048f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80048e2:	f7fd fd2d 	bl	8002340 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d241      	bcs.n	8004976 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	330c      	adds	r3, #12
 80048f8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fc:	e853 3f00 	ldrex	r3, [r3]
 8004900:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004908:	63fb      	str	r3, [r7, #60]	; 0x3c
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	330c      	adds	r3, #12
 8004910:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004912:	637a      	str	r2, [r7, #52]	; 0x34
 8004914:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004916:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004918:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800491a:	e841 2300 	strex	r3, r2, [r1]
 800491e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1e5      	bne.n	80048f2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	3314      	adds	r3, #20
 800492c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	e853 3f00 	ldrex	r3, [r3]
 8004934:	613b      	str	r3, [r7, #16]
   return(result);
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	f023 0301 	bic.w	r3, r3, #1
 800493c:	63bb      	str	r3, [r7, #56]	; 0x38
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	3314      	adds	r3, #20
 8004944:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004946:	623a      	str	r2, [r7, #32]
 8004948:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494a:	69f9      	ldr	r1, [r7, #28]
 800494c:	6a3a      	ldr	r2, [r7, #32]
 800494e:	e841 2300 	strex	r3, r2, [r1]
 8004952:	61bb      	str	r3, [r7, #24]
   return(result);
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1e5      	bne.n	8004926 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2220      	movs	r2, #32
 800495e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2220      	movs	r2, #32
 8004966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e00f      	b.n	8004996 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	4013      	ands	r3, r2
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	429a      	cmp	r2, r3
 8004984:	bf0c      	ite	eq
 8004986:	2301      	moveq	r3, #1
 8004988:	2300      	movne	r3, #0
 800498a:	b2db      	uxtb	r3, r3
 800498c:	461a      	mov	r2, r3
 800498e:	79fb      	ldrb	r3, [r7, #7]
 8004990:	429a      	cmp	r2, r3
 8004992:	d09f      	beq.n	80048d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3740      	adds	r7, #64	; 0x40
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049a4:	b0c0      	sub	sp, #256	; 0x100
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049bc:	68d9      	ldr	r1, [r3, #12]
 80049be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	ea40 0301 	orr.w	r3, r0, r1
 80049c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	431a      	orrs	r2, r3
 80049d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	431a      	orrs	r2, r3
 80049e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049f8:	f021 010c 	bic.w	r1, r1, #12
 80049fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a06:	430b      	orrs	r3, r1
 8004a08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1a:	6999      	ldr	r1, [r3, #24]
 8004a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	ea40 0301 	orr.w	r3, r0, r1
 8004a26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	4b8f      	ldr	r3, [pc, #572]	; (8004c6c <UART_SetConfig+0x2cc>)
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d005      	beq.n	8004a40 <UART_SetConfig+0xa0>
 8004a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	4b8d      	ldr	r3, [pc, #564]	; (8004c70 <UART_SetConfig+0x2d0>)
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d104      	bne.n	8004a4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a40:	f7ff fbd6 	bl	80041f0 <HAL_RCC_GetPCLK2Freq>
 8004a44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a48:	e003      	b.n	8004a52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a4a:	f7ff fbbd 	bl	80041c8 <HAL_RCC_GetPCLK1Freq>
 8004a4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a56:	69db      	ldr	r3, [r3, #28]
 8004a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a5c:	f040 810c 	bne.w	8004c78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a64:	2200      	movs	r2, #0
 8004a66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a72:	4622      	mov	r2, r4
 8004a74:	462b      	mov	r3, r5
 8004a76:	1891      	adds	r1, r2, r2
 8004a78:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a7a:	415b      	adcs	r3, r3
 8004a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a82:	4621      	mov	r1, r4
 8004a84:	eb12 0801 	adds.w	r8, r2, r1
 8004a88:	4629      	mov	r1, r5
 8004a8a:	eb43 0901 	adc.w	r9, r3, r1
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	f04f 0300 	mov.w	r3, #0
 8004a96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aa2:	4690      	mov	r8, r2
 8004aa4:	4699      	mov	r9, r3
 8004aa6:	4623      	mov	r3, r4
 8004aa8:	eb18 0303 	adds.w	r3, r8, r3
 8004aac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ab0:	462b      	mov	r3, r5
 8004ab2:	eb49 0303 	adc.w	r3, r9, r3
 8004ab6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ac6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004aca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ace:	460b      	mov	r3, r1
 8004ad0:	18db      	adds	r3, r3, r3
 8004ad2:	653b      	str	r3, [r7, #80]	; 0x50
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	eb42 0303 	adc.w	r3, r2, r3
 8004ada:	657b      	str	r3, [r7, #84]	; 0x54
 8004adc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ae0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ae4:	f7fc f8b8 	bl	8000c58 <__aeabi_uldivmod>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	460b      	mov	r3, r1
 8004aec:	4b61      	ldr	r3, [pc, #388]	; (8004c74 <UART_SetConfig+0x2d4>)
 8004aee:	fba3 2302 	umull	r2, r3, r3, r2
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	011c      	lsls	r4, r3, #4
 8004af6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004afa:	2200      	movs	r2, #0
 8004afc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b08:	4642      	mov	r2, r8
 8004b0a:	464b      	mov	r3, r9
 8004b0c:	1891      	adds	r1, r2, r2
 8004b0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b10:	415b      	adcs	r3, r3
 8004b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b18:	4641      	mov	r1, r8
 8004b1a:	eb12 0a01 	adds.w	sl, r2, r1
 8004b1e:	4649      	mov	r1, r9
 8004b20:	eb43 0b01 	adc.w	fp, r3, r1
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	f04f 0300 	mov.w	r3, #0
 8004b2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b38:	4692      	mov	sl, r2
 8004b3a:	469b      	mov	fp, r3
 8004b3c:	4643      	mov	r3, r8
 8004b3e:	eb1a 0303 	adds.w	r3, sl, r3
 8004b42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b46:	464b      	mov	r3, r9
 8004b48:	eb4b 0303 	adc.w	r3, fp, r3
 8004b4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b64:	460b      	mov	r3, r1
 8004b66:	18db      	adds	r3, r3, r3
 8004b68:	643b      	str	r3, [r7, #64]	; 0x40
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	eb42 0303 	adc.w	r3, r2, r3
 8004b70:	647b      	str	r3, [r7, #68]	; 0x44
 8004b72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b7a:	f7fc f86d 	bl	8000c58 <__aeabi_uldivmod>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	460b      	mov	r3, r1
 8004b82:	4611      	mov	r1, r2
 8004b84:	4b3b      	ldr	r3, [pc, #236]	; (8004c74 <UART_SetConfig+0x2d4>)
 8004b86:	fba3 2301 	umull	r2, r3, r3, r1
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	2264      	movs	r2, #100	; 0x64
 8004b8e:	fb02 f303 	mul.w	r3, r2, r3
 8004b92:	1acb      	subs	r3, r1, r3
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b9a:	4b36      	ldr	r3, [pc, #216]	; (8004c74 <UART_SetConfig+0x2d4>)
 8004b9c:	fba3 2302 	umull	r2, r3, r3, r2
 8004ba0:	095b      	lsrs	r3, r3, #5
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ba8:	441c      	add	r4, r3
 8004baa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bb4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004bb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004bbc:	4642      	mov	r2, r8
 8004bbe:	464b      	mov	r3, r9
 8004bc0:	1891      	adds	r1, r2, r2
 8004bc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004bc4:	415b      	adcs	r3, r3
 8004bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004bcc:	4641      	mov	r1, r8
 8004bce:	1851      	adds	r1, r2, r1
 8004bd0:	6339      	str	r1, [r7, #48]	; 0x30
 8004bd2:	4649      	mov	r1, r9
 8004bd4:	414b      	adcs	r3, r1
 8004bd6:	637b      	str	r3, [r7, #52]	; 0x34
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004be4:	4659      	mov	r1, fp
 8004be6:	00cb      	lsls	r3, r1, #3
 8004be8:	4651      	mov	r1, sl
 8004bea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bee:	4651      	mov	r1, sl
 8004bf0:	00ca      	lsls	r2, r1, #3
 8004bf2:	4610      	mov	r0, r2
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	4642      	mov	r2, r8
 8004bfa:	189b      	adds	r3, r3, r2
 8004bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c00:	464b      	mov	r3, r9
 8004c02:	460a      	mov	r2, r1
 8004c04:	eb42 0303 	adc.w	r3, r2, r3
 8004c08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c20:	460b      	mov	r3, r1
 8004c22:	18db      	adds	r3, r3, r3
 8004c24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c26:	4613      	mov	r3, r2
 8004c28:	eb42 0303 	adc.w	r3, r2, r3
 8004c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c36:	f7fc f80f 	bl	8000c58 <__aeabi_uldivmod>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4b0d      	ldr	r3, [pc, #52]	; (8004c74 <UART_SetConfig+0x2d4>)
 8004c40:	fba3 1302 	umull	r1, r3, r3, r2
 8004c44:	095b      	lsrs	r3, r3, #5
 8004c46:	2164      	movs	r1, #100	; 0x64
 8004c48:	fb01 f303 	mul.w	r3, r1, r3
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	3332      	adds	r3, #50	; 0x32
 8004c52:	4a08      	ldr	r2, [pc, #32]	; (8004c74 <UART_SetConfig+0x2d4>)
 8004c54:	fba2 2303 	umull	r2, r3, r2, r3
 8004c58:	095b      	lsrs	r3, r3, #5
 8004c5a:	f003 0207 	and.w	r2, r3, #7
 8004c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4422      	add	r2, r4
 8004c66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c68:	e105      	b.n	8004e76 <UART_SetConfig+0x4d6>
 8004c6a:	bf00      	nop
 8004c6c:	40011000 	.word	0x40011000
 8004c70:	40011400 	.word	0x40011400
 8004c74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c8a:	4642      	mov	r2, r8
 8004c8c:	464b      	mov	r3, r9
 8004c8e:	1891      	adds	r1, r2, r2
 8004c90:	6239      	str	r1, [r7, #32]
 8004c92:	415b      	adcs	r3, r3
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
 8004c96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c9a:	4641      	mov	r1, r8
 8004c9c:	1854      	adds	r4, r2, r1
 8004c9e:	4649      	mov	r1, r9
 8004ca0:	eb43 0501 	adc.w	r5, r3, r1
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	00eb      	lsls	r3, r5, #3
 8004cae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cb2:	00e2      	lsls	r2, r4, #3
 8004cb4:	4614      	mov	r4, r2
 8004cb6:	461d      	mov	r5, r3
 8004cb8:	4643      	mov	r3, r8
 8004cba:	18e3      	adds	r3, r4, r3
 8004cbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004cc0:	464b      	mov	r3, r9
 8004cc2:	eb45 0303 	adc.w	r3, r5, r3
 8004cc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004cd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	f04f 0300 	mov.w	r3, #0
 8004ce2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ce6:	4629      	mov	r1, r5
 8004ce8:	008b      	lsls	r3, r1, #2
 8004cea:	4621      	mov	r1, r4
 8004cec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cf0:	4621      	mov	r1, r4
 8004cf2:	008a      	lsls	r2, r1, #2
 8004cf4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004cf8:	f7fb ffae 	bl	8000c58 <__aeabi_uldivmod>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	4b60      	ldr	r3, [pc, #384]	; (8004e84 <UART_SetConfig+0x4e4>)
 8004d02:	fba3 2302 	umull	r2, r3, r3, r2
 8004d06:	095b      	lsrs	r3, r3, #5
 8004d08:	011c      	lsls	r4, r3, #4
 8004d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d1c:	4642      	mov	r2, r8
 8004d1e:	464b      	mov	r3, r9
 8004d20:	1891      	adds	r1, r2, r2
 8004d22:	61b9      	str	r1, [r7, #24]
 8004d24:	415b      	adcs	r3, r3
 8004d26:	61fb      	str	r3, [r7, #28]
 8004d28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d2c:	4641      	mov	r1, r8
 8004d2e:	1851      	adds	r1, r2, r1
 8004d30:	6139      	str	r1, [r7, #16]
 8004d32:	4649      	mov	r1, r9
 8004d34:	414b      	adcs	r3, r1
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	f04f 0200 	mov.w	r2, #0
 8004d3c:	f04f 0300 	mov.w	r3, #0
 8004d40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d44:	4659      	mov	r1, fp
 8004d46:	00cb      	lsls	r3, r1, #3
 8004d48:	4651      	mov	r1, sl
 8004d4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d4e:	4651      	mov	r1, sl
 8004d50:	00ca      	lsls	r2, r1, #3
 8004d52:	4610      	mov	r0, r2
 8004d54:	4619      	mov	r1, r3
 8004d56:	4603      	mov	r3, r0
 8004d58:	4642      	mov	r2, r8
 8004d5a:	189b      	adds	r3, r3, r2
 8004d5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d60:	464b      	mov	r3, r9
 8004d62:	460a      	mov	r2, r1
 8004d64:	eb42 0303 	adc.w	r3, r2, r3
 8004d68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d78:	f04f 0200 	mov.w	r2, #0
 8004d7c:	f04f 0300 	mov.w	r3, #0
 8004d80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d84:	4649      	mov	r1, r9
 8004d86:	008b      	lsls	r3, r1, #2
 8004d88:	4641      	mov	r1, r8
 8004d8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d8e:	4641      	mov	r1, r8
 8004d90:	008a      	lsls	r2, r1, #2
 8004d92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d96:	f7fb ff5f 	bl	8000c58 <__aeabi_uldivmod>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	4b39      	ldr	r3, [pc, #228]	; (8004e84 <UART_SetConfig+0x4e4>)
 8004da0:	fba3 1302 	umull	r1, r3, r3, r2
 8004da4:	095b      	lsrs	r3, r3, #5
 8004da6:	2164      	movs	r1, #100	; 0x64
 8004da8:	fb01 f303 	mul.w	r3, r1, r3
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	011b      	lsls	r3, r3, #4
 8004db0:	3332      	adds	r3, #50	; 0x32
 8004db2:	4a34      	ldr	r2, [pc, #208]	; (8004e84 <UART_SetConfig+0x4e4>)
 8004db4:	fba2 2303 	umull	r2, r3, r2, r3
 8004db8:	095b      	lsrs	r3, r3, #5
 8004dba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dbe:	441c      	add	r4, r3
 8004dc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	673b      	str	r3, [r7, #112]	; 0x70
 8004dc8:	677a      	str	r2, [r7, #116]	; 0x74
 8004dca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004dce:	4642      	mov	r2, r8
 8004dd0:	464b      	mov	r3, r9
 8004dd2:	1891      	adds	r1, r2, r2
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	415b      	adcs	r3, r3
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dde:	4641      	mov	r1, r8
 8004de0:	1851      	adds	r1, r2, r1
 8004de2:	6039      	str	r1, [r7, #0]
 8004de4:	4649      	mov	r1, r9
 8004de6:	414b      	adcs	r3, r1
 8004de8:	607b      	str	r3, [r7, #4]
 8004dea:	f04f 0200 	mov.w	r2, #0
 8004dee:	f04f 0300 	mov.w	r3, #0
 8004df2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004df6:	4659      	mov	r1, fp
 8004df8:	00cb      	lsls	r3, r1, #3
 8004dfa:	4651      	mov	r1, sl
 8004dfc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e00:	4651      	mov	r1, sl
 8004e02:	00ca      	lsls	r2, r1, #3
 8004e04:	4610      	mov	r0, r2
 8004e06:	4619      	mov	r1, r3
 8004e08:	4603      	mov	r3, r0
 8004e0a:	4642      	mov	r2, r8
 8004e0c:	189b      	adds	r3, r3, r2
 8004e0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e10:	464b      	mov	r3, r9
 8004e12:	460a      	mov	r2, r1
 8004e14:	eb42 0303 	adc.w	r3, r2, r3
 8004e18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	663b      	str	r3, [r7, #96]	; 0x60
 8004e24:	667a      	str	r2, [r7, #100]	; 0x64
 8004e26:	f04f 0200 	mov.w	r2, #0
 8004e2a:	f04f 0300 	mov.w	r3, #0
 8004e2e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e32:	4649      	mov	r1, r9
 8004e34:	008b      	lsls	r3, r1, #2
 8004e36:	4641      	mov	r1, r8
 8004e38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e3c:	4641      	mov	r1, r8
 8004e3e:	008a      	lsls	r2, r1, #2
 8004e40:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e44:	f7fb ff08 	bl	8000c58 <__aeabi_uldivmod>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4b0d      	ldr	r3, [pc, #52]	; (8004e84 <UART_SetConfig+0x4e4>)
 8004e4e:	fba3 1302 	umull	r1, r3, r3, r2
 8004e52:	095b      	lsrs	r3, r3, #5
 8004e54:	2164      	movs	r1, #100	; 0x64
 8004e56:	fb01 f303 	mul.w	r3, r1, r3
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	011b      	lsls	r3, r3, #4
 8004e5e:	3332      	adds	r3, #50	; 0x32
 8004e60:	4a08      	ldr	r2, [pc, #32]	; (8004e84 <UART_SetConfig+0x4e4>)
 8004e62:	fba2 2303 	umull	r2, r3, r2, r3
 8004e66:	095b      	lsrs	r3, r3, #5
 8004e68:	f003 020f 	and.w	r2, r3, #15
 8004e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4422      	add	r2, r4
 8004e74:	609a      	str	r2, [r3, #8]
}
 8004e76:	bf00      	nop
 8004e78:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e82:	bf00      	nop
 8004e84:	51eb851f 	.word	0x51eb851f

08004e88 <temp_model_configure_activations>:


AI_DECLARE_STATIC
ai_bool temp_model_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, AI_TEMP_MODEL_ACTIVATIONS_ALIGNMENT));
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	3303      	adds	r3, #3
 8004e98:	f023 0303 	bic.w	r3, r3, #3
 8004e9c:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    serving_default_dense_input0_output_array.data = AI_PTR(NULL);
 8004e9e:	4b0f      	ldr	r3, [pc, #60]	; (8004edc <temp_model_configure_activations+0x54>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	609a      	str	r2, [r3, #8]
    serving_default_dense_input0_output_array.data_start = AI_PTR(NULL);
 8004ea4:	4b0d      	ldr	r3, [pc, #52]	; (8004edc <temp_model_configure_activations+0x54>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	60da      	str	r2, [r3, #12]
    dense_0_output_array.data = AI_PTR(activations + 0);
 8004eaa:	4a0d      	ldr	r2, [pc, #52]	; (8004ee0 <temp_model_configure_activations+0x58>)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6093      	str	r3, [r2, #8]
    dense_0_output_array.data_start = AI_PTR(activations + 0);
 8004eb0:	4a0b      	ldr	r2, [pc, #44]	; (8004ee0 <temp_model_configure_activations+0x58>)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	60d3      	str	r3, [r2, #12]
    nl_0_output_array.data = AI_PTR(activations + 0);
 8004eb6:	4a0b      	ldr	r2, [pc, #44]	; (8004ee4 <temp_model_configure_activations+0x5c>)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6093      	str	r3, [r2, #8]
    nl_0_output_array.data_start = AI_PTR(activations + 0);
 8004ebc:	4a09      	ldr	r2, [pc, #36]	; (8004ee4 <temp_model_configure_activations+0x5c>)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(NULL);
 8004ec2:	4b09      	ldr	r3, [pc, #36]	; (8004ee8 <temp_model_configure_activations+0x60>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	609a      	str	r2, [r3, #8]
    dense_1_output_array.data_start = AI_PTR(NULL);
 8004ec8:	4b07      	ldr	r3, [pc, #28]	; (8004ee8 <temp_model_configure_activations+0x60>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 8004ece:	2301      	movs	r3, #1
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3714      	adds	r7, #20
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	200000dc 	.word	0x200000dc
 8004ee0:	200000ec 	.word	0x200000ec
 8004ee4:	200000fc 	.word	0x200000fc
 8004ee8:	2000010c 	.word	0x2000010c

08004eec <temp_model_configure_weights>:


AI_DECLARE_STATIC
ai_bool temp_model_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004efc:	4b21      	ldr	r3, [pc, #132]	; (8004f84 <temp_model_configure_weights+0x98>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f04:	4a1f      	ldr	r2, [pc, #124]	; (8004f84 <temp_model_configure_weights+0x98>)
 8004f06:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 704);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8004f0e:	4a1d      	ldr	r2, [pc, #116]	; (8004f84 <temp_model_configure_weights+0x98>)
 8004f10:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 704);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8004f18:	4a1a      	ldr	r2, [pc, #104]	; (8004f84 <temp_model_configure_weights+0x98>)
 8004f1a:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004f1c:	4b1a      	ldr	r3, [pc, #104]	; (8004f88 <temp_model_configure_weights+0x9c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f24:	4a18      	ldr	r2, [pc, #96]	; (8004f88 <temp_model_configure_weights+0x9c>)
 8004f26:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 640);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004f2e:	4a16      	ldr	r2, [pc, #88]	; (8004f88 <temp_model_configure_weights+0x9c>)
 8004f30:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 640);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004f38:	4a13      	ldr	r2, [pc, #76]	; (8004f88 <temp_model_configure_weights+0x9c>)
 8004f3a:	60d3      	str	r3, [r2, #12]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8004f3c:	4b13      	ldr	r3, [pc, #76]	; (8004f8c <temp_model_configure_weights+0xa0>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f44:	4a11      	ldr	r2, [pc, #68]	; (8004f8c <temp_model_configure_weights+0xa0>)
 8004f46:	6013      	str	r3, [r2, #0]
    dense_0_bias_array.data = AI_PTR(weights + 576);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8004f4e:	4a0f      	ldr	r2, [pc, #60]	; (8004f8c <temp_model_configure_weights+0xa0>)
 8004f50:	6093      	str	r3, [r2, #8]
    dense_0_bias_array.data_start = AI_PTR(weights + 576);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8004f58:	4a0c      	ldr	r2, [pc, #48]	; (8004f8c <temp_model_configure_weights+0xa0>)
 8004f5a:	60d3      	str	r3, [r2, #12]
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8004f5c:	4b0c      	ldr	r3, [pc, #48]	; (8004f90 <temp_model_configure_weights+0xa4>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f64:	4a0a      	ldr	r2, [pc, #40]	; (8004f90 <temp_model_configure_weights+0xa4>)
 8004f66:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(weights + 0);
 8004f68:	4a09      	ldr	r2, [pc, #36]	; (8004f90 <temp_model_configure_weights+0xa4>)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6093      	str	r3, [r2, #8]
    dense_0_weights_array.data_start = AI_PTR(weights + 0);
 8004f6e:	4a08      	ldr	r2, [pc, #32]	; (8004f90 <temp_model_configure_weights+0xa4>)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8004f74:	2301      	movs	r3, #1
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	2000009c 	.word	0x2000009c
 8004f88:	200000ac 	.word	0x200000ac
 8004f8c:	200000bc 	.word	0x200000bc
 8004f90:	200000cc 	.word	0x200000cc

08004f94 <ai_temp_model_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_temp_model_get_error(ai_handle network)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f895 	bl	80050cc <ai_platform_network_get_error>
 8004fa2:	4603      	mov	r3, r0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3708      	adds	r7, #8
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <ai_temp_model_create>:

AI_API_ENTRY
ai_error ai_temp_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af02      	add	r7, sp, #8
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	9301      	str	r3, [sp, #4]
 8004fba:	2303      	movs	r3, #3
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	4a04      	ldr	r2, [pc, #16]	; (8004fd4 <ai_temp_model_create+0x28>)
 8004fc2:	6839      	ldr	r1, [r7, #0]
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f8b3 	bl	8005130 <ai_platform_network_create>
 8004fca:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3708      	adds	r7, #8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	2000003c 	.word	0x2000003c

08004fd8 <ai_temp_model_init>:
}

AI_API_ENTRY
ai_bool ai_temp_model_init(
  ai_handle network, const ai_network_params* params)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8004fe2:	6839      	ldr	r1, [r7, #0]
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 f8fb 	bl	80051e0 <ai_platform_network_init>
 8004fea:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <ai_temp_model_init+0x1e>
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	e02b      	b.n	800504e <ai_temp_model_init+0x76>

  ai_bool ok = true;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	72fb      	strb	r3, [r7, #11]
  ok &= temp_model_configure_weights(net_ctx, &params->params);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f7ff ff74 	bl	8004eec <temp_model_configure_weights>
 8005004:	4603      	mov	r3, r0
 8005006:	461a      	mov	r2, r3
 8005008:	7afb      	ldrb	r3, [r7, #11]
 800500a:	4013      	ands	r3, r2
 800500c:	2b00      	cmp	r3, #0
 800500e:	bf14      	ite	ne
 8005010:	2301      	movne	r3, #1
 8005012:	2300      	moveq	r3, #0
 8005014:	72fb      	strb	r3, [r7, #11]
  ok &= temp_model_configure_activations(net_ctx, &params->activations);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	3318      	adds	r3, #24
 800501a:	4619      	mov	r1, r3
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f7ff ff33 	bl	8004e88 <temp_model_configure_activations>
 8005022:	4603      	mov	r3, r0
 8005024:	461a      	mov	r2, r3
 8005026:	7afb      	ldrb	r3, [r7, #11]
 8005028:	4013      	ands	r3, r2
 800502a:	2b00      	cmp	r3, #0
 800502c:	bf14      	ite	ne
 800502e:	2301      	movne	r3, #1
 8005030:	2300      	moveq	r3, #0
 8005032:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f951 	bl	80052dc <ai_platform_network_post_init>
 800503a:	4603      	mov	r3, r0
 800503c:	461a      	mov	r2, r3
 800503e:	7afb      	ldrb	r3, [r7, #11]
 8005040:	4013      	ands	r3, r2
 8005042:	2b00      	cmp	r3, #0
 8005044:	bf14      	ite	ne
 8005046:	2301      	movne	r3, #1
 8005048:	2300      	moveq	r3, #0
 800504a:	72fb      	strb	r3, [r7, #11]

  return ok;
 800504c:	7afb      	ldrb	r3, [r7, #11]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <ai_temp_model_run>:


AI_API_ENTRY
ai_i32 ai_temp_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b084      	sub	sp, #16
 800505a:	af00      	add	r7, sp, #0
 800505c:	60f8      	str	r0, [r7, #12]
 800505e:	60b9      	str	r1, [r7, #8]
 8005060:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	68b9      	ldr	r1, [r7, #8]
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 f980 	bl	800536c <ai_platform_network_process>
 800506c:	4603      	mov	r3, r0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <ai_temp_model_data_weights_get>:
#include "temp_model_data.h"

ai_handle ai_temp_model_data_weights_get(void)
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
    0x4c, 0xce, 0xbd, 0xbe, 0x00, 0x4a, 0x6d, 0x3d, 0x40, 0x0f,
    0x6e, 0x3d, 0x70, 0x09, 0x71, 0x3d, 0x3e, 0xa0, 0x6d,
    0xbe, 0xda, 0xe3, 0xed, 0xbe, 0x19, 0xe6, 0x16, 0x3d
  };

  return AI_HANDLE_PTR(s_temp_model_weights);
 800507c:	4b02      	ldr	r3, [pc, #8]	; (8005088 <ai_temp_model_data_weights_get+0x10>)

}
 800507e:	4618      	mov	r0, r3
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	080092ec 	.word	0x080092ec

0800508c <_platform_network_state_setup.isra.1>:
 800508c:	b430      	push	{r4, r5}
 800508e:	68dd      	ldr	r5, [r3, #12]
 8005090:	695c      	ldr	r4, [r3, #20]
 8005092:	68ed      	ldr	r5, [r5, #12]
 8005094:	68e4      	ldr	r4, [r4, #12]
 8005096:	fb04 f405 	mul.w	r4, r4, r5
 800509a:	6084      	str	r4, [r0, #8]
 800509c:	8809      	ldrh	r1, [r1, #0]
 800509e:	fb04 f401 	mul.w	r4, r4, r1
 80050a2:	60c4      	str	r4, [r0, #12]
 80050a4:	6811      	ldr	r1, [r2, #0]
 80050a6:	6041      	str	r1, [r0, #4]
 80050a8:	6812      	ldr	r2, [r2, #0]
 80050aa:	4414      	add	r4, r2
 80050ac:	6004      	str	r4, [r0, #0]
 80050ae:	699a      	ldr	r2, [r3, #24]
 80050b0:	6814      	ldr	r4, [r2, #0]
 80050b2:	00a4      	lsls	r4, r4, #2
 80050b4:	d407      	bmi.n	80050c6 <_platform_network_state_setup.isra.1+0x3a>
 80050b6:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 80050ba:	1b64      	subs	r4, r4, r5
 80050bc:	4421      	add	r1, r4
 80050be:	6091      	str	r1, [r2, #8]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	6842      	ldr	r2, [r0, #4]
 80050c4:	60da      	str	r2, [r3, #12]
 80050c6:	bc30      	pop	{r4, r5}
 80050c8:	4770      	bx	lr
	...

080050cc <ai_platform_network_get_error>:
 80050cc:	b410      	push	{r4}
 80050ce:	b120      	cbz	r0, 80050da <ai_platform_network_get_error+0xe>
 80050d0:	4b11      	ldr	r3, [pc, #68]	; (8005118 <ai_platform_network_get_error+0x4c>)
 80050d2:	6802      	ldr	r2, [r0, #0]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	bf18      	it	ne
 80050d8:	2000      	movne	r0, #0
 80050da:	4910      	ldr	r1, [pc, #64]	; (800511c <ai_platform_network_get_error+0x50>)
 80050dc:	4a10      	ldr	r2, [pc, #64]	; (8005120 <ai_platform_network_get_error+0x54>)
 80050de:	680b      	ldr	r3, [r1, #0]
 80050e0:	2401      	movs	r4, #1
 80050e2:	f023 0301 	bic.w	r3, r3, #1
 80050e6:	600b      	str	r3, [r1, #0]
 80050e8:	4613      	mov	r3, r2
 80050ea:	6014      	str	r4, [r2, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	2a00      	cmp	r2, #0
 80050f0:	d1fc      	bne.n	80050ec <ai_platform_network_get_error+0x20>
 80050f2:	4b0c      	ldr	r3, [pc, #48]	; (8005124 <ai_platform_network_get_error+0x58>)
 80050f4:	4a0c      	ldr	r2, [pc, #48]	; (8005128 <ai_platform_network_get_error+0x5c>)
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	4b0c      	ldr	r3, [pc, #48]	; (800512c <ai_platform_network_get_error+0x60>)
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d000      	beq.n	8005102 <ai_platform_network_get_error+0x36>
 8005100:	e7fe      	b.n	8005100 <ai_platform_network_get_error+0x34>
 8005102:	b120      	cbz	r0, 800510e <ai_platform_network_get_error+0x42>
 8005104:	3010      	adds	r0, #16
 8005106:	f85d 4b04 	ldr.w	r4, [sp], #4
 800510a:	f000 bb3b 	b.w	8005784 <core_get_error>
 800510e:	f241 0010 	movw	r0, #4112	; 0x1010
 8005112:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	a1c00100 	.word	0xa1c00100
 800511c:	e0002000 	.word	0xe0002000
 8005120:	40023008 	.word	0x40023008
 8005124:	40023000 	.word	0x40023000
 8005128:	f407a5c2 	.word	0xf407a5c2
 800512c:	b5e8b5cd 	.word	0xb5e8b5cd

08005130 <ai_platform_network_create>:
 8005130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005134:	4e23      	ldr	r6, [pc, #140]	; (80051c4 <ai_platform_network_create+0x94>)
 8005136:	4924      	ldr	r1, [pc, #144]	; (80051c8 <ai_platform_network_create+0x98>)
 8005138:	6835      	ldr	r5, [r6, #0]
 800513a:	b082      	sub	sp, #8
 800513c:	f025 0501 	bic.w	r5, r5, #1
 8005140:	f89d 7020 	ldrb.w	r7, [sp, #32]
 8005144:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8005148:	6035      	str	r5, [r6, #0]
 800514a:	2501      	movs	r5, #1
 800514c:	600d      	str	r5, [r1, #0]
 800514e:	680d      	ldr	r5, [r1, #0]
 8005150:	2d00      	cmp	r5, #0
 8005152:	d1fc      	bne.n	800514e <ai_platform_network_create+0x1e>
 8005154:	491d      	ldr	r1, [pc, #116]	; (80051cc <ai_platform_network_create+0x9c>)
 8005156:	4e1e      	ldr	r6, [pc, #120]	; (80051d0 <ai_platform_network_create+0xa0>)
 8005158:	600e      	str	r6, [r1, #0]
 800515a:	680e      	ldr	r6, [r1, #0]
 800515c:	491d      	ldr	r1, [pc, #116]	; (80051d4 <ai_platform_network_create+0xa4>)
 800515e:	428e      	cmp	r6, r1
 8005160:	d000      	beq.n	8005164 <ai_platform_network_create+0x34>
 8005162:	e7fe      	b.n	8005162 <ai_platform_network_create+0x32>
 8005164:	b1d0      	cbz	r0, 800519c <ai_platform_network_create+0x6c>
 8005166:	4698      	mov	r8, r3
 8005168:	4613      	mov	r3, r2
 800516a:	4a1b      	ldr	r2, [pc, #108]	; (80051d8 <ai_platform_network_create+0xa8>)
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	6003      	str	r3, [r0, #0]
 8005170:	4606      	mov	r6, r0
 8005172:	f000 fb05 	bl	8005780 <core_init>
 8005176:	b1b0      	cbz	r0, 80051a6 <ai_platform_network_create+0x76>
 8005178:	0223      	lsls	r3, r4, #8
 800517a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800517e:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 8005182:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8005186:	d910      	bls.n	80051aa <ai_platform_network_create+0x7a>
 8005188:	2201      	movs	r2, #1
 800518a:	2300      	movs	r3, #0
 800518c:	6033      	str	r3, [r6, #0]
 800518e:	2310      	movs	r3, #16
 8005190:	2000      	movs	r0, #0
 8005192:	f362 0007 	bfi	r0, r2, #0, #8
 8005196:	f363 201f 	bfi	r0, r3, #8, #24
 800519a:	e001      	b.n	80051a0 <ai_platform_network_create+0x70>
 800519c:	f241 0010 	movw	r0, #4112	; 0x1010
 80051a0:	b002      	add	sp, #8
 80051a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051a6:	2230      	movs	r2, #48	; 0x30
 80051a8:	e7ef      	b.n	800518a <ai_platform_network_create+0x5a>
 80051aa:	a802      	add	r0, sp, #8
 80051ac:	4b0b      	ldr	r3, [pc, #44]	; (80051dc <ai_platform_network_create+0xac>)
 80051ae:	f840 3d04 	str.w	r3, [r0, #-4]!
 80051b2:	f000 ffb9 	bl	8006128 <ai_check_custom_types>
 80051b6:	b110      	cbz	r0, 80051be <ai_platform_network_create+0x8e>
 80051b8:	462b      	mov	r3, r5
 80051ba:	462a      	mov	r2, r5
 80051bc:	e7e8      	b.n	8005190 <ai_platform_network_create+0x60>
 80051be:	2202      	movs	r2, #2
 80051c0:	e7e3      	b.n	800518a <ai_platform_network_create+0x5a>
 80051c2:	bf00      	nop
 80051c4:	e0002000 	.word	0xe0002000
 80051c8:	40023008 	.word	0x40023008
 80051cc:	40023000 	.word	0x40023000
 80051d0:	f407a5c2 	.word	0xf407a5c2
 80051d4:	b5e8b5cd 	.word	0xb5e8b5cd
 80051d8:	a1c00100 	.word	0xa1c00100
 80051dc:	84048403 	.word	0x84048403

080051e0 <ai_platform_network_init>:
 80051e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e2:	460c      	mov	r4, r1
 80051e4:	4605      	mov	r5, r0
 80051e6:	b120      	cbz	r0, 80051f2 <ai_platform_network_init+0x12>
 80051e8:	4b36      	ldr	r3, [pc, #216]	; (80052c4 <ai_platform_network_init+0xe4>)
 80051ea:	6802      	ldr	r2, [r0, #0]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	bf18      	it	ne
 80051f0:	2500      	movne	r5, #0
 80051f2:	4935      	ldr	r1, [pc, #212]	; (80052c8 <ai_platform_network_init+0xe8>)
 80051f4:	4a35      	ldr	r2, [pc, #212]	; (80052cc <ai_platform_network_init+0xec>)
 80051f6:	680b      	ldr	r3, [r1, #0]
 80051f8:	2001      	movs	r0, #1
 80051fa:	f023 0301 	bic.w	r3, r3, #1
 80051fe:	600b      	str	r3, [r1, #0]
 8005200:	4613      	mov	r3, r2
 8005202:	6010      	str	r0, [r2, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	2a00      	cmp	r2, #0
 8005208:	d1fc      	bne.n	8005204 <ai_platform_network_init+0x24>
 800520a:	4b31      	ldr	r3, [pc, #196]	; (80052d0 <ai_platform_network_init+0xf0>)
 800520c:	4a31      	ldr	r2, [pc, #196]	; (80052d4 <ai_platform_network_init+0xf4>)
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	4b31      	ldr	r3, [pc, #196]	; (80052d8 <ai_platform_network_init+0xf8>)
 8005214:	429a      	cmp	r2, r3
 8005216:	d000      	beq.n	800521a <ai_platform_network_init+0x3a>
 8005218:	e7fe      	b.n	8005218 <ai_platform_network_init+0x38>
 800521a:	b33d      	cbz	r5, 800526c <ai_platform_network_init+0x8c>
 800521c:	b344      	cbz	r4, 8005270 <ai_platform_network_init+0x90>
 800521e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8005220:	6926      	ldr	r6, [r4, #16]
 8005222:	2f00      	cmp	r7, #0
 8005224:	d03d      	beq.n	80052a2 <ai_platform_network_init+0xc2>
 8005226:	b35e      	cbz	r6, 8005280 <ai_platform_network_init+0xa0>
 8005228:	4627      	mov	r7, r4
 800522a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800522c:	f105 0618 	add.w	r6, r5, #24
 8005230:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005232:	e897 0003 	ldmia.w	r7, {r0, r1}
 8005236:	e886 0003 	stmia.w	r6, {r0, r1}
 800523a:	3418      	adds	r4, #24
 800523c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800523e:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8005242:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005244:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005248:	e886 0003 	stmia.w	r6, {r0, r1}
 800524c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800524e:	2303      	movs	r3, #3
 8005250:	60eb      	str	r3, [r5, #12]
 8005252:	b15a      	cbz	r2, 800526c <ai_platform_network_init+0x8c>
 8005254:	68d3      	ldr	r3, [r2, #12]
 8005256:	6095      	str	r5, [r2, #8]
 8005258:	429a      	cmp	r2, r3
 800525a:	d007      	beq.n	800526c <ai_platform_network_init+0x8c>
 800525c:	b133      	cbz	r3, 800526c <ai_platform_network_init+0x8c>
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	609d      	str	r5, [r3, #8]
 8005262:	429a      	cmp	r2, r3
 8005264:	d002      	beq.n	800526c <ai_platform_network_init+0x8c>
 8005266:	4613      	mov	r3, r2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1f8      	bne.n	800525e <ai_platform_network_init+0x7e>
 800526c:	4628      	mov	r0, r5
 800526e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005270:	f105 0010 	add.w	r0, r5, #16
 8005274:	2211      	movs	r2, #17
 8005276:	2110      	movs	r1, #16
 8005278:	f000 fa8a 	bl	8005790 <core_set_error>
 800527c:	4625      	mov	r5, r4
 800527e:	e7f5      	b.n	800526c <ai_platform_network_init+0x8c>
 8005280:	8921      	ldrh	r1, [r4, #8]
 8005282:	88e2      	ldrh	r2, [r4, #6]
 8005284:	68e3      	ldr	r3, [r4, #12]
 8005286:	fb02 f201 	mul.w	r2, r2, r1
 800528a:	fb03 f302 	mul.w	r3, r3, r2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d0ca      	beq.n	8005228 <ai_platform_network_init+0x48>
 8005292:	f105 0010 	add.w	r0, r5, #16
 8005296:	2212      	movs	r2, #18
 8005298:	2110      	movs	r1, #16
 800529a:	f000 fa79 	bl	8005790 <core_set_error>
 800529e:	4635      	mov	r5, r6
 80052a0:	e7e4      	b.n	800526c <ai_platform_network_init+0x8c>
 80052a2:	8c21      	ldrh	r1, [r4, #32]
 80052a4:	8be2      	ldrh	r2, [r4, #30]
 80052a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052a8:	fb02 f201 	mul.w	r2, r2, r1
 80052ac:	fb03 f302 	mul.w	r3, r3, r2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d0b8      	beq.n	8005226 <ai_platform_network_init+0x46>
 80052b4:	f105 0010 	add.w	r0, r5, #16
 80052b8:	2213      	movs	r2, #19
 80052ba:	2110      	movs	r1, #16
 80052bc:	f000 fa68 	bl	8005790 <core_set_error>
 80052c0:	463d      	mov	r5, r7
 80052c2:	e7d3      	b.n	800526c <ai_platform_network_init+0x8c>
 80052c4:	a1c00100 	.word	0xa1c00100
 80052c8:	e0002000 	.word	0xe0002000
 80052cc:	40023008 	.word	0x40023008
 80052d0:	40023000 	.word	0x40023000
 80052d4:	f407a5c2 	.word	0xf407a5c2
 80052d8:	b5e8b5cd 	.word	0xb5e8b5cd

080052dc <ai_platform_network_post_init>:
 80052dc:	b538      	push	{r3, r4, r5, lr}
 80052de:	4604      	mov	r4, r0
 80052e0:	b120      	cbz	r0, 80052ec <ai_platform_network_post_init+0x10>
 80052e2:	4b1c      	ldr	r3, [pc, #112]	; (8005354 <ai_platform_network_post_init+0x78>)
 80052e4:	6802      	ldr	r2, [r0, #0]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	bf18      	it	ne
 80052ea:	2400      	movne	r4, #0
 80052ec:	491a      	ldr	r1, [pc, #104]	; (8005358 <ai_platform_network_post_init+0x7c>)
 80052ee:	4a1b      	ldr	r2, [pc, #108]	; (800535c <ai_platform_network_post_init+0x80>)
 80052f0:	680b      	ldr	r3, [r1, #0]
 80052f2:	2001      	movs	r0, #1
 80052f4:	f023 0301 	bic.w	r3, r3, #1
 80052f8:	600b      	str	r3, [r1, #0]
 80052fa:	4613      	mov	r3, r2
 80052fc:	6010      	str	r0, [r2, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	2a00      	cmp	r2, #0
 8005302:	d1fc      	bne.n	80052fe <ai_platform_network_post_init+0x22>
 8005304:	4b16      	ldr	r3, [pc, #88]	; (8005360 <ai_platform_network_post_init+0x84>)
 8005306:	4a17      	ldr	r2, [pc, #92]	; (8005364 <ai_platform_network_post_init+0x88>)
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	4b16      	ldr	r3, [pc, #88]	; (8005368 <ai_platform_network_post_init+0x8c>)
 800530e:	429a      	cmp	r2, r3
 8005310:	d000      	beq.n	8005314 <ai_platform_network_post_init+0x38>
 8005312:	e7fe      	b.n	8005312 <ai_platform_network_post_init+0x36>
 8005314:	b1a4      	cbz	r4, 8005340 <ai_platform_network_post_init+0x64>
 8005316:	68e3      	ldr	r3, [r4, #12]
 8005318:	f013 0502 	ands.w	r5, r3, #2
 800531c:	d012      	beq.n	8005344 <ai_platform_network_post_init+0x68>
 800531e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005320:	b163      	cbz	r3, 800533c <ai_platform_network_post_init+0x60>
 8005322:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8005324:	b91d      	cbnz	r5, 800532e <ai_platform_network_post_init+0x52>
 8005326:	e009      	b.n	800533c <ai_platform_network_post_init+0x60>
 8005328:	461d      	mov	r5, r3
 800532a:	b13b      	cbz	r3, 800533c <ai_platform_network_post_init+0x60>
 800532c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800532e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005330:	4629      	mov	r1, r5
 8005332:	2000      	movs	r0, #0
 8005334:	4798      	blx	r3
 8005336:	68eb      	ldr	r3, [r5, #12]
 8005338:	42ab      	cmp	r3, r5
 800533a:	d1f5      	bne.n	8005328 <ai_platform_network_post_init+0x4c>
 800533c:	2001      	movs	r0, #1
 800533e:	bd38      	pop	{r3, r4, r5, pc}
 8005340:	4620      	mov	r0, r4
 8005342:	bd38      	pop	{r3, r4, r5, pc}
 8005344:	f104 0010 	add.w	r0, r4, #16
 8005348:	2210      	movs	r2, #16
 800534a:	2111      	movs	r1, #17
 800534c:	f000 fa20 	bl	8005790 <core_set_error>
 8005350:	4628      	mov	r0, r5
 8005352:	bd38      	pop	{r3, r4, r5, pc}
 8005354:	a1c00100 	.word	0xa1c00100
 8005358:	e0002000 	.word	0xe0002000
 800535c:	40023008 	.word	0x40023008
 8005360:	40023000 	.word	0x40023000
 8005364:	f407a5c2 	.word	0xf407a5c2
 8005368:	b5e8b5cd 	.word	0xb5e8b5cd

0800536c <ai_platform_network_process>:
 800536c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005370:	b083      	sub	sp, #12
 8005372:	4604      	mov	r4, r0
 8005374:	9201      	str	r2, [sp, #4]
 8005376:	b120      	cbz	r0, 8005382 <ai_platform_network_process+0x16>
 8005378:	4ba5      	ldr	r3, [pc, #660]	; (8005610 <ai_platform_network_process+0x2a4>)
 800537a:	6802      	ldr	r2, [r0, #0]
 800537c:	429a      	cmp	r2, r3
 800537e:	bf18      	it	ne
 8005380:	2400      	movne	r4, #0
 8005382:	48a4      	ldr	r0, [pc, #656]	; (8005614 <ai_platform_network_process+0x2a8>)
 8005384:	4ba4      	ldr	r3, [pc, #656]	; (8005618 <ai_platform_network_process+0x2ac>)
 8005386:	6802      	ldr	r2, [r0, #0]
 8005388:	f022 0201 	bic.w	r2, r2, #1
 800538c:	6002      	str	r2, [r0, #0]
 800538e:	2201      	movs	r2, #1
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	2a00      	cmp	r2, #0
 8005396:	d1fc      	bne.n	8005392 <ai_platform_network_process+0x26>
 8005398:	4ba0      	ldr	r3, [pc, #640]	; (800561c <ai_platform_network_process+0x2b0>)
 800539a:	4aa1      	ldr	r2, [pc, #644]	; (8005620 <ai_platform_network_process+0x2b4>)
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	4ba0      	ldr	r3, [pc, #640]	; (8005624 <ai_platform_network_process+0x2b8>)
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d000      	beq.n	80053a8 <ai_platform_network_process+0x3c>
 80053a6:	e7fe      	b.n	80053a6 <ai_platform_network_process+0x3a>
 80053a8:	2c00      	cmp	r4, #0
 80053aa:	d066      	beq.n	800547a <ai_platform_network_process+0x10e>
 80053ac:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 80053b0:	b107      	cbz	r7, 80053b4 <ai_platform_network_process+0x48>
 80053b2:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 80053b4:	68e3      	ldr	r3, [r4, #12]
 80053b6:	f003 0303 	and.w	r3, r3, #3
 80053ba:	2600      	movs	r6, #0
 80053bc:	2b03      	cmp	r3, #3
 80053be:	6166      	str	r6, [r4, #20]
 80053c0:	f040 80fe 	bne.w	80055c0 <ai_platform_network_process+0x254>
 80053c4:	2900      	cmp	r1, #0
 80053c6:	d07f      	beq.n	80054c8 <ai_platform_network_process+0x15c>
 80053c8:	2f00      	cmp	r7, #0
 80053ca:	d07d      	beq.n	80054c8 <ai_platform_network_process+0x15c>
 80053cc:	883b      	ldrh	r3, [r7, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d07a      	beq.n	80054c8 <ai_platform_network_process+0x15c>
 80053d2:	460d      	mov	r5, r1
 80053d4:	46a0      	mov	r8, r4
 80053d6:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 80053da:	429e      	cmp	r6, r3
 80053dc:	d27d      	bcs.n	80054da <ai_platform_network_process+0x16e>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d07a      	beq.n	80054da <ai_platform_network_process+0x16e>
 80053e4:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 80053e8:	2c00      	cmp	r4, #0
 80053ea:	d076      	beq.n	80054da <ai_platform_network_process+0x16e>
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 80053f4:	d067      	beq.n	80054c6 <ai_platform_network_process+0x15a>
 80053f6:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80053fa:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 80053fe:	69a0      	ldr	r0, [r4, #24]
 8005400:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8005404:	6841      	ldr	r1, [r0, #4]
 8005406:	fb0b f30e 	mul.w	r3, fp, lr
 800540a:	fb0c f303 	mul.w	r3, ip, r3
 800540e:	4299      	cmp	r1, r3
 8005410:	d350      	bcc.n	80054b4 <ai_platform_network_process+0x148>
 8005412:	68e3      	ldr	r3, [r4, #12]
 8005414:	68da      	ldr	r2, [r3, #12]
 8005416:	455a      	cmp	r2, fp
 8005418:	d14c      	bne.n	80054b4 <ai_platform_network_process+0x148>
 800541a:	689a      	ldr	r2, [r3, #8]
 800541c:	4572      	cmp	r2, lr
 800541e:	d149      	bne.n	80054b4 <ai_platform_network_process+0x148>
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	459c      	cmp	ip, r3
 8005424:	d146      	bne.n	80054b4 <ai_platform_network_process+0x148>
 8005426:	6800      	ldr	r0, [r0, #0]
 8005428:	f000 ff2e 	bl	8006288 <ai_array_get_byte_size>
 800542c:	68e2      	ldr	r2, [r4, #12]
 800542e:	6963      	ldr	r3, [r4, #20]
 8005430:	68d2      	ldr	r2, [r2, #12]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	fb03 f302 	mul.w	r3, r3, r2
 8005438:	4298      	cmp	r0, r3
 800543a:	d33b      	bcc.n	80054b4 <ai_platform_network_process+0x148>
 800543c:	69a3      	ldr	r3, [r4, #24]
 800543e:	6818      	ldr	r0, [r3, #0]
 8005440:	f000 fed6 	bl	80061f0 <ai_array_to_buffer_fmt>
 8005444:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8005448:	4043      	eors	r3, r0
 800544a:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800544e:	d128      	bne.n	80054a2 <ai_platform_network_process+0x136>
 8005450:	68eb      	ldr	r3, [r5, #12]
 8005452:	b1f3      	cbz	r3, 8005492 <ai_platform_network_process+0x126>
 8005454:	f8b5 b000 	ldrh.w	fp, [r5]
 8005458:	f1bb 0f00 	cmp.w	fp, #0
 800545c:	d012      	beq.n	8005484 <ai_platform_network_process+0x118>
 800545e:	4623      	mov	r3, r4
 8005460:	f105 020c 	add.w	r2, r5, #12
 8005464:	4629      	mov	r1, r5
 8005466:	4650      	mov	r0, sl
 8005468:	f7ff fe10 	bl	800508c <_platform_network_state_setup.isra.1>
 800546c:	45d9      	cmp	r9, fp
 800546e:	883b      	ldrh	r3, [r7, #0]
 8005470:	bf38      	it	cc
 8005472:	46d9      	movcc	r9, fp
 8005474:	3601      	adds	r6, #1
 8005476:	3518      	adds	r5, #24
 8005478:	e7af      	b.n	80053da <ai_platform_network_process+0x6e>
 800547a:	46a3      	mov	fp, r4
 800547c:	4658      	mov	r0, fp
 800547e:	b003      	add	sp, #12
 8005480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005484:	f108 0010 	add.w	r0, r8, #16
 8005488:	2221      	movs	r2, #33	; 0x21
 800548a:	2112      	movs	r1, #18
 800548c:	f000 f980 	bl	8005790 <core_set_error>
 8005490:	e7f4      	b.n	800547c <ai_platform_network_process+0x110>
 8005492:	f108 0010 	add.w	r0, r8, #16
 8005496:	2217      	movs	r2, #23
 8005498:	2112      	movs	r1, #18
 800549a:	469b      	mov	fp, r3
 800549c:	f000 f978 	bl	8005790 <core_set_error>
 80054a0:	e7ec      	b.n	800547c <ai_platform_network_process+0x110>
 80054a2:	f108 0010 	add.w	r0, r8, #16
 80054a6:	2219      	movs	r2, #25
 80054a8:	2112      	movs	r1, #18
 80054aa:	f000 f971 	bl	8005790 <core_set_error>
 80054ae:	f04f 0b00 	mov.w	fp, #0
 80054b2:	e7e3      	b.n	800547c <ai_platform_network_process+0x110>
 80054b4:	f108 0010 	add.w	r0, r8, #16
 80054b8:	2218      	movs	r2, #24
 80054ba:	2112      	movs	r1, #18
 80054bc:	f000 f968 	bl	8005790 <core_set_error>
 80054c0:	f04f 0b00 	mov.w	fp, #0
 80054c4:	e7da      	b.n	800547c <ai_platform_network_process+0x110>
 80054c6:	4644      	mov	r4, r8
 80054c8:	f104 0010 	add.w	r0, r4, #16
 80054cc:	2217      	movs	r2, #23
 80054ce:	2112      	movs	r1, #18
 80054d0:	f000 f95e 	bl	8005790 <core_set_error>
 80054d4:	f04f 0b00 	mov.w	fp, #0
 80054d8:	e7d0      	b.n	800547c <ai_platform_network_process+0x110>
 80054da:	9a01      	ldr	r2, [sp, #4]
 80054dc:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 80054e0:	4644      	mov	r4, r8
 80054e2:	2a00      	cmp	r2, #0
 80054e4:	f000 80a4 	beq.w	8005630 <ai_platform_network_process+0x2c4>
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	f240 8140 	bls.w	800576e <ai_platform_network_process+0x402>
 80054ee:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 80054f2:	f118 0f0c 	cmn.w	r8, #12
 80054f6:	f000 813a 	beq.w	800576e <ai_platform_network_process+0x402>
 80054fa:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f000 8135 	beq.w	800576e <ai_platform_network_process+0x402>
 8005504:	3204      	adds	r2, #4
 8005506:	4615      	mov	r5, r2
 8005508:	2700      	movs	r7, #0
 800550a:	429f      	cmp	r7, r3
 800550c:	f080 808c 	bcs.w	8005628 <ai_platform_network_process+0x2bc>
 8005510:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 8087 	beq.w	8005628 <ai_platform_network_process+0x2bc>
 800551a:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 800551e:	2e00      	cmp	r6, #0
 8005520:	f000 8082 	beq.w	8005628 <ai_platform_network_process+0x2bc>
 8005524:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 800552e:	d067      	beq.n	8005600 <ai_platform_network_process+0x294>
 8005530:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8005534:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8005538:	69b0      	ldr	r0, [r6, #24]
 800553a:	f8d5 c008 	ldr.w	ip, [r5, #8]
 800553e:	6841      	ldr	r1, [r0, #4]
 8005540:	fb0b f30e 	mul.w	r3, fp, lr
 8005544:	fb0c f303 	mul.w	r3, ip, r3
 8005548:	4299      	cmp	r1, r3
 800554a:	f0c0 8110 	bcc.w	800576e <ai_platform_network_process+0x402>
 800554e:	68f3      	ldr	r3, [r6, #12]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	455a      	cmp	r2, fp
 8005554:	f040 810b 	bne.w	800576e <ai_platform_network_process+0x402>
 8005558:	689a      	ldr	r2, [r3, #8]
 800555a:	4572      	cmp	r2, lr
 800555c:	f040 8107 	bne.w	800576e <ai_platform_network_process+0x402>
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	459c      	cmp	ip, r3
 8005564:	f040 8103 	bne.w	800576e <ai_platform_network_process+0x402>
 8005568:	6800      	ldr	r0, [r0, #0]
 800556a:	f000 fe8d 	bl	8006288 <ai_array_get_byte_size>
 800556e:	68f2      	ldr	r2, [r6, #12]
 8005570:	6973      	ldr	r3, [r6, #20]
 8005572:	68d2      	ldr	r2, [r2, #12]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	fb03 f302 	mul.w	r3, r3, r2
 800557a:	4298      	cmp	r0, r3
 800557c:	f0c0 80f7 	bcc.w	800576e <ai_platform_network_process+0x402>
 8005580:	69b3      	ldr	r3, [r6, #24]
 8005582:	6818      	ldr	r0, [r3, #0]
 8005584:	f000 fe34 	bl	80061f0 <ai_array_to_buffer_fmt>
 8005588:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800558c:	4043      	eors	r3, r0
 800558e:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8005592:	d12c      	bne.n	80055ee <ai_platform_network_process+0x282>
 8005594:	68eb      	ldr	r3, [r5, #12]
 8005596:	b313      	cbz	r3, 80055de <ai_platform_network_process+0x272>
 8005598:	f8b5 b000 	ldrh.w	fp, [r5]
 800559c:	f1bb 0f00 	cmp.w	fp, #0
 80055a0:	d016      	beq.n	80055d0 <ai_platform_network_process+0x264>
 80055a2:	4633      	mov	r3, r6
 80055a4:	f105 020c 	add.w	r2, r5, #12
 80055a8:	4629      	mov	r1, r5
 80055aa:	4650      	mov	r0, sl
 80055ac:	f7ff fd6e 	bl	800508c <_platform_network_state_setup.isra.1>
 80055b0:	45d9      	cmp	r9, fp
 80055b2:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80055b6:	bf38      	it	cc
 80055b8:	46d9      	movcc	r9, fp
 80055ba:	3701      	adds	r7, #1
 80055bc:	3518      	adds	r5, #24
 80055be:	e7a4      	b.n	800550a <ai_platform_network_process+0x19e>
 80055c0:	f104 0010 	add.w	r0, r4, #16
 80055c4:	2230      	movs	r2, #48	; 0x30
 80055c6:	2111      	movs	r1, #17
 80055c8:	f000 f8e2 	bl	8005790 <core_set_error>
 80055cc:	46b3      	mov	fp, r6
 80055ce:	e755      	b.n	800547c <ai_platform_network_process+0x110>
 80055d0:	f104 0010 	add.w	r0, r4, #16
 80055d4:	2221      	movs	r2, #33	; 0x21
 80055d6:	2113      	movs	r1, #19
 80055d8:	f000 f8da 	bl	8005790 <core_set_error>
 80055dc:	e74e      	b.n	800547c <ai_platform_network_process+0x110>
 80055de:	f104 0010 	add.w	r0, r4, #16
 80055e2:	2217      	movs	r2, #23
 80055e4:	2113      	movs	r1, #19
 80055e6:	469b      	mov	fp, r3
 80055e8:	f000 f8d2 	bl	8005790 <core_set_error>
 80055ec:	e746      	b.n	800547c <ai_platform_network_process+0x110>
 80055ee:	f104 0010 	add.w	r0, r4, #16
 80055f2:	2219      	movs	r2, #25
 80055f4:	2113      	movs	r1, #19
 80055f6:	f000 f8cb 	bl	8005790 <core_set_error>
 80055fa:	f04f 0b00 	mov.w	fp, #0
 80055fe:	e73d      	b.n	800547c <ai_platform_network_process+0x110>
 8005600:	f104 0010 	add.w	r0, r4, #16
 8005604:	2217      	movs	r2, #23
 8005606:	2113      	movs	r1, #19
 8005608:	f000 f8c2 	bl	8005790 <core_set_error>
 800560c:	46d3      	mov	fp, sl
 800560e:	e735      	b.n	800547c <ai_platform_network_process+0x110>
 8005610:	a1c00100 	.word	0xa1c00100
 8005614:	e0002000 	.word	0xe0002000
 8005618:	40023008 	.word	0x40023008
 800561c:	40023000 	.word	0x40023000
 8005620:	f407a5c2 	.word	0xf407a5c2
 8005624:	b5e8b5cd 	.word	0xb5e8b5cd
 8005628:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800562c:	f8a4 9014 	strh.w	r9, [r4, #20]
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 8099 	beq.w	8005768 <ai_platform_network_process+0x3fc>
 8005636:	2b01      	cmp	r3, #1
 8005638:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800563a:	f240 8093 	bls.w	8005764 <ai_platform_network_process+0x3f8>
 800563e:	f105 070c 	add.w	r7, r5, #12
 8005642:	8ae0      	ldrh	r0, [r4, #22]
 8005644:	8aa3      	ldrh	r3, [r4, #20]
 8005646:	4283      	cmp	r3, r0
 8005648:	d977      	bls.n	800573a <ai_platform_network_process+0x3ce>
 800564a:	46a3      	mov	fp, r4
 800564c:	2d00      	cmp	r5, #0
 800564e:	d032      	beq.n	80056b6 <ai_platform_network_process+0x34a>
 8005650:	882b      	ldrh	r3, [r5, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d02f      	beq.n	80056b6 <ai_platform_network_process+0x34a>
 8005656:	686b      	ldr	r3, [r5, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d02c      	beq.n	80056b6 <ai_platform_network_process+0x34a>
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f04f 0800 	mov.w	r8, #0
 8005662:	b343      	cbz	r3, 80056b6 <ai_platform_network_process+0x34a>
 8005664:	68a9      	ldr	r1, [r5, #8]
 8005666:	699a      	ldr	r2, [r3, #24]
 8005668:	f8d1 a000 	ldr.w	sl, [r1]
 800566c:	6814      	ldr	r4, [r2, #0]
 800566e:	6890      	ldr	r0, [r2, #8]
 8005670:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8005674:	eb0a 0609 	add.w	r6, sl, r9
 8005678:	00a4      	lsls	r4, r4, #2
 800567a:	6871      	ldr	r1, [r6, #4]
 800567c:	d45f      	bmi.n	800573e <ai_platform_network_process+0x3d2>
 800567e:	68d4      	ldr	r4, [r2, #12]
 8005680:	1b00      	subs	r0, r0, r4
 8005682:	4401      	add	r1, r0
 8005684:	6091      	str	r1, [r2, #8]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	6872      	ldr	r2, [r6, #4]
 800568a:	60da      	str	r2, [r3, #12]
 800568c:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8005690:	f85a 2009 	ldr.w	r2, [sl, r9]
 8005694:	440b      	add	r3, r1
 8005696:	4293      	cmp	r3, r2
 8005698:	bf24      	itt	cs
 800569a:	68f3      	ldrcs	r3, [r6, #12]
 800569c:	1ad3      	subcs	r3, r2, r3
 800569e:	6073      	str	r3, [r6, #4]
 80056a0:	882b      	ldrh	r3, [r5, #0]
 80056a2:	f108 0801 	add.w	r8, r8, #1
 80056a6:	4598      	cmp	r8, r3
 80056a8:	d205      	bcs.n	80056b6 <ai_platform_network_process+0x34a>
 80056aa:	686b      	ldr	r3, [r5, #4]
 80056ac:	b11b      	cbz	r3, 80056b6 <ai_platform_network_process+0x34a>
 80056ae:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1d6      	bne.n	8005664 <ai_platform_network_process+0x2f8>
 80056b6:	4658      	mov	r0, fp
 80056b8:	f000 fd60 	bl	800617c <ai_layers_forward_all>
 80056bc:	2f00      	cmp	r7, #0
 80056be:	d032      	beq.n	8005726 <ai_platform_network_process+0x3ba>
 80056c0:	883b      	ldrh	r3, [r7, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d02f      	beq.n	8005726 <ai_platform_network_process+0x3ba>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	b36b      	cbz	r3, 8005726 <ai_platform_network_process+0x3ba>
 80056ca:	6818      	ldr	r0, [r3, #0]
 80056cc:	b358      	cbz	r0, 8005726 <ai_platform_network_process+0x3ba>
 80056ce:	f04f 0800 	mov.w	r8, #0
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	6981      	ldr	r1, [r0, #24]
 80056d6:	f8d3 a000 	ldr.w	sl, [r3]
 80056da:	680c      	ldr	r4, [r1, #0]
 80056dc:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80056e0:	eb0a 0609 	add.w	r6, sl, r9
 80056e4:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 80056e8:	00a4      	lsls	r4, r4, #2
 80056ea:	eb0c 0302 	add.w	r3, ip, r2
 80056ee:	d42a      	bmi.n	8005746 <ai_platform_network_process+0x3da>
 80056f0:	f85a 2009 	ldr.w	r2, [sl, r9]
 80056f4:	4293      	cmp	r3, r2
 80056f6:	bf24      	itt	cs
 80056f8:	68f3      	ldrcs	r3, [r6, #12]
 80056fa:	1ad3      	subcs	r3, r2, r3
 80056fc:	6073      	str	r3, [r6, #4]
 80056fe:	6981      	ldr	r1, [r0, #24]
 8005700:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8005704:	1b12      	subs	r2, r2, r4
 8005706:	4413      	add	r3, r2
 8005708:	608b      	str	r3, [r1, #8]
 800570a:	6983      	ldr	r3, [r0, #24]
 800570c:	6872      	ldr	r2, [r6, #4]
 800570e:	60da      	str	r2, [r3, #12]
 8005710:	883b      	ldrh	r3, [r7, #0]
 8005712:	f108 0801 	add.w	r8, r8, #1
 8005716:	4598      	cmp	r8, r3
 8005718:	d205      	bcs.n	8005726 <ai_platform_network_process+0x3ba>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	b11b      	cbz	r3, 8005726 <ai_platform_network_process+0x3ba>
 800571e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005722:	2800      	cmp	r0, #0
 8005724:	d1d5      	bne.n	80056d2 <ai_platform_network_process+0x366>
 8005726:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 800572a:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800572e:	3001      	adds	r0, #1
 8005730:	b280      	uxth	r0, r0
 8005732:	4283      	cmp	r3, r0
 8005734:	f8ab 0016 	strh.w	r0, [fp, #22]
 8005738:	d888      	bhi.n	800564c <ai_platform_network_process+0x2e0>
 800573a:	4683      	mov	fp, r0
 800573c:	e69e      	b.n	800547c <ai_platform_network_process+0x110>
 800573e:	68b2      	ldr	r2, [r6, #8]
 8005740:	f000 fe38 	bl	80063b4 <memcpy>
 8005744:	e7a2      	b.n	800568c <ai_platform_network_process+0x320>
 8005746:	6889      	ldr	r1, [r1, #8]
 8005748:	4660      	mov	r0, ip
 800574a:	f000 fe33 	bl	80063b4 <memcpy>
 800574e:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8005752:	f85a 2009 	ldr.w	r2, [sl, r9]
 8005756:	440b      	add	r3, r1
 8005758:	4293      	cmp	r3, r2
 800575a:	bf24      	itt	cs
 800575c:	68f3      	ldrcs	r3, [r6, #12]
 800575e:	1ad3      	subcs	r3, r2, r3
 8005760:	6073      	str	r3, [r6, #4]
 8005762:	e7d5      	b.n	8005710 <ai_platform_network_process+0x3a4>
 8005764:	2700      	movs	r7, #0
 8005766:	e76c      	b.n	8005642 <ai_platform_network_process+0x2d6>
 8005768:	461d      	mov	r5, r3
 800576a:	461f      	mov	r7, r3
 800576c:	e769      	b.n	8005642 <ai_platform_network_process+0x2d6>
 800576e:	f104 0010 	add.w	r0, r4, #16
 8005772:	2218      	movs	r2, #24
 8005774:	2113      	movs	r1, #19
 8005776:	f000 f80b 	bl	8005790 <core_set_error>
 800577a:	f04f 0b00 	mov.w	fp, #0
 800577e:	e67d      	b.n	800547c <ai_platform_network_process+0x110>

08005780 <core_init>:
 8005780:	2001      	movs	r0, #1
 8005782:	4770      	bx	lr

08005784 <core_get_error>:
 8005784:	4603      	mov	r3, r0
 8005786:	2200      	movs	r2, #0
 8005788:	6800      	ldr	r0, [r0, #0]
 800578a:	601a      	str	r2, [r3, #0]
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop

08005790 <core_set_error>:
 8005790:	7803      	ldrb	r3, [r0, #0]
 8005792:	b933      	cbnz	r3, 80057a2 <core_set_error+0x12>
 8005794:	7001      	strb	r1, [r0, #0]
 8005796:	6803      	ldr	r3, [r0, #0]
 8005798:	f362 231f 	bfi	r3, r2, #8, #24
 800579c:	6003      	str	r3, [r0, #0]
 800579e:	2001      	movs	r0, #1
 80057a0:	4770      	bx	lr
 80057a2:	2000      	movs	r0, #0
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop

080057a8 <ai_dict8_dot_array_f32>:
 80057a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057ac:	f8dd c020 	ldr.w	ip, [sp, #32]
 80057b0:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 80057b4:	f000 80c0 	beq.w	8005938 <ai_dict8_dot_array_f32+0x190>
 80057b8:	f101 0408 	add.w	r4, r1, #8
 80057bc:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 80057c0:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8005940 <ai_dict8_dot_array_f32+0x198>
 80057c4:	eb04 0e09 	add.w	lr, r4, r9
 80057c8:	f103 0520 	add.w	r5, r3, #32
 80057cc:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 80057d0:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 80057d4:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 80057d8:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 80057dc:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 80057e0:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 80057e4:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 80057e8:	ed55 3a04 	vldr	s7, [r5, #-16]
 80057ec:	ed55 4a03 	vldr	s9, [r5, #-12]
 80057f0:	ed55 5a02 	vldr	s11, [r5, #-8]
 80057f4:	ed55 6a01 	vldr	s13, [r5, #-4]
 80057f8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80057fc:	edd6 7a00 	vldr	s15, [r6]
 8005800:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 8005804:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005808:	ee67 7a83 	vmul.f32	s15, s15, s6
 800580c:	ed9a 3a00 	vldr	s6, [sl]
 8005810:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8005814:	eee3 7a05 	vfma.f32	s15, s6, s10
 8005818:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800581c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005820:	ed97 3a00 	vldr	s6, [r7]
 8005824:	ed96 5a00 	vldr	s10, [r6]
 8005828:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 800582c:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8005830:	eee3 7a04 	vfma.f32	s15, s6, s8
 8005834:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005838:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800583c:	ed9a 3a00 	vldr	s6, [sl]
 8005840:	ed96 4a00 	vldr	s8, [r6]
 8005844:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8005848:	eee5 7a06 	vfma.f32	s15, s10, s12
 800584c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005850:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005854:	ed97 5a00 	vldr	s10, [r7]
 8005858:	ed96 6a00 	vldr	s12, [r6]
 800585c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005860:	3408      	adds	r4, #8
 8005862:	45a6      	cmp	lr, r4
 8005864:	f105 0520 	add.w	r5, r5, #32
 8005868:	eee4 7a24 	vfma.f32	s15, s8, s9
 800586c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005870:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005874:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005878:	d1a8      	bne.n	80057cc <ai_dict8_dot_array_f32+0x24>
 800587a:	4449      	add	r1, r9
 800587c:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8005880:	f01c 0c07 	ands.w	ip, ip, #7
 8005884:	d050      	beq.n	8005928 <ai_dict8_dot_array_f32+0x180>
 8005886:	780c      	ldrb	r4, [r1, #0]
 8005888:	edd3 6a00 	vldr	s13, [r3]
 800588c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005890:	edd4 7a00 	vldr	s15, [r4]
 8005894:	f1bc 0f01 	cmp.w	ip, #1
 8005898:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800589c:	d044      	beq.n	8005928 <ai_dict8_dot_array_f32+0x180>
 800589e:	784c      	ldrb	r4, [r1, #1]
 80058a0:	edd3 6a01 	vldr	s13, [r3, #4]
 80058a4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80058a8:	edd4 7a00 	vldr	s15, [r4]
 80058ac:	f1bc 0f02 	cmp.w	ip, #2
 80058b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80058b4:	d038      	beq.n	8005928 <ai_dict8_dot_array_f32+0x180>
 80058b6:	788c      	ldrb	r4, [r1, #2]
 80058b8:	edd3 6a02 	vldr	s13, [r3, #8]
 80058bc:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80058c0:	edd4 7a00 	vldr	s15, [r4]
 80058c4:	f1bc 0f03 	cmp.w	ip, #3
 80058c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80058cc:	d02c      	beq.n	8005928 <ai_dict8_dot_array_f32+0x180>
 80058ce:	78cc      	ldrb	r4, [r1, #3]
 80058d0:	edd3 6a03 	vldr	s13, [r3, #12]
 80058d4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80058d8:	edd4 7a00 	vldr	s15, [r4]
 80058dc:	f1bc 0f04 	cmp.w	ip, #4
 80058e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80058e4:	d020      	beq.n	8005928 <ai_dict8_dot_array_f32+0x180>
 80058e6:	790c      	ldrb	r4, [r1, #4]
 80058e8:	edd3 6a04 	vldr	s13, [r3, #16]
 80058ec:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80058f0:	edd4 7a00 	vldr	s15, [r4]
 80058f4:	f1bc 0f05 	cmp.w	ip, #5
 80058f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80058fc:	d014      	beq.n	8005928 <ai_dict8_dot_array_f32+0x180>
 80058fe:	794c      	ldrb	r4, [r1, #5]
 8005900:	edd3 6a05 	vldr	s13, [r3, #20]
 8005904:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005908:	edd4 7a00 	vldr	s15, [r4]
 800590c:	f1bc 0f06 	cmp.w	ip, #6
 8005910:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005914:	d008      	beq.n	8005928 <ai_dict8_dot_array_f32+0x180>
 8005916:	7989      	ldrb	r1, [r1, #6]
 8005918:	edd3 7a06 	vldr	s15, [r3, #24]
 800591c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005920:	edd2 6a00 	vldr	s13, [r2]
 8005924:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005928:	edd0 7a00 	vldr	s15, [r0]
 800592c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005930:	ed80 7a00 	vstr	s14, [r0]
 8005934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005938:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8005940 <ai_dict8_dot_array_f32+0x198>
 800593c:	e7a0      	b.n	8005880 <ai_dict8_dot_array_f32+0xd8>
 800593e:	bf00      	nop
 8005940:	00000000 	.word	0x00000000

08005944 <ai_dict4_dot_array_f32>:
 8005944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005948:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800594a:	f027 0c01 	bic.w	ip, r7, #1
 800594e:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8005952:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8005956:	f000 80ae 	beq.w	8005ab6 <ai_dict4_dot_array_f32+0x172>
 800595a:	1d0d      	adds	r5, r1, #4
 800595c:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8005960:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8005abc <ai_dict4_dot_array_f32+0x178>
 8005964:	eb05 0e09 	add.w	lr, r5, r9
 8005968:	f103 0420 	add.w	r4, r3, #32
 800596c:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8005970:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 8005974:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 8005978:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 800597c:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8005980:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 8005984:	ed14 5a04 	vldr	s10, [r4, #-16]
 8005988:	ed54 5a03 	vldr	s11, [r4, #-12]
 800598c:	ed14 6a02 	vldr	s12, [r4, #-8]
 8005990:	ed54 6a01 	vldr	s13, [r4, #-4]
 8005994:	f006 0a0f 	and.w	sl, r6, #15
 8005998:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800599c:	edda 7a00 	vldr	s15, [sl]
 80059a0:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 80059a4:	0936      	lsrs	r6, r6, #4
 80059a6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80059aa:	ee67 7a83 	vmul.f32	s15, s15, s6
 80059ae:	ed96 3a00 	vldr	s6, [r6]
 80059b2:	ea4f 161b 	mov.w	r6, fp, lsr #4
 80059b6:	eee3 7a23 	vfma.f32	s15, s6, s7
 80059ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80059be:	f00b 0b0f 	and.w	fp, fp, #15
 80059c2:	edd6 3a00 	vldr	s7, [r6]
 80059c6:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 80059ca:	eee3 7a84 	vfma.f32	s15, s7, s8
 80059ce:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 80059d2:	3504      	adds	r5, #4
 80059d4:	ed9b 4a00 	vldr	s8, [fp]
 80059d8:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 80059dc:	eee4 7a24 	vfma.f32	s15, s8, s9
 80059e0:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 80059e4:	f00a 0a0f 	and.w	sl, sl, #15
 80059e8:	eddb 4a00 	vldr	s9, [fp]
 80059ec:	eee4 7a85 	vfma.f32	s15, s9, s10
 80059f0:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80059f4:	45ae      	cmp	lr, r5
 80059f6:	ed9a 5a00 	vldr	s10, [sl]
 80059fa:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 80059fe:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005a02:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005a06:	f006 060f 	and.w	r6, r6, #15
 8005a0a:	edda 5a00 	vldr	s11, [sl]
 8005a0e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005a12:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005a16:	f104 0420 	add.w	r4, r4, #32
 8005a1a:	ed96 6a00 	vldr	s12, [r6]
 8005a1e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005a22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a26:	d1a1      	bne.n	800596c <ai_dict4_dot_array_f32+0x28>
 8005a28:	4449      	add	r1, r9
 8005a2a:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8005a2e:	459c      	cmp	ip, r3
 8005a30:	d92d      	bls.n	8005a8e <ai_dict4_dot_array_f32+0x14a>
 8005a32:	f10c 0c07 	add.w	ip, ip, #7
 8005a36:	f103 0508 	add.w	r5, r3, #8
 8005a3a:	ebac 0c05 	sub.w	ip, ip, r5
 8005a3e:	f02c 0407 	bic.w	r4, ip, #7
 8005a42:	f103 0810 	add.w	r8, r3, #16
 8005a46:	44a0      	add	r8, r4
 8005a48:	f101 3eff 	add.w	lr, r1, #4294967295
 8005a4c:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8005a50:	ed15 6a01 	vldr	s12, [r5, #-4]
 8005a54:	ed55 6a02 	vldr	s13, [r5, #-8]
 8005a58:	f004 060f 	and.w	r6, r4, #15
 8005a5c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005a60:	0924      	lsrs	r4, r4, #4
 8005a62:	edd6 7a00 	vldr	s15, [r6]
 8005a66:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005a6a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005a6e:	ed94 6a00 	vldr	s12, [r4]
 8005a72:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005a76:	3508      	adds	r5, #8
 8005a78:	45a8      	cmp	r8, r5
 8005a7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a7e:	d1e5      	bne.n	8005a4c <ai_dict4_dot_array_f32+0x108>
 8005a80:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8005a84:	f10c 0c01 	add.w	ip, ip, #1
 8005a88:	4461      	add	r1, ip
 8005a8a:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8005a8e:	07fc      	lsls	r4, r7, #31
 8005a90:	d509      	bpl.n	8005aa6 <ai_dict4_dot_array_f32+0x162>
 8005a92:	7809      	ldrb	r1, [r1, #0]
 8005a94:	edd3 7a00 	vldr	s15, [r3]
 8005a98:	090b      	lsrs	r3, r1, #4
 8005a9a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005a9e:	edd2 6a00 	vldr	s13, [r2]
 8005aa2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005aa6:	edd0 7a00 	vldr	s15, [r0]
 8005aaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005aae:	ed80 7a00 	vstr	s14, [r0]
 8005ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ab6:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8005abc <ai_dict4_dot_array_f32+0x178>
 8005aba:	e7b8      	b.n	8005a2e <ai_dict4_dot_array_f32+0xea>
 8005abc:	00000000 	.word	0x00000000

08005ac0 <forward_dense>:
 8005ac0:	6942      	ldr	r2, [r0, #20]
 8005ac2:	8813      	ldrh	r3, [r2, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f000 81ca 	beq.w	8005e5e <forward_dense+0x39e>
 8005aca:	6852      	ldr	r2, [r2, #4]
 8005acc:	6850      	ldr	r0, [r2, #4]
 8005ace:	b100      	cbz	r0, 8005ad2 <forward_dense+0x12>
 8005ad0:	6800      	ldr	r0, [r0, #0]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	f240 81c0 	bls.w	8005e58 <forward_dense+0x398>
 8005ad8:	6911      	ldr	r1, [r2, #16]
 8005ada:	b101      	cbz	r1, 8005ade <forward_dense+0x1e>
 8005adc:	6809      	ldr	r1, [r1, #0]
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	f000 81bf 	beq.w	8005e62 <forward_dense+0x3a2>
 8005ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae8:	ed2d 8b10 	vpush	{d8-d15}
 8005aec:	69d3      	ldr	r3, [r2, #28]
 8005aee:	b091      	sub	sp, #68	; 0x44
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 820b 	beq.w	8005f0c <forward_dense+0x44c>
 8005af6:	681c      	ldr	r4, [r3, #0]
 8005af8:	9408      	str	r4, [sp, #32]
 8005afa:	f112 0418 	adds.w	r4, r2, #24
 8005afe:	f000 81df 	beq.w	8005ec0 <forward_dense+0x400>
 8005b02:	8b12      	ldrh	r2, [r2, #24]
 8005b04:	2a01      	cmp	r2, #1
 8005b06:	f240 81fe 	bls.w	8005f06 <forward_dense+0x446>
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 81da 	beq.w	8005ec4 <forward_dense+0x404>
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	9306      	str	r3, [sp, #24]
 8005b14:	9b08      	ldr	r3, [sp, #32]
 8005b16:	68cc      	ldr	r4, [r1, #12]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	68c5      	ldr	r5, [r0, #12]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8005b22:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8005b26:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 8005b2a:	f3c2 5541 	ubfx	r5, r2, #21, #2
 8005b2e:	fa4c f505 	asr.w	r5, ip, r5
 8005b32:	f3c2 4243 	ubfx	r2, r2, #17, #4
 8005b36:	950b      	str	r5, [sp, #44]	; 0x2c
 8005b38:	2a04      	cmp	r2, #4
 8005b3a:	fb07 f506 	mul.w	r5, r7, r6
 8005b3e:	6864      	ldr	r4, [r4, #4]
 8005b40:	9507      	str	r5, [sp, #28]
 8005b42:	f000 81dd 	beq.w	8005f00 <forward_dense+0x440>
 8005b46:	2a08      	cmp	r2, #8
 8005b48:	f000 81da 	beq.w	8005f00 <forward_dense+0x440>
 8005b4c:	f04f 0a00 	mov.w	sl, #0
 8005b50:	698a      	ldr	r2, [r1, #24]
 8005b52:	6981      	ldr	r1, [r0, #24]
 8005b54:	6890      	ldr	r0, [r2, #8]
 8005b56:	9a08      	ldr	r2, [sp, #32]
 8005b58:	9004      	str	r0, [sp, #16]
 8005b5a:	6952      	ldr	r2, [r2, #20]
 8005b5c:	688f      	ldr	r7, [r1, #8]
 8005b5e:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8005b62:	00a2      	lsls	r2, r4, #2
 8005b64:	9209      	str	r2, [sp, #36]	; 0x24
 8005b66:	1886      	adds	r6, r0, r2
 8005b68:	9a07      	ldr	r2, [sp, #28]
 8005b6a:	2a00      	cmp	r2, #0
 8005b6c:	f000 81c3 	beq.w	8005ef6 <forward_dense+0x436>
 8005b70:	f1a8 0210 	sub.w	r2, r8, #16
 8005b74:	0912      	lsrs	r2, r2, #4
 8005b76:	3201      	adds	r2, #1
 8005b78:	0192      	lsls	r2, r2, #6
 8005b7a:	920c      	str	r2, [sp, #48]	; 0x30
 8005b7c:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8005b80:	920a      	str	r2, [sp, #40]	; 0x28
 8005b82:	689d      	ldr	r5, [r3, #8]
 8005b84:	9b06      	ldr	r3, [sp, #24]
 8005b86:	eddf aad0 	vldr	s21, [pc, #832]	; 8005ec8 <forward_dense+0x408>
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	9205      	str	r2, [sp, #20]
 8005b8e:	f008 020f 	and.w	r2, r8, #15
 8005b92:	920d      	str	r2, [sp, #52]	; 0x34
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d043      	beq.n	8005c20 <forward_dense+0x160>
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	689c      	ldr	r4, [r3, #8]
 8005b9c:	9b04      	ldr	r3, [sp, #16]
 8005b9e:	f1ba 0f00 	cmp.w	sl, #0
 8005ba2:	d042      	beq.n	8005c2a <forward_dense+0x16a>
 8005ba4:	42b3      	cmp	r3, r6
 8005ba6:	d22a      	bcs.n	8005bfe <forward_dense+0x13e>
 8005ba8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005baa:	469b      	mov	fp, r3
 8005bac:	ab0f      	add	r3, sp, #60	; 0x3c
 8005bae:	9303      	str	r3, [sp, #12]
 8005bb0:	2a04      	cmp	r2, #4
 8005bb2:	4633      	mov	r3, r6
 8005bb4:	4646      	mov	r6, r8
 8005bb6:	4698      	mov	r8, r3
 8005bb8:	f000 8156 	beq.w	8005e68 <forward_dense+0x3a8>
 8005bbc:	2c00      	cmp	r4, #0
 8005bbe:	f000 8185 	beq.w	8005ecc <forward_dense+0x40c>
 8005bc2:	f8d4 c000 	ldr.w	ip, [r4]
 8005bc6:	9803      	ldr	r0, [sp, #12]
 8005bc8:	9600      	str	r6, [sp, #0]
 8005bca:	463b      	mov	r3, r7
 8005bcc:	4629      	mov	r1, r5
 8005bce:	4652      	mov	r2, sl
 8005bd0:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8005bd4:	f7ff fde8 	bl	80057a8 <ai_dict8_dot_array_f32>
 8005bd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005bda:	f84b 3b04 	str.w	r3, [fp], #4
 8005bde:	45c3      	cmp	fp, r8
 8005be0:	f104 0404 	add.w	r4, r4, #4
 8005be4:	444d      	add	r5, r9
 8005be6:	d3e9      	bcc.n	8005bbc <forward_dense+0xfc>
 8005be8:	4643      	mov	r3, r8
 8005bea:	46b0      	mov	r8, r6
 8005bec:	461e      	mov	r6, r3
 8005bee:	9a04      	ldr	r2, [sp, #16]
 8005bf0:	43d3      	mvns	r3, r2
 8005bf2:	4433      	add	r3, r6
 8005bf4:	f023 0303 	bic.w	r3, r3, #3
 8005bf8:	3304      	adds	r3, #4
 8005bfa:	18d3      	adds	r3, r2, r3
 8005bfc:	9304      	str	r3, [sp, #16]
 8005bfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c00:	9b05      	ldr	r3, [sp, #20]
 8005c02:	4417      	add	r7, r2
 8005c04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c06:	4416      	add	r6, r2
 8005c08:	9a07      	ldr	r2, [sp, #28]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	9305      	str	r3, [sp, #20]
 8005c10:	f000 8171 	beq.w	8005ef6 <forward_dense+0x436>
 8005c14:	9b08      	ldr	r3, [sp, #32]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	689d      	ldr	r5, [r3, #8]
 8005c1a:	9b06      	ldr	r3, [sp, #24]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1bb      	bne.n	8005b98 <forward_dense+0xd8>
 8005c20:	461c      	mov	r4, r3
 8005c22:	9b04      	ldr	r3, [sp, #16]
 8005c24:	f1ba 0f00 	cmp.w	sl, #0
 8005c28:	d1bc      	bne.n	8005ba4 <forward_dense+0xe4>
 8005c2a:	42b3      	cmp	r3, r6
 8005c2c:	d2e7      	bcs.n	8005bfe <forward_dense+0x13e>
 8005c2e:	4618      	mov	r0, r3
 8005c30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c32:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8005c36:	eb07 0c03 	add.w	ip, r7, r3
 8005c3a:	469e      	mov	lr, r3
 8005c3c:	2c00      	cmp	r4, #0
 8005c3e:	f000 80ff 	beq.w	8005e40 <forward_dense+0x380>
 8005c42:	f1b8 0f0f 	cmp.w	r8, #15
 8005c46:	edd4 fa00 	vldr	s31, [r4]
 8005c4a:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8005ec8 <forward_dense+0x408>
 8005c4e:	f104 0404 	add.w	r4, r4, #4
 8005c52:	f240 80fd 	bls.w	8005e50 <forward_dense+0x390>
 8005c56:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005c5a:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8005c5e:	4641      	mov	r1, r8
 8005c60:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 8005c64:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8005c68:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8005c6c:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 8005c70:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8005c74:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8005c78:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8005c7c:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 8005c80:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 8005c84:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8005c88:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8005c8c:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8005c90:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8005c94:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8005c98:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8005c9c:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 8005ca0:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8005ca4:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8005ca8:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8005cac:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 8005cb0:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8005cb4:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8005cb8:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 8005cbc:	ed13 4a04 	vldr	s8, [r3, #-16]
 8005cc0:	ed52 4a04 	vldr	s9, [r2, #-16]
 8005cc4:	ed12 5a03 	vldr	s10, [r2, #-12]
 8005cc8:	ed53 5a03 	vldr	s11, [r3, #-12]
 8005ccc:	ed12 6a02 	vldr	s12, [r2, #-8]
 8005cd0:	ed13 7a02 	vldr	s14, [r3, #-8]
 8005cd4:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8005cd8:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 8005cdc:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8005ce0:	3910      	subs	r1, #16
 8005ce2:	290f      	cmp	r1, #15
 8005ce4:	ed53 ea01 	vldr	s29, [r3, #-4]
 8005ce8:	ed12 ea01 	vldr	s28, [r2, #-4]
 8005cec:	eeed 7a8f 	vfma.f32	s15, s27, s30
 8005cf0:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8005cf4:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8005cf8:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8005cfc:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8005d00:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 8005d04:	eee9 7a89 	vfma.f32	s15, s19, s18
 8005d08:	eee8 7a88 	vfma.f32	s15, s17, s16
 8005d0c:	eee0 7a20 	vfma.f32	s15, s0, s1
 8005d10:	eee1 7a21 	vfma.f32	s15, s2, s3
 8005d14:	eee2 7a22 	vfma.f32	s15, s4, s5
 8005d18:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005d1c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005d20:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005d24:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005d28:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8005d2c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005d30:	d896      	bhi.n	8005c60 <forward_dense+0x1a0>
 8005d32:	eb05 010e 	add.w	r1, r5, lr
 8005d36:	465b      	mov	r3, fp
 8005d38:	4662      	mov	r2, ip
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d075      	beq.n	8005e2a <forward_dense+0x36a>
 8005d3e:	ed91 7a00 	vldr	s14, [r1]
 8005d42:	edd2 7a00 	vldr	s15, [r2]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005d4c:	d06d      	beq.n	8005e2a <forward_dense+0x36a>
 8005d4e:	ed91 7a01 	vldr	s14, [r1, #4]
 8005d52:	edd2 7a01 	vldr	s15, [r2, #4]
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005d5c:	d065      	beq.n	8005e2a <forward_dense+0x36a>
 8005d5e:	ed91 7a02 	vldr	s14, [r1, #8]
 8005d62:	edd2 7a02 	vldr	s15, [r2, #8]
 8005d66:	2b03      	cmp	r3, #3
 8005d68:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005d6c:	d05d      	beq.n	8005e2a <forward_dense+0x36a>
 8005d6e:	ed91 7a03 	vldr	s14, [r1, #12]
 8005d72:	edd2 7a03 	vldr	s15, [r2, #12]
 8005d76:	2b04      	cmp	r3, #4
 8005d78:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005d7c:	d055      	beq.n	8005e2a <forward_dense+0x36a>
 8005d7e:	ed91 7a04 	vldr	s14, [r1, #16]
 8005d82:	edd2 7a04 	vldr	s15, [r2, #16]
 8005d86:	2b05      	cmp	r3, #5
 8005d88:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005d8c:	d04d      	beq.n	8005e2a <forward_dense+0x36a>
 8005d8e:	ed91 7a05 	vldr	s14, [r1, #20]
 8005d92:	edd2 7a05 	vldr	s15, [r2, #20]
 8005d96:	2b06      	cmp	r3, #6
 8005d98:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005d9c:	d045      	beq.n	8005e2a <forward_dense+0x36a>
 8005d9e:	ed91 7a06 	vldr	s14, [r1, #24]
 8005da2:	edd2 7a06 	vldr	s15, [r2, #24]
 8005da6:	2b07      	cmp	r3, #7
 8005da8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005dac:	d03d      	beq.n	8005e2a <forward_dense+0x36a>
 8005dae:	ed91 7a07 	vldr	s14, [r1, #28]
 8005db2:	edd2 7a07 	vldr	s15, [r2, #28]
 8005db6:	2b08      	cmp	r3, #8
 8005db8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005dbc:	d035      	beq.n	8005e2a <forward_dense+0x36a>
 8005dbe:	ed91 7a08 	vldr	s14, [r1, #32]
 8005dc2:	edd2 7a08 	vldr	s15, [r2, #32]
 8005dc6:	2b09      	cmp	r3, #9
 8005dc8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005dcc:	d02d      	beq.n	8005e2a <forward_dense+0x36a>
 8005dce:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8005dd2:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8005dd6:	2b0a      	cmp	r3, #10
 8005dd8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005ddc:	d025      	beq.n	8005e2a <forward_dense+0x36a>
 8005dde:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 8005de2:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8005de6:	2b0b      	cmp	r3, #11
 8005de8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005dec:	d01d      	beq.n	8005e2a <forward_dense+0x36a>
 8005dee:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8005df2:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8005df6:	2b0c      	cmp	r3, #12
 8005df8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005dfc:	d015      	beq.n	8005e2a <forward_dense+0x36a>
 8005dfe:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8005e02:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8005e06:	2b0d      	cmp	r3, #13
 8005e08:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005e0c:	d00d      	beq.n	8005e2a <forward_dense+0x36a>
 8005e0e:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8005e12:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8005e16:	2b0e      	cmp	r3, #14
 8005e18:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005e1c:	d005      	beq.n	8005e2a <forward_dense+0x36a>
 8005e1e:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 8005e22:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8005e26:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005e2a:	444d      	add	r5, r9
 8005e2c:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 8005e30:	ece0 6a01 	vstmia	r0!, {s13}
 8005e34:	42b0      	cmp	r0, r6
 8005e36:	f4bf aeda 	bcs.w	8005bee <forward_dense+0x12e>
 8005e3a:	2c00      	cmp	r4, #0
 8005e3c:	f47f af01 	bne.w	8005c42 <forward_dense+0x182>
 8005e40:	f1b8 0f0f 	cmp.w	r8, #15
 8005e44:	eef0 fa6a 	vmov.f32	s31, s21
 8005e48:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8005ec8 <forward_dense+0x408>
 8005e4c:	f63f af03 	bhi.w	8005c56 <forward_dense+0x196>
 8005e50:	4643      	mov	r3, r8
 8005e52:	4629      	mov	r1, r5
 8005e54:	463a      	mov	r2, r7
 8005e56:	e770      	b.n	8005d3a <forward_dense+0x27a>
 8005e58:	2300      	movs	r3, #0
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	deff      	udf	#255	; 0xff
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	deff      	udf	#255	; 0xff
 8005e62:	2300      	movs	r3, #0
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	deff      	udf	#255	; 0xff
 8005e68:	b1ac      	cbz	r4, 8005e96 <forward_dense+0x3d6>
 8005e6a:	f8d4 c000 	ldr.w	ip, [r4]
 8005e6e:	9803      	ldr	r0, [sp, #12]
 8005e70:	9600      	str	r6, [sp, #0]
 8005e72:	463b      	mov	r3, r7
 8005e74:	4629      	mov	r1, r5
 8005e76:	4652      	mov	r2, sl
 8005e78:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8005e7c:	f7ff fd62 	bl	8005944 <ai_dict4_dot_array_f32>
 8005e80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e82:	f84b 3b04 	str.w	r3, [fp], #4
 8005e86:	45c3      	cmp	fp, r8
 8005e88:	f104 0404 	add.w	r4, r4, #4
 8005e8c:	444d      	add	r5, r9
 8005e8e:	f4bf aeab 	bcs.w	8005be8 <forward_dense+0x128>
 8005e92:	2c00      	cmp	r4, #0
 8005e94:	d1e9      	bne.n	8005e6a <forward_dense+0x3aa>
 8005e96:	4634      	mov	r4, r6
 8005e98:	4646      	mov	r6, r8
 8005e9a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005e9e:	9400      	str	r4, [sp, #0]
 8005ea0:	463b      	mov	r3, r7
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	4652      	mov	r2, sl
 8005ea6:	4640      	mov	r0, r8
 8005ea8:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8005eac:	f7ff fd4a 	bl	8005944 <ai_dict4_dot_array_f32>
 8005eb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005eb2:	f84b 3b04 	str.w	r3, [fp], #4
 8005eb6:	45b3      	cmp	fp, r6
 8005eb8:	444d      	add	r5, r9
 8005eba:	d3f0      	bcc.n	8005e9e <forward_dense+0x3de>
 8005ebc:	46a0      	mov	r8, r4
 8005ebe:	e696      	b.n	8005bee <forward_dense+0x12e>
 8005ec0:	9406      	str	r4, [sp, #24]
 8005ec2:	e627      	b.n	8005b14 <forward_dense+0x54>
 8005ec4:	9306      	str	r3, [sp, #24]
 8005ec6:	e625      	b.n	8005b14 <forward_dense+0x54>
 8005ec8:	00000000 	.word	0x00000000
 8005ecc:	4634      	mov	r4, r6
 8005ece:	4646      	mov	r6, r8
 8005ed0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005ed4:	9400      	str	r4, [sp, #0]
 8005ed6:	463b      	mov	r3, r7
 8005ed8:	4629      	mov	r1, r5
 8005eda:	4652      	mov	r2, sl
 8005edc:	4640      	mov	r0, r8
 8005ede:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8005ee2:	f7ff fc61 	bl	80057a8 <ai_dict8_dot_array_f32>
 8005ee6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ee8:	f84b 3b04 	str.w	r3, [fp], #4
 8005eec:	45b3      	cmp	fp, r6
 8005eee:	444d      	add	r5, r9
 8005ef0:	d3f0      	bcc.n	8005ed4 <forward_dense+0x414>
 8005ef2:	46a0      	mov	r8, r4
 8005ef4:	e67b      	b.n	8005bee <forward_dense+0x12e>
 8005ef6:	b011      	add	sp, #68	; 0x44
 8005ef8:	ecbd 8b10 	vpop	{d8-d15}
 8005efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f00:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8005f04:	e624      	b.n	8005b50 <forward_dense+0x90>
 8005f06:	2300      	movs	r3, #0
 8005f08:	9306      	str	r3, [sp, #24]
 8005f0a:	e603      	b.n	8005b14 <forward_dense+0x54>
 8005f0c:	9308      	str	r3, [sp, #32]
 8005f0e:	e5f4      	b.n	8005afa <forward_dense+0x3a>

08005f10 <nl_func_relu_generic_array_f32>:
 8005f10:	b430      	push	{r4, r5}
 8005f12:	edd3 6a02 	vldr	s13, [r3, #8]
 8005f16:	6880      	ldr	r0, [r0, #8]
 8005f18:	688c      	ldr	r4, [r1, #8]
 8005f1a:	ed93 7a00 	vldr	s14, [r3]
 8005f1e:	ed93 6a01 	vldr	s12, [r3, #4]
 8005f22:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005f26:	3a01      	subs	r2, #1
 8005f28:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8005f2c:	0092      	lsls	r2, r2, #2
 8005f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f32:	4410      	add	r0, r2
 8005f34:	4422      	add	r2, r4
 8005f36:	d421      	bmi.n	8005f7c <nl_func_relu_generic_array_f32+0x6c>
 8005f38:	42a2      	cmp	r2, r4
 8005f3a:	d33d      	bcc.n	8005fb8 <nl_func_relu_generic_array_f32+0xa8>
 8005f3c:	1d13      	adds	r3, r2, #4
 8005f3e:	1d02      	adds	r2, r0, #4
 8005f40:	e010      	b.n	8005f64 <nl_func_relu_generic_array_f32+0x54>
 8005f42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f4a:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8005f4e:	dd01      	ble.n	8005f54 <nl_func_relu_generic_array_f32+0x44>
 8005f50:	ee65 7a86 	vmul.f32	s15, s11, s12
 8005f54:	ed62 7a01 	vstmdb	r2!, {s15}
 8005f58:	6888      	ldr	r0, [r1, #8]
 8005f5a:	f1a3 0408 	sub.w	r4, r3, #8
 8005f5e:	4284      	cmp	r4, r0
 8005f60:	462b      	mov	r3, r5
 8005f62:	d329      	bcc.n	8005fb8 <nl_func_relu_generic_array_f32+0xa8>
 8005f64:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005f68:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f70:	f1a3 0504 	sub.w	r5, r3, #4
 8005f74:	dce5      	bgt.n	8005f42 <nl_func_relu_generic_array_f32+0x32>
 8005f76:	eef0 7a66 	vmov.f32	s15, s13
 8005f7a:	e7eb      	b.n	8005f54 <nl_func_relu_generic_array_f32+0x44>
 8005f7c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f84:	d01a      	beq.n	8005fbc <nl_func_relu_generic_array_f32+0xac>
 8005f86:	42a2      	cmp	r2, r4
 8005f88:	d316      	bcc.n	8005fb8 <nl_func_relu_generic_array_f32+0xa8>
 8005f8a:	1d13      	adds	r3, r2, #4
 8005f8c:	1d02      	adds	r2, r0, #4
 8005f8e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005f92:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8005f96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f9a:	f1a3 0408 	sub.w	r4, r3, #8
 8005f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fa2:	f1a3 0004 	sub.w	r0, r3, #4
 8005fa6:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005faa:	4623      	mov	r3, r4
 8005fac:	d51e      	bpl.n	8005fec <nl_func_relu_generic_array_f32+0xdc>
 8005fae:	ed62 6a01 	vstmdb	r2!, {s13}
 8005fb2:	688b      	ldr	r3, [r1, #8]
 8005fb4:	42a3      	cmp	r3, r4
 8005fb6:	d91e      	bls.n	8005ff6 <nl_func_relu_generic_array_f32+0xe6>
 8005fb8:	bc30      	pop	{r4, r5}
 8005fba:	4770      	bx	lr
 8005fbc:	42a2      	cmp	r2, r4
 8005fbe:	d3fb      	bcc.n	8005fb8 <nl_func_relu_generic_array_f32+0xa8>
 8005fc0:	1d13      	adds	r3, r2, #4
 8005fc2:	2500      	movs	r5, #0
 8005fc4:	1d02      	adds	r2, r0, #4
 8005fc6:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005fca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005fce:	f1a3 0408 	sub.w	r4, r3, #8
 8005fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fd6:	f1a3 0004 	sub.w	r0, r3, #4
 8005fda:	4623      	mov	r3, r4
 8005fdc:	d80d      	bhi.n	8005ffa <nl_func_relu_generic_array_f32+0xea>
 8005fde:	ed62 7a01 	vstmdb	r2!, {s15}
 8005fe2:	688b      	ldr	r3, [r1, #8]
 8005fe4:	42a3      	cmp	r3, r4
 8005fe6:	d8e7      	bhi.n	8005fb8 <nl_func_relu_generic_array_f32+0xa8>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	e7ec      	b.n	8005fc6 <nl_func_relu_generic_array_f32+0xb6>
 8005fec:	ed62 7a01 	vstmdb	r2!, {s15}
 8005ff0:	688c      	ldr	r4, [r1, #8]
 8005ff2:	429c      	cmp	r4, r3
 8005ff4:	d8e0      	bhi.n	8005fb8 <nl_func_relu_generic_array_f32+0xa8>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	e7c9      	b.n	8005f8e <nl_func_relu_generic_array_f32+0x7e>
 8005ffa:	f842 5d04 	str.w	r5, [r2, #-4]!
 8005ffe:	688c      	ldr	r4, [r1, #8]
 8006000:	429c      	cmp	r4, r3
 8006002:	d8d9      	bhi.n	8005fb8 <nl_func_relu_generic_array_f32+0xa8>
 8006004:	4603      	mov	r3, r0
 8006006:	e7de      	b.n	8005fc6 <nl_func_relu_generic_array_f32+0xb6>

08006008 <forward_relu>:
 8006008:	6942      	ldr	r2, [r0, #20]
 800600a:	8813      	ldrh	r3, [r2, #0]
 800600c:	b33b      	cbz	r3, 800605e <forward_relu+0x56>
 800600e:	b470      	push	{r4, r5, r6}
 8006010:	6852      	ldr	r2, [r2, #4]
 8006012:	6856      	ldr	r6, [r2, #4]
 8006014:	b106      	cbz	r6, 8006018 <forward_relu+0x10>
 8006016:	6836      	ldr	r6, [r6, #0]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d91d      	bls.n	8006058 <forward_relu+0x50>
 800601c:	6913      	ldr	r3, [r2, #16]
 800601e:	b103      	cbz	r3, 8006022 <forward_relu+0x1a>
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	6982      	ldr	r2, [r0, #24]
 8006024:	68b4      	ldr	r4, [r6, #8]
 8006026:	6998      	ldr	r0, [r3, #24]
 8006028:	69b1      	ldr	r1, [r6, #24]
 800602a:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800602e:	2a00      	cmp	r2, #0
 8006030:	d041      	beq.n	80060b6 <forward_relu+0xae>
 8006032:	e9d2 5301 	ldrd	r5, r3, [r2, #4]
 8006036:	2d01      	cmp	r5, #1
 8006038:	d013      	beq.n	8006062 <forward_relu+0x5a>
 800603a:	2c00      	cmp	r4, #0
 800603c:	d06f      	beq.n	800611e <forward_relu+0x116>
 800603e:	68f6      	ldr	r6, [r6, #12]
 8006040:	2201      	movs	r2, #1
 8006042:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8006046:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800604a:	42a6      	cmp	r6, r4
 800604c:	fb05 f202 	mul.w	r2, r5, r2
 8006050:	d1f9      	bne.n	8006046 <forward_relu+0x3e>
 8006052:	bc70      	pop	{r4, r5, r6}
 8006054:	f7ff bf5c 	b.w	8005f10 <nl_func_relu_generic_array_f32>
 8006058:	2300      	movs	r3, #0
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	deff      	udf	#255	; 0xff
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	deff      	udf	#255	; 0xff
 8006062:	6880      	ldr	r0, [r0, #8]
 8006064:	688a      	ldr	r2, [r1, #8]
 8006066:	ed93 7a00 	vldr	s14, [r3]
 800606a:	b184      	cbz	r4, 800608e <forward_relu+0x86>
 800606c:	68f6      	ldr	r6, [r6, #12]
 800606e:	462b      	mov	r3, r5
 8006070:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8006074:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006078:	42a6      	cmp	r6, r4
 800607a:	fb05 f303 	mul.w	r3, r5, r3
 800607e:	d1f9      	bne.n	8006074 <forward_relu+0x6c>
 8006080:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006084:	3b01      	subs	r3, #1
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	18d2      	adds	r2, r2, r3
 800608a:	4418      	add	r0, r3
 800608c:	d23d      	bcs.n	800610a <forward_relu+0x102>
 800608e:	1d13      	adds	r3, r2, #4
 8006090:	2500      	movs	r5, #0
 8006092:	1d02      	adds	r2, r0, #4
 8006094:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006098:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800609c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060a0:	f1a3 0004 	sub.w	r0, r3, #4
 80060a4:	d833      	bhi.n	800610e <forward_relu+0x106>
 80060a6:	ed62 7a01 	vstmdb	r2!, {s15}
 80060aa:	688c      	ldr	r4, [r1, #8]
 80060ac:	3b08      	subs	r3, #8
 80060ae:	429c      	cmp	r4, r3
 80060b0:	d82b      	bhi.n	800610a <forward_relu+0x102>
 80060b2:	4603      	mov	r3, r0
 80060b4:	e7ee      	b.n	8006094 <forward_relu+0x8c>
 80060b6:	6880      	ldr	r0, [r0, #8]
 80060b8:	688b      	ldr	r3, [r1, #8]
 80060ba:	b184      	cbz	r4, 80060de <forward_relu+0xd6>
 80060bc:	68f6      	ldr	r6, [r6, #12]
 80060be:	2201      	movs	r2, #1
 80060c0:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80060c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80060c8:	42a6      	cmp	r6, r4
 80060ca:	fb05 f202 	mul.w	r2, r5, r2
 80060ce:	d1f9      	bne.n	80060c4 <forward_relu+0xbc>
 80060d0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80060d4:	3a01      	subs	r2, #1
 80060d6:	0092      	lsls	r2, r2, #2
 80060d8:	189b      	adds	r3, r3, r2
 80060da:	4410      	add	r0, r2
 80060dc:	d215      	bcs.n	800610a <forward_relu+0x102>
 80060de:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006124 <forward_relu+0x11c>
 80060e2:	3304      	adds	r3, #4
 80060e4:	3004      	adds	r0, #4
 80060e6:	ed53 7a01 	vldr	s15, [r3, #-4]
 80060ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80060ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060f2:	bfb8      	it	lt
 80060f4:	eef0 7a47 	vmovlt.f32	s15, s14
 80060f8:	ed60 7a01 	vstmdb	r0!, {s15}
 80060fc:	688c      	ldr	r4, [r1, #8]
 80060fe:	f1a3 0208 	sub.w	r2, r3, #8
 8006102:	4294      	cmp	r4, r2
 8006104:	f1a3 0304 	sub.w	r3, r3, #4
 8006108:	d9ed      	bls.n	80060e6 <forward_relu+0xde>
 800610a:	bc70      	pop	{r4, r5, r6}
 800610c:	4770      	bx	lr
 800610e:	f842 5d04 	str.w	r5, [r2, #-4]!
 8006112:	688c      	ldr	r4, [r1, #8]
 8006114:	3b08      	subs	r3, #8
 8006116:	429c      	cmp	r4, r3
 8006118:	d8f7      	bhi.n	800610a <forward_relu+0x102>
 800611a:	4603      	mov	r3, r0
 800611c:	e7ba      	b.n	8006094 <forward_relu+0x8c>
 800611e:	2201      	movs	r2, #1
 8006120:	e797      	b.n	8006052 <forward_relu+0x4a>
 8006122:	bf00      	nop
 8006124:	00000000 	.word	0x00000000

08006128 <ai_check_custom_types>:
 8006128:	4b13      	ldr	r3, [pc, #76]	; (8006178 <ai_check_custom_types+0x50>)
 800612a:	b082      	sub	sp, #8
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	9301      	str	r3, [sp, #4]
 8006130:	b118      	cbz	r0, 800613a <ai_check_custom_types+0x12>
 8006132:	7803      	ldrb	r3, [r0, #0]
 8006134:	2b03      	cmp	r3, #3
 8006136:	d002      	beq.n	800613e <ai_check_custom_types+0x16>
 8006138:	2000      	movs	r0, #0
 800613a:	b002      	add	sp, #8
 800613c:	4770      	bx	lr
 800613e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8006142:	4293      	cmp	r3, r2
 8006144:	d004      	beq.n	8006150 <ai_check_custom_types+0x28>
 8006146:	2001      	movs	r0, #1
 8006148:	f080 0001 	eor.w	r0, r0, #1
 800614c:	b002      	add	sp, #8
 800614e:	4770      	bx	lr
 8006150:	7842      	ldrb	r2, [r0, #1]
 8006152:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006156:	429a      	cmp	r2, r3
 8006158:	f100 0001 	add.w	r0, r0, #1
 800615c:	d1f3      	bne.n	8006146 <ai_check_custom_types+0x1e>
 800615e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8006162:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006166:	429a      	cmp	r2, r3
 8006168:	d1ed      	bne.n	8006146 <ai_check_custom_types+0x1e>
 800616a:	7842      	ldrb	r2, [r0, #1]
 800616c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006170:	429a      	cmp	r2, r3
 8006172:	d1e8      	bne.n	8006146 <ai_check_custom_types+0x1e>
 8006174:	2000      	movs	r0, #0
 8006176:	e7e7      	b.n	8006148 <ai_check_custom_types+0x20>
 8006178:	080092a0 	.word	0x080092a0

0800617c <ai_layers_forward_all>:
 800617c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800617e:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8006180:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8006182:	4604      	mov	r4, r0
 8006184:	b31e      	cbz	r6, 80061ce <ai_layers_forward_all+0x52>
 8006186:	b1cd      	cbz	r5, 80061bc <ai_layers_forward_all+0x40>
 8006188:	6545      	str	r5, [r0, #84]	; 0x54
 800618a:	4629      	mov	r1, r5
 800618c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800618e:	2001      	movs	r0, #1
 8006190:	47b0      	blx	r6
 8006192:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006194:	2700      	movs	r7, #0
 8006196:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006198:	2002      	movs	r0, #2
 800619a:	47b0      	blx	r6
 800619c:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800619e:	692b      	ldr	r3, [r5, #16]
 80061a0:	4628      	mov	r0, r5
 80061a2:	4798      	blx	r3
 80061a4:	68eb      	ldr	r3, [r5, #12]
 80061a6:	429d      	cmp	r5, r3
 80061a8:	f04f 0003 	mov.w	r0, #3
 80061ac:	4619      	mov	r1, r3
 80061ae:	d006      	beq.n	80061be <ai_layers_forward_all+0x42>
 80061b0:	6563      	str	r3, [r4, #84]	; 0x54
 80061b2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80061b4:	47b0      	blx	r6
 80061b6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80061b8:	2900      	cmp	r1, #0
 80061ba:	d1ec      	bne.n	8006196 <ai_layers_forward_all+0x1a>
 80061bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061be:	2100      	movs	r1, #0
 80061c0:	6567      	str	r7, [r4, #84]	; 0x54
 80061c2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80061c4:	47b0      	blx	r6
 80061c6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80061c8:	2900      	cmp	r1, #0
 80061ca:	d1e4      	bne.n	8006196 <ai_layers_forward_all+0x1a>
 80061cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061ce:	2d00      	cmp	r5, #0
 80061d0:	d0f4      	beq.n	80061bc <ai_layers_forward_all+0x40>
 80061d2:	6545      	str	r5, [r0, #84]	; 0x54
 80061d4:	692b      	ldr	r3, [r5, #16]
 80061d6:	4628      	mov	r0, r5
 80061d8:	4798      	blx	r3
 80061da:	68eb      	ldr	r3, [r5, #12]
 80061dc:	42ab      	cmp	r3, r5
 80061de:	d004      	beq.n	80061ea <ai_layers_forward_all+0x6e>
 80061e0:	6563      	str	r3, [r4, #84]	; 0x54
 80061e2:	461d      	mov	r5, r3
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1f5      	bne.n	80061d4 <ai_layers_forward_all+0x58>
 80061e8:	e7e8      	b.n	80061bc <ai_layers_forward_all+0x40>
 80061ea:	2300      	movs	r3, #0
 80061ec:	6563      	str	r3, [r4, #84]	; 0x54
 80061ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080061f0 <ai_array_to_buffer_fmt>:
 80061f0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d01f      	beq.n	8006238 <ai_array_to_buffer_fmt+0x48>
 80061f8:	4a1c      	ldr	r2, [pc, #112]	; (800626c <ai_array_to_buffer_fmt+0x7c>)
 80061fa:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 80061fe:	4293      	cmp	r3, r2
 8006200:	d00a      	beq.n	8006218 <ai_array_to_buffer_fmt+0x28>
 8006202:	dc0d      	bgt.n	8006220 <ai_array_to_buffer_fmt+0x30>
 8006204:	4a1a      	ldr	r2, [pc, #104]	; (8006270 <ai_array_to_buffer_fmt+0x80>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d006      	beq.n	8006218 <ai_array_to_buffer_fmt+0x28>
 800620a:	dd1d      	ble.n	8006248 <ai_array_to_buffer_fmt+0x58>
 800620c:	4a19      	ldr	r2, [pc, #100]	; (8006274 <ai_array_to_buffer_fmt+0x84>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d002      	beq.n	8006218 <ai_array_to_buffer_fmt+0x28>
 8006212:	320f      	adds	r2, #15
 8006214:	4293      	cmp	r3, r2
 8006216:	d10d      	bne.n	8006234 <ai_array_to_buffer_fmt+0x44>
 8006218:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800621c:	4318      	orrs	r0, r3
 800621e:	4770      	bx	lr
 8006220:	4a15      	ldr	r2, [pc, #84]	; (8006278 <ai_array_to_buffer_fmt+0x88>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d0f8      	beq.n	8006218 <ai_array_to_buffer_fmt+0x28>
 8006226:	dd18      	ble.n	800625a <ai_array_to_buffer_fmt+0x6a>
 8006228:	4a14      	ldr	r2, [pc, #80]	; (800627c <ai_array_to_buffer_fmt+0x8c>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d0f4      	beq.n	8006218 <ai_array_to_buffer_fmt+0x28>
 800622e:	4a14      	ldr	r2, [pc, #80]	; (8006280 <ai_array_to_buffer_fmt+0x90>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d0f1      	beq.n	8006218 <ai_array_to_buffer_fmt+0x28>
 8006234:	2340      	movs	r3, #64	; 0x40
 8006236:	e7ef      	b.n	8006218 <ai_array_to_buffer_fmt+0x28>
 8006238:	4b12      	ldr	r3, [pc, #72]	; (8006284 <ai_array_to_buffer_fmt+0x94>)
 800623a:	4003      	ands	r3, r0
 800623c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006240:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8006244:	4318      	orrs	r0, r3
 8006246:	4770      	bx	lr
 8006248:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800624c:	4293      	cmp	r3, r2
 800624e:	d0e3      	beq.n	8006218 <ai_array_to_buffer_fmt+0x28>
 8006250:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006254:	4293      	cmp	r3, r2
 8006256:	d0df      	beq.n	8006218 <ai_array_to_buffer_fmt+0x28>
 8006258:	e7ec      	b.n	8006234 <ai_array_to_buffer_fmt+0x44>
 800625a:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800625e:	4293      	cmp	r3, r2
 8006260:	d0da      	beq.n	8006218 <ai_array_to_buffer_fmt+0x28>
 8006262:	3207      	adds	r2, #7
 8006264:	4293      	cmp	r3, r2
 8006266:	d0d7      	beq.n	8006218 <ai_array_to_buffer_fmt+0x28>
 8006268:	e7e4      	b.n	8006234 <ai_array_to_buffer_fmt+0x44>
 800626a:	bf00      	nop
 800626c:	00840040 	.word	0x00840040
 8006270:	00040447 	.word	0x00040447
 8006274:	00040840 	.word	0x00040840
 8006278:	00840840 	.word	0x00840840
 800627c:	0084084f 	.word	0x0084084f
 8006280:	01821040 	.word	0x01821040
 8006284:	00803fff 	.word	0x00803fff

08006288 <ai_array_get_byte_size>:
 8006288:	b1c1      	cbz	r1, 80062bc <ai_array_get_byte_size+0x34>
 800628a:	f3c0 3282 	ubfx	r2, r0, #14, #3
 800628e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8006292:	4413      	add	r3, r2
 8006294:	fb01 f103 	mul.w	r1, r1, r3
 8006298:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800629c:	3107      	adds	r1, #7
 800629e:	f3c0 4043 	ubfx	r0, r0, #17, #4
 80062a2:	f021 0107 	bic.w	r1, r1, #7
 80062a6:	2804      	cmp	r0, #4
 80062a8:	fa21 f102 	lsr.w	r1, r1, r2
 80062ac:	d008      	beq.n	80062c0 <ai_array_get_byte_size+0x38>
 80062ae:	2808      	cmp	r0, #8
 80062b0:	d101      	bne.n	80062b6 <ai_array_get_byte_size+0x2e>
 80062b2:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80062b6:	3107      	adds	r1, #7
 80062b8:	08c8      	lsrs	r0, r1, #3
 80062ba:	4770      	bx	lr
 80062bc:	4608      	mov	r0, r1
 80062be:	4770      	bx	lr
 80062c0:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80062c4:	3107      	adds	r1, #7
 80062c6:	08c8      	lsrs	r0, r1, #3
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop

080062cc <_ZdlPvj>:
 80062cc:	f000 b814 	b.w	80062f8 <_ZdlPv>

080062d0 <_Znwj>:
 80062d0:	2801      	cmp	r0, #1
 80062d2:	bf38      	it	cc
 80062d4:	2001      	movcc	r0, #1
 80062d6:	b510      	push	{r4, lr}
 80062d8:	4604      	mov	r4, r0
 80062da:	4620      	mov	r0, r4
 80062dc:	f000 f85a 	bl	8006394 <malloc>
 80062e0:	b930      	cbnz	r0, 80062f0 <_Znwj+0x20>
 80062e2:	f000 f81d 	bl	8006320 <_ZSt15get_new_handlerv>
 80062e6:	b908      	cbnz	r0, 80062ec <_Znwj+0x1c>
 80062e8:	f000 f822 	bl	8006330 <abort>
 80062ec:	4780      	blx	r0
 80062ee:	e7f4      	b.n	80062da <_Znwj+0xa>
 80062f0:	bd10      	pop	{r4, pc}

080062f2 <__cxa_pure_virtual>:
 80062f2:	b508      	push	{r3, lr}
 80062f4:	f000 f80e 	bl	8006314 <_ZSt9terminatev>

080062f8 <_ZdlPv>:
 80062f8:	f000 b854 	b.w	80063a4 <free>

080062fc <_ZN10__cxxabiv111__terminateEPFvvE>:
 80062fc:	b508      	push	{r3, lr}
 80062fe:	4780      	blx	r0
 8006300:	f000 f816 	bl	8006330 <abort>

08006304 <_ZSt13get_terminatev>:
 8006304:	4b02      	ldr	r3, [pc, #8]	; (8006310 <_ZSt13get_terminatev+0xc>)
 8006306:	6818      	ldr	r0, [r3, #0]
 8006308:	f3bf 8f5b 	dmb	ish
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	20000438 	.word	0x20000438

08006314 <_ZSt9terminatev>:
 8006314:	b508      	push	{r3, lr}
 8006316:	f7ff fff5 	bl	8006304 <_ZSt13get_terminatev>
 800631a:	f7ff ffef 	bl	80062fc <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08006320 <_ZSt15get_new_handlerv>:
 8006320:	4b02      	ldr	r3, [pc, #8]	; (800632c <_ZSt15get_new_handlerv+0xc>)
 8006322:	6818      	ldr	r0, [r3, #0]
 8006324:	f3bf 8f5b 	dmb	ish
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	2000085c 	.word	0x2000085c

08006330 <abort>:
 8006330:	b508      	push	{r3, lr}
 8006332:	2006      	movs	r0, #6
 8006334:	f000 fdd6 	bl	8006ee4 <raise>
 8006338:	2001      	movs	r0, #1
 800633a:	f002 ff55 	bl	80091e8 <_exit>
	...

08006340 <__errno>:
 8006340:	4b01      	ldr	r3, [pc, #4]	; (8006348 <__errno+0x8>)
 8006342:	6818      	ldr	r0, [r3, #0]
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	2000043c 	.word	0x2000043c

0800634c <__libc_init_array>:
 800634c:	b570      	push	{r4, r5, r6, lr}
 800634e:	4d0d      	ldr	r5, [pc, #52]	; (8006384 <__libc_init_array+0x38>)
 8006350:	4c0d      	ldr	r4, [pc, #52]	; (8006388 <__libc_init_array+0x3c>)
 8006352:	1b64      	subs	r4, r4, r5
 8006354:	10a4      	asrs	r4, r4, #2
 8006356:	2600      	movs	r6, #0
 8006358:	42a6      	cmp	r6, r4
 800635a:	d109      	bne.n	8006370 <__libc_init_array+0x24>
 800635c:	4d0b      	ldr	r5, [pc, #44]	; (800638c <__libc_init_array+0x40>)
 800635e:	4c0c      	ldr	r4, [pc, #48]	; (8006390 <__libc_init_array+0x44>)
 8006360:	f002 ff44 	bl	80091ec <_init>
 8006364:	1b64      	subs	r4, r4, r5
 8006366:	10a4      	asrs	r4, r4, #2
 8006368:	2600      	movs	r6, #0
 800636a:	42a6      	cmp	r6, r4
 800636c:	d105      	bne.n	800637a <__libc_init_array+0x2e>
 800636e:	bd70      	pop	{r4, r5, r6, pc}
 8006370:	f855 3b04 	ldr.w	r3, [r5], #4
 8006374:	4798      	blx	r3
 8006376:	3601      	adds	r6, #1
 8006378:	e7ee      	b.n	8006358 <__libc_init_array+0xc>
 800637a:	f855 3b04 	ldr.w	r3, [r5], #4
 800637e:	4798      	blx	r3
 8006380:	3601      	adds	r6, #1
 8006382:	e7f2      	b.n	800636a <__libc_init_array+0x1e>
 8006384:	08009994 	.word	0x08009994
 8006388:	08009994 	.word	0x08009994
 800638c:	08009994 	.word	0x08009994
 8006390:	0800999c 	.word	0x0800999c

08006394 <malloc>:
 8006394:	4b02      	ldr	r3, [pc, #8]	; (80063a0 <malloc+0xc>)
 8006396:	4601      	mov	r1, r0
 8006398:	6818      	ldr	r0, [r3, #0]
 800639a:	f000 b88d 	b.w	80064b8 <_malloc_r>
 800639e:	bf00      	nop
 80063a0:	2000043c 	.word	0x2000043c

080063a4 <free>:
 80063a4:	4b02      	ldr	r3, [pc, #8]	; (80063b0 <free+0xc>)
 80063a6:	4601      	mov	r1, r0
 80063a8:	6818      	ldr	r0, [r3, #0]
 80063aa:	f000 b819 	b.w	80063e0 <_free_r>
 80063ae:	bf00      	nop
 80063b0:	2000043c 	.word	0x2000043c

080063b4 <memcpy>:
 80063b4:	440a      	add	r2, r1
 80063b6:	4291      	cmp	r1, r2
 80063b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80063bc:	d100      	bne.n	80063c0 <memcpy+0xc>
 80063be:	4770      	bx	lr
 80063c0:	b510      	push	{r4, lr}
 80063c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063ca:	4291      	cmp	r1, r2
 80063cc:	d1f9      	bne.n	80063c2 <memcpy+0xe>
 80063ce:	bd10      	pop	{r4, pc}

080063d0 <memset>:
 80063d0:	4402      	add	r2, r0
 80063d2:	4603      	mov	r3, r0
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d100      	bne.n	80063da <memset+0xa>
 80063d8:	4770      	bx	lr
 80063da:	f803 1b01 	strb.w	r1, [r3], #1
 80063de:	e7f9      	b.n	80063d4 <memset+0x4>

080063e0 <_free_r>:
 80063e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063e2:	2900      	cmp	r1, #0
 80063e4:	d044      	beq.n	8006470 <_free_r+0x90>
 80063e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063ea:	9001      	str	r0, [sp, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f1a1 0404 	sub.w	r4, r1, #4
 80063f2:	bfb8      	it	lt
 80063f4:	18e4      	addlt	r4, r4, r3
 80063f6:	f001 fc31 	bl	8007c5c <__malloc_lock>
 80063fa:	4a1e      	ldr	r2, [pc, #120]	; (8006474 <_free_r+0x94>)
 80063fc:	9801      	ldr	r0, [sp, #4]
 80063fe:	6813      	ldr	r3, [r2, #0]
 8006400:	b933      	cbnz	r3, 8006410 <_free_r+0x30>
 8006402:	6063      	str	r3, [r4, #4]
 8006404:	6014      	str	r4, [r2, #0]
 8006406:	b003      	add	sp, #12
 8006408:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800640c:	f001 bc2c 	b.w	8007c68 <__malloc_unlock>
 8006410:	42a3      	cmp	r3, r4
 8006412:	d908      	bls.n	8006426 <_free_r+0x46>
 8006414:	6825      	ldr	r5, [r4, #0]
 8006416:	1961      	adds	r1, r4, r5
 8006418:	428b      	cmp	r3, r1
 800641a:	bf01      	itttt	eq
 800641c:	6819      	ldreq	r1, [r3, #0]
 800641e:	685b      	ldreq	r3, [r3, #4]
 8006420:	1949      	addeq	r1, r1, r5
 8006422:	6021      	streq	r1, [r4, #0]
 8006424:	e7ed      	b.n	8006402 <_free_r+0x22>
 8006426:	461a      	mov	r2, r3
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	b10b      	cbz	r3, 8006430 <_free_r+0x50>
 800642c:	42a3      	cmp	r3, r4
 800642e:	d9fa      	bls.n	8006426 <_free_r+0x46>
 8006430:	6811      	ldr	r1, [r2, #0]
 8006432:	1855      	adds	r5, r2, r1
 8006434:	42a5      	cmp	r5, r4
 8006436:	d10b      	bne.n	8006450 <_free_r+0x70>
 8006438:	6824      	ldr	r4, [r4, #0]
 800643a:	4421      	add	r1, r4
 800643c:	1854      	adds	r4, r2, r1
 800643e:	42a3      	cmp	r3, r4
 8006440:	6011      	str	r1, [r2, #0]
 8006442:	d1e0      	bne.n	8006406 <_free_r+0x26>
 8006444:	681c      	ldr	r4, [r3, #0]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	6053      	str	r3, [r2, #4]
 800644a:	4421      	add	r1, r4
 800644c:	6011      	str	r1, [r2, #0]
 800644e:	e7da      	b.n	8006406 <_free_r+0x26>
 8006450:	d902      	bls.n	8006458 <_free_r+0x78>
 8006452:	230c      	movs	r3, #12
 8006454:	6003      	str	r3, [r0, #0]
 8006456:	e7d6      	b.n	8006406 <_free_r+0x26>
 8006458:	6825      	ldr	r5, [r4, #0]
 800645a:	1961      	adds	r1, r4, r5
 800645c:	428b      	cmp	r3, r1
 800645e:	bf04      	itt	eq
 8006460:	6819      	ldreq	r1, [r3, #0]
 8006462:	685b      	ldreq	r3, [r3, #4]
 8006464:	6063      	str	r3, [r4, #4]
 8006466:	bf04      	itt	eq
 8006468:	1949      	addeq	r1, r1, r5
 800646a:	6021      	streq	r1, [r4, #0]
 800646c:	6054      	str	r4, [r2, #4]
 800646e:	e7ca      	b.n	8006406 <_free_r+0x26>
 8006470:	b003      	add	sp, #12
 8006472:	bd30      	pop	{r4, r5, pc}
 8006474:	20000860 	.word	0x20000860

08006478 <sbrk_aligned>:
 8006478:	b570      	push	{r4, r5, r6, lr}
 800647a:	4e0e      	ldr	r6, [pc, #56]	; (80064b4 <sbrk_aligned+0x3c>)
 800647c:	460c      	mov	r4, r1
 800647e:	6831      	ldr	r1, [r6, #0]
 8006480:	4605      	mov	r5, r0
 8006482:	b911      	cbnz	r1, 800648a <sbrk_aligned+0x12>
 8006484:	f000 fcf6 	bl	8006e74 <_sbrk_r>
 8006488:	6030      	str	r0, [r6, #0]
 800648a:	4621      	mov	r1, r4
 800648c:	4628      	mov	r0, r5
 800648e:	f000 fcf1 	bl	8006e74 <_sbrk_r>
 8006492:	1c43      	adds	r3, r0, #1
 8006494:	d00a      	beq.n	80064ac <sbrk_aligned+0x34>
 8006496:	1cc4      	adds	r4, r0, #3
 8006498:	f024 0403 	bic.w	r4, r4, #3
 800649c:	42a0      	cmp	r0, r4
 800649e:	d007      	beq.n	80064b0 <sbrk_aligned+0x38>
 80064a0:	1a21      	subs	r1, r4, r0
 80064a2:	4628      	mov	r0, r5
 80064a4:	f000 fce6 	bl	8006e74 <_sbrk_r>
 80064a8:	3001      	adds	r0, #1
 80064aa:	d101      	bne.n	80064b0 <sbrk_aligned+0x38>
 80064ac:	f04f 34ff 	mov.w	r4, #4294967295
 80064b0:	4620      	mov	r0, r4
 80064b2:	bd70      	pop	{r4, r5, r6, pc}
 80064b4:	20000864 	.word	0x20000864

080064b8 <_malloc_r>:
 80064b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064bc:	1ccd      	adds	r5, r1, #3
 80064be:	f025 0503 	bic.w	r5, r5, #3
 80064c2:	3508      	adds	r5, #8
 80064c4:	2d0c      	cmp	r5, #12
 80064c6:	bf38      	it	cc
 80064c8:	250c      	movcc	r5, #12
 80064ca:	2d00      	cmp	r5, #0
 80064cc:	4607      	mov	r7, r0
 80064ce:	db01      	blt.n	80064d4 <_malloc_r+0x1c>
 80064d0:	42a9      	cmp	r1, r5
 80064d2:	d905      	bls.n	80064e0 <_malloc_r+0x28>
 80064d4:	230c      	movs	r3, #12
 80064d6:	603b      	str	r3, [r7, #0]
 80064d8:	2600      	movs	r6, #0
 80064da:	4630      	mov	r0, r6
 80064dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064e0:	4e2e      	ldr	r6, [pc, #184]	; (800659c <_malloc_r+0xe4>)
 80064e2:	f001 fbbb 	bl	8007c5c <__malloc_lock>
 80064e6:	6833      	ldr	r3, [r6, #0]
 80064e8:	461c      	mov	r4, r3
 80064ea:	bb34      	cbnz	r4, 800653a <_malloc_r+0x82>
 80064ec:	4629      	mov	r1, r5
 80064ee:	4638      	mov	r0, r7
 80064f0:	f7ff ffc2 	bl	8006478 <sbrk_aligned>
 80064f4:	1c43      	adds	r3, r0, #1
 80064f6:	4604      	mov	r4, r0
 80064f8:	d14d      	bne.n	8006596 <_malloc_r+0xde>
 80064fa:	6834      	ldr	r4, [r6, #0]
 80064fc:	4626      	mov	r6, r4
 80064fe:	2e00      	cmp	r6, #0
 8006500:	d140      	bne.n	8006584 <_malloc_r+0xcc>
 8006502:	6823      	ldr	r3, [r4, #0]
 8006504:	4631      	mov	r1, r6
 8006506:	4638      	mov	r0, r7
 8006508:	eb04 0803 	add.w	r8, r4, r3
 800650c:	f000 fcb2 	bl	8006e74 <_sbrk_r>
 8006510:	4580      	cmp	r8, r0
 8006512:	d13a      	bne.n	800658a <_malloc_r+0xd2>
 8006514:	6821      	ldr	r1, [r4, #0]
 8006516:	3503      	adds	r5, #3
 8006518:	1a6d      	subs	r5, r5, r1
 800651a:	f025 0503 	bic.w	r5, r5, #3
 800651e:	3508      	adds	r5, #8
 8006520:	2d0c      	cmp	r5, #12
 8006522:	bf38      	it	cc
 8006524:	250c      	movcc	r5, #12
 8006526:	4629      	mov	r1, r5
 8006528:	4638      	mov	r0, r7
 800652a:	f7ff ffa5 	bl	8006478 <sbrk_aligned>
 800652e:	3001      	adds	r0, #1
 8006530:	d02b      	beq.n	800658a <_malloc_r+0xd2>
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	442b      	add	r3, r5
 8006536:	6023      	str	r3, [r4, #0]
 8006538:	e00e      	b.n	8006558 <_malloc_r+0xa0>
 800653a:	6822      	ldr	r2, [r4, #0]
 800653c:	1b52      	subs	r2, r2, r5
 800653e:	d41e      	bmi.n	800657e <_malloc_r+0xc6>
 8006540:	2a0b      	cmp	r2, #11
 8006542:	d916      	bls.n	8006572 <_malloc_r+0xba>
 8006544:	1961      	adds	r1, r4, r5
 8006546:	42a3      	cmp	r3, r4
 8006548:	6025      	str	r5, [r4, #0]
 800654a:	bf18      	it	ne
 800654c:	6059      	strne	r1, [r3, #4]
 800654e:	6863      	ldr	r3, [r4, #4]
 8006550:	bf08      	it	eq
 8006552:	6031      	streq	r1, [r6, #0]
 8006554:	5162      	str	r2, [r4, r5]
 8006556:	604b      	str	r3, [r1, #4]
 8006558:	4638      	mov	r0, r7
 800655a:	f104 060b 	add.w	r6, r4, #11
 800655e:	f001 fb83 	bl	8007c68 <__malloc_unlock>
 8006562:	f026 0607 	bic.w	r6, r6, #7
 8006566:	1d23      	adds	r3, r4, #4
 8006568:	1af2      	subs	r2, r6, r3
 800656a:	d0b6      	beq.n	80064da <_malloc_r+0x22>
 800656c:	1b9b      	subs	r3, r3, r6
 800656e:	50a3      	str	r3, [r4, r2]
 8006570:	e7b3      	b.n	80064da <_malloc_r+0x22>
 8006572:	6862      	ldr	r2, [r4, #4]
 8006574:	42a3      	cmp	r3, r4
 8006576:	bf0c      	ite	eq
 8006578:	6032      	streq	r2, [r6, #0]
 800657a:	605a      	strne	r2, [r3, #4]
 800657c:	e7ec      	b.n	8006558 <_malloc_r+0xa0>
 800657e:	4623      	mov	r3, r4
 8006580:	6864      	ldr	r4, [r4, #4]
 8006582:	e7b2      	b.n	80064ea <_malloc_r+0x32>
 8006584:	4634      	mov	r4, r6
 8006586:	6876      	ldr	r6, [r6, #4]
 8006588:	e7b9      	b.n	80064fe <_malloc_r+0x46>
 800658a:	230c      	movs	r3, #12
 800658c:	603b      	str	r3, [r7, #0]
 800658e:	4638      	mov	r0, r7
 8006590:	f001 fb6a 	bl	8007c68 <__malloc_unlock>
 8006594:	e7a1      	b.n	80064da <_malloc_r+0x22>
 8006596:	6025      	str	r5, [r4, #0]
 8006598:	e7de      	b.n	8006558 <_malloc_r+0xa0>
 800659a:	bf00      	nop
 800659c:	20000860 	.word	0x20000860

080065a0 <__cvt>:
 80065a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065a4:	ec55 4b10 	vmov	r4, r5, d0
 80065a8:	2d00      	cmp	r5, #0
 80065aa:	460e      	mov	r6, r1
 80065ac:	4619      	mov	r1, r3
 80065ae:	462b      	mov	r3, r5
 80065b0:	bfbb      	ittet	lt
 80065b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80065b6:	461d      	movlt	r5, r3
 80065b8:	2300      	movge	r3, #0
 80065ba:	232d      	movlt	r3, #45	; 0x2d
 80065bc:	700b      	strb	r3, [r1, #0]
 80065be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80065c4:	4691      	mov	r9, r2
 80065c6:	f023 0820 	bic.w	r8, r3, #32
 80065ca:	bfbc      	itt	lt
 80065cc:	4622      	movlt	r2, r4
 80065ce:	4614      	movlt	r4, r2
 80065d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80065d4:	d005      	beq.n	80065e2 <__cvt+0x42>
 80065d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80065da:	d100      	bne.n	80065de <__cvt+0x3e>
 80065dc:	3601      	adds	r6, #1
 80065de:	2102      	movs	r1, #2
 80065e0:	e000      	b.n	80065e4 <__cvt+0x44>
 80065e2:	2103      	movs	r1, #3
 80065e4:	ab03      	add	r3, sp, #12
 80065e6:	9301      	str	r3, [sp, #4]
 80065e8:	ab02      	add	r3, sp, #8
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	ec45 4b10 	vmov	d0, r4, r5
 80065f0:	4653      	mov	r3, sl
 80065f2:	4632      	mov	r2, r6
 80065f4:	f000 fd40 	bl	8007078 <_dtoa_r>
 80065f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80065fc:	4607      	mov	r7, r0
 80065fe:	d102      	bne.n	8006606 <__cvt+0x66>
 8006600:	f019 0f01 	tst.w	r9, #1
 8006604:	d022      	beq.n	800664c <__cvt+0xac>
 8006606:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800660a:	eb07 0906 	add.w	r9, r7, r6
 800660e:	d110      	bne.n	8006632 <__cvt+0x92>
 8006610:	783b      	ldrb	r3, [r7, #0]
 8006612:	2b30      	cmp	r3, #48	; 0x30
 8006614:	d10a      	bne.n	800662c <__cvt+0x8c>
 8006616:	2200      	movs	r2, #0
 8006618:	2300      	movs	r3, #0
 800661a:	4620      	mov	r0, r4
 800661c:	4629      	mov	r1, r5
 800661e:	f7fa fa5b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006622:	b918      	cbnz	r0, 800662c <__cvt+0x8c>
 8006624:	f1c6 0601 	rsb	r6, r6, #1
 8006628:	f8ca 6000 	str.w	r6, [sl]
 800662c:	f8da 3000 	ldr.w	r3, [sl]
 8006630:	4499      	add	r9, r3
 8006632:	2200      	movs	r2, #0
 8006634:	2300      	movs	r3, #0
 8006636:	4620      	mov	r0, r4
 8006638:	4629      	mov	r1, r5
 800663a:	f7fa fa4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800663e:	b108      	cbz	r0, 8006644 <__cvt+0xa4>
 8006640:	f8cd 900c 	str.w	r9, [sp, #12]
 8006644:	2230      	movs	r2, #48	; 0x30
 8006646:	9b03      	ldr	r3, [sp, #12]
 8006648:	454b      	cmp	r3, r9
 800664a:	d307      	bcc.n	800665c <__cvt+0xbc>
 800664c:	9b03      	ldr	r3, [sp, #12]
 800664e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006650:	1bdb      	subs	r3, r3, r7
 8006652:	4638      	mov	r0, r7
 8006654:	6013      	str	r3, [r2, #0]
 8006656:	b004      	add	sp, #16
 8006658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800665c:	1c59      	adds	r1, r3, #1
 800665e:	9103      	str	r1, [sp, #12]
 8006660:	701a      	strb	r2, [r3, #0]
 8006662:	e7f0      	b.n	8006646 <__cvt+0xa6>

08006664 <__exponent>:
 8006664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006666:	4603      	mov	r3, r0
 8006668:	2900      	cmp	r1, #0
 800666a:	bfb8      	it	lt
 800666c:	4249      	neglt	r1, r1
 800666e:	f803 2b02 	strb.w	r2, [r3], #2
 8006672:	bfb4      	ite	lt
 8006674:	222d      	movlt	r2, #45	; 0x2d
 8006676:	222b      	movge	r2, #43	; 0x2b
 8006678:	2909      	cmp	r1, #9
 800667a:	7042      	strb	r2, [r0, #1]
 800667c:	dd2a      	ble.n	80066d4 <__exponent+0x70>
 800667e:	f10d 0407 	add.w	r4, sp, #7
 8006682:	46a4      	mov	ip, r4
 8006684:	270a      	movs	r7, #10
 8006686:	46a6      	mov	lr, r4
 8006688:	460a      	mov	r2, r1
 800668a:	fb91 f6f7 	sdiv	r6, r1, r7
 800668e:	fb07 1516 	mls	r5, r7, r6, r1
 8006692:	3530      	adds	r5, #48	; 0x30
 8006694:	2a63      	cmp	r2, #99	; 0x63
 8006696:	f104 34ff 	add.w	r4, r4, #4294967295
 800669a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800669e:	4631      	mov	r1, r6
 80066a0:	dcf1      	bgt.n	8006686 <__exponent+0x22>
 80066a2:	3130      	adds	r1, #48	; 0x30
 80066a4:	f1ae 0502 	sub.w	r5, lr, #2
 80066a8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80066ac:	1c44      	adds	r4, r0, #1
 80066ae:	4629      	mov	r1, r5
 80066b0:	4561      	cmp	r1, ip
 80066b2:	d30a      	bcc.n	80066ca <__exponent+0x66>
 80066b4:	f10d 0209 	add.w	r2, sp, #9
 80066b8:	eba2 020e 	sub.w	r2, r2, lr
 80066bc:	4565      	cmp	r5, ip
 80066be:	bf88      	it	hi
 80066c0:	2200      	movhi	r2, #0
 80066c2:	4413      	add	r3, r2
 80066c4:	1a18      	subs	r0, r3, r0
 80066c6:	b003      	add	sp, #12
 80066c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066ce:	f804 2f01 	strb.w	r2, [r4, #1]!
 80066d2:	e7ed      	b.n	80066b0 <__exponent+0x4c>
 80066d4:	2330      	movs	r3, #48	; 0x30
 80066d6:	3130      	adds	r1, #48	; 0x30
 80066d8:	7083      	strb	r3, [r0, #2]
 80066da:	70c1      	strb	r1, [r0, #3]
 80066dc:	1d03      	adds	r3, r0, #4
 80066de:	e7f1      	b.n	80066c4 <__exponent+0x60>

080066e0 <_printf_float>:
 80066e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e4:	ed2d 8b02 	vpush	{d8}
 80066e8:	b08d      	sub	sp, #52	; 0x34
 80066ea:	460c      	mov	r4, r1
 80066ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80066f0:	4616      	mov	r6, r2
 80066f2:	461f      	mov	r7, r3
 80066f4:	4605      	mov	r5, r0
 80066f6:	f001 faad 	bl	8007c54 <_localeconv_r>
 80066fa:	f8d0 a000 	ldr.w	sl, [r0]
 80066fe:	4650      	mov	r0, sl
 8006700:	f7f9 fd6e 	bl	80001e0 <strlen>
 8006704:	2300      	movs	r3, #0
 8006706:	930a      	str	r3, [sp, #40]	; 0x28
 8006708:	6823      	ldr	r3, [r4, #0]
 800670a:	9305      	str	r3, [sp, #20]
 800670c:	f8d8 3000 	ldr.w	r3, [r8]
 8006710:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006714:	3307      	adds	r3, #7
 8006716:	f023 0307 	bic.w	r3, r3, #7
 800671a:	f103 0208 	add.w	r2, r3, #8
 800671e:	f8c8 2000 	str.w	r2, [r8]
 8006722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006726:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800672a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800672e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006732:	9307      	str	r3, [sp, #28]
 8006734:	f8cd 8018 	str.w	r8, [sp, #24]
 8006738:	ee08 0a10 	vmov	s16, r0
 800673c:	4b9f      	ldr	r3, [pc, #636]	; (80069bc <_printf_float+0x2dc>)
 800673e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006742:	f04f 32ff 	mov.w	r2, #4294967295
 8006746:	f7fa f9f9 	bl	8000b3c <__aeabi_dcmpun>
 800674a:	bb88      	cbnz	r0, 80067b0 <_printf_float+0xd0>
 800674c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006750:	4b9a      	ldr	r3, [pc, #616]	; (80069bc <_printf_float+0x2dc>)
 8006752:	f04f 32ff 	mov.w	r2, #4294967295
 8006756:	f7fa f9d3 	bl	8000b00 <__aeabi_dcmple>
 800675a:	bb48      	cbnz	r0, 80067b0 <_printf_float+0xd0>
 800675c:	2200      	movs	r2, #0
 800675e:	2300      	movs	r3, #0
 8006760:	4640      	mov	r0, r8
 8006762:	4649      	mov	r1, r9
 8006764:	f7fa f9c2 	bl	8000aec <__aeabi_dcmplt>
 8006768:	b110      	cbz	r0, 8006770 <_printf_float+0x90>
 800676a:	232d      	movs	r3, #45	; 0x2d
 800676c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006770:	4b93      	ldr	r3, [pc, #588]	; (80069c0 <_printf_float+0x2e0>)
 8006772:	4894      	ldr	r0, [pc, #592]	; (80069c4 <_printf_float+0x2e4>)
 8006774:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006778:	bf94      	ite	ls
 800677a:	4698      	movls	r8, r3
 800677c:	4680      	movhi	r8, r0
 800677e:	2303      	movs	r3, #3
 8006780:	6123      	str	r3, [r4, #16]
 8006782:	9b05      	ldr	r3, [sp, #20]
 8006784:	f023 0204 	bic.w	r2, r3, #4
 8006788:	6022      	str	r2, [r4, #0]
 800678a:	f04f 0900 	mov.w	r9, #0
 800678e:	9700      	str	r7, [sp, #0]
 8006790:	4633      	mov	r3, r6
 8006792:	aa0b      	add	r2, sp, #44	; 0x2c
 8006794:	4621      	mov	r1, r4
 8006796:	4628      	mov	r0, r5
 8006798:	f000 f9d8 	bl	8006b4c <_printf_common>
 800679c:	3001      	adds	r0, #1
 800679e:	f040 8090 	bne.w	80068c2 <_printf_float+0x1e2>
 80067a2:	f04f 30ff 	mov.w	r0, #4294967295
 80067a6:	b00d      	add	sp, #52	; 0x34
 80067a8:	ecbd 8b02 	vpop	{d8}
 80067ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067b0:	4642      	mov	r2, r8
 80067b2:	464b      	mov	r3, r9
 80067b4:	4640      	mov	r0, r8
 80067b6:	4649      	mov	r1, r9
 80067b8:	f7fa f9c0 	bl	8000b3c <__aeabi_dcmpun>
 80067bc:	b140      	cbz	r0, 80067d0 <_printf_float+0xf0>
 80067be:	464b      	mov	r3, r9
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	bfbc      	itt	lt
 80067c4:	232d      	movlt	r3, #45	; 0x2d
 80067c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80067ca:	487f      	ldr	r0, [pc, #508]	; (80069c8 <_printf_float+0x2e8>)
 80067cc:	4b7f      	ldr	r3, [pc, #508]	; (80069cc <_printf_float+0x2ec>)
 80067ce:	e7d1      	b.n	8006774 <_printf_float+0x94>
 80067d0:	6863      	ldr	r3, [r4, #4]
 80067d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80067d6:	9206      	str	r2, [sp, #24]
 80067d8:	1c5a      	adds	r2, r3, #1
 80067da:	d13f      	bne.n	800685c <_printf_float+0x17c>
 80067dc:	2306      	movs	r3, #6
 80067de:	6063      	str	r3, [r4, #4]
 80067e0:	9b05      	ldr	r3, [sp, #20]
 80067e2:	6861      	ldr	r1, [r4, #4]
 80067e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80067e8:	2300      	movs	r3, #0
 80067ea:	9303      	str	r3, [sp, #12]
 80067ec:	ab0a      	add	r3, sp, #40	; 0x28
 80067ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 80067f2:	ab09      	add	r3, sp, #36	; 0x24
 80067f4:	ec49 8b10 	vmov	d0, r8, r9
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	6022      	str	r2, [r4, #0]
 80067fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006800:	4628      	mov	r0, r5
 8006802:	f7ff fecd 	bl	80065a0 <__cvt>
 8006806:	9b06      	ldr	r3, [sp, #24]
 8006808:	9909      	ldr	r1, [sp, #36]	; 0x24
 800680a:	2b47      	cmp	r3, #71	; 0x47
 800680c:	4680      	mov	r8, r0
 800680e:	d108      	bne.n	8006822 <_printf_float+0x142>
 8006810:	1cc8      	adds	r0, r1, #3
 8006812:	db02      	blt.n	800681a <_printf_float+0x13a>
 8006814:	6863      	ldr	r3, [r4, #4]
 8006816:	4299      	cmp	r1, r3
 8006818:	dd41      	ble.n	800689e <_printf_float+0x1be>
 800681a:	f1ab 0b02 	sub.w	fp, fp, #2
 800681e:	fa5f fb8b 	uxtb.w	fp, fp
 8006822:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006826:	d820      	bhi.n	800686a <_printf_float+0x18a>
 8006828:	3901      	subs	r1, #1
 800682a:	465a      	mov	r2, fp
 800682c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006830:	9109      	str	r1, [sp, #36]	; 0x24
 8006832:	f7ff ff17 	bl	8006664 <__exponent>
 8006836:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006838:	1813      	adds	r3, r2, r0
 800683a:	2a01      	cmp	r2, #1
 800683c:	4681      	mov	r9, r0
 800683e:	6123      	str	r3, [r4, #16]
 8006840:	dc02      	bgt.n	8006848 <_printf_float+0x168>
 8006842:	6822      	ldr	r2, [r4, #0]
 8006844:	07d2      	lsls	r2, r2, #31
 8006846:	d501      	bpl.n	800684c <_printf_float+0x16c>
 8006848:	3301      	adds	r3, #1
 800684a:	6123      	str	r3, [r4, #16]
 800684c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006850:	2b00      	cmp	r3, #0
 8006852:	d09c      	beq.n	800678e <_printf_float+0xae>
 8006854:	232d      	movs	r3, #45	; 0x2d
 8006856:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800685a:	e798      	b.n	800678e <_printf_float+0xae>
 800685c:	9a06      	ldr	r2, [sp, #24]
 800685e:	2a47      	cmp	r2, #71	; 0x47
 8006860:	d1be      	bne.n	80067e0 <_printf_float+0x100>
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1bc      	bne.n	80067e0 <_printf_float+0x100>
 8006866:	2301      	movs	r3, #1
 8006868:	e7b9      	b.n	80067de <_printf_float+0xfe>
 800686a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800686e:	d118      	bne.n	80068a2 <_printf_float+0x1c2>
 8006870:	2900      	cmp	r1, #0
 8006872:	6863      	ldr	r3, [r4, #4]
 8006874:	dd0b      	ble.n	800688e <_printf_float+0x1ae>
 8006876:	6121      	str	r1, [r4, #16]
 8006878:	b913      	cbnz	r3, 8006880 <_printf_float+0x1a0>
 800687a:	6822      	ldr	r2, [r4, #0]
 800687c:	07d0      	lsls	r0, r2, #31
 800687e:	d502      	bpl.n	8006886 <_printf_float+0x1a6>
 8006880:	3301      	adds	r3, #1
 8006882:	440b      	add	r3, r1
 8006884:	6123      	str	r3, [r4, #16]
 8006886:	65a1      	str	r1, [r4, #88]	; 0x58
 8006888:	f04f 0900 	mov.w	r9, #0
 800688c:	e7de      	b.n	800684c <_printf_float+0x16c>
 800688e:	b913      	cbnz	r3, 8006896 <_printf_float+0x1b6>
 8006890:	6822      	ldr	r2, [r4, #0]
 8006892:	07d2      	lsls	r2, r2, #31
 8006894:	d501      	bpl.n	800689a <_printf_float+0x1ba>
 8006896:	3302      	adds	r3, #2
 8006898:	e7f4      	b.n	8006884 <_printf_float+0x1a4>
 800689a:	2301      	movs	r3, #1
 800689c:	e7f2      	b.n	8006884 <_printf_float+0x1a4>
 800689e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80068a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068a4:	4299      	cmp	r1, r3
 80068a6:	db05      	blt.n	80068b4 <_printf_float+0x1d4>
 80068a8:	6823      	ldr	r3, [r4, #0]
 80068aa:	6121      	str	r1, [r4, #16]
 80068ac:	07d8      	lsls	r0, r3, #31
 80068ae:	d5ea      	bpl.n	8006886 <_printf_float+0x1a6>
 80068b0:	1c4b      	adds	r3, r1, #1
 80068b2:	e7e7      	b.n	8006884 <_printf_float+0x1a4>
 80068b4:	2900      	cmp	r1, #0
 80068b6:	bfd4      	ite	le
 80068b8:	f1c1 0202 	rsble	r2, r1, #2
 80068bc:	2201      	movgt	r2, #1
 80068be:	4413      	add	r3, r2
 80068c0:	e7e0      	b.n	8006884 <_printf_float+0x1a4>
 80068c2:	6823      	ldr	r3, [r4, #0]
 80068c4:	055a      	lsls	r2, r3, #21
 80068c6:	d407      	bmi.n	80068d8 <_printf_float+0x1f8>
 80068c8:	6923      	ldr	r3, [r4, #16]
 80068ca:	4642      	mov	r2, r8
 80068cc:	4631      	mov	r1, r6
 80068ce:	4628      	mov	r0, r5
 80068d0:	47b8      	blx	r7
 80068d2:	3001      	adds	r0, #1
 80068d4:	d12c      	bne.n	8006930 <_printf_float+0x250>
 80068d6:	e764      	b.n	80067a2 <_printf_float+0xc2>
 80068d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80068dc:	f240 80e0 	bls.w	8006aa0 <_printf_float+0x3c0>
 80068e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068e4:	2200      	movs	r2, #0
 80068e6:	2300      	movs	r3, #0
 80068e8:	f7fa f8f6 	bl	8000ad8 <__aeabi_dcmpeq>
 80068ec:	2800      	cmp	r0, #0
 80068ee:	d034      	beq.n	800695a <_printf_float+0x27a>
 80068f0:	4a37      	ldr	r2, [pc, #220]	; (80069d0 <_printf_float+0x2f0>)
 80068f2:	2301      	movs	r3, #1
 80068f4:	4631      	mov	r1, r6
 80068f6:	4628      	mov	r0, r5
 80068f8:	47b8      	blx	r7
 80068fa:	3001      	adds	r0, #1
 80068fc:	f43f af51 	beq.w	80067a2 <_printf_float+0xc2>
 8006900:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006904:	429a      	cmp	r2, r3
 8006906:	db02      	blt.n	800690e <_printf_float+0x22e>
 8006908:	6823      	ldr	r3, [r4, #0]
 800690a:	07d8      	lsls	r0, r3, #31
 800690c:	d510      	bpl.n	8006930 <_printf_float+0x250>
 800690e:	ee18 3a10 	vmov	r3, s16
 8006912:	4652      	mov	r2, sl
 8006914:	4631      	mov	r1, r6
 8006916:	4628      	mov	r0, r5
 8006918:	47b8      	blx	r7
 800691a:	3001      	adds	r0, #1
 800691c:	f43f af41 	beq.w	80067a2 <_printf_float+0xc2>
 8006920:	f04f 0800 	mov.w	r8, #0
 8006924:	f104 091a 	add.w	r9, r4, #26
 8006928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800692a:	3b01      	subs	r3, #1
 800692c:	4543      	cmp	r3, r8
 800692e:	dc09      	bgt.n	8006944 <_printf_float+0x264>
 8006930:	6823      	ldr	r3, [r4, #0]
 8006932:	079b      	lsls	r3, r3, #30
 8006934:	f100 8105 	bmi.w	8006b42 <_printf_float+0x462>
 8006938:	68e0      	ldr	r0, [r4, #12]
 800693a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800693c:	4298      	cmp	r0, r3
 800693e:	bfb8      	it	lt
 8006940:	4618      	movlt	r0, r3
 8006942:	e730      	b.n	80067a6 <_printf_float+0xc6>
 8006944:	2301      	movs	r3, #1
 8006946:	464a      	mov	r2, r9
 8006948:	4631      	mov	r1, r6
 800694a:	4628      	mov	r0, r5
 800694c:	47b8      	blx	r7
 800694e:	3001      	adds	r0, #1
 8006950:	f43f af27 	beq.w	80067a2 <_printf_float+0xc2>
 8006954:	f108 0801 	add.w	r8, r8, #1
 8006958:	e7e6      	b.n	8006928 <_printf_float+0x248>
 800695a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800695c:	2b00      	cmp	r3, #0
 800695e:	dc39      	bgt.n	80069d4 <_printf_float+0x2f4>
 8006960:	4a1b      	ldr	r2, [pc, #108]	; (80069d0 <_printf_float+0x2f0>)
 8006962:	2301      	movs	r3, #1
 8006964:	4631      	mov	r1, r6
 8006966:	4628      	mov	r0, r5
 8006968:	47b8      	blx	r7
 800696a:	3001      	adds	r0, #1
 800696c:	f43f af19 	beq.w	80067a2 <_printf_float+0xc2>
 8006970:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006974:	4313      	orrs	r3, r2
 8006976:	d102      	bne.n	800697e <_printf_float+0x29e>
 8006978:	6823      	ldr	r3, [r4, #0]
 800697a:	07d9      	lsls	r1, r3, #31
 800697c:	d5d8      	bpl.n	8006930 <_printf_float+0x250>
 800697e:	ee18 3a10 	vmov	r3, s16
 8006982:	4652      	mov	r2, sl
 8006984:	4631      	mov	r1, r6
 8006986:	4628      	mov	r0, r5
 8006988:	47b8      	blx	r7
 800698a:	3001      	adds	r0, #1
 800698c:	f43f af09 	beq.w	80067a2 <_printf_float+0xc2>
 8006990:	f04f 0900 	mov.w	r9, #0
 8006994:	f104 0a1a 	add.w	sl, r4, #26
 8006998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800699a:	425b      	negs	r3, r3
 800699c:	454b      	cmp	r3, r9
 800699e:	dc01      	bgt.n	80069a4 <_printf_float+0x2c4>
 80069a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069a2:	e792      	b.n	80068ca <_printf_float+0x1ea>
 80069a4:	2301      	movs	r3, #1
 80069a6:	4652      	mov	r2, sl
 80069a8:	4631      	mov	r1, r6
 80069aa:	4628      	mov	r0, r5
 80069ac:	47b8      	blx	r7
 80069ae:	3001      	adds	r0, #1
 80069b0:	f43f aef7 	beq.w	80067a2 <_printf_float+0xc2>
 80069b4:	f109 0901 	add.w	r9, r9, #1
 80069b8:	e7ee      	b.n	8006998 <_printf_float+0x2b8>
 80069ba:	bf00      	nop
 80069bc:	7fefffff 	.word	0x7fefffff
 80069c0:	080095b4 	.word	0x080095b4
 80069c4:	080095b8 	.word	0x080095b8
 80069c8:	080095c0 	.word	0x080095c0
 80069cc:	080095bc 	.word	0x080095bc
 80069d0:	080095c4 	.word	0x080095c4
 80069d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069d8:	429a      	cmp	r2, r3
 80069da:	bfa8      	it	ge
 80069dc:	461a      	movge	r2, r3
 80069de:	2a00      	cmp	r2, #0
 80069e0:	4691      	mov	r9, r2
 80069e2:	dc37      	bgt.n	8006a54 <_printf_float+0x374>
 80069e4:	f04f 0b00 	mov.w	fp, #0
 80069e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069ec:	f104 021a 	add.w	r2, r4, #26
 80069f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069f2:	9305      	str	r3, [sp, #20]
 80069f4:	eba3 0309 	sub.w	r3, r3, r9
 80069f8:	455b      	cmp	r3, fp
 80069fa:	dc33      	bgt.n	8006a64 <_printf_float+0x384>
 80069fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a00:	429a      	cmp	r2, r3
 8006a02:	db3b      	blt.n	8006a7c <_printf_float+0x39c>
 8006a04:	6823      	ldr	r3, [r4, #0]
 8006a06:	07da      	lsls	r2, r3, #31
 8006a08:	d438      	bmi.n	8006a7c <_printf_float+0x39c>
 8006a0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a0c:	9a05      	ldr	r2, [sp, #20]
 8006a0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a10:	1a9a      	subs	r2, r3, r2
 8006a12:	eba3 0901 	sub.w	r9, r3, r1
 8006a16:	4591      	cmp	r9, r2
 8006a18:	bfa8      	it	ge
 8006a1a:	4691      	movge	r9, r2
 8006a1c:	f1b9 0f00 	cmp.w	r9, #0
 8006a20:	dc35      	bgt.n	8006a8e <_printf_float+0x3ae>
 8006a22:	f04f 0800 	mov.w	r8, #0
 8006a26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a2a:	f104 0a1a 	add.w	sl, r4, #26
 8006a2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a32:	1a9b      	subs	r3, r3, r2
 8006a34:	eba3 0309 	sub.w	r3, r3, r9
 8006a38:	4543      	cmp	r3, r8
 8006a3a:	f77f af79 	ble.w	8006930 <_printf_float+0x250>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	4652      	mov	r2, sl
 8006a42:	4631      	mov	r1, r6
 8006a44:	4628      	mov	r0, r5
 8006a46:	47b8      	blx	r7
 8006a48:	3001      	adds	r0, #1
 8006a4a:	f43f aeaa 	beq.w	80067a2 <_printf_float+0xc2>
 8006a4e:	f108 0801 	add.w	r8, r8, #1
 8006a52:	e7ec      	b.n	8006a2e <_printf_float+0x34e>
 8006a54:	4613      	mov	r3, r2
 8006a56:	4631      	mov	r1, r6
 8006a58:	4642      	mov	r2, r8
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	47b8      	blx	r7
 8006a5e:	3001      	adds	r0, #1
 8006a60:	d1c0      	bne.n	80069e4 <_printf_float+0x304>
 8006a62:	e69e      	b.n	80067a2 <_printf_float+0xc2>
 8006a64:	2301      	movs	r3, #1
 8006a66:	4631      	mov	r1, r6
 8006a68:	4628      	mov	r0, r5
 8006a6a:	9205      	str	r2, [sp, #20]
 8006a6c:	47b8      	blx	r7
 8006a6e:	3001      	adds	r0, #1
 8006a70:	f43f ae97 	beq.w	80067a2 <_printf_float+0xc2>
 8006a74:	9a05      	ldr	r2, [sp, #20]
 8006a76:	f10b 0b01 	add.w	fp, fp, #1
 8006a7a:	e7b9      	b.n	80069f0 <_printf_float+0x310>
 8006a7c:	ee18 3a10 	vmov	r3, s16
 8006a80:	4652      	mov	r2, sl
 8006a82:	4631      	mov	r1, r6
 8006a84:	4628      	mov	r0, r5
 8006a86:	47b8      	blx	r7
 8006a88:	3001      	adds	r0, #1
 8006a8a:	d1be      	bne.n	8006a0a <_printf_float+0x32a>
 8006a8c:	e689      	b.n	80067a2 <_printf_float+0xc2>
 8006a8e:	9a05      	ldr	r2, [sp, #20]
 8006a90:	464b      	mov	r3, r9
 8006a92:	4442      	add	r2, r8
 8006a94:	4631      	mov	r1, r6
 8006a96:	4628      	mov	r0, r5
 8006a98:	47b8      	blx	r7
 8006a9a:	3001      	adds	r0, #1
 8006a9c:	d1c1      	bne.n	8006a22 <_printf_float+0x342>
 8006a9e:	e680      	b.n	80067a2 <_printf_float+0xc2>
 8006aa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006aa2:	2a01      	cmp	r2, #1
 8006aa4:	dc01      	bgt.n	8006aaa <_printf_float+0x3ca>
 8006aa6:	07db      	lsls	r3, r3, #31
 8006aa8:	d538      	bpl.n	8006b1c <_printf_float+0x43c>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	4642      	mov	r2, r8
 8006aae:	4631      	mov	r1, r6
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	47b8      	blx	r7
 8006ab4:	3001      	adds	r0, #1
 8006ab6:	f43f ae74 	beq.w	80067a2 <_printf_float+0xc2>
 8006aba:	ee18 3a10 	vmov	r3, s16
 8006abe:	4652      	mov	r2, sl
 8006ac0:	4631      	mov	r1, r6
 8006ac2:	4628      	mov	r0, r5
 8006ac4:	47b8      	blx	r7
 8006ac6:	3001      	adds	r0, #1
 8006ac8:	f43f ae6b 	beq.w	80067a2 <_printf_float+0xc2>
 8006acc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	f7fa f800 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ad8:	b9d8      	cbnz	r0, 8006b12 <_printf_float+0x432>
 8006ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006adc:	f108 0201 	add.w	r2, r8, #1
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	4631      	mov	r1, r6
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	47b8      	blx	r7
 8006ae8:	3001      	adds	r0, #1
 8006aea:	d10e      	bne.n	8006b0a <_printf_float+0x42a>
 8006aec:	e659      	b.n	80067a2 <_printf_float+0xc2>
 8006aee:	2301      	movs	r3, #1
 8006af0:	4652      	mov	r2, sl
 8006af2:	4631      	mov	r1, r6
 8006af4:	4628      	mov	r0, r5
 8006af6:	47b8      	blx	r7
 8006af8:	3001      	adds	r0, #1
 8006afa:	f43f ae52 	beq.w	80067a2 <_printf_float+0xc2>
 8006afe:	f108 0801 	add.w	r8, r8, #1
 8006b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b04:	3b01      	subs	r3, #1
 8006b06:	4543      	cmp	r3, r8
 8006b08:	dcf1      	bgt.n	8006aee <_printf_float+0x40e>
 8006b0a:	464b      	mov	r3, r9
 8006b0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b10:	e6dc      	b.n	80068cc <_printf_float+0x1ec>
 8006b12:	f04f 0800 	mov.w	r8, #0
 8006b16:	f104 0a1a 	add.w	sl, r4, #26
 8006b1a:	e7f2      	b.n	8006b02 <_printf_float+0x422>
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	4642      	mov	r2, r8
 8006b20:	e7df      	b.n	8006ae2 <_printf_float+0x402>
 8006b22:	2301      	movs	r3, #1
 8006b24:	464a      	mov	r2, r9
 8006b26:	4631      	mov	r1, r6
 8006b28:	4628      	mov	r0, r5
 8006b2a:	47b8      	blx	r7
 8006b2c:	3001      	adds	r0, #1
 8006b2e:	f43f ae38 	beq.w	80067a2 <_printf_float+0xc2>
 8006b32:	f108 0801 	add.w	r8, r8, #1
 8006b36:	68e3      	ldr	r3, [r4, #12]
 8006b38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b3a:	1a5b      	subs	r3, r3, r1
 8006b3c:	4543      	cmp	r3, r8
 8006b3e:	dcf0      	bgt.n	8006b22 <_printf_float+0x442>
 8006b40:	e6fa      	b.n	8006938 <_printf_float+0x258>
 8006b42:	f04f 0800 	mov.w	r8, #0
 8006b46:	f104 0919 	add.w	r9, r4, #25
 8006b4a:	e7f4      	b.n	8006b36 <_printf_float+0x456>

08006b4c <_printf_common>:
 8006b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b50:	4616      	mov	r6, r2
 8006b52:	4699      	mov	r9, r3
 8006b54:	688a      	ldr	r2, [r1, #8]
 8006b56:	690b      	ldr	r3, [r1, #16]
 8006b58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	bfb8      	it	lt
 8006b60:	4613      	movlt	r3, r2
 8006b62:	6033      	str	r3, [r6, #0]
 8006b64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b68:	4607      	mov	r7, r0
 8006b6a:	460c      	mov	r4, r1
 8006b6c:	b10a      	cbz	r2, 8006b72 <_printf_common+0x26>
 8006b6e:	3301      	adds	r3, #1
 8006b70:	6033      	str	r3, [r6, #0]
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	0699      	lsls	r1, r3, #26
 8006b76:	bf42      	ittt	mi
 8006b78:	6833      	ldrmi	r3, [r6, #0]
 8006b7a:	3302      	addmi	r3, #2
 8006b7c:	6033      	strmi	r3, [r6, #0]
 8006b7e:	6825      	ldr	r5, [r4, #0]
 8006b80:	f015 0506 	ands.w	r5, r5, #6
 8006b84:	d106      	bne.n	8006b94 <_printf_common+0x48>
 8006b86:	f104 0a19 	add.w	sl, r4, #25
 8006b8a:	68e3      	ldr	r3, [r4, #12]
 8006b8c:	6832      	ldr	r2, [r6, #0]
 8006b8e:	1a9b      	subs	r3, r3, r2
 8006b90:	42ab      	cmp	r3, r5
 8006b92:	dc26      	bgt.n	8006be2 <_printf_common+0x96>
 8006b94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b98:	1e13      	subs	r3, r2, #0
 8006b9a:	6822      	ldr	r2, [r4, #0]
 8006b9c:	bf18      	it	ne
 8006b9e:	2301      	movne	r3, #1
 8006ba0:	0692      	lsls	r2, r2, #26
 8006ba2:	d42b      	bmi.n	8006bfc <_printf_common+0xb0>
 8006ba4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ba8:	4649      	mov	r1, r9
 8006baa:	4638      	mov	r0, r7
 8006bac:	47c0      	blx	r8
 8006bae:	3001      	adds	r0, #1
 8006bb0:	d01e      	beq.n	8006bf0 <_printf_common+0xa4>
 8006bb2:	6823      	ldr	r3, [r4, #0]
 8006bb4:	68e5      	ldr	r5, [r4, #12]
 8006bb6:	6832      	ldr	r2, [r6, #0]
 8006bb8:	f003 0306 	and.w	r3, r3, #6
 8006bbc:	2b04      	cmp	r3, #4
 8006bbe:	bf08      	it	eq
 8006bc0:	1aad      	subeq	r5, r5, r2
 8006bc2:	68a3      	ldr	r3, [r4, #8]
 8006bc4:	6922      	ldr	r2, [r4, #16]
 8006bc6:	bf0c      	ite	eq
 8006bc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bcc:	2500      	movne	r5, #0
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	bfc4      	itt	gt
 8006bd2:	1a9b      	subgt	r3, r3, r2
 8006bd4:	18ed      	addgt	r5, r5, r3
 8006bd6:	2600      	movs	r6, #0
 8006bd8:	341a      	adds	r4, #26
 8006bda:	42b5      	cmp	r5, r6
 8006bdc:	d11a      	bne.n	8006c14 <_printf_common+0xc8>
 8006bde:	2000      	movs	r0, #0
 8006be0:	e008      	b.n	8006bf4 <_printf_common+0xa8>
 8006be2:	2301      	movs	r3, #1
 8006be4:	4652      	mov	r2, sl
 8006be6:	4649      	mov	r1, r9
 8006be8:	4638      	mov	r0, r7
 8006bea:	47c0      	blx	r8
 8006bec:	3001      	adds	r0, #1
 8006bee:	d103      	bne.n	8006bf8 <_printf_common+0xac>
 8006bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bf8:	3501      	adds	r5, #1
 8006bfa:	e7c6      	b.n	8006b8a <_printf_common+0x3e>
 8006bfc:	18e1      	adds	r1, r4, r3
 8006bfe:	1c5a      	adds	r2, r3, #1
 8006c00:	2030      	movs	r0, #48	; 0x30
 8006c02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c06:	4422      	add	r2, r4
 8006c08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c10:	3302      	adds	r3, #2
 8006c12:	e7c7      	b.n	8006ba4 <_printf_common+0x58>
 8006c14:	2301      	movs	r3, #1
 8006c16:	4622      	mov	r2, r4
 8006c18:	4649      	mov	r1, r9
 8006c1a:	4638      	mov	r0, r7
 8006c1c:	47c0      	blx	r8
 8006c1e:	3001      	adds	r0, #1
 8006c20:	d0e6      	beq.n	8006bf0 <_printf_common+0xa4>
 8006c22:	3601      	adds	r6, #1
 8006c24:	e7d9      	b.n	8006bda <_printf_common+0x8e>
	...

08006c28 <_printf_i>:
 8006c28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c2c:	7e0f      	ldrb	r7, [r1, #24]
 8006c2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c30:	2f78      	cmp	r7, #120	; 0x78
 8006c32:	4691      	mov	r9, r2
 8006c34:	4680      	mov	r8, r0
 8006c36:	460c      	mov	r4, r1
 8006c38:	469a      	mov	sl, r3
 8006c3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c3e:	d807      	bhi.n	8006c50 <_printf_i+0x28>
 8006c40:	2f62      	cmp	r7, #98	; 0x62
 8006c42:	d80a      	bhi.n	8006c5a <_printf_i+0x32>
 8006c44:	2f00      	cmp	r7, #0
 8006c46:	f000 80d8 	beq.w	8006dfa <_printf_i+0x1d2>
 8006c4a:	2f58      	cmp	r7, #88	; 0x58
 8006c4c:	f000 80a3 	beq.w	8006d96 <_printf_i+0x16e>
 8006c50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c58:	e03a      	b.n	8006cd0 <_printf_i+0xa8>
 8006c5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c5e:	2b15      	cmp	r3, #21
 8006c60:	d8f6      	bhi.n	8006c50 <_printf_i+0x28>
 8006c62:	a101      	add	r1, pc, #4	; (adr r1, 8006c68 <_printf_i+0x40>)
 8006c64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c68:	08006cc1 	.word	0x08006cc1
 8006c6c:	08006cd5 	.word	0x08006cd5
 8006c70:	08006c51 	.word	0x08006c51
 8006c74:	08006c51 	.word	0x08006c51
 8006c78:	08006c51 	.word	0x08006c51
 8006c7c:	08006c51 	.word	0x08006c51
 8006c80:	08006cd5 	.word	0x08006cd5
 8006c84:	08006c51 	.word	0x08006c51
 8006c88:	08006c51 	.word	0x08006c51
 8006c8c:	08006c51 	.word	0x08006c51
 8006c90:	08006c51 	.word	0x08006c51
 8006c94:	08006de1 	.word	0x08006de1
 8006c98:	08006d05 	.word	0x08006d05
 8006c9c:	08006dc3 	.word	0x08006dc3
 8006ca0:	08006c51 	.word	0x08006c51
 8006ca4:	08006c51 	.word	0x08006c51
 8006ca8:	08006e03 	.word	0x08006e03
 8006cac:	08006c51 	.word	0x08006c51
 8006cb0:	08006d05 	.word	0x08006d05
 8006cb4:	08006c51 	.word	0x08006c51
 8006cb8:	08006c51 	.word	0x08006c51
 8006cbc:	08006dcb 	.word	0x08006dcb
 8006cc0:	682b      	ldr	r3, [r5, #0]
 8006cc2:	1d1a      	adds	r2, r3, #4
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	602a      	str	r2, [r5, #0]
 8006cc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ccc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e0a3      	b.n	8006e1c <_printf_i+0x1f4>
 8006cd4:	6820      	ldr	r0, [r4, #0]
 8006cd6:	6829      	ldr	r1, [r5, #0]
 8006cd8:	0606      	lsls	r6, r0, #24
 8006cda:	f101 0304 	add.w	r3, r1, #4
 8006cde:	d50a      	bpl.n	8006cf6 <_printf_i+0xce>
 8006ce0:	680e      	ldr	r6, [r1, #0]
 8006ce2:	602b      	str	r3, [r5, #0]
 8006ce4:	2e00      	cmp	r6, #0
 8006ce6:	da03      	bge.n	8006cf0 <_printf_i+0xc8>
 8006ce8:	232d      	movs	r3, #45	; 0x2d
 8006cea:	4276      	negs	r6, r6
 8006cec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cf0:	485e      	ldr	r0, [pc, #376]	; (8006e6c <_printf_i+0x244>)
 8006cf2:	230a      	movs	r3, #10
 8006cf4:	e019      	b.n	8006d2a <_printf_i+0x102>
 8006cf6:	680e      	ldr	r6, [r1, #0]
 8006cf8:	602b      	str	r3, [r5, #0]
 8006cfa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006cfe:	bf18      	it	ne
 8006d00:	b236      	sxthne	r6, r6
 8006d02:	e7ef      	b.n	8006ce4 <_printf_i+0xbc>
 8006d04:	682b      	ldr	r3, [r5, #0]
 8006d06:	6820      	ldr	r0, [r4, #0]
 8006d08:	1d19      	adds	r1, r3, #4
 8006d0a:	6029      	str	r1, [r5, #0]
 8006d0c:	0601      	lsls	r1, r0, #24
 8006d0e:	d501      	bpl.n	8006d14 <_printf_i+0xec>
 8006d10:	681e      	ldr	r6, [r3, #0]
 8006d12:	e002      	b.n	8006d1a <_printf_i+0xf2>
 8006d14:	0646      	lsls	r6, r0, #25
 8006d16:	d5fb      	bpl.n	8006d10 <_printf_i+0xe8>
 8006d18:	881e      	ldrh	r6, [r3, #0]
 8006d1a:	4854      	ldr	r0, [pc, #336]	; (8006e6c <_printf_i+0x244>)
 8006d1c:	2f6f      	cmp	r7, #111	; 0x6f
 8006d1e:	bf0c      	ite	eq
 8006d20:	2308      	moveq	r3, #8
 8006d22:	230a      	movne	r3, #10
 8006d24:	2100      	movs	r1, #0
 8006d26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d2a:	6865      	ldr	r5, [r4, #4]
 8006d2c:	60a5      	str	r5, [r4, #8]
 8006d2e:	2d00      	cmp	r5, #0
 8006d30:	bfa2      	ittt	ge
 8006d32:	6821      	ldrge	r1, [r4, #0]
 8006d34:	f021 0104 	bicge.w	r1, r1, #4
 8006d38:	6021      	strge	r1, [r4, #0]
 8006d3a:	b90e      	cbnz	r6, 8006d40 <_printf_i+0x118>
 8006d3c:	2d00      	cmp	r5, #0
 8006d3e:	d04d      	beq.n	8006ddc <_printf_i+0x1b4>
 8006d40:	4615      	mov	r5, r2
 8006d42:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d46:	fb03 6711 	mls	r7, r3, r1, r6
 8006d4a:	5dc7      	ldrb	r7, [r0, r7]
 8006d4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d50:	4637      	mov	r7, r6
 8006d52:	42bb      	cmp	r3, r7
 8006d54:	460e      	mov	r6, r1
 8006d56:	d9f4      	bls.n	8006d42 <_printf_i+0x11a>
 8006d58:	2b08      	cmp	r3, #8
 8006d5a:	d10b      	bne.n	8006d74 <_printf_i+0x14c>
 8006d5c:	6823      	ldr	r3, [r4, #0]
 8006d5e:	07de      	lsls	r6, r3, #31
 8006d60:	d508      	bpl.n	8006d74 <_printf_i+0x14c>
 8006d62:	6923      	ldr	r3, [r4, #16]
 8006d64:	6861      	ldr	r1, [r4, #4]
 8006d66:	4299      	cmp	r1, r3
 8006d68:	bfde      	ittt	le
 8006d6a:	2330      	movle	r3, #48	; 0x30
 8006d6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d74:	1b52      	subs	r2, r2, r5
 8006d76:	6122      	str	r2, [r4, #16]
 8006d78:	f8cd a000 	str.w	sl, [sp]
 8006d7c:	464b      	mov	r3, r9
 8006d7e:	aa03      	add	r2, sp, #12
 8006d80:	4621      	mov	r1, r4
 8006d82:	4640      	mov	r0, r8
 8006d84:	f7ff fee2 	bl	8006b4c <_printf_common>
 8006d88:	3001      	adds	r0, #1
 8006d8a:	d14c      	bne.n	8006e26 <_printf_i+0x1fe>
 8006d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d90:	b004      	add	sp, #16
 8006d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d96:	4835      	ldr	r0, [pc, #212]	; (8006e6c <_printf_i+0x244>)
 8006d98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d9c:	6829      	ldr	r1, [r5, #0]
 8006d9e:	6823      	ldr	r3, [r4, #0]
 8006da0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006da4:	6029      	str	r1, [r5, #0]
 8006da6:	061d      	lsls	r5, r3, #24
 8006da8:	d514      	bpl.n	8006dd4 <_printf_i+0x1ac>
 8006daa:	07df      	lsls	r7, r3, #31
 8006dac:	bf44      	itt	mi
 8006dae:	f043 0320 	orrmi.w	r3, r3, #32
 8006db2:	6023      	strmi	r3, [r4, #0]
 8006db4:	b91e      	cbnz	r6, 8006dbe <_printf_i+0x196>
 8006db6:	6823      	ldr	r3, [r4, #0]
 8006db8:	f023 0320 	bic.w	r3, r3, #32
 8006dbc:	6023      	str	r3, [r4, #0]
 8006dbe:	2310      	movs	r3, #16
 8006dc0:	e7b0      	b.n	8006d24 <_printf_i+0xfc>
 8006dc2:	6823      	ldr	r3, [r4, #0]
 8006dc4:	f043 0320 	orr.w	r3, r3, #32
 8006dc8:	6023      	str	r3, [r4, #0]
 8006dca:	2378      	movs	r3, #120	; 0x78
 8006dcc:	4828      	ldr	r0, [pc, #160]	; (8006e70 <_printf_i+0x248>)
 8006dce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006dd2:	e7e3      	b.n	8006d9c <_printf_i+0x174>
 8006dd4:	0659      	lsls	r1, r3, #25
 8006dd6:	bf48      	it	mi
 8006dd8:	b2b6      	uxthmi	r6, r6
 8006dda:	e7e6      	b.n	8006daa <_printf_i+0x182>
 8006ddc:	4615      	mov	r5, r2
 8006dde:	e7bb      	b.n	8006d58 <_printf_i+0x130>
 8006de0:	682b      	ldr	r3, [r5, #0]
 8006de2:	6826      	ldr	r6, [r4, #0]
 8006de4:	6961      	ldr	r1, [r4, #20]
 8006de6:	1d18      	adds	r0, r3, #4
 8006de8:	6028      	str	r0, [r5, #0]
 8006dea:	0635      	lsls	r5, r6, #24
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	d501      	bpl.n	8006df4 <_printf_i+0x1cc>
 8006df0:	6019      	str	r1, [r3, #0]
 8006df2:	e002      	b.n	8006dfa <_printf_i+0x1d2>
 8006df4:	0670      	lsls	r0, r6, #25
 8006df6:	d5fb      	bpl.n	8006df0 <_printf_i+0x1c8>
 8006df8:	8019      	strh	r1, [r3, #0]
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	6123      	str	r3, [r4, #16]
 8006dfe:	4615      	mov	r5, r2
 8006e00:	e7ba      	b.n	8006d78 <_printf_i+0x150>
 8006e02:	682b      	ldr	r3, [r5, #0]
 8006e04:	1d1a      	adds	r2, r3, #4
 8006e06:	602a      	str	r2, [r5, #0]
 8006e08:	681d      	ldr	r5, [r3, #0]
 8006e0a:	6862      	ldr	r2, [r4, #4]
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	4628      	mov	r0, r5
 8006e10:	f7f9 f9ee 	bl	80001f0 <memchr>
 8006e14:	b108      	cbz	r0, 8006e1a <_printf_i+0x1f2>
 8006e16:	1b40      	subs	r0, r0, r5
 8006e18:	6060      	str	r0, [r4, #4]
 8006e1a:	6863      	ldr	r3, [r4, #4]
 8006e1c:	6123      	str	r3, [r4, #16]
 8006e1e:	2300      	movs	r3, #0
 8006e20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e24:	e7a8      	b.n	8006d78 <_printf_i+0x150>
 8006e26:	6923      	ldr	r3, [r4, #16]
 8006e28:	462a      	mov	r2, r5
 8006e2a:	4649      	mov	r1, r9
 8006e2c:	4640      	mov	r0, r8
 8006e2e:	47d0      	blx	sl
 8006e30:	3001      	adds	r0, #1
 8006e32:	d0ab      	beq.n	8006d8c <_printf_i+0x164>
 8006e34:	6823      	ldr	r3, [r4, #0]
 8006e36:	079b      	lsls	r3, r3, #30
 8006e38:	d413      	bmi.n	8006e62 <_printf_i+0x23a>
 8006e3a:	68e0      	ldr	r0, [r4, #12]
 8006e3c:	9b03      	ldr	r3, [sp, #12]
 8006e3e:	4298      	cmp	r0, r3
 8006e40:	bfb8      	it	lt
 8006e42:	4618      	movlt	r0, r3
 8006e44:	e7a4      	b.n	8006d90 <_printf_i+0x168>
 8006e46:	2301      	movs	r3, #1
 8006e48:	4632      	mov	r2, r6
 8006e4a:	4649      	mov	r1, r9
 8006e4c:	4640      	mov	r0, r8
 8006e4e:	47d0      	blx	sl
 8006e50:	3001      	adds	r0, #1
 8006e52:	d09b      	beq.n	8006d8c <_printf_i+0x164>
 8006e54:	3501      	adds	r5, #1
 8006e56:	68e3      	ldr	r3, [r4, #12]
 8006e58:	9903      	ldr	r1, [sp, #12]
 8006e5a:	1a5b      	subs	r3, r3, r1
 8006e5c:	42ab      	cmp	r3, r5
 8006e5e:	dcf2      	bgt.n	8006e46 <_printf_i+0x21e>
 8006e60:	e7eb      	b.n	8006e3a <_printf_i+0x212>
 8006e62:	2500      	movs	r5, #0
 8006e64:	f104 0619 	add.w	r6, r4, #25
 8006e68:	e7f5      	b.n	8006e56 <_printf_i+0x22e>
 8006e6a:	bf00      	nop
 8006e6c:	080095c6 	.word	0x080095c6
 8006e70:	080095d7 	.word	0x080095d7

08006e74 <_sbrk_r>:
 8006e74:	b538      	push	{r3, r4, r5, lr}
 8006e76:	4d06      	ldr	r5, [pc, #24]	; (8006e90 <_sbrk_r+0x1c>)
 8006e78:	2300      	movs	r3, #0
 8006e7a:	4604      	mov	r4, r0
 8006e7c:	4608      	mov	r0, r1
 8006e7e:	602b      	str	r3, [r5, #0]
 8006e80:	f7fb f8b8 	bl	8001ff4 <_sbrk>
 8006e84:	1c43      	adds	r3, r0, #1
 8006e86:	d102      	bne.n	8006e8e <_sbrk_r+0x1a>
 8006e88:	682b      	ldr	r3, [r5, #0]
 8006e8a:	b103      	cbz	r3, 8006e8e <_sbrk_r+0x1a>
 8006e8c:	6023      	str	r3, [r4, #0]
 8006e8e:	bd38      	pop	{r3, r4, r5, pc}
 8006e90:	20000868 	.word	0x20000868

08006e94 <_raise_r>:
 8006e94:	291f      	cmp	r1, #31
 8006e96:	b538      	push	{r3, r4, r5, lr}
 8006e98:	4604      	mov	r4, r0
 8006e9a:	460d      	mov	r5, r1
 8006e9c:	d904      	bls.n	8006ea8 <_raise_r+0x14>
 8006e9e:	2316      	movs	r3, #22
 8006ea0:	6003      	str	r3, [r0, #0]
 8006ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea6:	bd38      	pop	{r3, r4, r5, pc}
 8006ea8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006eaa:	b112      	cbz	r2, 8006eb2 <_raise_r+0x1e>
 8006eac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006eb0:	b94b      	cbnz	r3, 8006ec6 <_raise_r+0x32>
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	f000 f830 	bl	8006f18 <_getpid_r>
 8006eb8:	462a      	mov	r2, r5
 8006eba:	4601      	mov	r1, r0
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ec2:	f000 b817 	b.w	8006ef4 <_kill_r>
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d00a      	beq.n	8006ee0 <_raise_r+0x4c>
 8006eca:	1c59      	adds	r1, r3, #1
 8006ecc:	d103      	bne.n	8006ed6 <_raise_r+0x42>
 8006ece:	2316      	movs	r3, #22
 8006ed0:	6003      	str	r3, [r0, #0]
 8006ed2:	2001      	movs	r0, #1
 8006ed4:	e7e7      	b.n	8006ea6 <_raise_r+0x12>
 8006ed6:	2400      	movs	r4, #0
 8006ed8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006edc:	4628      	mov	r0, r5
 8006ede:	4798      	blx	r3
 8006ee0:	2000      	movs	r0, #0
 8006ee2:	e7e0      	b.n	8006ea6 <_raise_r+0x12>

08006ee4 <raise>:
 8006ee4:	4b02      	ldr	r3, [pc, #8]	; (8006ef0 <raise+0xc>)
 8006ee6:	4601      	mov	r1, r0
 8006ee8:	6818      	ldr	r0, [r3, #0]
 8006eea:	f7ff bfd3 	b.w	8006e94 <_raise_r>
 8006eee:	bf00      	nop
 8006ef0:	2000043c 	.word	0x2000043c

08006ef4 <_kill_r>:
 8006ef4:	b538      	push	{r3, r4, r5, lr}
 8006ef6:	4d07      	ldr	r5, [pc, #28]	; (8006f14 <_kill_r+0x20>)
 8006ef8:	2300      	movs	r3, #0
 8006efa:	4604      	mov	r4, r0
 8006efc:	4608      	mov	r0, r1
 8006efe:	4611      	mov	r1, r2
 8006f00:	602b      	str	r3, [r5, #0]
 8006f02:	f002 f951 	bl	80091a8 <_kill>
 8006f06:	1c43      	adds	r3, r0, #1
 8006f08:	d102      	bne.n	8006f10 <_kill_r+0x1c>
 8006f0a:	682b      	ldr	r3, [r5, #0]
 8006f0c:	b103      	cbz	r3, 8006f10 <_kill_r+0x1c>
 8006f0e:	6023      	str	r3, [r4, #0]
 8006f10:	bd38      	pop	{r3, r4, r5, pc}
 8006f12:	bf00      	nop
 8006f14:	20000868 	.word	0x20000868

08006f18 <_getpid_r>:
 8006f18:	f002 b936 	b.w	8009188 <_getpid>

08006f1c <siprintf>:
 8006f1c:	b40e      	push	{r1, r2, r3}
 8006f1e:	b500      	push	{lr}
 8006f20:	b09c      	sub	sp, #112	; 0x70
 8006f22:	ab1d      	add	r3, sp, #116	; 0x74
 8006f24:	9002      	str	r0, [sp, #8]
 8006f26:	9006      	str	r0, [sp, #24]
 8006f28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f2c:	4809      	ldr	r0, [pc, #36]	; (8006f54 <siprintf+0x38>)
 8006f2e:	9107      	str	r1, [sp, #28]
 8006f30:	9104      	str	r1, [sp, #16]
 8006f32:	4909      	ldr	r1, [pc, #36]	; (8006f58 <siprintf+0x3c>)
 8006f34:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f38:	9105      	str	r1, [sp, #20]
 8006f3a:	6800      	ldr	r0, [r0, #0]
 8006f3c:	9301      	str	r3, [sp, #4]
 8006f3e:	a902      	add	r1, sp, #8
 8006f40:	f001 fabc 	bl	80084bc <_svfiprintf_r>
 8006f44:	9b02      	ldr	r3, [sp, #8]
 8006f46:	2200      	movs	r2, #0
 8006f48:	701a      	strb	r2, [r3, #0]
 8006f4a:	b01c      	add	sp, #112	; 0x70
 8006f4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f50:	b003      	add	sp, #12
 8006f52:	4770      	bx	lr
 8006f54:	2000043c 	.word	0x2000043c
 8006f58:	ffff0208 	.word	0xffff0208

08006f5c <quorem>:
 8006f5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f60:	6903      	ldr	r3, [r0, #16]
 8006f62:	690c      	ldr	r4, [r1, #16]
 8006f64:	42a3      	cmp	r3, r4
 8006f66:	4607      	mov	r7, r0
 8006f68:	f2c0 8081 	blt.w	800706e <quorem+0x112>
 8006f6c:	3c01      	subs	r4, #1
 8006f6e:	f101 0814 	add.w	r8, r1, #20
 8006f72:	f100 0514 	add.w	r5, r0, #20
 8006f76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f7a:	9301      	str	r3, [sp, #4]
 8006f7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f84:	3301      	adds	r3, #1
 8006f86:	429a      	cmp	r2, r3
 8006f88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006f8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f90:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f94:	d331      	bcc.n	8006ffa <quorem+0x9e>
 8006f96:	f04f 0e00 	mov.w	lr, #0
 8006f9a:	4640      	mov	r0, r8
 8006f9c:	46ac      	mov	ip, r5
 8006f9e:	46f2      	mov	sl, lr
 8006fa0:	f850 2b04 	ldr.w	r2, [r0], #4
 8006fa4:	b293      	uxth	r3, r2
 8006fa6:	fb06 e303 	mla	r3, r6, r3, lr
 8006faa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	ebaa 0303 	sub.w	r3, sl, r3
 8006fb4:	f8dc a000 	ldr.w	sl, [ip]
 8006fb8:	0c12      	lsrs	r2, r2, #16
 8006fba:	fa13 f38a 	uxtah	r3, r3, sl
 8006fbe:	fb06 e202 	mla	r2, r6, r2, lr
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	9b00      	ldr	r3, [sp, #0]
 8006fc6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006fca:	b292      	uxth	r2, r2
 8006fcc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006fd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fd4:	f8bd 3000 	ldrh.w	r3, [sp]
 8006fd8:	4581      	cmp	r9, r0
 8006fda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fde:	f84c 3b04 	str.w	r3, [ip], #4
 8006fe2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006fe6:	d2db      	bcs.n	8006fa0 <quorem+0x44>
 8006fe8:	f855 300b 	ldr.w	r3, [r5, fp]
 8006fec:	b92b      	cbnz	r3, 8006ffa <quorem+0x9e>
 8006fee:	9b01      	ldr	r3, [sp, #4]
 8006ff0:	3b04      	subs	r3, #4
 8006ff2:	429d      	cmp	r5, r3
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	d32e      	bcc.n	8007056 <quorem+0xfa>
 8006ff8:	613c      	str	r4, [r7, #16]
 8006ffa:	4638      	mov	r0, r7
 8006ffc:	f001 f8bc 	bl	8008178 <__mcmp>
 8007000:	2800      	cmp	r0, #0
 8007002:	db24      	blt.n	800704e <quorem+0xf2>
 8007004:	3601      	adds	r6, #1
 8007006:	4628      	mov	r0, r5
 8007008:	f04f 0c00 	mov.w	ip, #0
 800700c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007010:	f8d0 e000 	ldr.w	lr, [r0]
 8007014:	b293      	uxth	r3, r2
 8007016:	ebac 0303 	sub.w	r3, ip, r3
 800701a:	0c12      	lsrs	r2, r2, #16
 800701c:	fa13 f38e 	uxtah	r3, r3, lr
 8007020:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007024:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007028:	b29b      	uxth	r3, r3
 800702a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800702e:	45c1      	cmp	r9, r8
 8007030:	f840 3b04 	str.w	r3, [r0], #4
 8007034:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007038:	d2e8      	bcs.n	800700c <quorem+0xb0>
 800703a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800703e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007042:	b922      	cbnz	r2, 800704e <quorem+0xf2>
 8007044:	3b04      	subs	r3, #4
 8007046:	429d      	cmp	r5, r3
 8007048:	461a      	mov	r2, r3
 800704a:	d30a      	bcc.n	8007062 <quorem+0x106>
 800704c:	613c      	str	r4, [r7, #16]
 800704e:	4630      	mov	r0, r6
 8007050:	b003      	add	sp, #12
 8007052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007056:	6812      	ldr	r2, [r2, #0]
 8007058:	3b04      	subs	r3, #4
 800705a:	2a00      	cmp	r2, #0
 800705c:	d1cc      	bne.n	8006ff8 <quorem+0x9c>
 800705e:	3c01      	subs	r4, #1
 8007060:	e7c7      	b.n	8006ff2 <quorem+0x96>
 8007062:	6812      	ldr	r2, [r2, #0]
 8007064:	3b04      	subs	r3, #4
 8007066:	2a00      	cmp	r2, #0
 8007068:	d1f0      	bne.n	800704c <quorem+0xf0>
 800706a:	3c01      	subs	r4, #1
 800706c:	e7eb      	b.n	8007046 <quorem+0xea>
 800706e:	2000      	movs	r0, #0
 8007070:	e7ee      	b.n	8007050 <quorem+0xf4>
 8007072:	0000      	movs	r0, r0
 8007074:	0000      	movs	r0, r0
	...

08007078 <_dtoa_r>:
 8007078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800707c:	ed2d 8b04 	vpush	{d8-d9}
 8007080:	ec57 6b10 	vmov	r6, r7, d0
 8007084:	b093      	sub	sp, #76	; 0x4c
 8007086:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007088:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800708c:	9106      	str	r1, [sp, #24]
 800708e:	ee10 aa10 	vmov	sl, s0
 8007092:	4604      	mov	r4, r0
 8007094:	9209      	str	r2, [sp, #36]	; 0x24
 8007096:	930c      	str	r3, [sp, #48]	; 0x30
 8007098:	46bb      	mov	fp, r7
 800709a:	b975      	cbnz	r5, 80070ba <_dtoa_r+0x42>
 800709c:	2010      	movs	r0, #16
 800709e:	f7ff f979 	bl	8006394 <malloc>
 80070a2:	4602      	mov	r2, r0
 80070a4:	6260      	str	r0, [r4, #36]	; 0x24
 80070a6:	b920      	cbnz	r0, 80070b2 <_dtoa_r+0x3a>
 80070a8:	4ba7      	ldr	r3, [pc, #668]	; (8007348 <_dtoa_r+0x2d0>)
 80070aa:	21ea      	movs	r1, #234	; 0xea
 80070ac:	48a7      	ldr	r0, [pc, #668]	; (800734c <_dtoa_r+0x2d4>)
 80070ae:	f001 fb05 	bl	80086bc <__assert_func>
 80070b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80070b6:	6005      	str	r5, [r0, #0]
 80070b8:	60c5      	str	r5, [r0, #12]
 80070ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070bc:	6819      	ldr	r1, [r3, #0]
 80070be:	b151      	cbz	r1, 80070d6 <_dtoa_r+0x5e>
 80070c0:	685a      	ldr	r2, [r3, #4]
 80070c2:	604a      	str	r2, [r1, #4]
 80070c4:	2301      	movs	r3, #1
 80070c6:	4093      	lsls	r3, r2
 80070c8:	608b      	str	r3, [r1, #8]
 80070ca:	4620      	mov	r0, r4
 80070cc:	f000 fe12 	bl	8007cf4 <_Bfree>
 80070d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070d2:	2200      	movs	r2, #0
 80070d4:	601a      	str	r2, [r3, #0]
 80070d6:	1e3b      	subs	r3, r7, #0
 80070d8:	bfaa      	itet	ge
 80070da:	2300      	movge	r3, #0
 80070dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80070e0:	f8c8 3000 	strge.w	r3, [r8]
 80070e4:	4b9a      	ldr	r3, [pc, #616]	; (8007350 <_dtoa_r+0x2d8>)
 80070e6:	bfbc      	itt	lt
 80070e8:	2201      	movlt	r2, #1
 80070ea:	f8c8 2000 	strlt.w	r2, [r8]
 80070ee:	ea33 030b 	bics.w	r3, r3, fp
 80070f2:	d11b      	bne.n	800712c <_dtoa_r+0xb4>
 80070f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80070fa:	6013      	str	r3, [r2, #0]
 80070fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007100:	4333      	orrs	r3, r6
 8007102:	f000 8592 	beq.w	8007c2a <_dtoa_r+0xbb2>
 8007106:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007108:	b963      	cbnz	r3, 8007124 <_dtoa_r+0xac>
 800710a:	4b92      	ldr	r3, [pc, #584]	; (8007354 <_dtoa_r+0x2dc>)
 800710c:	e022      	b.n	8007154 <_dtoa_r+0xdc>
 800710e:	4b92      	ldr	r3, [pc, #584]	; (8007358 <_dtoa_r+0x2e0>)
 8007110:	9301      	str	r3, [sp, #4]
 8007112:	3308      	adds	r3, #8
 8007114:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007116:	6013      	str	r3, [r2, #0]
 8007118:	9801      	ldr	r0, [sp, #4]
 800711a:	b013      	add	sp, #76	; 0x4c
 800711c:	ecbd 8b04 	vpop	{d8-d9}
 8007120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007124:	4b8b      	ldr	r3, [pc, #556]	; (8007354 <_dtoa_r+0x2dc>)
 8007126:	9301      	str	r3, [sp, #4]
 8007128:	3303      	adds	r3, #3
 800712a:	e7f3      	b.n	8007114 <_dtoa_r+0x9c>
 800712c:	2200      	movs	r2, #0
 800712e:	2300      	movs	r3, #0
 8007130:	4650      	mov	r0, sl
 8007132:	4659      	mov	r1, fp
 8007134:	f7f9 fcd0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007138:	ec4b ab19 	vmov	d9, sl, fp
 800713c:	4680      	mov	r8, r0
 800713e:	b158      	cbz	r0, 8007158 <_dtoa_r+0xe0>
 8007140:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007142:	2301      	movs	r3, #1
 8007144:	6013      	str	r3, [r2, #0]
 8007146:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007148:	2b00      	cmp	r3, #0
 800714a:	f000 856b 	beq.w	8007c24 <_dtoa_r+0xbac>
 800714e:	4883      	ldr	r0, [pc, #524]	; (800735c <_dtoa_r+0x2e4>)
 8007150:	6018      	str	r0, [r3, #0]
 8007152:	1e43      	subs	r3, r0, #1
 8007154:	9301      	str	r3, [sp, #4]
 8007156:	e7df      	b.n	8007118 <_dtoa_r+0xa0>
 8007158:	ec4b ab10 	vmov	d0, sl, fp
 800715c:	aa10      	add	r2, sp, #64	; 0x40
 800715e:	a911      	add	r1, sp, #68	; 0x44
 8007160:	4620      	mov	r0, r4
 8007162:	f001 f8af 	bl	80082c4 <__d2b>
 8007166:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800716a:	ee08 0a10 	vmov	s16, r0
 800716e:	2d00      	cmp	r5, #0
 8007170:	f000 8084 	beq.w	800727c <_dtoa_r+0x204>
 8007174:	ee19 3a90 	vmov	r3, s19
 8007178:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800717c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007180:	4656      	mov	r6, sl
 8007182:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007186:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800718a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800718e:	4b74      	ldr	r3, [pc, #464]	; (8007360 <_dtoa_r+0x2e8>)
 8007190:	2200      	movs	r2, #0
 8007192:	4630      	mov	r0, r6
 8007194:	4639      	mov	r1, r7
 8007196:	f7f9 f87f 	bl	8000298 <__aeabi_dsub>
 800719a:	a365      	add	r3, pc, #404	; (adr r3, 8007330 <_dtoa_r+0x2b8>)
 800719c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a0:	f7f9 fa32 	bl	8000608 <__aeabi_dmul>
 80071a4:	a364      	add	r3, pc, #400	; (adr r3, 8007338 <_dtoa_r+0x2c0>)
 80071a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071aa:	f7f9 f877 	bl	800029c <__adddf3>
 80071ae:	4606      	mov	r6, r0
 80071b0:	4628      	mov	r0, r5
 80071b2:	460f      	mov	r7, r1
 80071b4:	f7f9 f9be 	bl	8000534 <__aeabi_i2d>
 80071b8:	a361      	add	r3, pc, #388	; (adr r3, 8007340 <_dtoa_r+0x2c8>)
 80071ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071be:	f7f9 fa23 	bl	8000608 <__aeabi_dmul>
 80071c2:	4602      	mov	r2, r0
 80071c4:	460b      	mov	r3, r1
 80071c6:	4630      	mov	r0, r6
 80071c8:	4639      	mov	r1, r7
 80071ca:	f7f9 f867 	bl	800029c <__adddf3>
 80071ce:	4606      	mov	r6, r0
 80071d0:	460f      	mov	r7, r1
 80071d2:	f7f9 fcc9 	bl	8000b68 <__aeabi_d2iz>
 80071d6:	2200      	movs	r2, #0
 80071d8:	9000      	str	r0, [sp, #0]
 80071da:	2300      	movs	r3, #0
 80071dc:	4630      	mov	r0, r6
 80071de:	4639      	mov	r1, r7
 80071e0:	f7f9 fc84 	bl	8000aec <__aeabi_dcmplt>
 80071e4:	b150      	cbz	r0, 80071fc <_dtoa_r+0x184>
 80071e6:	9800      	ldr	r0, [sp, #0]
 80071e8:	f7f9 f9a4 	bl	8000534 <__aeabi_i2d>
 80071ec:	4632      	mov	r2, r6
 80071ee:	463b      	mov	r3, r7
 80071f0:	f7f9 fc72 	bl	8000ad8 <__aeabi_dcmpeq>
 80071f4:	b910      	cbnz	r0, 80071fc <_dtoa_r+0x184>
 80071f6:	9b00      	ldr	r3, [sp, #0]
 80071f8:	3b01      	subs	r3, #1
 80071fa:	9300      	str	r3, [sp, #0]
 80071fc:	9b00      	ldr	r3, [sp, #0]
 80071fe:	2b16      	cmp	r3, #22
 8007200:	d85a      	bhi.n	80072b8 <_dtoa_r+0x240>
 8007202:	9a00      	ldr	r2, [sp, #0]
 8007204:	4b57      	ldr	r3, [pc, #348]	; (8007364 <_dtoa_r+0x2ec>)
 8007206:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800720a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720e:	ec51 0b19 	vmov	r0, r1, d9
 8007212:	f7f9 fc6b 	bl	8000aec <__aeabi_dcmplt>
 8007216:	2800      	cmp	r0, #0
 8007218:	d050      	beq.n	80072bc <_dtoa_r+0x244>
 800721a:	9b00      	ldr	r3, [sp, #0]
 800721c:	3b01      	subs	r3, #1
 800721e:	9300      	str	r3, [sp, #0]
 8007220:	2300      	movs	r3, #0
 8007222:	930b      	str	r3, [sp, #44]	; 0x2c
 8007224:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007226:	1b5d      	subs	r5, r3, r5
 8007228:	1e6b      	subs	r3, r5, #1
 800722a:	9305      	str	r3, [sp, #20]
 800722c:	bf45      	ittet	mi
 800722e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007232:	9304      	strmi	r3, [sp, #16]
 8007234:	2300      	movpl	r3, #0
 8007236:	2300      	movmi	r3, #0
 8007238:	bf4c      	ite	mi
 800723a:	9305      	strmi	r3, [sp, #20]
 800723c:	9304      	strpl	r3, [sp, #16]
 800723e:	9b00      	ldr	r3, [sp, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	db3d      	blt.n	80072c0 <_dtoa_r+0x248>
 8007244:	9b05      	ldr	r3, [sp, #20]
 8007246:	9a00      	ldr	r2, [sp, #0]
 8007248:	920a      	str	r2, [sp, #40]	; 0x28
 800724a:	4413      	add	r3, r2
 800724c:	9305      	str	r3, [sp, #20]
 800724e:	2300      	movs	r3, #0
 8007250:	9307      	str	r3, [sp, #28]
 8007252:	9b06      	ldr	r3, [sp, #24]
 8007254:	2b09      	cmp	r3, #9
 8007256:	f200 8089 	bhi.w	800736c <_dtoa_r+0x2f4>
 800725a:	2b05      	cmp	r3, #5
 800725c:	bfc4      	itt	gt
 800725e:	3b04      	subgt	r3, #4
 8007260:	9306      	strgt	r3, [sp, #24]
 8007262:	9b06      	ldr	r3, [sp, #24]
 8007264:	f1a3 0302 	sub.w	r3, r3, #2
 8007268:	bfcc      	ite	gt
 800726a:	2500      	movgt	r5, #0
 800726c:	2501      	movle	r5, #1
 800726e:	2b03      	cmp	r3, #3
 8007270:	f200 8087 	bhi.w	8007382 <_dtoa_r+0x30a>
 8007274:	e8df f003 	tbb	[pc, r3]
 8007278:	59383a2d 	.word	0x59383a2d
 800727c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007280:	441d      	add	r5, r3
 8007282:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007286:	2b20      	cmp	r3, #32
 8007288:	bfc1      	itttt	gt
 800728a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800728e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007292:	fa0b f303 	lslgt.w	r3, fp, r3
 8007296:	fa26 f000 	lsrgt.w	r0, r6, r0
 800729a:	bfda      	itte	le
 800729c:	f1c3 0320 	rsble	r3, r3, #32
 80072a0:	fa06 f003 	lslle.w	r0, r6, r3
 80072a4:	4318      	orrgt	r0, r3
 80072a6:	f7f9 f935 	bl	8000514 <__aeabi_ui2d>
 80072aa:	2301      	movs	r3, #1
 80072ac:	4606      	mov	r6, r0
 80072ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80072b2:	3d01      	subs	r5, #1
 80072b4:	930e      	str	r3, [sp, #56]	; 0x38
 80072b6:	e76a      	b.n	800718e <_dtoa_r+0x116>
 80072b8:	2301      	movs	r3, #1
 80072ba:	e7b2      	b.n	8007222 <_dtoa_r+0x1aa>
 80072bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80072be:	e7b1      	b.n	8007224 <_dtoa_r+0x1ac>
 80072c0:	9b04      	ldr	r3, [sp, #16]
 80072c2:	9a00      	ldr	r2, [sp, #0]
 80072c4:	1a9b      	subs	r3, r3, r2
 80072c6:	9304      	str	r3, [sp, #16]
 80072c8:	4253      	negs	r3, r2
 80072ca:	9307      	str	r3, [sp, #28]
 80072cc:	2300      	movs	r3, #0
 80072ce:	930a      	str	r3, [sp, #40]	; 0x28
 80072d0:	e7bf      	b.n	8007252 <_dtoa_r+0x1da>
 80072d2:	2300      	movs	r3, #0
 80072d4:	9308      	str	r3, [sp, #32]
 80072d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072d8:	2b00      	cmp	r3, #0
 80072da:	dc55      	bgt.n	8007388 <_dtoa_r+0x310>
 80072dc:	2301      	movs	r3, #1
 80072de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80072e2:	461a      	mov	r2, r3
 80072e4:	9209      	str	r2, [sp, #36]	; 0x24
 80072e6:	e00c      	b.n	8007302 <_dtoa_r+0x28a>
 80072e8:	2301      	movs	r3, #1
 80072ea:	e7f3      	b.n	80072d4 <_dtoa_r+0x25c>
 80072ec:	2300      	movs	r3, #0
 80072ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072f0:	9308      	str	r3, [sp, #32]
 80072f2:	9b00      	ldr	r3, [sp, #0]
 80072f4:	4413      	add	r3, r2
 80072f6:	9302      	str	r3, [sp, #8]
 80072f8:	3301      	adds	r3, #1
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	9303      	str	r3, [sp, #12]
 80072fe:	bfb8      	it	lt
 8007300:	2301      	movlt	r3, #1
 8007302:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007304:	2200      	movs	r2, #0
 8007306:	6042      	str	r2, [r0, #4]
 8007308:	2204      	movs	r2, #4
 800730a:	f102 0614 	add.w	r6, r2, #20
 800730e:	429e      	cmp	r6, r3
 8007310:	6841      	ldr	r1, [r0, #4]
 8007312:	d93d      	bls.n	8007390 <_dtoa_r+0x318>
 8007314:	4620      	mov	r0, r4
 8007316:	f000 fcad 	bl	8007c74 <_Balloc>
 800731a:	9001      	str	r0, [sp, #4]
 800731c:	2800      	cmp	r0, #0
 800731e:	d13b      	bne.n	8007398 <_dtoa_r+0x320>
 8007320:	4b11      	ldr	r3, [pc, #68]	; (8007368 <_dtoa_r+0x2f0>)
 8007322:	4602      	mov	r2, r0
 8007324:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007328:	e6c0      	b.n	80070ac <_dtoa_r+0x34>
 800732a:	2301      	movs	r3, #1
 800732c:	e7df      	b.n	80072ee <_dtoa_r+0x276>
 800732e:	bf00      	nop
 8007330:	636f4361 	.word	0x636f4361
 8007334:	3fd287a7 	.word	0x3fd287a7
 8007338:	8b60c8b3 	.word	0x8b60c8b3
 800733c:	3fc68a28 	.word	0x3fc68a28
 8007340:	509f79fb 	.word	0x509f79fb
 8007344:	3fd34413 	.word	0x3fd34413
 8007348:	080095f5 	.word	0x080095f5
 800734c:	0800960c 	.word	0x0800960c
 8007350:	7ff00000 	.word	0x7ff00000
 8007354:	080095f1 	.word	0x080095f1
 8007358:	080095e8 	.word	0x080095e8
 800735c:	080095c5 	.word	0x080095c5
 8007360:	3ff80000 	.word	0x3ff80000
 8007364:	08009700 	.word	0x08009700
 8007368:	08009667 	.word	0x08009667
 800736c:	2501      	movs	r5, #1
 800736e:	2300      	movs	r3, #0
 8007370:	9306      	str	r3, [sp, #24]
 8007372:	9508      	str	r5, [sp, #32]
 8007374:	f04f 33ff 	mov.w	r3, #4294967295
 8007378:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800737c:	2200      	movs	r2, #0
 800737e:	2312      	movs	r3, #18
 8007380:	e7b0      	b.n	80072e4 <_dtoa_r+0x26c>
 8007382:	2301      	movs	r3, #1
 8007384:	9308      	str	r3, [sp, #32]
 8007386:	e7f5      	b.n	8007374 <_dtoa_r+0x2fc>
 8007388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800738a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800738e:	e7b8      	b.n	8007302 <_dtoa_r+0x28a>
 8007390:	3101      	adds	r1, #1
 8007392:	6041      	str	r1, [r0, #4]
 8007394:	0052      	lsls	r2, r2, #1
 8007396:	e7b8      	b.n	800730a <_dtoa_r+0x292>
 8007398:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800739a:	9a01      	ldr	r2, [sp, #4]
 800739c:	601a      	str	r2, [r3, #0]
 800739e:	9b03      	ldr	r3, [sp, #12]
 80073a0:	2b0e      	cmp	r3, #14
 80073a2:	f200 809d 	bhi.w	80074e0 <_dtoa_r+0x468>
 80073a6:	2d00      	cmp	r5, #0
 80073a8:	f000 809a 	beq.w	80074e0 <_dtoa_r+0x468>
 80073ac:	9b00      	ldr	r3, [sp, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	dd32      	ble.n	8007418 <_dtoa_r+0x3a0>
 80073b2:	4ab7      	ldr	r2, [pc, #732]	; (8007690 <_dtoa_r+0x618>)
 80073b4:	f003 030f 	and.w	r3, r3, #15
 80073b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80073bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80073c0:	9b00      	ldr	r3, [sp, #0]
 80073c2:	05d8      	lsls	r0, r3, #23
 80073c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80073c8:	d516      	bpl.n	80073f8 <_dtoa_r+0x380>
 80073ca:	4bb2      	ldr	r3, [pc, #712]	; (8007694 <_dtoa_r+0x61c>)
 80073cc:	ec51 0b19 	vmov	r0, r1, d9
 80073d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80073d4:	f7f9 fa42 	bl	800085c <__aeabi_ddiv>
 80073d8:	f007 070f 	and.w	r7, r7, #15
 80073dc:	4682      	mov	sl, r0
 80073de:	468b      	mov	fp, r1
 80073e0:	2503      	movs	r5, #3
 80073e2:	4eac      	ldr	r6, [pc, #688]	; (8007694 <_dtoa_r+0x61c>)
 80073e4:	b957      	cbnz	r7, 80073fc <_dtoa_r+0x384>
 80073e6:	4642      	mov	r2, r8
 80073e8:	464b      	mov	r3, r9
 80073ea:	4650      	mov	r0, sl
 80073ec:	4659      	mov	r1, fp
 80073ee:	f7f9 fa35 	bl	800085c <__aeabi_ddiv>
 80073f2:	4682      	mov	sl, r0
 80073f4:	468b      	mov	fp, r1
 80073f6:	e028      	b.n	800744a <_dtoa_r+0x3d2>
 80073f8:	2502      	movs	r5, #2
 80073fa:	e7f2      	b.n	80073e2 <_dtoa_r+0x36a>
 80073fc:	07f9      	lsls	r1, r7, #31
 80073fe:	d508      	bpl.n	8007412 <_dtoa_r+0x39a>
 8007400:	4640      	mov	r0, r8
 8007402:	4649      	mov	r1, r9
 8007404:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007408:	f7f9 f8fe 	bl	8000608 <__aeabi_dmul>
 800740c:	3501      	adds	r5, #1
 800740e:	4680      	mov	r8, r0
 8007410:	4689      	mov	r9, r1
 8007412:	107f      	asrs	r7, r7, #1
 8007414:	3608      	adds	r6, #8
 8007416:	e7e5      	b.n	80073e4 <_dtoa_r+0x36c>
 8007418:	f000 809b 	beq.w	8007552 <_dtoa_r+0x4da>
 800741c:	9b00      	ldr	r3, [sp, #0]
 800741e:	4f9d      	ldr	r7, [pc, #628]	; (8007694 <_dtoa_r+0x61c>)
 8007420:	425e      	negs	r6, r3
 8007422:	4b9b      	ldr	r3, [pc, #620]	; (8007690 <_dtoa_r+0x618>)
 8007424:	f006 020f 	and.w	r2, r6, #15
 8007428:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800742c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007430:	ec51 0b19 	vmov	r0, r1, d9
 8007434:	f7f9 f8e8 	bl	8000608 <__aeabi_dmul>
 8007438:	1136      	asrs	r6, r6, #4
 800743a:	4682      	mov	sl, r0
 800743c:	468b      	mov	fp, r1
 800743e:	2300      	movs	r3, #0
 8007440:	2502      	movs	r5, #2
 8007442:	2e00      	cmp	r6, #0
 8007444:	d17a      	bne.n	800753c <_dtoa_r+0x4c4>
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1d3      	bne.n	80073f2 <_dtoa_r+0x37a>
 800744a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800744c:	2b00      	cmp	r3, #0
 800744e:	f000 8082 	beq.w	8007556 <_dtoa_r+0x4de>
 8007452:	4b91      	ldr	r3, [pc, #580]	; (8007698 <_dtoa_r+0x620>)
 8007454:	2200      	movs	r2, #0
 8007456:	4650      	mov	r0, sl
 8007458:	4659      	mov	r1, fp
 800745a:	f7f9 fb47 	bl	8000aec <__aeabi_dcmplt>
 800745e:	2800      	cmp	r0, #0
 8007460:	d079      	beq.n	8007556 <_dtoa_r+0x4de>
 8007462:	9b03      	ldr	r3, [sp, #12]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d076      	beq.n	8007556 <_dtoa_r+0x4de>
 8007468:	9b02      	ldr	r3, [sp, #8]
 800746a:	2b00      	cmp	r3, #0
 800746c:	dd36      	ble.n	80074dc <_dtoa_r+0x464>
 800746e:	9b00      	ldr	r3, [sp, #0]
 8007470:	4650      	mov	r0, sl
 8007472:	4659      	mov	r1, fp
 8007474:	1e5f      	subs	r7, r3, #1
 8007476:	2200      	movs	r2, #0
 8007478:	4b88      	ldr	r3, [pc, #544]	; (800769c <_dtoa_r+0x624>)
 800747a:	f7f9 f8c5 	bl	8000608 <__aeabi_dmul>
 800747e:	9e02      	ldr	r6, [sp, #8]
 8007480:	4682      	mov	sl, r0
 8007482:	468b      	mov	fp, r1
 8007484:	3501      	adds	r5, #1
 8007486:	4628      	mov	r0, r5
 8007488:	f7f9 f854 	bl	8000534 <__aeabi_i2d>
 800748c:	4652      	mov	r2, sl
 800748e:	465b      	mov	r3, fp
 8007490:	f7f9 f8ba 	bl	8000608 <__aeabi_dmul>
 8007494:	4b82      	ldr	r3, [pc, #520]	; (80076a0 <_dtoa_r+0x628>)
 8007496:	2200      	movs	r2, #0
 8007498:	f7f8 ff00 	bl	800029c <__adddf3>
 800749c:	46d0      	mov	r8, sl
 800749e:	46d9      	mov	r9, fp
 80074a0:	4682      	mov	sl, r0
 80074a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80074a6:	2e00      	cmp	r6, #0
 80074a8:	d158      	bne.n	800755c <_dtoa_r+0x4e4>
 80074aa:	4b7e      	ldr	r3, [pc, #504]	; (80076a4 <_dtoa_r+0x62c>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	4640      	mov	r0, r8
 80074b0:	4649      	mov	r1, r9
 80074b2:	f7f8 fef1 	bl	8000298 <__aeabi_dsub>
 80074b6:	4652      	mov	r2, sl
 80074b8:	465b      	mov	r3, fp
 80074ba:	4680      	mov	r8, r0
 80074bc:	4689      	mov	r9, r1
 80074be:	f7f9 fb33 	bl	8000b28 <__aeabi_dcmpgt>
 80074c2:	2800      	cmp	r0, #0
 80074c4:	f040 8295 	bne.w	80079f2 <_dtoa_r+0x97a>
 80074c8:	4652      	mov	r2, sl
 80074ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80074ce:	4640      	mov	r0, r8
 80074d0:	4649      	mov	r1, r9
 80074d2:	f7f9 fb0b 	bl	8000aec <__aeabi_dcmplt>
 80074d6:	2800      	cmp	r0, #0
 80074d8:	f040 8289 	bne.w	80079ee <_dtoa_r+0x976>
 80074dc:	ec5b ab19 	vmov	sl, fp, d9
 80074e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f2c0 8148 	blt.w	8007778 <_dtoa_r+0x700>
 80074e8:	9a00      	ldr	r2, [sp, #0]
 80074ea:	2a0e      	cmp	r2, #14
 80074ec:	f300 8144 	bgt.w	8007778 <_dtoa_r+0x700>
 80074f0:	4b67      	ldr	r3, [pc, #412]	; (8007690 <_dtoa_r+0x618>)
 80074f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80074fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f280 80d5 	bge.w	80076ac <_dtoa_r+0x634>
 8007502:	9b03      	ldr	r3, [sp, #12]
 8007504:	2b00      	cmp	r3, #0
 8007506:	f300 80d1 	bgt.w	80076ac <_dtoa_r+0x634>
 800750a:	f040 826f 	bne.w	80079ec <_dtoa_r+0x974>
 800750e:	4b65      	ldr	r3, [pc, #404]	; (80076a4 <_dtoa_r+0x62c>)
 8007510:	2200      	movs	r2, #0
 8007512:	4640      	mov	r0, r8
 8007514:	4649      	mov	r1, r9
 8007516:	f7f9 f877 	bl	8000608 <__aeabi_dmul>
 800751a:	4652      	mov	r2, sl
 800751c:	465b      	mov	r3, fp
 800751e:	f7f9 faf9 	bl	8000b14 <__aeabi_dcmpge>
 8007522:	9e03      	ldr	r6, [sp, #12]
 8007524:	4637      	mov	r7, r6
 8007526:	2800      	cmp	r0, #0
 8007528:	f040 8245 	bne.w	80079b6 <_dtoa_r+0x93e>
 800752c:	9d01      	ldr	r5, [sp, #4]
 800752e:	2331      	movs	r3, #49	; 0x31
 8007530:	f805 3b01 	strb.w	r3, [r5], #1
 8007534:	9b00      	ldr	r3, [sp, #0]
 8007536:	3301      	adds	r3, #1
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	e240      	b.n	80079be <_dtoa_r+0x946>
 800753c:	07f2      	lsls	r2, r6, #31
 800753e:	d505      	bpl.n	800754c <_dtoa_r+0x4d4>
 8007540:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007544:	f7f9 f860 	bl	8000608 <__aeabi_dmul>
 8007548:	3501      	adds	r5, #1
 800754a:	2301      	movs	r3, #1
 800754c:	1076      	asrs	r6, r6, #1
 800754e:	3708      	adds	r7, #8
 8007550:	e777      	b.n	8007442 <_dtoa_r+0x3ca>
 8007552:	2502      	movs	r5, #2
 8007554:	e779      	b.n	800744a <_dtoa_r+0x3d2>
 8007556:	9f00      	ldr	r7, [sp, #0]
 8007558:	9e03      	ldr	r6, [sp, #12]
 800755a:	e794      	b.n	8007486 <_dtoa_r+0x40e>
 800755c:	9901      	ldr	r1, [sp, #4]
 800755e:	4b4c      	ldr	r3, [pc, #304]	; (8007690 <_dtoa_r+0x618>)
 8007560:	4431      	add	r1, r6
 8007562:	910d      	str	r1, [sp, #52]	; 0x34
 8007564:	9908      	ldr	r1, [sp, #32]
 8007566:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800756a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800756e:	2900      	cmp	r1, #0
 8007570:	d043      	beq.n	80075fa <_dtoa_r+0x582>
 8007572:	494d      	ldr	r1, [pc, #308]	; (80076a8 <_dtoa_r+0x630>)
 8007574:	2000      	movs	r0, #0
 8007576:	f7f9 f971 	bl	800085c <__aeabi_ddiv>
 800757a:	4652      	mov	r2, sl
 800757c:	465b      	mov	r3, fp
 800757e:	f7f8 fe8b 	bl	8000298 <__aeabi_dsub>
 8007582:	9d01      	ldr	r5, [sp, #4]
 8007584:	4682      	mov	sl, r0
 8007586:	468b      	mov	fp, r1
 8007588:	4649      	mov	r1, r9
 800758a:	4640      	mov	r0, r8
 800758c:	f7f9 faec 	bl	8000b68 <__aeabi_d2iz>
 8007590:	4606      	mov	r6, r0
 8007592:	f7f8 ffcf 	bl	8000534 <__aeabi_i2d>
 8007596:	4602      	mov	r2, r0
 8007598:	460b      	mov	r3, r1
 800759a:	4640      	mov	r0, r8
 800759c:	4649      	mov	r1, r9
 800759e:	f7f8 fe7b 	bl	8000298 <__aeabi_dsub>
 80075a2:	3630      	adds	r6, #48	; 0x30
 80075a4:	f805 6b01 	strb.w	r6, [r5], #1
 80075a8:	4652      	mov	r2, sl
 80075aa:	465b      	mov	r3, fp
 80075ac:	4680      	mov	r8, r0
 80075ae:	4689      	mov	r9, r1
 80075b0:	f7f9 fa9c 	bl	8000aec <__aeabi_dcmplt>
 80075b4:	2800      	cmp	r0, #0
 80075b6:	d163      	bne.n	8007680 <_dtoa_r+0x608>
 80075b8:	4642      	mov	r2, r8
 80075ba:	464b      	mov	r3, r9
 80075bc:	4936      	ldr	r1, [pc, #216]	; (8007698 <_dtoa_r+0x620>)
 80075be:	2000      	movs	r0, #0
 80075c0:	f7f8 fe6a 	bl	8000298 <__aeabi_dsub>
 80075c4:	4652      	mov	r2, sl
 80075c6:	465b      	mov	r3, fp
 80075c8:	f7f9 fa90 	bl	8000aec <__aeabi_dcmplt>
 80075cc:	2800      	cmp	r0, #0
 80075ce:	f040 80b5 	bne.w	800773c <_dtoa_r+0x6c4>
 80075d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075d4:	429d      	cmp	r5, r3
 80075d6:	d081      	beq.n	80074dc <_dtoa_r+0x464>
 80075d8:	4b30      	ldr	r3, [pc, #192]	; (800769c <_dtoa_r+0x624>)
 80075da:	2200      	movs	r2, #0
 80075dc:	4650      	mov	r0, sl
 80075de:	4659      	mov	r1, fp
 80075e0:	f7f9 f812 	bl	8000608 <__aeabi_dmul>
 80075e4:	4b2d      	ldr	r3, [pc, #180]	; (800769c <_dtoa_r+0x624>)
 80075e6:	4682      	mov	sl, r0
 80075e8:	468b      	mov	fp, r1
 80075ea:	4640      	mov	r0, r8
 80075ec:	4649      	mov	r1, r9
 80075ee:	2200      	movs	r2, #0
 80075f0:	f7f9 f80a 	bl	8000608 <__aeabi_dmul>
 80075f4:	4680      	mov	r8, r0
 80075f6:	4689      	mov	r9, r1
 80075f8:	e7c6      	b.n	8007588 <_dtoa_r+0x510>
 80075fa:	4650      	mov	r0, sl
 80075fc:	4659      	mov	r1, fp
 80075fe:	f7f9 f803 	bl	8000608 <__aeabi_dmul>
 8007602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007604:	9d01      	ldr	r5, [sp, #4]
 8007606:	930f      	str	r3, [sp, #60]	; 0x3c
 8007608:	4682      	mov	sl, r0
 800760a:	468b      	mov	fp, r1
 800760c:	4649      	mov	r1, r9
 800760e:	4640      	mov	r0, r8
 8007610:	f7f9 faaa 	bl	8000b68 <__aeabi_d2iz>
 8007614:	4606      	mov	r6, r0
 8007616:	f7f8 ff8d 	bl	8000534 <__aeabi_i2d>
 800761a:	3630      	adds	r6, #48	; 0x30
 800761c:	4602      	mov	r2, r0
 800761e:	460b      	mov	r3, r1
 8007620:	4640      	mov	r0, r8
 8007622:	4649      	mov	r1, r9
 8007624:	f7f8 fe38 	bl	8000298 <__aeabi_dsub>
 8007628:	f805 6b01 	strb.w	r6, [r5], #1
 800762c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800762e:	429d      	cmp	r5, r3
 8007630:	4680      	mov	r8, r0
 8007632:	4689      	mov	r9, r1
 8007634:	f04f 0200 	mov.w	r2, #0
 8007638:	d124      	bne.n	8007684 <_dtoa_r+0x60c>
 800763a:	4b1b      	ldr	r3, [pc, #108]	; (80076a8 <_dtoa_r+0x630>)
 800763c:	4650      	mov	r0, sl
 800763e:	4659      	mov	r1, fp
 8007640:	f7f8 fe2c 	bl	800029c <__adddf3>
 8007644:	4602      	mov	r2, r0
 8007646:	460b      	mov	r3, r1
 8007648:	4640      	mov	r0, r8
 800764a:	4649      	mov	r1, r9
 800764c:	f7f9 fa6c 	bl	8000b28 <__aeabi_dcmpgt>
 8007650:	2800      	cmp	r0, #0
 8007652:	d173      	bne.n	800773c <_dtoa_r+0x6c4>
 8007654:	4652      	mov	r2, sl
 8007656:	465b      	mov	r3, fp
 8007658:	4913      	ldr	r1, [pc, #76]	; (80076a8 <_dtoa_r+0x630>)
 800765a:	2000      	movs	r0, #0
 800765c:	f7f8 fe1c 	bl	8000298 <__aeabi_dsub>
 8007660:	4602      	mov	r2, r0
 8007662:	460b      	mov	r3, r1
 8007664:	4640      	mov	r0, r8
 8007666:	4649      	mov	r1, r9
 8007668:	f7f9 fa40 	bl	8000aec <__aeabi_dcmplt>
 800766c:	2800      	cmp	r0, #0
 800766e:	f43f af35 	beq.w	80074dc <_dtoa_r+0x464>
 8007672:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007674:	1e6b      	subs	r3, r5, #1
 8007676:	930f      	str	r3, [sp, #60]	; 0x3c
 8007678:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800767c:	2b30      	cmp	r3, #48	; 0x30
 800767e:	d0f8      	beq.n	8007672 <_dtoa_r+0x5fa>
 8007680:	9700      	str	r7, [sp, #0]
 8007682:	e049      	b.n	8007718 <_dtoa_r+0x6a0>
 8007684:	4b05      	ldr	r3, [pc, #20]	; (800769c <_dtoa_r+0x624>)
 8007686:	f7f8 ffbf 	bl	8000608 <__aeabi_dmul>
 800768a:	4680      	mov	r8, r0
 800768c:	4689      	mov	r9, r1
 800768e:	e7bd      	b.n	800760c <_dtoa_r+0x594>
 8007690:	08009700 	.word	0x08009700
 8007694:	080096d8 	.word	0x080096d8
 8007698:	3ff00000 	.word	0x3ff00000
 800769c:	40240000 	.word	0x40240000
 80076a0:	401c0000 	.word	0x401c0000
 80076a4:	40140000 	.word	0x40140000
 80076a8:	3fe00000 	.word	0x3fe00000
 80076ac:	9d01      	ldr	r5, [sp, #4]
 80076ae:	4656      	mov	r6, sl
 80076b0:	465f      	mov	r7, fp
 80076b2:	4642      	mov	r2, r8
 80076b4:	464b      	mov	r3, r9
 80076b6:	4630      	mov	r0, r6
 80076b8:	4639      	mov	r1, r7
 80076ba:	f7f9 f8cf 	bl	800085c <__aeabi_ddiv>
 80076be:	f7f9 fa53 	bl	8000b68 <__aeabi_d2iz>
 80076c2:	4682      	mov	sl, r0
 80076c4:	f7f8 ff36 	bl	8000534 <__aeabi_i2d>
 80076c8:	4642      	mov	r2, r8
 80076ca:	464b      	mov	r3, r9
 80076cc:	f7f8 ff9c 	bl	8000608 <__aeabi_dmul>
 80076d0:	4602      	mov	r2, r0
 80076d2:	460b      	mov	r3, r1
 80076d4:	4630      	mov	r0, r6
 80076d6:	4639      	mov	r1, r7
 80076d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80076dc:	f7f8 fddc 	bl	8000298 <__aeabi_dsub>
 80076e0:	f805 6b01 	strb.w	r6, [r5], #1
 80076e4:	9e01      	ldr	r6, [sp, #4]
 80076e6:	9f03      	ldr	r7, [sp, #12]
 80076e8:	1bae      	subs	r6, r5, r6
 80076ea:	42b7      	cmp	r7, r6
 80076ec:	4602      	mov	r2, r0
 80076ee:	460b      	mov	r3, r1
 80076f0:	d135      	bne.n	800775e <_dtoa_r+0x6e6>
 80076f2:	f7f8 fdd3 	bl	800029c <__adddf3>
 80076f6:	4642      	mov	r2, r8
 80076f8:	464b      	mov	r3, r9
 80076fa:	4606      	mov	r6, r0
 80076fc:	460f      	mov	r7, r1
 80076fe:	f7f9 fa13 	bl	8000b28 <__aeabi_dcmpgt>
 8007702:	b9d0      	cbnz	r0, 800773a <_dtoa_r+0x6c2>
 8007704:	4642      	mov	r2, r8
 8007706:	464b      	mov	r3, r9
 8007708:	4630      	mov	r0, r6
 800770a:	4639      	mov	r1, r7
 800770c:	f7f9 f9e4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007710:	b110      	cbz	r0, 8007718 <_dtoa_r+0x6a0>
 8007712:	f01a 0f01 	tst.w	sl, #1
 8007716:	d110      	bne.n	800773a <_dtoa_r+0x6c2>
 8007718:	4620      	mov	r0, r4
 800771a:	ee18 1a10 	vmov	r1, s16
 800771e:	f000 fae9 	bl	8007cf4 <_Bfree>
 8007722:	2300      	movs	r3, #0
 8007724:	9800      	ldr	r0, [sp, #0]
 8007726:	702b      	strb	r3, [r5, #0]
 8007728:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800772a:	3001      	adds	r0, #1
 800772c:	6018      	str	r0, [r3, #0]
 800772e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007730:	2b00      	cmp	r3, #0
 8007732:	f43f acf1 	beq.w	8007118 <_dtoa_r+0xa0>
 8007736:	601d      	str	r5, [r3, #0]
 8007738:	e4ee      	b.n	8007118 <_dtoa_r+0xa0>
 800773a:	9f00      	ldr	r7, [sp, #0]
 800773c:	462b      	mov	r3, r5
 800773e:	461d      	mov	r5, r3
 8007740:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007744:	2a39      	cmp	r2, #57	; 0x39
 8007746:	d106      	bne.n	8007756 <_dtoa_r+0x6de>
 8007748:	9a01      	ldr	r2, [sp, #4]
 800774a:	429a      	cmp	r2, r3
 800774c:	d1f7      	bne.n	800773e <_dtoa_r+0x6c6>
 800774e:	9901      	ldr	r1, [sp, #4]
 8007750:	2230      	movs	r2, #48	; 0x30
 8007752:	3701      	adds	r7, #1
 8007754:	700a      	strb	r2, [r1, #0]
 8007756:	781a      	ldrb	r2, [r3, #0]
 8007758:	3201      	adds	r2, #1
 800775a:	701a      	strb	r2, [r3, #0]
 800775c:	e790      	b.n	8007680 <_dtoa_r+0x608>
 800775e:	4ba6      	ldr	r3, [pc, #664]	; (80079f8 <_dtoa_r+0x980>)
 8007760:	2200      	movs	r2, #0
 8007762:	f7f8 ff51 	bl	8000608 <__aeabi_dmul>
 8007766:	2200      	movs	r2, #0
 8007768:	2300      	movs	r3, #0
 800776a:	4606      	mov	r6, r0
 800776c:	460f      	mov	r7, r1
 800776e:	f7f9 f9b3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007772:	2800      	cmp	r0, #0
 8007774:	d09d      	beq.n	80076b2 <_dtoa_r+0x63a>
 8007776:	e7cf      	b.n	8007718 <_dtoa_r+0x6a0>
 8007778:	9a08      	ldr	r2, [sp, #32]
 800777a:	2a00      	cmp	r2, #0
 800777c:	f000 80d7 	beq.w	800792e <_dtoa_r+0x8b6>
 8007780:	9a06      	ldr	r2, [sp, #24]
 8007782:	2a01      	cmp	r2, #1
 8007784:	f300 80ba 	bgt.w	80078fc <_dtoa_r+0x884>
 8007788:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800778a:	2a00      	cmp	r2, #0
 800778c:	f000 80b2 	beq.w	80078f4 <_dtoa_r+0x87c>
 8007790:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007794:	9e07      	ldr	r6, [sp, #28]
 8007796:	9d04      	ldr	r5, [sp, #16]
 8007798:	9a04      	ldr	r2, [sp, #16]
 800779a:	441a      	add	r2, r3
 800779c:	9204      	str	r2, [sp, #16]
 800779e:	9a05      	ldr	r2, [sp, #20]
 80077a0:	2101      	movs	r1, #1
 80077a2:	441a      	add	r2, r3
 80077a4:	4620      	mov	r0, r4
 80077a6:	9205      	str	r2, [sp, #20]
 80077a8:	f000 fb5c 	bl	8007e64 <__i2b>
 80077ac:	4607      	mov	r7, r0
 80077ae:	2d00      	cmp	r5, #0
 80077b0:	dd0c      	ble.n	80077cc <_dtoa_r+0x754>
 80077b2:	9b05      	ldr	r3, [sp, #20]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	dd09      	ble.n	80077cc <_dtoa_r+0x754>
 80077b8:	42ab      	cmp	r3, r5
 80077ba:	9a04      	ldr	r2, [sp, #16]
 80077bc:	bfa8      	it	ge
 80077be:	462b      	movge	r3, r5
 80077c0:	1ad2      	subs	r2, r2, r3
 80077c2:	9204      	str	r2, [sp, #16]
 80077c4:	9a05      	ldr	r2, [sp, #20]
 80077c6:	1aed      	subs	r5, r5, r3
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	9305      	str	r3, [sp, #20]
 80077cc:	9b07      	ldr	r3, [sp, #28]
 80077ce:	b31b      	cbz	r3, 8007818 <_dtoa_r+0x7a0>
 80077d0:	9b08      	ldr	r3, [sp, #32]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	f000 80af 	beq.w	8007936 <_dtoa_r+0x8be>
 80077d8:	2e00      	cmp	r6, #0
 80077da:	dd13      	ble.n	8007804 <_dtoa_r+0x78c>
 80077dc:	4639      	mov	r1, r7
 80077de:	4632      	mov	r2, r6
 80077e0:	4620      	mov	r0, r4
 80077e2:	f000 fbff 	bl	8007fe4 <__pow5mult>
 80077e6:	ee18 2a10 	vmov	r2, s16
 80077ea:	4601      	mov	r1, r0
 80077ec:	4607      	mov	r7, r0
 80077ee:	4620      	mov	r0, r4
 80077f0:	f000 fb4e 	bl	8007e90 <__multiply>
 80077f4:	ee18 1a10 	vmov	r1, s16
 80077f8:	4680      	mov	r8, r0
 80077fa:	4620      	mov	r0, r4
 80077fc:	f000 fa7a 	bl	8007cf4 <_Bfree>
 8007800:	ee08 8a10 	vmov	s16, r8
 8007804:	9b07      	ldr	r3, [sp, #28]
 8007806:	1b9a      	subs	r2, r3, r6
 8007808:	d006      	beq.n	8007818 <_dtoa_r+0x7a0>
 800780a:	ee18 1a10 	vmov	r1, s16
 800780e:	4620      	mov	r0, r4
 8007810:	f000 fbe8 	bl	8007fe4 <__pow5mult>
 8007814:	ee08 0a10 	vmov	s16, r0
 8007818:	2101      	movs	r1, #1
 800781a:	4620      	mov	r0, r4
 800781c:	f000 fb22 	bl	8007e64 <__i2b>
 8007820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007822:	2b00      	cmp	r3, #0
 8007824:	4606      	mov	r6, r0
 8007826:	f340 8088 	ble.w	800793a <_dtoa_r+0x8c2>
 800782a:	461a      	mov	r2, r3
 800782c:	4601      	mov	r1, r0
 800782e:	4620      	mov	r0, r4
 8007830:	f000 fbd8 	bl	8007fe4 <__pow5mult>
 8007834:	9b06      	ldr	r3, [sp, #24]
 8007836:	2b01      	cmp	r3, #1
 8007838:	4606      	mov	r6, r0
 800783a:	f340 8081 	ble.w	8007940 <_dtoa_r+0x8c8>
 800783e:	f04f 0800 	mov.w	r8, #0
 8007842:	6933      	ldr	r3, [r6, #16]
 8007844:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007848:	6918      	ldr	r0, [r3, #16]
 800784a:	f000 fabb 	bl	8007dc4 <__hi0bits>
 800784e:	f1c0 0020 	rsb	r0, r0, #32
 8007852:	9b05      	ldr	r3, [sp, #20]
 8007854:	4418      	add	r0, r3
 8007856:	f010 001f 	ands.w	r0, r0, #31
 800785a:	f000 8092 	beq.w	8007982 <_dtoa_r+0x90a>
 800785e:	f1c0 0320 	rsb	r3, r0, #32
 8007862:	2b04      	cmp	r3, #4
 8007864:	f340 808a 	ble.w	800797c <_dtoa_r+0x904>
 8007868:	f1c0 001c 	rsb	r0, r0, #28
 800786c:	9b04      	ldr	r3, [sp, #16]
 800786e:	4403      	add	r3, r0
 8007870:	9304      	str	r3, [sp, #16]
 8007872:	9b05      	ldr	r3, [sp, #20]
 8007874:	4403      	add	r3, r0
 8007876:	4405      	add	r5, r0
 8007878:	9305      	str	r3, [sp, #20]
 800787a:	9b04      	ldr	r3, [sp, #16]
 800787c:	2b00      	cmp	r3, #0
 800787e:	dd07      	ble.n	8007890 <_dtoa_r+0x818>
 8007880:	ee18 1a10 	vmov	r1, s16
 8007884:	461a      	mov	r2, r3
 8007886:	4620      	mov	r0, r4
 8007888:	f000 fc06 	bl	8008098 <__lshift>
 800788c:	ee08 0a10 	vmov	s16, r0
 8007890:	9b05      	ldr	r3, [sp, #20]
 8007892:	2b00      	cmp	r3, #0
 8007894:	dd05      	ble.n	80078a2 <_dtoa_r+0x82a>
 8007896:	4631      	mov	r1, r6
 8007898:	461a      	mov	r2, r3
 800789a:	4620      	mov	r0, r4
 800789c:	f000 fbfc 	bl	8008098 <__lshift>
 80078a0:	4606      	mov	r6, r0
 80078a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d06e      	beq.n	8007986 <_dtoa_r+0x90e>
 80078a8:	ee18 0a10 	vmov	r0, s16
 80078ac:	4631      	mov	r1, r6
 80078ae:	f000 fc63 	bl	8008178 <__mcmp>
 80078b2:	2800      	cmp	r0, #0
 80078b4:	da67      	bge.n	8007986 <_dtoa_r+0x90e>
 80078b6:	9b00      	ldr	r3, [sp, #0]
 80078b8:	3b01      	subs	r3, #1
 80078ba:	ee18 1a10 	vmov	r1, s16
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	220a      	movs	r2, #10
 80078c2:	2300      	movs	r3, #0
 80078c4:	4620      	mov	r0, r4
 80078c6:	f000 fa37 	bl	8007d38 <__multadd>
 80078ca:	9b08      	ldr	r3, [sp, #32]
 80078cc:	ee08 0a10 	vmov	s16, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 81b1 	beq.w	8007c38 <_dtoa_r+0xbc0>
 80078d6:	2300      	movs	r3, #0
 80078d8:	4639      	mov	r1, r7
 80078da:	220a      	movs	r2, #10
 80078dc:	4620      	mov	r0, r4
 80078de:	f000 fa2b 	bl	8007d38 <__multadd>
 80078e2:	9b02      	ldr	r3, [sp, #8]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	4607      	mov	r7, r0
 80078e8:	f300 808e 	bgt.w	8007a08 <_dtoa_r+0x990>
 80078ec:	9b06      	ldr	r3, [sp, #24]
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	dc51      	bgt.n	8007996 <_dtoa_r+0x91e>
 80078f2:	e089      	b.n	8007a08 <_dtoa_r+0x990>
 80078f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80078fa:	e74b      	b.n	8007794 <_dtoa_r+0x71c>
 80078fc:	9b03      	ldr	r3, [sp, #12]
 80078fe:	1e5e      	subs	r6, r3, #1
 8007900:	9b07      	ldr	r3, [sp, #28]
 8007902:	42b3      	cmp	r3, r6
 8007904:	bfbf      	itttt	lt
 8007906:	9b07      	ldrlt	r3, [sp, #28]
 8007908:	9607      	strlt	r6, [sp, #28]
 800790a:	1af2      	sublt	r2, r6, r3
 800790c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800790e:	bfb6      	itet	lt
 8007910:	189b      	addlt	r3, r3, r2
 8007912:	1b9e      	subge	r6, r3, r6
 8007914:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007916:	9b03      	ldr	r3, [sp, #12]
 8007918:	bfb8      	it	lt
 800791a:	2600      	movlt	r6, #0
 800791c:	2b00      	cmp	r3, #0
 800791e:	bfb7      	itett	lt
 8007920:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007924:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007928:	1a9d      	sublt	r5, r3, r2
 800792a:	2300      	movlt	r3, #0
 800792c:	e734      	b.n	8007798 <_dtoa_r+0x720>
 800792e:	9e07      	ldr	r6, [sp, #28]
 8007930:	9d04      	ldr	r5, [sp, #16]
 8007932:	9f08      	ldr	r7, [sp, #32]
 8007934:	e73b      	b.n	80077ae <_dtoa_r+0x736>
 8007936:	9a07      	ldr	r2, [sp, #28]
 8007938:	e767      	b.n	800780a <_dtoa_r+0x792>
 800793a:	9b06      	ldr	r3, [sp, #24]
 800793c:	2b01      	cmp	r3, #1
 800793e:	dc18      	bgt.n	8007972 <_dtoa_r+0x8fa>
 8007940:	f1ba 0f00 	cmp.w	sl, #0
 8007944:	d115      	bne.n	8007972 <_dtoa_r+0x8fa>
 8007946:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800794a:	b993      	cbnz	r3, 8007972 <_dtoa_r+0x8fa>
 800794c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007950:	0d1b      	lsrs	r3, r3, #20
 8007952:	051b      	lsls	r3, r3, #20
 8007954:	b183      	cbz	r3, 8007978 <_dtoa_r+0x900>
 8007956:	9b04      	ldr	r3, [sp, #16]
 8007958:	3301      	adds	r3, #1
 800795a:	9304      	str	r3, [sp, #16]
 800795c:	9b05      	ldr	r3, [sp, #20]
 800795e:	3301      	adds	r3, #1
 8007960:	9305      	str	r3, [sp, #20]
 8007962:	f04f 0801 	mov.w	r8, #1
 8007966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007968:	2b00      	cmp	r3, #0
 800796a:	f47f af6a 	bne.w	8007842 <_dtoa_r+0x7ca>
 800796e:	2001      	movs	r0, #1
 8007970:	e76f      	b.n	8007852 <_dtoa_r+0x7da>
 8007972:	f04f 0800 	mov.w	r8, #0
 8007976:	e7f6      	b.n	8007966 <_dtoa_r+0x8ee>
 8007978:	4698      	mov	r8, r3
 800797a:	e7f4      	b.n	8007966 <_dtoa_r+0x8ee>
 800797c:	f43f af7d 	beq.w	800787a <_dtoa_r+0x802>
 8007980:	4618      	mov	r0, r3
 8007982:	301c      	adds	r0, #28
 8007984:	e772      	b.n	800786c <_dtoa_r+0x7f4>
 8007986:	9b03      	ldr	r3, [sp, #12]
 8007988:	2b00      	cmp	r3, #0
 800798a:	dc37      	bgt.n	80079fc <_dtoa_r+0x984>
 800798c:	9b06      	ldr	r3, [sp, #24]
 800798e:	2b02      	cmp	r3, #2
 8007990:	dd34      	ble.n	80079fc <_dtoa_r+0x984>
 8007992:	9b03      	ldr	r3, [sp, #12]
 8007994:	9302      	str	r3, [sp, #8]
 8007996:	9b02      	ldr	r3, [sp, #8]
 8007998:	b96b      	cbnz	r3, 80079b6 <_dtoa_r+0x93e>
 800799a:	4631      	mov	r1, r6
 800799c:	2205      	movs	r2, #5
 800799e:	4620      	mov	r0, r4
 80079a0:	f000 f9ca 	bl	8007d38 <__multadd>
 80079a4:	4601      	mov	r1, r0
 80079a6:	4606      	mov	r6, r0
 80079a8:	ee18 0a10 	vmov	r0, s16
 80079ac:	f000 fbe4 	bl	8008178 <__mcmp>
 80079b0:	2800      	cmp	r0, #0
 80079b2:	f73f adbb 	bgt.w	800752c <_dtoa_r+0x4b4>
 80079b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079b8:	9d01      	ldr	r5, [sp, #4]
 80079ba:	43db      	mvns	r3, r3
 80079bc:	9300      	str	r3, [sp, #0]
 80079be:	f04f 0800 	mov.w	r8, #0
 80079c2:	4631      	mov	r1, r6
 80079c4:	4620      	mov	r0, r4
 80079c6:	f000 f995 	bl	8007cf4 <_Bfree>
 80079ca:	2f00      	cmp	r7, #0
 80079cc:	f43f aea4 	beq.w	8007718 <_dtoa_r+0x6a0>
 80079d0:	f1b8 0f00 	cmp.w	r8, #0
 80079d4:	d005      	beq.n	80079e2 <_dtoa_r+0x96a>
 80079d6:	45b8      	cmp	r8, r7
 80079d8:	d003      	beq.n	80079e2 <_dtoa_r+0x96a>
 80079da:	4641      	mov	r1, r8
 80079dc:	4620      	mov	r0, r4
 80079de:	f000 f989 	bl	8007cf4 <_Bfree>
 80079e2:	4639      	mov	r1, r7
 80079e4:	4620      	mov	r0, r4
 80079e6:	f000 f985 	bl	8007cf4 <_Bfree>
 80079ea:	e695      	b.n	8007718 <_dtoa_r+0x6a0>
 80079ec:	2600      	movs	r6, #0
 80079ee:	4637      	mov	r7, r6
 80079f0:	e7e1      	b.n	80079b6 <_dtoa_r+0x93e>
 80079f2:	9700      	str	r7, [sp, #0]
 80079f4:	4637      	mov	r7, r6
 80079f6:	e599      	b.n	800752c <_dtoa_r+0x4b4>
 80079f8:	40240000 	.word	0x40240000
 80079fc:	9b08      	ldr	r3, [sp, #32]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f000 80ca 	beq.w	8007b98 <_dtoa_r+0xb20>
 8007a04:	9b03      	ldr	r3, [sp, #12]
 8007a06:	9302      	str	r3, [sp, #8]
 8007a08:	2d00      	cmp	r5, #0
 8007a0a:	dd05      	ble.n	8007a18 <_dtoa_r+0x9a0>
 8007a0c:	4639      	mov	r1, r7
 8007a0e:	462a      	mov	r2, r5
 8007a10:	4620      	mov	r0, r4
 8007a12:	f000 fb41 	bl	8008098 <__lshift>
 8007a16:	4607      	mov	r7, r0
 8007a18:	f1b8 0f00 	cmp.w	r8, #0
 8007a1c:	d05b      	beq.n	8007ad6 <_dtoa_r+0xa5e>
 8007a1e:	6879      	ldr	r1, [r7, #4]
 8007a20:	4620      	mov	r0, r4
 8007a22:	f000 f927 	bl	8007c74 <_Balloc>
 8007a26:	4605      	mov	r5, r0
 8007a28:	b928      	cbnz	r0, 8007a36 <_dtoa_r+0x9be>
 8007a2a:	4b87      	ldr	r3, [pc, #540]	; (8007c48 <_dtoa_r+0xbd0>)
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007a32:	f7ff bb3b 	b.w	80070ac <_dtoa_r+0x34>
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	3202      	adds	r2, #2
 8007a3a:	0092      	lsls	r2, r2, #2
 8007a3c:	f107 010c 	add.w	r1, r7, #12
 8007a40:	300c      	adds	r0, #12
 8007a42:	f7fe fcb7 	bl	80063b4 <memcpy>
 8007a46:	2201      	movs	r2, #1
 8007a48:	4629      	mov	r1, r5
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	f000 fb24 	bl	8008098 <__lshift>
 8007a50:	9b01      	ldr	r3, [sp, #4]
 8007a52:	f103 0901 	add.w	r9, r3, #1
 8007a56:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	9305      	str	r3, [sp, #20]
 8007a5e:	f00a 0301 	and.w	r3, sl, #1
 8007a62:	46b8      	mov	r8, r7
 8007a64:	9304      	str	r3, [sp, #16]
 8007a66:	4607      	mov	r7, r0
 8007a68:	4631      	mov	r1, r6
 8007a6a:	ee18 0a10 	vmov	r0, s16
 8007a6e:	f7ff fa75 	bl	8006f5c <quorem>
 8007a72:	4641      	mov	r1, r8
 8007a74:	9002      	str	r0, [sp, #8]
 8007a76:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007a7a:	ee18 0a10 	vmov	r0, s16
 8007a7e:	f000 fb7b 	bl	8008178 <__mcmp>
 8007a82:	463a      	mov	r2, r7
 8007a84:	9003      	str	r0, [sp, #12]
 8007a86:	4631      	mov	r1, r6
 8007a88:	4620      	mov	r0, r4
 8007a8a:	f000 fb91 	bl	80081b0 <__mdiff>
 8007a8e:	68c2      	ldr	r2, [r0, #12]
 8007a90:	f109 3bff 	add.w	fp, r9, #4294967295
 8007a94:	4605      	mov	r5, r0
 8007a96:	bb02      	cbnz	r2, 8007ada <_dtoa_r+0xa62>
 8007a98:	4601      	mov	r1, r0
 8007a9a:	ee18 0a10 	vmov	r0, s16
 8007a9e:	f000 fb6b 	bl	8008178 <__mcmp>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	4629      	mov	r1, r5
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	9207      	str	r2, [sp, #28]
 8007aaa:	f000 f923 	bl	8007cf4 <_Bfree>
 8007aae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007ab2:	ea43 0102 	orr.w	r1, r3, r2
 8007ab6:	9b04      	ldr	r3, [sp, #16]
 8007ab8:	430b      	orrs	r3, r1
 8007aba:	464d      	mov	r5, r9
 8007abc:	d10f      	bne.n	8007ade <_dtoa_r+0xa66>
 8007abe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ac2:	d02a      	beq.n	8007b1a <_dtoa_r+0xaa2>
 8007ac4:	9b03      	ldr	r3, [sp, #12]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	dd02      	ble.n	8007ad0 <_dtoa_r+0xa58>
 8007aca:	9b02      	ldr	r3, [sp, #8]
 8007acc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007ad0:	f88b a000 	strb.w	sl, [fp]
 8007ad4:	e775      	b.n	80079c2 <_dtoa_r+0x94a>
 8007ad6:	4638      	mov	r0, r7
 8007ad8:	e7ba      	b.n	8007a50 <_dtoa_r+0x9d8>
 8007ada:	2201      	movs	r2, #1
 8007adc:	e7e2      	b.n	8007aa4 <_dtoa_r+0xa2c>
 8007ade:	9b03      	ldr	r3, [sp, #12]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	db04      	blt.n	8007aee <_dtoa_r+0xa76>
 8007ae4:	9906      	ldr	r1, [sp, #24]
 8007ae6:	430b      	orrs	r3, r1
 8007ae8:	9904      	ldr	r1, [sp, #16]
 8007aea:	430b      	orrs	r3, r1
 8007aec:	d122      	bne.n	8007b34 <_dtoa_r+0xabc>
 8007aee:	2a00      	cmp	r2, #0
 8007af0:	ddee      	ble.n	8007ad0 <_dtoa_r+0xa58>
 8007af2:	ee18 1a10 	vmov	r1, s16
 8007af6:	2201      	movs	r2, #1
 8007af8:	4620      	mov	r0, r4
 8007afa:	f000 facd 	bl	8008098 <__lshift>
 8007afe:	4631      	mov	r1, r6
 8007b00:	ee08 0a10 	vmov	s16, r0
 8007b04:	f000 fb38 	bl	8008178 <__mcmp>
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	dc03      	bgt.n	8007b14 <_dtoa_r+0xa9c>
 8007b0c:	d1e0      	bne.n	8007ad0 <_dtoa_r+0xa58>
 8007b0e:	f01a 0f01 	tst.w	sl, #1
 8007b12:	d0dd      	beq.n	8007ad0 <_dtoa_r+0xa58>
 8007b14:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007b18:	d1d7      	bne.n	8007aca <_dtoa_r+0xa52>
 8007b1a:	2339      	movs	r3, #57	; 0x39
 8007b1c:	f88b 3000 	strb.w	r3, [fp]
 8007b20:	462b      	mov	r3, r5
 8007b22:	461d      	mov	r5, r3
 8007b24:	3b01      	subs	r3, #1
 8007b26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007b2a:	2a39      	cmp	r2, #57	; 0x39
 8007b2c:	d071      	beq.n	8007c12 <_dtoa_r+0xb9a>
 8007b2e:	3201      	adds	r2, #1
 8007b30:	701a      	strb	r2, [r3, #0]
 8007b32:	e746      	b.n	80079c2 <_dtoa_r+0x94a>
 8007b34:	2a00      	cmp	r2, #0
 8007b36:	dd07      	ble.n	8007b48 <_dtoa_r+0xad0>
 8007b38:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007b3c:	d0ed      	beq.n	8007b1a <_dtoa_r+0xaa2>
 8007b3e:	f10a 0301 	add.w	r3, sl, #1
 8007b42:	f88b 3000 	strb.w	r3, [fp]
 8007b46:	e73c      	b.n	80079c2 <_dtoa_r+0x94a>
 8007b48:	9b05      	ldr	r3, [sp, #20]
 8007b4a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007b4e:	4599      	cmp	r9, r3
 8007b50:	d047      	beq.n	8007be2 <_dtoa_r+0xb6a>
 8007b52:	ee18 1a10 	vmov	r1, s16
 8007b56:	2300      	movs	r3, #0
 8007b58:	220a      	movs	r2, #10
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	f000 f8ec 	bl	8007d38 <__multadd>
 8007b60:	45b8      	cmp	r8, r7
 8007b62:	ee08 0a10 	vmov	s16, r0
 8007b66:	f04f 0300 	mov.w	r3, #0
 8007b6a:	f04f 020a 	mov.w	r2, #10
 8007b6e:	4641      	mov	r1, r8
 8007b70:	4620      	mov	r0, r4
 8007b72:	d106      	bne.n	8007b82 <_dtoa_r+0xb0a>
 8007b74:	f000 f8e0 	bl	8007d38 <__multadd>
 8007b78:	4680      	mov	r8, r0
 8007b7a:	4607      	mov	r7, r0
 8007b7c:	f109 0901 	add.w	r9, r9, #1
 8007b80:	e772      	b.n	8007a68 <_dtoa_r+0x9f0>
 8007b82:	f000 f8d9 	bl	8007d38 <__multadd>
 8007b86:	4639      	mov	r1, r7
 8007b88:	4680      	mov	r8, r0
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	220a      	movs	r2, #10
 8007b8e:	4620      	mov	r0, r4
 8007b90:	f000 f8d2 	bl	8007d38 <__multadd>
 8007b94:	4607      	mov	r7, r0
 8007b96:	e7f1      	b.n	8007b7c <_dtoa_r+0xb04>
 8007b98:	9b03      	ldr	r3, [sp, #12]
 8007b9a:	9302      	str	r3, [sp, #8]
 8007b9c:	9d01      	ldr	r5, [sp, #4]
 8007b9e:	ee18 0a10 	vmov	r0, s16
 8007ba2:	4631      	mov	r1, r6
 8007ba4:	f7ff f9da 	bl	8006f5c <quorem>
 8007ba8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007bac:	9b01      	ldr	r3, [sp, #4]
 8007bae:	f805 ab01 	strb.w	sl, [r5], #1
 8007bb2:	1aea      	subs	r2, r5, r3
 8007bb4:	9b02      	ldr	r3, [sp, #8]
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	dd09      	ble.n	8007bce <_dtoa_r+0xb56>
 8007bba:	ee18 1a10 	vmov	r1, s16
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	220a      	movs	r2, #10
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	f000 f8b8 	bl	8007d38 <__multadd>
 8007bc8:	ee08 0a10 	vmov	s16, r0
 8007bcc:	e7e7      	b.n	8007b9e <_dtoa_r+0xb26>
 8007bce:	9b02      	ldr	r3, [sp, #8]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	bfc8      	it	gt
 8007bd4:	461d      	movgt	r5, r3
 8007bd6:	9b01      	ldr	r3, [sp, #4]
 8007bd8:	bfd8      	it	le
 8007bda:	2501      	movle	r5, #1
 8007bdc:	441d      	add	r5, r3
 8007bde:	f04f 0800 	mov.w	r8, #0
 8007be2:	ee18 1a10 	vmov	r1, s16
 8007be6:	2201      	movs	r2, #1
 8007be8:	4620      	mov	r0, r4
 8007bea:	f000 fa55 	bl	8008098 <__lshift>
 8007bee:	4631      	mov	r1, r6
 8007bf0:	ee08 0a10 	vmov	s16, r0
 8007bf4:	f000 fac0 	bl	8008178 <__mcmp>
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	dc91      	bgt.n	8007b20 <_dtoa_r+0xaa8>
 8007bfc:	d102      	bne.n	8007c04 <_dtoa_r+0xb8c>
 8007bfe:	f01a 0f01 	tst.w	sl, #1
 8007c02:	d18d      	bne.n	8007b20 <_dtoa_r+0xaa8>
 8007c04:	462b      	mov	r3, r5
 8007c06:	461d      	mov	r5, r3
 8007c08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c0c:	2a30      	cmp	r2, #48	; 0x30
 8007c0e:	d0fa      	beq.n	8007c06 <_dtoa_r+0xb8e>
 8007c10:	e6d7      	b.n	80079c2 <_dtoa_r+0x94a>
 8007c12:	9a01      	ldr	r2, [sp, #4]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d184      	bne.n	8007b22 <_dtoa_r+0xaaa>
 8007c18:	9b00      	ldr	r3, [sp, #0]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	2331      	movs	r3, #49	; 0x31
 8007c20:	7013      	strb	r3, [r2, #0]
 8007c22:	e6ce      	b.n	80079c2 <_dtoa_r+0x94a>
 8007c24:	4b09      	ldr	r3, [pc, #36]	; (8007c4c <_dtoa_r+0xbd4>)
 8007c26:	f7ff ba95 	b.w	8007154 <_dtoa_r+0xdc>
 8007c2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f47f aa6e 	bne.w	800710e <_dtoa_r+0x96>
 8007c32:	4b07      	ldr	r3, [pc, #28]	; (8007c50 <_dtoa_r+0xbd8>)
 8007c34:	f7ff ba8e 	b.w	8007154 <_dtoa_r+0xdc>
 8007c38:	9b02      	ldr	r3, [sp, #8]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	dcae      	bgt.n	8007b9c <_dtoa_r+0xb24>
 8007c3e:	9b06      	ldr	r3, [sp, #24]
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	f73f aea8 	bgt.w	8007996 <_dtoa_r+0x91e>
 8007c46:	e7a9      	b.n	8007b9c <_dtoa_r+0xb24>
 8007c48:	08009667 	.word	0x08009667
 8007c4c:	080095c4 	.word	0x080095c4
 8007c50:	080095e8 	.word	0x080095e8

08007c54 <_localeconv_r>:
 8007c54:	4800      	ldr	r0, [pc, #0]	; (8007c58 <_localeconv_r+0x4>)
 8007c56:	4770      	bx	lr
 8007c58:	20000590 	.word	0x20000590

08007c5c <__malloc_lock>:
 8007c5c:	4801      	ldr	r0, [pc, #4]	; (8007c64 <__malloc_lock+0x8>)
 8007c5e:	f000 bd5e 	b.w	800871e <__retarget_lock_acquire_recursive>
 8007c62:	bf00      	nop
 8007c64:	2000086c 	.word	0x2000086c

08007c68 <__malloc_unlock>:
 8007c68:	4801      	ldr	r0, [pc, #4]	; (8007c70 <__malloc_unlock+0x8>)
 8007c6a:	f000 bd59 	b.w	8008720 <__retarget_lock_release_recursive>
 8007c6e:	bf00      	nop
 8007c70:	2000086c 	.word	0x2000086c

08007c74 <_Balloc>:
 8007c74:	b570      	push	{r4, r5, r6, lr}
 8007c76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c78:	4604      	mov	r4, r0
 8007c7a:	460d      	mov	r5, r1
 8007c7c:	b976      	cbnz	r6, 8007c9c <_Balloc+0x28>
 8007c7e:	2010      	movs	r0, #16
 8007c80:	f7fe fb88 	bl	8006394 <malloc>
 8007c84:	4602      	mov	r2, r0
 8007c86:	6260      	str	r0, [r4, #36]	; 0x24
 8007c88:	b920      	cbnz	r0, 8007c94 <_Balloc+0x20>
 8007c8a:	4b18      	ldr	r3, [pc, #96]	; (8007cec <_Balloc+0x78>)
 8007c8c:	4818      	ldr	r0, [pc, #96]	; (8007cf0 <_Balloc+0x7c>)
 8007c8e:	2166      	movs	r1, #102	; 0x66
 8007c90:	f000 fd14 	bl	80086bc <__assert_func>
 8007c94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c98:	6006      	str	r6, [r0, #0]
 8007c9a:	60c6      	str	r6, [r0, #12]
 8007c9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c9e:	68f3      	ldr	r3, [r6, #12]
 8007ca0:	b183      	cbz	r3, 8007cc4 <_Balloc+0x50>
 8007ca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007caa:	b9b8      	cbnz	r0, 8007cdc <_Balloc+0x68>
 8007cac:	2101      	movs	r1, #1
 8007cae:	fa01 f605 	lsl.w	r6, r1, r5
 8007cb2:	1d72      	adds	r2, r6, #5
 8007cb4:	0092      	lsls	r2, r2, #2
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f000 fb60 	bl	800837c <_calloc_r>
 8007cbc:	b160      	cbz	r0, 8007cd8 <_Balloc+0x64>
 8007cbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007cc2:	e00e      	b.n	8007ce2 <_Balloc+0x6e>
 8007cc4:	2221      	movs	r2, #33	; 0x21
 8007cc6:	2104      	movs	r1, #4
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f000 fb57 	bl	800837c <_calloc_r>
 8007cce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cd0:	60f0      	str	r0, [r6, #12]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1e4      	bne.n	8007ca2 <_Balloc+0x2e>
 8007cd8:	2000      	movs	r0, #0
 8007cda:	bd70      	pop	{r4, r5, r6, pc}
 8007cdc:	6802      	ldr	r2, [r0, #0]
 8007cde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ce8:	e7f7      	b.n	8007cda <_Balloc+0x66>
 8007cea:	bf00      	nop
 8007cec:	080095f5 	.word	0x080095f5
 8007cf0:	08009678 	.word	0x08009678

08007cf4 <_Bfree>:
 8007cf4:	b570      	push	{r4, r5, r6, lr}
 8007cf6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007cf8:	4605      	mov	r5, r0
 8007cfa:	460c      	mov	r4, r1
 8007cfc:	b976      	cbnz	r6, 8007d1c <_Bfree+0x28>
 8007cfe:	2010      	movs	r0, #16
 8007d00:	f7fe fb48 	bl	8006394 <malloc>
 8007d04:	4602      	mov	r2, r0
 8007d06:	6268      	str	r0, [r5, #36]	; 0x24
 8007d08:	b920      	cbnz	r0, 8007d14 <_Bfree+0x20>
 8007d0a:	4b09      	ldr	r3, [pc, #36]	; (8007d30 <_Bfree+0x3c>)
 8007d0c:	4809      	ldr	r0, [pc, #36]	; (8007d34 <_Bfree+0x40>)
 8007d0e:	218a      	movs	r1, #138	; 0x8a
 8007d10:	f000 fcd4 	bl	80086bc <__assert_func>
 8007d14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d18:	6006      	str	r6, [r0, #0]
 8007d1a:	60c6      	str	r6, [r0, #12]
 8007d1c:	b13c      	cbz	r4, 8007d2e <_Bfree+0x3a>
 8007d1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007d20:	6862      	ldr	r2, [r4, #4]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d28:	6021      	str	r1, [r4, #0]
 8007d2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d2e:	bd70      	pop	{r4, r5, r6, pc}
 8007d30:	080095f5 	.word	0x080095f5
 8007d34:	08009678 	.word	0x08009678

08007d38 <__multadd>:
 8007d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d3c:	690d      	ldr	r5, [r1, #16]
 8007d3e:	4607      	mov	r7, r0
 8007d40:	460c      	mov	r4, r1
 8007d42:	461e      	mov	r6, r3
 8007d44:	f101 0c14 	add.w	ip, r1, #20
 8007d48:	2000      	movs	r0, #0
 8007d4a:	f8dc 3000 	ldr.w	r3, [ip]
 8007d4e:	b299      	uxth	r1, r3
 8007d50:	fb02 6101 	mla	r1, r2, r1, r6
 8007d54:	0c1e      	lsrs	r6, r3, #16
 8007d56:	0c0b      	lsrs	r3, r1, #16
 8007d58:	fb02 3306 	mla	r3, r2, r6, r3
 8007d5c:	b289      	uxth	r1, r1
 8007d5e:	3001      	adds	r0, #1
 8007d60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d64:	4285      	cmp	r5, r0
 8007d66:	f84c 1b04 	str.w	r1, [ip], #4
 8007d6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d6e:	dcec      	bgt.n	8007d4a <__multadd+0x12>
 8007d70:	b30e      	cbz	r6, 8007db6 <__multadd+0x7e>
 8007d72:	68a3      	ldr	r3, [r4, #8]
 8007d74:	42ab      	cmp	r3, r5
 8007d76:	dc19      	bgt.n	8007dac <__multadd+0x74>
 8007d78:	6861      	ldr	r1, [r4, #4]
 8007d7a:	4638      	mov	r0, r7
 8007d7c:	3101      	adds	r1, #1
 8007d7e:	f7ff ff79 	bl	8007c74 <_Balloc>
 8007d82:	4680      	mov	r8, r0
 8007d84:	b928      	cbnz	r0, 8007d92 <__multadd+0x5a>
 8007d86:	4602      	mov	r2, r0
 8007d88:	4b0c      	ldr	r3, [pc, #48]	; (8007dbc <__multadd+0x84>)
 8007d8a:	480d      	ldr	r0, [pc, #52]	; (8007dc0 <__multadd+0x88>)
 8007d8c:	21b5      	movs	r1, #181	; 0xb5
 8007d8e:	f000 fc95 	bl	80086bc <__assert_func>
 8007d92:	6922      	ldr	r2, [r4, #16]
 8007d94:	3202      	adds	r2, #2
 8007d96:	f104 010c 	add.w	r1, r4, #12
 8007d9a:	0092      	lsls	r2, r2, #2
 8007d9c:	300c      	adds	r0, #12
 8007d9e:	f7fe fb09 	bl	80063b4 <memcpy>
 8007da2:	4621      	mov	r1, r4
 8007da4:	4638      	mov	r0, r7
 8007da6:	f7ff ffa5 	bl	8007cf4 <_Bfree>
 8007daa:	4644      	mov	r4, r8
 8007dac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007db0:	3501      	adds	r5, #1
 8007db2:	615e      	str	r6, [r3, #20]
 8007db4:	6125      	str	r5, [r4, #16]
 8007db6:	4620      	mov	r0, r4
 8007db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dbc:	08009667 	.word	0x08009667
 8007dc0:	08009678 	.word	0x08009678

08007dc4 <__hi0bits>:
 8007dc4:	0c03      	lsrs	r3, r0, #16
 8007dc6:	041b      	lsls	r3, r3, #16
 8007dc8:	b9d3      	cbnz	r3, 8007e00 <__hi0bits+0x3c>
 8007dca:	0400      	lsls	r0, r0, #16
 8007dcc:	2310      	movs	r3, #16
 8007dce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007dd2:	bf04      	itt	eq
 8007dd4:	0200      	lsleq	r0, r0, #8
 8007dd6:	3308      	addeq	r3, #8
 8007dd8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007ddc:	bf04      	itt	eq
 8007dde:	0100      	lsleq	r0, r0, #4
 8007de0:	3304      	addeq	r3, #4
 8007de2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007de6:	bf04      	itt	eq
 8007de8:	0080      	lsleq	r0, r0, #2
 8007dea:	3302      	addeq	r3, #2
 8007dec:	2800      	cmp	r0, #0
 8007dee:	db05      	blt.n	8007dfc <__hi0bits+0x38>
 8007df0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007df4:	f103 0301 	add.w	r3, r3, #1
 8007df8:	bf08      	it	eq
 8007dfa:	2320      	moveq	r3, #32
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	4770      	bx	lr
 8007e00:	2300      	movs	r3, #0
 8007e02:	e7e4      	b.n	8007dce <__hi0bits+0xa>

08007e04 <__lo0bits>:
 8007e04:	6803      	ldr	r3, [r0, #0]
 8007e06:	f013 0207 	ands.w	r2, r3, #7
 8007e0a:	4601      	mov	r1, r0
 8007e0c:	d00b      	beq.n	8007e26 <__lo0bits+0x22>
 8007e0e:	07da      	lsls	r2, r3, #31
 8007e10:	d423      	bmi.n	8007e5a <__lo0bits+0x56>
 8007e12:	0798      	lsls	r0, r3, #30
 8007e14:	bf49      	itett	mi
 8007e16:	085b      	lsrmi	r3, r3, #1
 8007e18:	089b      	lsrpl	r3, r3, #2
 8007e1a:	2001      	movmi	r0, #1
 8007e1c:	600b      	strmi	r3, [r1, #0]
 8007e1e:	bf5c      	itt	pl
 8007e20:	600b      	strpl	r3, [r1, #0]
 8007e22:	2002      	movpl	r0, #2
 8007e24:	4770      	bx	lr
 8007e26:	b298      	uxth	r0, r3
 8007e28:	b9a8      	cbnz	r0, 8007e56 <__lo0bits+0x52>
 8007e2a:	0c1b      	lsrs	r3, r3, #16
 8007e2c:	2010      	movs	r0, #16
 8007e2e:	b2da      	uxtb	r2, r3
 8007e30:	b90a      	cbnz	r2, 8007e36 <__lo0bits+0x32>
 8007e32:	3008      	adds	r0, #8
 8007e34:	0a1b      	lsrs	r3, r3, #8
 8007e36:	071a      	lsls	r2, r3, #28
 8007e38:	bf04      	itt	eq
 8007e3a:	091b      	lsreq	r3, r3, #4
 8007e3c:	3004      	addeq	r0, #4
 8007e3e:	079a      	lsls	r2, r3, #30
 8007e40:	bf04      	itt	eq
 8007e42:	089b      	lsreq	r3, r3, #2
 8007e44:	3002      	addeq	r0, #2
 8007e46:	07da      	lsls	r2, r3, #31
 8007e48:	d403      	bmi.n	8007e52 <__lo0bits+0x4e>
 8007e4a:	085b      	lsrs	r3, r3, #1
 8007e4c:	f100 0001 	add.w	r0, r0, #1
 8007e50:	d005      	beq.n	8007e5e <__lo0bits+0x5a>
 8007e52:	600b      	str	r3, [r1, #0]
 8007e54:	4770      	bx	lr
 8007e56:	4610      	mov	r0, r2
 8007e58:	e7e9      	b.n	8007e2e <__lo0bits+0x2a>
 8007e5a:	2000      	movs	r0, #0
 8007e5c:	4770      	bx	lr
 8007e5e:	2020      	movs	r0, #32
 8007e60:	4770      	bx	lr
	...

08007e64 <__i2b>:
 8007e64:	b510      	push	{r4, lr}
 8007e66:	460c      	mov	r4, r1
 8007e68:	2101      	movs	r1, #1
 8007e6a:	f7ff ff03 	bl	8007c74 <_Balloc>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	b928      	cbnz	r0, 8007e7e <__i2b+0x1a>
 8007e72:	4b05      	ldr	r3, [pc, #20]	; (8007e88 <__i2b+0x24>)
 8007e74:	4805      	ldr	r0, [pc, #20]	; (8007e8c <__i2b+0x28>)
 8007e76:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007e7a:	f000 fc1f 	bl	80086bc <__assert_func>
 8007e7e:	2301      	movs	r3, #1
 8007e80:	6144      	str	r4, [r0, #20]
 8007e82:	6103      	str	r3, [r0, #16]
 8007e84:	bd10      	pop	{r4, pc}
 8007e86:	bf00      	nop
 8007e88:	08009667 	.word	0x08009667
 8007e8c:	08009678 	.word	0x08009678

08007e90 <__multiply>:
 8007e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e94:	4691      	mov	r9, r2
 8007e96:	690a      	ldr	r2, [r1, #16]
 8007e98:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	bfb8      	it	lt
 8007ea0:	460b      	movlt	r3, r1
 8007ea2:	460c      	mov	r4, r1
 8007ea4:	bfbc      	itt	lt
 8007ea6:	464c      	movlt	r4, r9
 8007ea8:	4699      	movlt	r9, r3
 8007eaa:	6927      	ldr	r7, [r4, #16]
 8007eac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007eb0:	68a3      	ldr	r3, [r4, #8]
 8007eb2:	6861      	ldr	r1, [r4, #4]
 8007eb4:	eb07 060a 	add.w	r6, r7, sl
 8007eb8:	42b3      	cmp	r3, r6
 8007eba:	b085      	sub	sp, #20
 8007ebc:	bfb8      	it	lt
 8007ebe:	3101      	addlt	r1, #1
 8007ec0:	f7ff fed8 	bl	8007c74 <_Balloc>
 8007ec4:	b930      	cbnz	r0, 8007ed4 <__multiply+0x44>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	4b44      	ldr	r3, [pc, #272]	; (8007fdc <__multiply+0x14c>)
 8007eca:	4845      	ldr	r0, [pc, #276]	; (8007fe0 <__multiply+0x150>)
 8007ecc:	f240 115d 	movw	r1, #349	; 0x15d
 8007ed0:	f000 fbf4 	bl	80086bc <__assert_func>
 8007ed4:	f100 0514 	add.w	r5, r0, #20
 8007ed8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007edc:	462b      	mov	r3, r5
 8007ede:	2200      	movs	r2, #0
 8007ee0:	4543      	cmp	r3, r8
 8007ee2:	d321      	bcc.n	8007f28 <__multiply+0x98>
 8007ee4:	f104 0314 	add.w	r3, r4, #20
 8007ee8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007eec:	f109 0314 	add.w	r3, r9, #20
 8007ef0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007ef4:	9202      	str	r2, [sp, #8]
 8007ef6:	1b3a      	subs	r2, r7, r4
 8007ef8:	3a15      	subs	r2, #21
 8007efa:	f022 0203 	bic.w	r2, r2, #3
 8007efe:	3204      	adds	r2, #4
 8007f00:	f104 0115 	add.w	r1, r4, #21
 8007f04:	428f      	cmp	r7, r1
 8007f06:	bf38      	it	cc
 8007f08:	2204      	movcc	r2, #4
 8007f0a:	9201      	str	r2, [sp, #4]
 8007f0c:	9a02      	ldr	r2, [sp, #8]
 8007f0e:	9303      	str	r3, [sp, #12]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d80c      	bhi.n	8007f2e <__multiply+0x9e>
 8007f14:	2e00      	cmp	r6, #0
 8007f16:	dd03      	ble.n	8007f20 <__multiply+0x90>
 8007f18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d05a      	beq.n	8007fd6 <__multiply+0x146>
 8007f20:	6106      	str	r6, [r0, #16]
 8007f22:	b005      	add	sp, #20
 8007f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f28:	f843 2b04 	str.w	r2, [r3], #4
 8007f2c:	e7d8      	b.n	8007ee0 <__multiply+0x50>
 8007f2e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007f32:	f1ba 0f00 	cmp.w	sl, #0
 8007f36:	d024      	beq.n	8007f82 <__multiply+0xf2>
 8007f38:	f104 0e14 	add.w	lr, r4, #20
 8007f3c:	46a9      	mov	r9, r5
 8007f3e:	f04f 0c00 	mov.w	ip, #0
 8007f42:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007f46:	f8d9 1000 	ldr.w	r1, [r9]
 8007f4a:	fa1f fb82 	uxth.w	fp, r2
 8007f4e:	b289      	uxth	r1, r1
 8007f50:	fb0a 110b 	mla	r1, sl, fp, r1
 8007f54:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007f58:	f8d9 2000 	ldr.w	r2, [r9]
 8007f5c:	4461      	add	r1, ip
 8007f5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f62:	fb0a c20b 	mla	r2, sl, fp, ip
 8007f66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007f6a:	b289      	uxth	r1, r1
 8007f6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007f70:	4577      	cmp	r7, lr
 8007f72:	f849 1b04 	str.w	r1, [r9], #4
 8007f76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f7a:	d8e2      	bhi.n	8007f42 <__multiply+0xb2>
 8007f7c:	9a01      	ldr	r2, [sp, #4]
 8007f7e:	f845 c002 	str.w	ip, [r5, r2]
 8007f82:	9a03      	ldr	r2, [sp, #12]
 8007f84:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007f88:	3304      	adds	r3, #4
 8007f8a:	f1b9 0f00 	cmp.w	r9, #0
 8007f8e:	d020      	beq.n	8007fd2 <__multiply+0x142>
 8007f90:	6829      	ldr	r1, [r5, #0]
 8007f92:	f104 0c14 	add.w	ip, r4, #20
 8007f96:	46ae      	mov	lr, r5
 8007f98:	f04f 0a00 	mov.w	sl, #0
 8007f9c:	f8bc b000 	ldrh.w	fp, [ip]
 8007fa0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007fa4:	fb09 220b 	mla	r2, r9, fp, r2
 8007fa8:	4492      	add	sl, r2
 8007faa:	b289      	uxth	r1, r1
 8007fac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007fb0:	f84e 1b04 	str.w	r1, [lr], #4
 8007fb4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007fb8:	f8be 1000 	ldrh.w	r1, [lr]
 8007fbc:	0c12      	lsrs	r2, r2, #16
 8007fbe:	fb09 1102 	mla	r1, r9, r2, r1
 8007fc2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007fc6:	4567      	cmp	r7, ip
 8007fc8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007fcc:	d8e6      	bhi.n	8007f9c <__multiply+0x10c>
 8007fce:	9a01      	ldr	r2, [sp, #4]
 8007fd0:	50a9      	str	r1, [r5, r2]
 8007fd2:	3504      	adds	r5, #4
 8007fd4:	e79a      	b.n	8007f0c <__multiply+0x7c>
 8007fd6:	3e01      	subs	r6, #1
 8007fd8:	e79c      	b.n	8007f14 <__multiply+0x84>
 8007fda:	bf00      	nop
 8007fdc:	08009667 	.word	0x08009667
 8007fe0:	08009678 	.word	0x08009678

08007fe4 <__pow5mult>:
 8007fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fe8:	4615      	mov	r5, r2
 8007fea:	f012 0203 	ands.w	r2, r2, #3
 8007fee:	4606      	mov	r6, r0
 8007ff0:	460f      	mov	r7, r1
 8007ff2:	d007      	beq.n	8008004 <__pow5mult+0x20>
 8007ff4:	4c25      	ldr	r4, [pc, #148]	; (800808c <__pow5mult+0xa8>)
 8007ff6:	3a01      	subs	r2, #1
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ffe:	f7ff fe9b 	bl	8007d38 <__multadd>
 8008002:	4607      	mov	r7, r0
 8008004:	10ad      	asrs	r5, r5, #2
 8008006:	d03d      	beq.n	8008084 <__pow5mult+0xa0>
 8008008:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800800a:	b97c      	cbnz	r4, 800802c <__pow5mult+0x48>
 800800c:	2010      	movs	r0, #16
 800800e:	f7fe f9c1 	bl	8006394 <malloc>
 8008012:	4602      	mov	r2, r0
 8008014:	6270      	str	r0, [r6, #36]	; 0x24
 8008016:	b928      	cbnz	r0, 8008024 <__pow5mult+0x40>
 8008018:	4b1d      	ldr	r3, [pc, #116]	; (8008090 <__pow5mult+0xac>)
 800801a:	481e      	ldr	r0, [pc, #120]	; (8008094 <__pow5mult+0xb0>)
 800801c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008020:	f000 fb4c 	bl	80086bc <__assert_func>
 8008024:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008028:	6004      	str	r4, [r0, #0]
 800802a:	60c4      	str	r4, [r0, #12]
 800802c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008030:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008034:	b94c      	cbnz	r4, 800804a <__pow5mult+0x66>
 8008036:	f240 2171 	movw	r1, #625	; 0x271
 800803a:	4630      	mov	r0, r6
 800803c:	f7ff ff12 	bl	8007e64 <__i2b>
 8008040:	2300      	movs	r3, #0
 8008042:	f8c8 0008 	str.w	r0, [r8, #8]
 8008046:	4604      	mov	r4, r0
 8008048:	6003      	str	r3, [r0, #0]
 800804a:	f04f 0900 	mov.w	r9, #0
 800804e:	07eb      	lsls	r3, r5, #31
 8008050:	d50a      	bpl.n	8008068 <__pow5mult+0x84>
 8008052:	4639      	mov	r1, r7
 8008054:	4622      	mov	r2, r4
 8008056:	4630      	mov	r0, r6
 8008058:	f7ff ff1a 	bl	8007e90 <__multiply>
 800805c:	4639      	mov	r1, r7
 800805e:	4680      	mov	r8, r0
 8008060:	4630      	mov	r0, r6
 8008062:	f7ff fe47 	bl	8007cf4 <_Bfree>
 8008066:	4647      	mov	r7, r8
 8008068:	106d      	asrs	r5, r5, #1
 800806a:	d00b      	beq.n	8008084 <__pow5mult+0xa0>
 800806c:	6820      	ldr	r0, [r4, #0]
 800806e:	b938      	cbnz	r0, 8008080 <__pow5mult+0x9c>
 8008070:	4622      	mov	r2, r4
 8008072:	4621      	mov	r1, r4
 8008074:	4630      	mov	r0, r6
 8008076:	f7ff ff0b 	bl	8007e90 <__multiply>
 800807a:	6020      	str	r0, [r4, #0]
 800807c:	f8c0 9000 	str.w	r9, [r0]
 8008080:	4604      	mov	r4, r0
 8008082:	e7e4      	b.n	800804e <__pow5mult+0x6a>
 8008084:	4638      	mov	r0, r7
 8008086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800808a:	bf00      	nop
 800808c:	080097c8 	.word	0x080097c8
 8008090:	080095f5 	.word	0x080095f5
 8008094:	08009678 	.word	0x08009678

08008098 <__lshift>:
 8008098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800809c:	460c      	mov	r4, r1
 800809e:	6849      	ldr	r1, [r1, #4]
 80080a0:	6923      	ldr	r3, [r4, #16]
 80080a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80080a6:	68a3      	ldr	r3, [r4, #8]
 80080a8:	4607      	mov	r7, r0
 80080aa:	4691      	mov	r9, r2
 80080ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80080b0:	f108 0601 	add.w	r6, r8, #1
 80080b4:	42b3      	cmp	r3, r6
 80080b6:	db0b      	blt.n	80080d0 <__lshift+0x38>
 80080b8:	4638      	mov	r0, r7
 80080ba:	f7ff fddb 	bl	8007c74 <_Balloc>
 80080be:	4605      	mov	r5, r0
 80080c0:	b948      	cbnz	r0, 80080d6 <__lshift+0x3e>
 80080c2:	4602      	mov	r2, r0
 80080c4:	4b2a      	ldr	r3, [pc, #168]	; (8008170 <__lshift+0xd8>)
 80080c6:	482b      	ldr	r0, [pc, #172]	; (8008174 <__lshift+0xdc>)
 80080c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80080cc:	f000 faf6 	bl	80086bc <__assert_func>
 80080d0:	3101      	adds	r1, #1
 80080d2:	005b      	lsls	r3, r3, #1
 80080d4:	e7ee      	b.n	80080b4 <__lshift+0x1c>
 80080d6:	2300      	movs	r3, #0
 80080d8:	f100 0114 	add.w	r1, r0, #20
 80080dc:	f100 0210 	add.w	r2, r0, #16
 80080e0:	4618      	mov	r0, r3
 80080e2:	4553      	cmp	r3, sl
 80080e4:	db37      	blt.n	8008156 <__lshift+0xbe>
 80080e6:	6920      	ldr	r0, [r4, #16]
 80080e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080ec:	f104 0314 	add.w	r3, r4, #20
 80080f0:	f019 091f 	ands.w	r9, r9, #31
 80080f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80080f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80080fc:	d02f      	beq.n	800815e <__lshift+0xc6>
 80080fe:	f1c9 0e20 	rsb	lr, r9, #32
 8008102:	468a      	mov	sl, r1
 8008104:	f04f 0c00 	mov.w	ip, #0
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	fa02 f209 	lsl.w	r2, r2, r9
 800810e:	ea42 020c 	orr.w	r2, r2, ip
 8008112:	f84a 2b04 	str.w	r2, [sl], #4
 8008116:	f853 2b04 	ldr.w	r2, [r3], #4
 800811a:	4298      	cmp	r0, r3
 800811c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008120:	d8f2      	bhi.n	8008108 <__lshift+0x70>
 8008122:	1b03      	subs	r3, r0, r4
 8008124:	3b15      	subs	r3, #21
 8008126:	f023 0303 	bic.w	r3, r3, #3
 800812a:	3304      	adds	r3, #4
 800812c:	f104 0215 	add.w	r2, r4, #21
 8008130:	4290      	cmp	r0, r2
 8008132:	bf38      	it	cc
 8008134:	2304      	movcc	r3, #4
 8008136:	f841 c003 	str.w	ip, [r1, r3]
 800813a:	f1bc 0f00 	cmp.w	ip, #0
 800813e:	d001      	beq.n	8008144 <__lshift+0xac>
 8008140:	f108 0602 	add.w	r6, r8, #2
 8008144:	3e01      	subs	r6, #1
 8008146:	4638      	mov	r0, r7
 8008148:	612e      	str	r6, [r5, #16]
 800814a:	4621      	mov	r1, r4
 800814c:	f7ff fdd2 	bl	8007cf4 <_Bfree>
 8008150:	4628      	mov	r0, r5
 8008152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008156:	f842 0f04 	str.w	r0, [r2, #4]!
 800815a:	3301      	adds	r3, #1
 800815c:	e7c1      	b.n	80080e2 <__lshift+0x4a>
 800815e:	3904      	subs	r1, #4
 8008160:	f853 2b04 	ldr.w	r2, [r3], #4
 8008164:	f841 2f04 	str.w	r2, [r1, #4]!
 8008168:	4298      	cmp	r0, r3
 800816a:	d8f9      	bhi.n	8008160 <__lshift+0xc8>
 800816c:	e7ea      	b.n	8008144 <__lshift+0xac>
 800816e:	bf00      	nop
 8008170:	08009667 	.word	0x08009667
 8008174:	08009678 	.word	0x08009678

08008178 <__mcmp>:
 8008178:	b530      	push	{r4, r5, lr}
 800817a:	6902      	ldr	r2, [r0, #16]
 800817c:	690c      	ldr	r4, [r1, #16]
 800817e:	1b12      	subs	r2, r2, r4
 8008180:	d10e      	bne.n	80081a0 <__mcmp+0x28>
 8008182:	f100 0314 	add.w	r3, r0, #20
 8008186:	3114      	adds	r1, #20
 8008188:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800818c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008190:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008194:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008198:	42a5      	cmp	r5, r4
 800819a:	d003      	beq.n	80081a4 <__mcmp+0x2c>
 800819c:	d305      	bcc.n	80081aa <__mcmp+0x32>
 800819e:	2201      	movs	r2, #1
 80081a0:	4610      	mov	r0, r2
 80081a2:	bd30      	pop	{r4, r5, pc}
 80081a4:	4283      	cmp	r3, r0
 80081a6:	d3f3      	bcc.n	8008190 <__mcmp+0x18>
 80081a8:	e7fa      	b.n	80081a0 <__mcmp+0x28>
 80081aa:	f04f 32ff 	mov.w	r2, #4294967295
 80081ae:	e7f7      	b.n	80081a0 <__mcmp+0x28>

080081b0 <__mdiff>:
 80081b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b4:	460c      	mov	r4, r1
 80081b6:	4606      	mov	r6, r0
 80081b8:	4611      	mov	r1, r2
 80081ba:	4620      	mov	r0, r4
 80081bc:	4690      	mov	r8, r2
 80081be:	f7ff ffdb 	bl	8008178 <__mcmp>
 80081c2:	1e05      	subs	r5, r0, #0
 80081c4:	d110      	bne.n	80081e8 <__mdiff+0x38>
 80081c6:	4629      	mov	r1, r5
 80081c8:	4630      	mov	r0, r6
 80081ca:	f7ff fd53 	bl	8007c74 <_Balloc>
 80081ce:	b930      	cbnz	r0, 80081de <__mdiff+0x2e>
 80081d0:	4b3a      	ldr	r3, [pc, #232]	; (80082bc <__mdiff+0x10c>)
 80081d2:	4602      	mov	r2, r0
 80081d4:	f240 2132 	movw	r1, #562	; 0x232
 80081d8:	4839      	ldr	r0, [pc, #228]	; (80082c0 <__mdiff+0x110>)
 80081da:	f000 fa6f 	bl	80086bc <__assert_func>
 80081de:	2301      	movs	r3, #1
 80081e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80081e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081e8:	bfa4      	itt	ge
 80081ea:	4643      	movge	r3, r8
 80081ec:	46a0      	movge	r8, r4
 80081ee:	4630      	mov	r0, r6
 80081f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80081f4:	bfa6      	itte	ge
 80081f6:	461c      	movge	r4, r3
 80081f8:	2500      	movge	r5, #0
 80081fa:	2501      	movlt	r5, #1
 80081fc:	f7ff fd3a 	bl	8007c74 <_Balloc>
 8008200:	b920      	cbnz	r0, 800820c <__mdiff+0x5c>
 8008202:	4b2e      	ldr	r3, [pc, #184]	; (80082bc <__mdiff+0x10c>)
 8008204:	4602      	mov	r2, r0
 8008206:	f44f 7110 	mov.w	r1, #576	; 0x240
 800820a:	e7e5      	b.n	80081d8 <__mdiff+0x28>
 800820c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008210:	6926      	ldr	r6, [r4, #16]
 8008212:	60c5      	str	r5, [r0, #12]
 8008214:	f104 0914 	add.w	r9, r4, #20
 8008218:	f108 0514 	add.w	r5, r8, #20
 800821c:	f100 0e14 	add.w	lr, r0, #20
 8008220:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008224:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008228:	f108 0210 	add.w	r2, r8, #16
 800822c:	46f2      	mov	sl, lr
 800822e:	2100      	movs	r1, #0
 8008230:	f859 3b04 	ldr.w	r3, [r9], #4
 8008234:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008238:	fa1f f883 	uxth.w	r8, r3
 800823c:	fa11 f18b 	uxtah	r1, r1, fp
 8008240:	0c1b      	lsrs	r3, r3, #16
 8008242:	eba1 0808 	sub.w	r8, r1, r8
 8008246:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800824a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800824e:	fa1f f888 	uxth.w	r8, r8
 8008252:	1419      	asrs	r1, r3, #16
 8008254:	454e      	cmp	r6, r9
 8008256:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800825a:	f84a 3b04 	str.w	r3, [sl], #4
 800825e:	d8e7      	bhi.n	8008230 <__mdiff+0x80>
 8008260:	1b33      	subs	r3, r6, r4
 8008262:	3b15      	subs	r3, #21
 8008264:	f023 0303 	bic.w	r3, r3, #3
 8008268:	3304      	adds	r3, #4
 800826a:	3415      	adds	r4, #21
 800826c:	42a6      	cmp	r6, r4
 800826e:	bf38      	it	cc
 8008270:	2304      	movcc	r3, #4
 8008272:	441d      	add	r5, r3
 8008274:	4473      	add	r3, lr
 8008276:	469e      	mov	lr, r3
 8008278:	462e      	mov	r6, r5
 800827a:	4566      	cmp	r6, ip
 800827c:	d30e      	bcc.n	800829c <__mdiff+0xec>
 800827e:	f10c 0203 	add.w	r2, ip, #3
 8008282:	1b52      	subs	r2, r2, r5
 8008284:	f022 0203 	bic.w	r2, r2, #3
 8008288:	3d03      	subs	r5, #3
 800828a:	45ac      	cmp	ip, r5
 800828c:	bf38      	it	cc
 800828e:	2200      	movcc	r2, #0
 8008290:	441a      	add	r2, r3
 8008292:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008296:	b17b      	cbz	r3, 80082b8 <__mdiff+0x108>
 8008298:	6107      	str	r7, [r0, #16]
 800829a:	e7a3      	b.n	80081e4 <__mdiff+0x34>
 800829c:	f856 8b04 	ldr.w	r8, [r6], #4
 80082a0:	fa11 f288 	uxtah	r2, r1, r8
 80082a4:	1414      	asrs	r4, r2, #16
 80082a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80082aa:	b292      	uxth	r2, r2
 80082ac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80082b0:	f84e 2b04 	str.w	r2, [lr], #4
 80082b4:	1421      	asrs	r1, r4, #16
 80082b6:	e7e0      	b.n	800827a <__mdiff+0xca>
 80082b8:	3f01      	subs	r7, #1
 80082ba:	e7ea      	b.n	8008292 <__mdiff+0xe2>
 80082bc:	08009667 	.word	0x08009667
 80082c0:	08009678 	.word	0x08009678

080082c4 <__d2b>:
 80082c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80082c8:	4689      	mov	r9, r1
 80082ca:	2101      	movs	r1, #1
 80082cc:	ec57 6b10 	vmov	r6, r7, d0
 80082d0:	4690      	mov	r8, r2
 80082d2:	f7ff fccf 	bl	8007c74 <_Balloc>
 80082d6:	4604      	mov	r4, r0
 80082d8:	b930      	cbnz	r0, 80082e8 <__d2b+0x24>
 80082da:	4602      	mov	r2, r0
 80082dc:	4b25      	ldr	r3, [pc, #148]	; (8008374 <__d2b+0xb0>)
 80082de:	4826      	ldr	r0, [pc, #152]	; (8008378 <__d2b+0xb4>)
 80082e0:	f240 310a 	movw	r1, #778	; 0x30a
 80082e4:	f000 f9ea 	bl	80086bc <__assert_func>
 80082e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80082ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80082f0:	bb35      	cbnz	r5, 8008340 <__d2b+0x7c>
 80082f2:	2e00      	cmp	r6, #0
 80082f4:	9301      	str	r3, [sp, #4]
 80082f6:	d028      	beq.n	800834a <__d2b+0x86>
 80082f8:	4668      	mov	r0, sp
 80082fa:	9600      	str	r6, [sp, #0]
 80082fc:	f7ff fd82 	bl	8007e04 <__lo0bits>
 8008300:	9900      	ldr	r1, [sp, #0]
 8008302:	b300      	cbz	r0, 8008346 <__d2b+0x82>
 8008304:	9a01      	ldr	r2, [sp, #4]
 8008306:	f1c0 0320 	rsb	r3, r0, #32
 800830a:	fa02 f303 	lsl.w	r3, r2, r3
 800830e:	430b      	orrs	r3, r1
 8008310:	40c2      	lsrs	r2, r0
 8008312:	6163      	str	r3, [r4, #20]
 8008314:	9201      	str	r2, [sp, #4]
 8008316:	9b01      	ldr	r3, [sp, #4]
 8008318:	61a3      	str	r3, [r4, #24]
 800831a:	2b00      	cmp	r3, #0
 800831c:	bf14      	ite	ne
 800831e:	2202      	movne	r2, #2
 8008320:	2201      	moveq	r2, #1
 8008322:	6122      	str	r2, [r4, #16]
 8008324:	b1d5      	cbz	r5, 800835c <__d2b+0x98>
 8008326:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800832a:	4405      	add	r5, r0
 800832c:	f8c9 5000 	str.w	r5, [r9]
 8008330:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008334:	f8c8 0000 	str.w	r0, [r8]
 8008338:	4620      	mov	r0, r4
 800833a:	b003      	add	sp, #12
 800833c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008340:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008344:	e7d5      	b.n	80082f2 <__d2b+0x2e>
 8008346:	6161      	str	r1, [r4, #20]
 8008348:	e7e5      	b.n	8008316 <__d2b+0x52>
 800834a:	a801      	add	r0, sp, #4
 800834c:	f7ff fd5a 	bl	8007e04 <__lo0bits>
 8008350:	9b01      	ldr	r3, [sp, #4]
 8008352:	6163      	str	r3, [r4, #20]
 8008354:	2201      	movs	r2, #1
 8008356:	6122      	str	r2, [r4, #16]
 8008358:	3020      	adds	r0, #32
 800835a:	e7e3      	b.n	8008324 <__d2b+0x60>
 800835c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008360:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008364:	f8c9 0000 	str.w	r0, [r9]
 8008368:	6918      	ldr	r0, [r3, #16]
 800836a:	f7ff fd2b 	bl	8007dc4 <__hi0bits>
 800836e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008372:	e7df      	b.n	8008334 <__d2b+0x70>
 8008374:	08009667 	.word	0x08009667
 8008378:	08009678 	.word	0x08009678

0800837c <_calloc_r>:
 800837c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800837e:	fba1 2402 	umull	r2, r4, r1, r2
 8008382:	b94c      	cbnz	r4, 8008398 <_calloc_r+0x1c>
 8008384:	4611      	mov	r1, r2
 8008386:	9201      	str	r2, [sp, #4]
 8008388:	f7fe f896 	bl	80064b8 <_malloc_r>
 800838c:	9a01      	ldr	r2, [sp, #4]
 800838e:	4605      	mov	r5, r0
 8008390:	b930      	cbnz	r0, 80083a0 <_calloc_r+0x24>
 8008392:	4628      	mov	r0, r5
 8008394:	b003      	add	sp, #12
 8008396:	bd30      	pop	{r4, r5, pc}
 8008398:	220c      	movs	r2, #12
 800839a:	6002      	str	r2, [r0, #0]
 800839c:	2500      	movs	r5, #0
 800839e:	e7f8      	b.n	8008392 <_calloc_r+0x16>
 80083a0:	4621      	mov	r1, r4
 80083a2:	f7fe f815 	bl	80063d0 <memset>
 80083a6:	e7f4      	b.n	8008392 <_calloc_r+0x16>

080083a8 <_realloc_r>:
 80083a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083ac:	4680      	mov	r8, r0
 80083ae:	4614      	mov	r4, r2
 80083b0:	460e      	mov	r6, r1
 80083b2:	b921      	cbnz	r1, 80083be <_realloc_r+0x16>
 80083b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083b8:	4611      	mov	r1, r2
 80083ba:	f7fe b87d 	b.w	80064b8 <_malloc_r>
 80083be:	b92a      	cbnz	r2, 80083cc <_realloc_r+0x24>
 80083c0:	f7fe f80e 	bl	80063e0 <_free_r>
 80083c4:	4625      	mov	r5, r4
 80083c6:	4628      	mov	r0, r5
 80083c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083cc:	f000 f9d5 	bl	800877a <_malloc_usable_size_r>
 80083d0:	4284      	cmp	r4, r0
 80083d2:	4607      	mov	r7, r0
 80083d4:	d802      	bhi.n	80083dc <_realloc_r+0x34>
 80083d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80083da:	d812      	bhi.n	8008402 <_realloc_r+0x5a>
 80083dc:	4621      	mov	r1, r4
 80083de:	4640      	mov	r0, r8
 80083e0:	f7fe f86a 	bl	80064b8 <_malloc_r>
 80083e4:	4605      	mov	r5, r0
 80083e6:	2800      	cmp	r0, #0
 80083e8:	d0ed      	beq.n	80083c6 <_realloc_r+0x1e>
 80083ea:	42bc      	cmp	r4, r7
 80083ec:	4622      	mov	r2, r4
 80083ee:	4631      	mov	r1, r6
 80083f0:	bf28      	it	cs
 80083f2:	463a      	movcs	r2, r7
 80083f4:	f7fd ffde 	bl	80063b4 <memcpy>
 80083f8:	4631      	mov	r1, r6
 80083fa:	4640      	mov	r0, r8
 80083fc:	f7fd fff0 	bl	80063e0 <_free_r>
 8008400:	e7e1      	b.n	80083c6 <_realloc_r+0x1e>
 8008402:	4635      	mov	r5, r6
 8008404:	e7df      	b.n	80083c6 <_realloc_r+0x1e>

08008406 <__ssputs_r>:
 8008406:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800840a:	688e      	ldr	r6, [r1, #8]
 800840c:	429e      	cmp	r6, r3
 800840e:	4682      	mov	sl, r0
 8008410:	460c      	mov	r4, r1
 8008412:	4690      	mov	r8, r2
 8008414:	461f      	mov	r7, r3
 8008416:	d838      	bhi.n	800848a <__ssputs_r+0x84>
 8008418:	898a      	ldrh	r2, [r1, #12]
 800841a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800841e:	d032      	beq.n	8008486 <__ssputs_r+0x80>
 8008420:	6825      	ldr	r5, [r4, #0]
 8008422:	6909      	ldr	r1, [r1, #16]
 8008424:	eba5 0901 	sub.w	r9, r5, r1
 8008428:	6965      	ldr	r5, [r4, #20]
 800842a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800842e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008432:	3301      	adds	r3, #1
 8008434:	444b      	add	r3, r9
 8008436:	106d      	asrs	r5, r5, #1
 8008438:	429d      	cmp	r5, r3
 800843a:	bf38      	it	cc
 800843c:	461d      	movcc	r5, r3
 800843e:	0553      	lsls	r3, r2, #21
 8008440:	d531      	bpl.n	80084a6 <__ssputs_r+0xa0>
 8008442:	4629      	mov	r1, r5
 8008444:	f7fe f838 	bl	80064b8 <_malloc_r>
 8008448:	4606      	mov	r6, r0
 800844a:	b950      	cbnz	r0, 8008462 <__ssputs_r+0x5c>
 800844c:	230c      	movs	r3, #12
 800844e:	f8ca 3000 	str.w	r3, [sl]
 8008452:	89a3      	ldrh	r3, [r4, #12]
 8008454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008458:	81a3      	strh	r3, [r4, #12]
 800845a:	f04f 30ff 	mov.w	r0, #4294967295
 800845e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008462:	6921      	ldr	r1, [r4, #16]
 8008464:	464a      	mov	r2, r9
 8008466:	f7fd ffa5 	bl	80063b4 <memcpy>
 800846a:	89a3      	ldrh	r3, [r4, #12]
 800846c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008474:	81a3      	strh	r3, [r4, #12]
 8008476:	6126      	str	r6, [r4, #16]
 8008478:	6165      	str	r5, [r4, #20]
 800847a:	444e      	add	r6, r9
 800847c:	eba5 0509 	sub.w	r5, r5, r9
 8008480:	6026      	str	r6, [r4, #0]
 8008482:	60a5      	str	r5, [r4, #8]
 8008484:	463e      	mov	r6, r7
 8008486:	42be      	cmp	r6, r7
 8008488:	d900      	bls.n	800848c <__ssputs_r+0x86>
 800848a:	463e      	mov	r6, r7
 800848c:	6820      	ldr	r0, [r4, #0]
 800848e:	4632      	mov	r2, r6
 8008490:	4641      	mov	r1, r8
 8008492:	f000 f958 	bl	8008746 <memmove>
 8008496:	68a3      	ldr	r3, [r4, #8]
 8008498:	1b9b      	subs	r3, r3, r6
 800849a:	60a3      	str	r3, [r4, #8]
 800849c:	6823      	ldr	r3, [r4, #0]
 800849e:	4433      	add	r3, r6
 80084a0:	6023      	str	r3, [r4, #0]
 80084a2:	2000      	movs	r0, #0
 80084a4:	e7db      	b.n	800845e <__ssputs_r+0x58>
 80084a6:	462a      	mov	r2, r5
 80084a8:	f7ff ff7e 	bl	80083a8 <_realloc_r>
 80084ac:	4606      	mov	r6, r0
 80084ae:	2800      	cmp	r0, #0
 80084b0:	d1e1      	bne.n	8008476 <__ssputs_r+0x70>
 80084b2:	6921      	ldr	r1, [r4, #16]
 80084b4:	4650      	mov	r0, sl
 80084b6:	f7fd ff93 	bl	80063e0 <_free_r>
 80084ba:	e7c7      	b.n	800844c <__ssputs_r+0x46>

080084bc <_svfiprintf_r>:
 80084bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c0:	4698      	mov	r8, r3
 80084c2:	898b      	ldrh	r3, [r1, #12]
 80084c4:	061b      	lsls	r3, r3, #24
 80084c6:	b09d      	sub	sp, #116	; 0x74
 80084c8:	4607      	mov	r7, r0
 80084ca:	460d      	mov	r5, r1
 80084cc:	4614      	mov	r4, r2
 80084ce:	d50e      	bpl.n	80084ee <_svfiprintf_r+0x32>
 80084d0:	690b      	ldr	r3, [r1, #16]
 80084d2:	b963      	cbnz	r3, 80084ee <_svfiprintf_r+0x32>
 80084d4:	2140      	movs	r1, #64	; 0x40
 80084d6:	f7fd ffef 	bl	80064b8 <_malloc_r>
 80084da:	6028      	str	r0, [r5, #0]
 80084dc:	6128      	str	r0, [r5, #16]
 80084de:	b920      	cbnz	r0, 80084ea <_svfiprintf_r+0x2e>
 80084e0:	230c      	movs	r3, #12
 80084e2:	603b      	str	r3, [r7, #0]
 80084e4:	f04f 30ff 	mov.w	r0, #4294967295
 80084e8:	e0d1      	b.n	800868e <_svfiprintf_r+0x1d2>
 80084ea:	2340      	movs	r3, #64	; 0x40
 80084ec:	616b      	str	r3, [r5, #20]
 80084ee:	2300      	movs	r3, #0
 80084f0:	9309      	str	r3, [sp, #36]	; 0x24
 80084f2:	2320      	movs	r3, #32
 80084f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80084fc:	2330      	movs	r3, #48	; 0x30
 80084fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80086a8 <_svfiprintf_r+0x1ec>
 8008502:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008506:	f04f 0901 	mov.w	r9, #1
 800850a:	4623      	mov	r3, r4
 800850c:	469a      	mov	sl, r3
 800850e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008512:	b10a      	cbz	r2, 8008518 <_svfiprintf_r+0x5c>
 8008514:	2a25      	cmp	r2, #37	; 0x25
 8008516:	d1f9      	bne.n	800850c <_svfiprintf_r+0x50>
 8008518:	ebba 0b04 	subs.w	fp, sl, r4
 800851c:	d00b      	beq.n	8008536 <_svfiprintf_r+0x7a>
 800851e:	465b      	mov	r3, fp
 8008520:	4622      	mov	r2, r4
 8008522:	4629      	mov	r1, r5
 8008524:	4638      	mov	r0, r7
 8008526:	f7ff ff6e 	bl	8008406 <__ssputs_r>
 800852a:	3001      	adds	r0, #1
 800852c:	f000 80aa 	beq.w	8008684 <_svfiprintf_r+0x1c8>
 8008530:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008532:	445a      	add	r2, fp
 8008534:	9209      	str	r2, [sp, #36]	; 0x24
 8008536:	f89a 3000 	ldrb.w	r3, [sl]
 800853a:	2b00      	cmp	r3, #0
 800853c:	f000 80a2 	beq.w	8008684 <_svfiprintf_r+0x1c8>
 8008540:	2300      	movs	r3, #0
 8008542:	f04f 32ff 	mov.w	r2, #4294967295
 8008546:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800854a:	f10a 0a01 	add.w	sl, sl, #1
 800854e:	9304      	str	r3, [sp, #16]
 8008550:	9307      	str	r3, [sp, #28]
 8008552:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008556:	931a      	str	r3, [sp, #104]	; 0x68
 8008558:	4654      	mov	r4, sl
 800855a:	2205      	movs	r2, #5
 800855c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008560:	4851      	ldr	r0, [pc, #324]	; (80086a8 <_svfiprintf_r+0x1ec>)
 8008562:	f7f7 fe45 	bl	80001f0 <memchr>
 8008566:	9a04      	ldr	r2, [sp, #16]
 8008568:	b9d8      	cbnz	r0, 80085a2 <_svfiprintf_r+0xe6>
 800856a:	06d0      	lsls	r0, r2, #27
 800856c:	bf44      	itt	mi
 800856e:	2320      	movmi	r3, #32
 8008570:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008574:	0711      	lsls	r1, r2, #28
 8008576:	bf44      	itt	mi
 8008578:	232b      	movmi	r3, #43	; 0x2b
 800857a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800857e:	f89a 3000 	ldrb.w	r3, [sl]
 8008582:	2b2a      	cmp	r3, #42	; 0x2a
 8008584:	d015      	beq.n	80085b2 <_svfiprintf_r+0xf6>
 8008586:	9a07      	ldr	r2, [sp, #28]
 8008588:	4654      	mov	r4, sl
 800858a:	2000      	movs	r0, #0
 800858c:	f04f 0c0a 	mov.w	ip, #10
 8008590:	4621      	mov	r1, r4
 8008592:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008596:	3b30      	subs	r3, #48	; 0x30
 8008598:	2b09      	cmp	r3, #9
 800859a:	d94e      	bls.n	800863a <_svfiprintf_r+0x17e>
 800859c:	b1b0      	cbz	r0, 80085cc <_svfiprintf_r+0x110>
 800859e:	9207      	str	r2, [sp, #28]
 80085a0:	e014      	b.n	80085cc <_svfiprintf_r+0x110>
 80085a2:	eba0 0308 	sub.w	r3, r0, r8
 80085a6:	fa09 f303 	lsl.w	r3, r9, r3
 80085aa:	4313      	orrs	r3, r2
 80085ac:	9304      	str	r3, [sp, #16]
 80085ae:	46a2      	mov	sl, r4
 80085b0:	e7d2      	b.n	8008558 <_svfiprintf_r+0x9c>
 80085b2:	9b03      	ldr	r3, [sp, #12]
 80085b4:	1d19      	adds	r1, r3, #4
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	9103      	str	r1, [sp, #12]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	bfbb      	ittet	lt
 80085be:	425b      	neglt	r3, r3
 80085c0:	f042 0202 	orrlt.w	r2, r2, #2
 80085c4:	9307      	strge	r3, [sp, #28]
 80085c6:	9307      	strlt	r3, [sp, #28]
 80085c8:	bfb8      	it	lt
 80085ca:	9204      	strlt	r2, [sp, #16]
 80085cc:	7823      	ldrb	r3, [r4, #0]
 80085ce:	2b2e      	cmp	r3, #46	; 0x2e
 80085d0:	d10c      	bne.n	80085ec <_svfiprintf_r+0x130>
 80085d2:	7863      	ldrb	r3, [r4, #1]
 80085d4:	2b2a      	cmp	r3, #42	; 0x2a
 80085d6:	d135      	bne.n	8008644 <_svfiprintf_r+0x188>
 80085d8:	9b03      	ldr	r3, [sp, #12]
 80085da:	1d1a      	adds	r2, r3, #4
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	9203      	str	r2, [sp, #12]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	bfb8      	it	lt
 80085e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80085e8:	3402      	adds	r4, #2
 80085ea:	9305      	str	r3, [sp, #20]
 80085ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80086b8 <_svfiprintf_r+0x1fc>
 80085f0:	7821      	ldrb	r1, [r4, #0]
 80085f2:	2203      	movs	r2, #3
 80085f4:	4650      	mov	r0, sl
 80085f6:	f7f7 fdfb 	bl	80001f0 <memchr>
 80085fa:	b140      	cbz	r0, 800860e <_svfiprintf_r+0x152>
 80085fc:	2340      	movs	r3, #64	; 0x40
 80085fe:	eba0 000a 	sub.w	r0, r0, sl
 8008602:	fa03 f000 	lsl.w	r0, r3, r0
 8008606:	9b04      	ldr	r3, [sp, #16]
 8008608:	4303      	orrs	r3, r0
 800860a:	3401      	adds	r4, #1
 800860c:	9304      	str	r3, [sp, #16]
 800860e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008612:	4826      	ldr	r0, [pc, #152]	; (80086ac <_svfiprintf_r+0x1f0>)
 8008614:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008618:	2206      	movs	r2, #6
 800861a:	f7f7 fde9 	bl	80001f0 <memchr>
 800861e:	2800      	cmp	r0, #0
 8008620:	d038      	beq.n	8008694 <_svfiprintf_r+0x1d8>
 8008622:	4b23      	ldr	r3, [pc, #140]	; (80086b0 <_svfiprintf_r+0x1f4>)
 8008624:	bb1b      	cbnz	r3, 800866e <_svfiprintf_r+0x1b2>
 8008626:	9b03      	ldr	r3, [sp, #12]
 8008628:	3307      	adds	r3, #7
 800862a:	f023 0307 	bic.w	r3, r3, #7
 800862e:	3308      	adds	r3, #8
 8008630:	9303      	str	r3, [sp, #12]
 8008632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008634:	4433      	add	r3, r6
 8008636:	9309      	str	r3, [sp, #36]	; 0x24
 8008638:	e767      	b.n	800850a <_svfiprintf_r+0x4e>
 800863a:	fb0c 3202 	mla	r2, ip, r2, r3
 800863e:	460c      	mov	r4, r1
 8008640:	2001      	movs	r0, #1
 8008642:	e7a5      	b.n	8008590 <_svfiprintf_r+0xd4>
 8008644:	2300      	movs	r3, #0
 8008646:	3401      	adds	r4, #1
 8008648:	9305      	str	r3, [sp, #20]
 800864a:	4619      	mov	r1, r3
 800864c:	f04f 0c0a 	mov.w	ip, #10
 8008650:	4620      	mov	r0, r4
 8008652:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008656:	3a30      	subs	r2, #48	; 0x30
 8008658:	2a09      	cmp	r2, #9
 800865a:	d903      	bls.n	8008664 <_svfiprintf_r+0x1a8>
 800865c:	2b00      	cmp	r3, #0
 800865e:	d0c5      	beq.n	80085ec <_svfiprintf_r+0x130>
 8008660:	9105      	str	r1, [sp, #20]
 8008662:	e7c3      	b.n	80085ec <_svfiprintf_r+0x130>
 8008664:	fb0c 2101 	mla	r1, ip, r1, r2
 8008668:	4604      	mov	r4, r0
 800866a:	2301      	movs	r3, #1
 800866c:	e7f0      	b.n	8008650 <_svfiprintf_r+0x194>
 800866e:	ab03      	add	r3, sp, #12
 8008670:	9300      	str	r3, [sp, #0]
 8008672:	462a      	mov	r2, r5
 8008674:	4b0f      	ldr	r3, [pc, #60]	; (80086b4 <_svfiprintf_r+0x1f8>)
 8008676:	a904      	add	r1, sp, #16
 8008678:	4638      	mov	r0, r7
 800867a:	f7fe f831 	bl	80066e0 <_printf_float>
 800867e:	1c42      	adds	r2, r0, #1
 8008680:	4606      	mov	r6, r0
 8008682:	d1d6      	bne.n	8008632 <_svfiprintf_r+0x176>
 8008684:	89ab      	ldrh	r3, [r5, #12]
 8008686:	065b      	lsls	r3, r3, #25
 8008688:	f53f af2c 	bmi.w	80084e4 <_svfiprintf_r+0x28>
 800868c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800868e:	b01d      	add	sp, #116	; 0x74
 8008690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008694:	ab03      	add	r3, sp, #12
 8008696:	9300      	str	r3, [sp, #0]
 8008698:	462a      	mov	r2, r5
 800869a:	4b06      	ldr	r3, [pc, #24]	; (80086b4 <_svfiprintf_r+0x1f8>)
 800869c:	a904      	add	r1, sp, #16
 800869e:	4638      	mov	r0, r7
 80086a0:	f7fe fac2 	bl	8006c28 <_printf_i>
 80086a4:	e7eb      	b.n	800867e <_svfiprintf_r+0x1c2>
 80086a6:	bf00      	nop
 80086a8:	080097d4 	.word	0x080097d4
 80086ac:	080097de 	.word	0x080097de
 80086b0:	080066e1 	.word	0x080066e1
 80086b4:	08008407 	.word	0x08008407
 80086b8:	080097da 	.word	0x080097da

080086bc <__assert_func>:
 80086bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086be:	4614      	mov	r4, r2
 80086c0:	461a      	mov	r2, r3
 80086c2:	4b09      	ldr	r3, [pc, #36]	; (80086e8 <__assert_func+0x2c>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4605      	mov	r5, r0
 80086c8:	68d8      	ldr	r0, [r3, #12]
 80086ca:	b14c      	cbz	r4, 80086e0 <__assert_func+0x24>
 80086cc:	4b07      	ldr	r3, [pc, #28]	; (80086ec <__assert_func+0x30>)
 80086ce:	9100      	str	r1, [sp, #0]
 80086d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086d4:	4906      	ldr	r1, [pc, #24]	; (80086f0 <__assert_func+0x34>)
 80086d6:	462b      	mov	r3, r5
 80086d8:	f000 f80e 	bl	80086f8 <fiprintf>
 80086dc:	f7fd fe28 	bl	8006330 <abort>
 80086e0:	4b04      	ldr	r3, [pc, #16]	; (80086f4 <__assert_func+0x38>)
 80086e2:	461c      	mov	r4, r3
 80086e4:	e7f3      	b.n	80086ce <__assert_func+0x12>
 80086e6:	bf00      	nop
 80086e8:	2000043c 	.word	0x2000043c
 80086ec:	080097e5 	.word	0x080097e5
 80086f0:	080097f2 	.word	0x080097f2
 80086f4:	08009820 	.word	0x08009820

080086f8 <fiprintf>:
 80086f8:	b40e      	push	{r1, r2, r3}
 80086fa:	b503      	push	{r0, r1, lr}
 80086fc:	4601      	mov	r1, r0
 80086fe:	ab03      	add	r3, sp, #12
 8008700:	4805      	ldr	r0, [pc, #20]	; (8008718 <fiprintf+0x20>)
 8008702:	f853 2b04 	ldr.w	r2, [r3], #4
 8008706:	6800      	ldr	r0, [r0, #0]
 8008708:	9301      	str	r3, [sp, #4]
 800870a:	f000 f867 	bl	80087dc <_vfiprintf_r>
 800870e:	b002      	add	sp, #8
 8008710:	f85d eb04 	ldr.w	lr, [sp], #4
 8008714:	b003      	add	sp, #12
 8008716:	4770      	bx	lr
 8008718:	2000043c 	.word	0x2000043c

0800871c <__retarget_lock_init_recursive>:
 800871c:	4770      	bx	lr

0800871e <__retarget_lock_acquire_recursive>:
 800871e:	4770      	bx	lr

08008720 <__retarget_lock_release_recursive>:
 8008720:	4770      	bx	lr

08008722 <__ascii_mbtowc>:
 8008722:	b082      	sub	sp, #8
 8008724:	b901      	cbnz	r1, 8008728 <__ascii_mbtowc+0x6>
 8008726:	a901      	add	r1, sp, #4
 8008728:	b142      	cbz	r2, 800873c <__ascii_mbtowc+0x1a>
 800872a:	b14b      	cbz	r3, 8008740 <__ascii_mbtowc+0x1e>
 800872c:	7813      	ldrb	r3, [r2, #0]
 800872e:	600b      	str	r3, [r1, #0]
 8008730:	7812      	ldrb	r2, [r2, #0]
 8008732:	1e10      	subs	r0, r2, #0
 8008734:	bf18      	it	ne
 8008736:	2001      	movne	r0, #1
 8008738:	b002      	add	sp, #8
 800873a:	4770      	bx	lr
 800873c:	4610      	mov	r0, r2
 800873e:	e7fb      	b.n	8008738 <__ascii_mbtowc+0x16>
 8008740:	f06f 0001 	mvn.w	r0, #1
 8008744:	e7f8      	b.n	8008738 <__ascii_mbtowc+0x16>

08008746 <memmove>:
 8008746:	4288      	cmp	r0, r1
 8008748:	b510      	push	{r4, lr}
 800874a:	eb01 0402 	add.w	r4, r1, r2
 800874e:	d902      	bls.n	8008756 <memmove+0x10>
 8008750:	4284      	cmp	r4, r0
 8008752:	4623      	mov	r3, r4
 8008754:	d807      	bhi.n	8008766 <memmove+0x20>
 8008756:	1e43      	subs	r3, r0, #1
 8008758:	42a1      	cmp	r1, r4
 800875a:	d008      	beq.n	800876e <memmove+0x28>
 800875c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008760:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008764:	e7f8      	b.n	8008758 <memmove+0x12>
 8008766:	4402      	add	r2, r0
 8008768:	4601      	mov	r1, r0
 800876a:	428a      	cmp	r2, r1
 800876c:	d100      	bne.n	8008770 <memmove+0x2a>
 800876e:	bd10      	pop	{r4, pc}
 8008770:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008774:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008778:	e7f7      	b.n	800876a <memmove+0x24>

0800877a <_malloc_usable_size_r>:
 800877a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800877e:	1f18      	subs	r0, r3, #4
 8008780:	2b00      	cmp	r3, #0
 8008782:	bfbc      	itt	lt
 8008784:	580b      	ldrlt	r3, [r1, r0]
 8008786:	18c0      	addlt	r0, r0, r3
 8008788:	4770      	bx	lr

0800878a <__sfputc_r>:
 800878a:	6893      	ldr	r3, [r2, #8]
 800878c:	3b01      	subs	r3, #1
 800878e:	2b00      	cmp	r3, #0
 8008790:	b410      	push	{r4}
 8008792:	6093      	str	r3, [r2, #8]
 8008794:	da08      	bge.n	80087a8 <__sfputc_r+0x1e>
 8008796:	6994      	ldr	r4, [r2, #24]
 8008798:	42a3      	cmp	r3, r4
 800879a:	db01      	blt.n	80087a0 <__sfputc_r+0x16>
 800879c:	290a      	cmp	r1, #10
 800879e:	d103      	bne.n	80087a8 <__sfputc_r+0x1e>
 80087a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087a4:	f000 b94a 	b.w	8008a3c <__swbuf_r>
 80087a8:	6813      	ldr	r3, [r2, #0]
 80087aa:	1c58      	adds	r0, r3, #1
 80087ac:	6010      	str	r0, [r2, #0]
 80087ae:	7019      	strb	r1, [r3, #0]
 80087b0:	4608      	mov	r0, r1
 80087b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <__sfputs_r>:
 80087b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ba:	4606      	mov	r6, r0
 80087bc:	460f      	mov	r7, r1
 80087be:	4614      	mov	r4, r2
 80087c0:	18d5      	adds	r5, r2, r3
 80087c2:	42ac      	cmp	r4, r5
 80087c4:	d101      	bne.n	80087ca <__sfputs_r+0x12>
 80087c6:	2000      	movs	r0, #0
 80087c8:	e007      	b.n	80087da <__sfputs_r+0x22>
 80087ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ce:	463a      	mov	r2, r7
 80087d0:	4630      	mov	r0, r6
 80087d2:	f7ff ffda 	bl	800878a <__sfputc_r>
 80087d6:	1c43      	adds	r3, r0, #1
 80087d8:	d1f3      	bne.n	80087c2 <__sfputs_r+0xa>
 80087da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080087dc <_vfiprintf_r>:
 80087dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e0:	460d      	mov	r5, r1
 80087e2:	b09d      	sub	sp, #116	; 0x74
 80087e4:	4614      	mov	r4, r2
 80087e6:	4698      	mov	r8, r3
 80087e8:	4606      	mov	r6, r0
 80087ea:	b118      	cbz	r0, 80087f4 <_vfiprintf_r+0x18>
 80087ec:	6983      	ldr	r3, [r0, #24]
 80087ee:	b90b      	cbnz	r3, 80087f4 <_vfiprintf_r+0x18>
 80087f0:	f000 fb0c 	bl	8008e0c <__sinit>
 80087f4:	4b89      	ldr	r3, [pc, #548]	; (8008a1c <_vfiprintf_r+0x240>)
 80087f6:	429d      	cmp	r5, r3
 80087f8:	d11b      	bne.n	8008832 <_vfiprintf_r+0x56>
 80087fa:	6875      	ldr	r5, [r6, #4]
 80087fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087fe:	07d9      	lsls	r1, r3, #31
 8008800:	d405      	bmi.n	800880e <_vfiprintf_r+0x32>
 8008802:	89ab      	ldrh	r3, [r5, #12]
 8008804:	059a      	lsls	r2, r3, #22
 8008806:	d402      	bmi.n	800880e <_vfiprintf_r+0x32>
 8008808:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800880a:	f7ff ff88 	bl	800871e <__retarget_lock_acquire_recursive>
 800880e:	89ab      	ldrh	r3, [r5, #12]
 8008810:	071b      	lsls	r3, r3, #28
 8008812:	d501      	bpl.n	8008818 <_vfiprintf_r+0x3c>
 8008814:	692b      	ldr	r3, [r5, #16]
 8008816:	b9eb      	cbnz	r3, 8008854 <_vfiprintf_r+0x78>
 8008818:	4629      	mov	r1, r5
 800881a:	4630      	mov	r0, r6
 800881c:	f000 f96e 	bl	8008afc <__swsetup_r>
 8008820:	b1c0      	cbz	r0, 8008854 <_vfiprintf_r+0x78>
 8008822:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008824:	07dc      	lsls	r4, r3, #31
 8008826:	d50e      	bpl.n	8008846 <_vfiprintf_r+0x6a>
 8008828:	f04f 30ff 	mov.w	r0, #4294967295
 800882c:	b01d      	add	sp, #116	; 0x74
 800882e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008832:	4b7b      	ldr	r3, [pc, #492]	; (8008a20 <_vfiprintf_r+0x244>)
 8008834:	429d      	cmp	r5, r3
 8008836:	d101      	bne.n	800883c <_vfiprintf_r+0x60>
 8008838:	68b5      	ldr	r5, [r6, #8]
 800883a:	e7df      	b.n	80087fc <_vfiprintf_r+0x20>
 800883c:	4b79      	ldr	r3, [pc, #484]	; (8008a24 <_vfiprintf_r+0x248>)
 800883e:	429d      	cmp	r5, r3
 8008840:	bf08      	it	eq
 8008842:	68f5      	ldreq	r5, [r6, #12]
 8008844:	e7da      	b.n	80087fc <_vfiprintf_r+0x20>
 8008846:	89ab      	ldrh	r3, [r5, #12]
 8008848:	0598      	lsls	r0, r3, #22
 800884a:	d4ed      	bmi.n	8008828 <_vfiprintf_r+0x4c>
 800884c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800884e:	f7ff ff67 	bl	8008720 <__retarget_lock_release_recursive>
 8008852:	e7e9      	b.n	8008828 <_vfiprintf_r+0x4c>
 8008854:	2300      	movs	r3, #0
 8008856:	9309      	str	r3, [sp, #36]	; 0x24
 8008858:	2320      	movs	r3, #32
 800885a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800885e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008862:	2330      	movs	r3, #48	; 0x30
 8008864:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008a28 <_vfiprintf_r+0x24c>
 8008868:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800886c:	f04f 0901 	mov.w	r9, #1
 8008870:	4623      	mov	r3, r4
 8008872:	469a      	mov	sl, r3
 8008874:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008878:	b10a      	cbz	r2, 800887e <_vfiprintf_r+0xa2>
 800887a:	2a25      	cmp	r2, #37	; 0x25
 800887c:	d1f9      	bne.n	8008872 <_vfiprintf_r+0x96>
 800887e:	ebba 0b04 	subs.w	fp, sl, r4
 8008882:	d00b      	beq.n	800889c <_vfiprintf_r+0xc0>
 8008884:	465b      	mov	r3, fp
 8008886:	4622      	mov	r2, r4
 8008888:	4629      	mov	r1, r5
 800888a:	4630      	mov	r0, r6
 800888c:	f7ff ff94 	bl	80087b8 <__sfputs_r>
 8008890:	3001      	adds	r0, #1
 8008892:	f000 80aa 	beq.w	80089ea <_vfiprintf_r+0x20e>
 8008896:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008898:	445a      	add	r2, fp
 800889a:	9209      	str	r2, [sp, #36]	; 0x24
 800889c:	f89a 3000 	ldrb.w	r3, [sl]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f000 80a2 	beq.w	80089ea <_vfiprintf_r+0x20e>
 80088a6:	2300      	movs	r3, #0
 80088a8:	f04f 32ff 	mov.w	r2, #4294967295
 80088ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088b0:	f10a 0a01 	add.w	sl, sl, #1
 80088b4:	9304      	str	r3, [sp, #16]
 80088b6:	9307      	str	r3, [sp, #28]
 80088b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088bc:	931a      	str	r3, [sp, #104]	; 0x68
 80088be:	4654      	mov	r4, sl
 80088c0:	2205      	movs	r2, #5
 80088c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088c6:	4858      	ldr	r0, [pc, #352]	; (8008a28 <_vfiprintf_r+0x24c>)
 80088c8:	f7f7 fc92 	bl	80001f0 <memchr>
 80088cc:	9a04      	ldr	r2, [sp, #16]
 80088ce:	b9d8      	cbnz	r0, 8008908 <_vfiprintf_r+0x12c>
 80088d0:	06d1      	lsls	r1, r2, #27
 80088d2:	bf44      	itt	mi
 80088d4:	2320      	movmi	r3, #32
 80088d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088da:	0713      	lsls	r3, r2, #28
 80088dc:	bf44      	itt	mi
 80088de:	232b      	movmi	r3, #43	; 0x2b
 80088e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088e4:	f89a 3000 	ldrb.w	r3, [sl]
 80088e8:	2b2a      	cmp	r3, #42	; 0x2a
 80088ea:	d015      	beq.n	8008918 <_vfiprintf_r+0x13c>
 80088ec:	9a07      	ldr	r2, [sp, #28]
 80088ee:	4654      	mov	r4, sl
 80088f0:	2000      	movs	r0, #0
 80088f2:	f04f 0c0a 	mov.w	ip, #10
 80088f6:	4621      	mov	r1, r4
 80088f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088fc:	3b30      	subs	r3, #48	; 0x30
 80088fe:	2b09      	cmp	r3, #9
 8008900:	d94e      	bls.n	80089a0 <_vfiprintf_r+0x1c4>
 8008902:	b1b0      	cbz	r0, 8008932 <_vfiprintf_r+0x156>
 8008904:	9207      	str	r2, [sp, #28]
 8008906:	e014      	b.n	8008932 <_vfiprintf_r+0x156>
 8008908:	eba0 0308 	sub.w	r3, r0, r8
 800890c:	fa09 f303 	lsl.w	r3, r9, r3
 8008910:	4313      	orrs	r3, r2
 8008912:	9304      	str	r3, [sp, #16]
 8008914:	46a2      	mov	sl, r4
 8008916:	e7d2      	b.n	80088be <_vfiprintf_r+0xe2>
 8008918:	9b03      	ldr	r3, [sp, #12]
 800891a:	1d19      	adds	r1, r3, #4
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	9103      	str	r1, [sp, #12]
 8008920:	2b00      	cmp	r3, #0
 8008922:	bfbb      	ittet	lt
 8008924:	425b      	neglt	r3, r3
 8008926:	f042 0202 	orrlt.w	r2, r2, #2
 800892a:	9307      	strge	r3, [sp, #28]
 800892c:	9307      	strlt	r3, [sp, #28]
 800892e:	bfb8      	it	lt
 8008930:	9204      	strlt	r2, [sp, #16]
 8008932:	7823      	ldrb	r3, [r4, #0]
 8008934:	2b2e      	cmp	r3, #46	; 0x2e
 8008936:	d10c      	bne.n	8008952 <_vfiprintf_r+0x176>
 8008938:	7863      	ldrb	r3, [r4, #1]
 800893a:	2b2a      	cmp	r3, #42	; 0x2a
 800893c:	d135      	bne.n	80089aa <_vfiprintf_r+0x1ce>
 800893e:	9b03      	ldr	r3, [sp, #12]
 8008940:	1d1a      	adds	r2, r3, #4
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	9203      	str	r2, [sp, #12]
 8008946:	2b00      	cmp	r3, #0
 8008948:	bfb8      	it	lt
 800894a:	f04f 33ff 	movlt.w	r3, #4294967295
 800894e:	3402      	adds	r4, #2
 8008950:	9305      	str	r3, [sp, #20]
 8008952:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008a38 <_vfiprintf_r+0x25c>
 8008956:	7821      	ldrb	r1, [r4, #0]
 8008958:	2203      	movs	r2, #3
 800895a:	4650      	mov	r0, sl
 800895c:	f7f7 fc48 	bl	80001f0 <memchr>
 8008960:	b140      	cbz	r0, 8008974 <_vfiprintf_r+0x198>
 8008962:	2340      	movs	r3, #64	; 0x40
 8008964:	eba0 000a 	sub.w	r0, r0, sl
 8008968:	fa03 f000 	lsl.w	r0, r3, r0
 800896c:	9b04      	ldr	r3, [sp, #16]
 800896e:	4303      	orrs	r3, r0
 8008970:	3401      	adds	r4, #1
 8008972:	9304      	str	r3, [sp, #16]
 8008974:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008978:	482c      	ldr	r0, [pc, #176]	; (8008a2c <_vfiprintf_r+0x250>)
 800897a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800897e:	2206      	movs	r2, #6
 8008980:	f7f7 fc36 	bl	80001f0 <memchr>
 8008984:	2800      	cmp	r0, #0
 8008986:	d03f      	beq.n	8008a08 <_vfiprintf_r+0x22c>
 8008988:	4b29      	ldr	r3, [pc, #164]	; (8008a30 <_vfiprintf_r+0x254>)
 800898a:	bb1b      	cbnz	r3, 80089d4 <_vfiprintf_r+0x1f8>
 800898c:	9b03      	ldr	r3, [sp, #12]
 800898e:	3307      	adds	r3, #7
 8008990:	f023 0307 	bic.w	r3, r3, #7
 8008994:	3308      	adds	r3, #8
 8008996:	9303      	str	r3, [sp, #12]
 8008998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800899a:	443b      	add	r3, r7
 800899c:	9309      	str	r3, [sp, #36]	; 0x24
 800899e:	e767      	b.n	8008870 <_vfiprintf_r+0x94>
 80089a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80089a4:	460c      	mov	r4, r1
 80089a6:	2001      	movs	r0, #1
 80089a8:	e7a5      	b.n	80088f6 <_vfiprintf_r+0x11a>
 80089aa:	2300      	movs	r3, #0
 80089ac:	3401      	adds	r4, #1
 80089ae:	9305      	str	r3, [sp, #20]
 80089b0:	4619      	mov	r1, r3
 80089b2:	f04f 0c0a 	mov.w	ip, #10
 80089b6:	4620      	mov	r0, r4
 80089b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089bc:	3a30      	subs	r2, #48	; 0x30
 80089be:	2a09      	cmp	r2, #9
 80089c0:	d903      	bls.n	80089ca <_vfiprintf_r+0x1ee>
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d0c5      	beq.n	8008952 <_vfiprintf_r+0x176>
 80089c6:	9105      	str	r1, [sp, #20]
 80089c8:	e7c3      	b.n	8008952 <_vfiprintf_r+0x176>
 80089ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80089ce:	4604      	mov	r4, r0
 80089d0:	2301      	movs	r3, #1
 80089d2:	e7f0      	b.n	80089b6 <_vfiprintf_r+0x1da>
 80089d4:	ab03      	add	r3, sp, #12
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	462a      	mov	r2, r5
 80089da:	4b16      	ldr	r3, [pc, #88]	; (8008a34 <_vfiprintf_r+0x258>)
 80089dc:	a904      	add	r1, sp, #16
 80089de:	4630      	mov	r0, r6
 80089e0:	f7fd fe7e 	bl	80066e0 <_printf_float>
 80089e4:	4607      	mov	r7, r0
 80089e6:	1c78      	adds	r0, r7, #1
 80089e8:	d1d6      	bne.n	8008998 <_vfiprintf_r+0x1bc>
 80089ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089ec:	07d9      	lsls	r1, r3, #31
 80089ee:	d405      	bmi.n	80089fc <_vfiprintf_r+0x220>
 80089f0:	89ab      	ldrh	r3, [r5, #12]
 80089f2:	059a      	lsls	r2, r3, #22
 80089f4:	d402      	bmi.n	80089fc <_vfiprintf_r+0x220>
 80089f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089f8:	f7ff fe92 	bl	8008720 <__retarget_lock_release_recursive>
 80089fc:	89ab      	ldrh	r3, [r5, #12]
 80089fe:	065b      	lsls	r3, r3, #25
 8008a00:	f53f af12 	bmi.w	8008828 <_vfiprintf_r+0x4c>
 8008a04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a06:	e711      	b.n	800882c <_vfiprintf_r+0x50>
 8008a08:	ab03      	add	r3, sp, #12
 8008a0a:	9300      	str	r3, [sp, #0]
 8008a0c:	462a      	mov	r2, r5
 8008a0e:	4b09      	ldr	r3, [pc, #36]	; (8008a34 <_vfiprintf_r+0x258>)
 8008a10:	a904      	add	r1, sp, #16
 8008a12:	4630      	mov	r0, r6
 8008a14:	f7fe f908 	bl	8006c28 <_printf_i>
 8008a18:	e7e4      	b.n	80089e4 <_vfiprintf_r+0x208>
 8008a1a:	bf00      	nop
 8008a1c:	0800994c 	.word	0x0800994c
 8008a20:	0800996c 	.word	0x0800996c
 8008a24:	0800992c 	.word	0x0800992c
 8008a28:	080097d4 	.word	0x080097d4
 8008a2c:	080097de 	.word	0x080097de
 8008a30:	080066e1 	.word	0x080066e1
 8008a34:	080087b9 	.word	0x080087b9
 8008a38:	080097da 	.word	0x080097da

08008a3c <__swbuf_r>:
 8008a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3e:	460e      	mov	r6, r1
 8008a40:	4614      	mov	r4, r2
 8008a42:	4605      	mov	r5, r0
 8008a44:	b118      	cbz	r0, 8008a4e <__swbuf_r+0x12>
 8008a46:	6983      	ldr	r3, [r0, #24]
 8008a48:	b90b      	cbnz	r3, 8008a4e <__swbuf_r+0x12>
 8008a4a:	f000 f9df 	bl	8008e0c <__sinit>
 8008a4e:	4b21      	ldr	r3, [pc, #132]	; (8008ad4 <__swbuf_r+0x98>)
 8008a50:	429c      	cmp	r4, r3
 8008a52:	d12b      	bne.n	8008aac <__swbuf_r+0x70>
 8008a54:	686c      	ldr	r4, [r5, #4]
 8008a56:	69a3      	ldr	r3, [r4, #24]
 8008a58:	60a3      	str	r3, [r4, #8]
 8008a5a:	89a3      	ldrh	r3, [r4, #12]
 8008a5c:	071a      	lsls	r2, r3, #28
 8008a5e:	d52f      	bpl.n	8008ac0 <__swbuf_r+0x84>
 8008a60:	6923      	ldr	r3, [r4, #16]
 8008a62:	b36b      	cbz	r3, 8008ac0 <__swbuf_r+0x84>
 8008a64:	6923      	ldr	r3, [r4, #16]
 8008a66:	6820      	ldr	r0, [r4, #0]
 8008a68:	1ac0      	subs	r0, r0, r3
 8008a6a:	6963      	ldr	r3, [r4, #20]
 8008a6c:	b2f6      	uxtb	r6, r6
 8008a6e:	4283      	cmp	r3, r0
 8008a70:	4637      	mov	r7, r6
 8008a72:	dc04      	bgt.n	8008a7e <__swbuf_r+0x42>
 8008a74:	4621      	mov	r1, r4
 8008a76:	4628      	mov	r0, r5
 8008a78:	f000 f934 	bl	8008ce4 <_fflush_r>
 8008a7c:	bb30      	cbnz	r0, 8008acc <__swbuf_r+0x90>
 8008a7e:	68a3      	ldr	r3, [r4, #8]
 8008a80:	3b01      	subs	r3, #1
 8008a82:	60a3      	str	r3, [r4, #8]
 8008a84:	6823      	ldr	r3, [r4, #0]
 8008a86:	1c5a      	adds	r2, r3, #1
 8008a88:	6022      	str	r2, [r4, #0]
 8008a8a:	701e      	strb	r6, [r3, #0]
 8008a8c:	6963      	ldr	r3, [r4, #20]
 8008a8e:	3001      	adds	r0, #1
 8008a90:	4283      	cmp	r3, r0
 8008a92:	d004      	beq.n	8008a9e <__swbuf_r+0x62>
 8008a94:	89a3      	ldrh	r3, [r4, #12]
 8008a96:	07db      	lsls	r3, r3, #31
 8008a98:	d506      	bpl.n	8008aa8 <__swbuf_r+0x6c>
 8008a9a:	2e0a      	cmp	r6, #10
 8008a9c:	d104      	bne.n	8008aa8 <__swbuf_r+0x6c>
 8008a9e:	4621      	mov	r1, r4
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	f000 f91f 	bl	8008ce4 <_fflush_r>
 8008aa6:	b988      	cbnz	r0, 8008acc <__swbuf_r+0x90>
 8008aa8:	4638      	mov	r0, r7
 8008aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008aac:	4b0a      	ldr	r3, [pc, #40]	; (8008ad8 <__swbuf_r+0x9c>)
 8008aae:	429c      	cmp	r4, r3
 8008ab0:	d101      	bne.n	8008ab6 <__swbuf_r+0x7a>
 8008ab2:	68ac      	ldr	r4, [r5, #8]
 8008ab4:	e7cf      	b.n	8008a56 <__swbuf_r+0x1a>
 8008ab6:	4b09      	ldr	r3, [pc, #36]	; (8008adc <__swbuf_r+0xa0>)
 8008ab8:	429c      	cmp	r4, r3
 8008aba:	bf08      	it	eq
 8008abc:	68ec      	ldreq	r4, [r5, #12]
 8008abe:	e7ca      	b.n	8008a56 <__swbuf_r+0x1a>
 8008ac0:	4621      	mov	r1, r4
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	f000 f81a 	bl	8008afc <__swsetup_r>
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	d0cb      	beq.n	8008a64 <__swbuf_r+0x28>
 8008acc:	f04f 37ff 	mov.w	r7, #4294967295
 8008ad0:	e7ea      	b.n	8008aa8 <__swbuf_r+0x6c>
 8008ad2:	bf00      	nop
 8008ad4:	0800994c 	.word	0x0800994c
 8008ad8:	0800996c 	.word	0x0800996c
 8008adc:	0800992c 	.word	0x0800992c

08008ae0 <__ascii_wctomb>:
 8008ae0:	b149      	cbz	r1, 8008af6 <__ascii_wctomb+0x16>
 8008ae2:	2aff      	cmp	r2, #255	; 0xff
 8008ae4:	bf85      	ittet	hi
 8008ae6:	238a      	movhi	r3, #138	; 0x8a
 8008ae8:	6003      	strhi	r3, [r0, #0]
 8008aea:	700a      	strbls	r2, [r1, #0]
 8008aec:	f04f 30ff 	movhi.w	r0, #4294967295
 8008af0:	bf98      	it	ls
 8008af2:	2001      	movls	r0, #1
 8008af4:	4770      	bx	lr
 8008af6:	4608      	mov	r0, r1
 8008af8:	4770      	bx	lr
	...

08008afc <__swsetup_r>:
 8008afc:	4b32      	ldr	r3, [pc, #200]	; (8008bc8 <__swsetup_r+0xcc>)
 8008afe:	b570      	push	{r4, r5, r6, lr}
 8008b00:	681d      	ldr	r5, [r3, #0]
 8008b02:	4606      	mov	r6, r0
 8008b04:	460c      	mov	r4, r1
 8008b06:	b125      	cbz	r5, 8008b12 <__swsetup_r+0x16>
 8008b08:	69ab      	ldr	r3, [r5, #24]
 8008b0a:	b913      	cbnz	r3, 8008b12 <__swsetup_r+0x16>
 8008b0c:	4628      	mov	r0, r5
 8008b0e:	f000 f97d 	bl	8008e0c <__sinit>
 8008b12:	4b2e      	ldr	r3, [pc, #184]	; (8008bcc <__swsetup_r+0xd0>)
 8008b14:	429c      	cmp	r4, r3
 8008b16:	d10f      	bne.n	8008b38 <__swsetup_r+0x3c>
 8008b18:	686c      	ldr	r4, [r5, #4]
 8008b1a:	89a3      	ldrh	r3, [r4, #12]
 8008b1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b20:	0719      	lsls	r1, r3, #28
 8008b22:	d42c      	bmi.n	8008b7e <__swsetup_r+0x82>
 8008b24:	06dd      	lsls	r5, r3, #27
 8008b26:	d411      	bmi.n	8008b4c <__swsetup_r+0x50>
 8008b28:	2309      	movs	r3, #9
 8008b2a:	6033      	str	r3, [r6, #0]
 8008b2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b30:	81a3      	strh	r3, [r4, #12]
 8008b32:	f04f 30ff 	mov.w	r0, #4294967295
 8008b36:	e03e      	b.n	8008bb6 <__swsetup_r+0xba>
 8008b38:	4b25      	ldr	r3, [pc, #148]	; (8008bd0 <__swsetup_r+0xd4>)
 8008b3a:	429c      	cmp	r4, r3
 8008b3c:	d101      	bne.n	8008b42 <__swsetup_r+0x46>
 8008b3e:	68ac      	ldr	r4, [r5, #8]
 8008b40:	e7eb      	b.n	8008b1a <__swsetup_r+0x1e>
 8008b42:	4b24      	ldr	r3, [pc, #144]	; (8008bd4 <__swsetup_r+0xd8>)
 8008b44:	429c      	cmp	r4, r3
 8008b46:	bf08      	it	eq
 8008b48:	68ec      	ldreq	r4, [r5, #12]
 8008b4a:	e7e6      	b.n	8008b1a <__swsetup_r+0x1e>
 8008b4c:	0758      	lsls	r0, r3, #29
 8008b4e:	d512      	bpl.n	8008b76 <__swsetup_r+0x7a>
 8008b50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b52:	b141      	cbz	r1, 8008b66 <__swsetup_r+0x6a>
 8008b54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b58:	4299      	cmp	r1, r3
 8008b5a:	d002      	beq.n	8008b62 <__swsetup_r+0x66>
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	f7fd fc3f 	bl	80063e0 <_free_r>
 8008b62:	2300      	movs	r3, #0
 8008b64:	6363      	str	r3, [r4, #52]	; 0x34
 8008b66:	89a3      	ldrh	r3, [r4, #12]
 8008b68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b6c:	81a3      	strh	r3, [r4, #12]
 8008b6e:	2300      	movs	r3, #0
 8008b70:	6063      	str	r3, [r4, #4]
 8008b72:	6923      	ldr	r3, [r4, #16]
 8008b74:	6023      	str	r3, [r4, #0]
 8008b76:	89a3      	ldrh	r3, [r4, #12]
 8008b78:	f043 0308 	orr.w	r3, r3, #8
 8008b7c:	81a3      	strh	r3, [r4, #12]
 8008b7e:	6923      	ldr	r3, [r4, #16]
 8008b80:	b94b      	cbnz	r3, 8008b96 <__swsetup_r+0x9a>
 8008b82:	89a3      	ldrh	r3, [r4, #12]
 8008b84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b8c:	d003      	beq.n	8008b96 <__swsetup_r+0x9a>
 8008b8e:	4621      	mov	r1, r4
 8008b90:	4630      	mov	r0, r6
 8008b92:	f000 f9fd 	bl	8008f90 <__smakebuf_r>
 8008b96:	89a0      	ldrh	r0, [r4, #12]
 8008b98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b9c:	f010 0301 	ands.w	r3, r0, #1
 8008ba0:	d00a      	beq.n	8008bb8 <__swsetup_r+0xbc>
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	60a3      	str	r3, [r4, #8]
 8008ba6:	6963      	ldr	r3, [r4, #20]
 8008ba8:	425b      	negs	r3, r3
 8008baa:	61a3      	str	r3, [r4, #24]
 8008bac:	6923      	ldr	r3, [r4, #16]
 8008bae:	b943      	cbnz	r3, 8008bc2 <__swsetup_r+0xc6>
 8008bb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008bb4:	d1ba      	bne.n	8008b2c <__swsetup_r+0x30>
 8008bb6:	bd70      	pop	{r4, r5, r6, pc}
 8008bb8:	0781      	lsls	r1, r0, #30
 8008bba:	bf58      	it	pl
 8008bbc:	6963      	ldrpl	r3, [r4, #20]
 8008bbe:	60a3      	str	r3, [r4, #8]
 8008bc0:	e7f4      	b.n	8008bac <__swsetup_r+0xb0>
 8008bc2:	2000      	movs	r0, #0
 8008bc4:	e7f7      	b.n	8008bb6 <__swsetup_r+0xba>
 8008bc6:	bf00      	nop
 8008bc8:	2000043c 	.word	0x2000043c
 8008bcc:	0800994c 	.word	0x0800994c
 8008bd0:	0800996c 	.word	0x0800996c
 8008bd4:	0800992c 	.word	0x0800992c

08008bd8 <__sflush_r>:
 8008bd8:	898a      	ldrh	r2, [r1, #12]
 8008bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bde:	4605      	mov	r5, r0
 8008be0:	0710      	lsls	r0, r2, #28
 8008be2:	460c      	mov	r4, r1
 8008be4:	d458      	bmi.n	8008c98 <__sflush_r+0xc0>
 8008be6:	684b      	ldr	r3, [r1, #4]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	dc05      	bgt.n	8008bf8 <__sflush_r+0x20>
 8008bec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	dc02      	bgt.n	8008bf8 <__sflush_r+0x20>
 8008bf2:	2000      	movs	r0, #0
 8008bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bfa:	2e00      	cmp	r6, #0
 8008bfc:	d0f9      	beq.n	8008bf2 <__sflush_r+0x1a>
 8008bfe:	2300      	movs	r3, #0
 8008c00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c04:	682f      	ldr	r7, [r5, #0]
 8008c06:	602b      	str	r3, [r5, #0]
 8008c08:	d032      	beq.n	8008c70 <__sflush_r+0x98>
 8008c0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c0c:	89a3      	ldrh	r3, [r4, #12]
 8008c0e:	075a      	lsls	r2, r3, #29
 8008c10:	d505      	bpl.n	8008c1e <__sflush_r+0x46>
 8008c12:	6863      	ldr	r3, [r4, #4]
 8008c14:	1ac0      	subs	r0, r0, r3
 8008c16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c18:	b10b      	cbz	r3, 8008c1e <__sflush_r+0x46>
 8008c1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c1c:	1ac0      	subs	r0, r0, r3
 8008c1e:	2300      	movs	r3, #0
 8008c20:	4602      	mov	r2, r0
 8008c22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c24:	6a21      	ldr	r1, [r4, #32]
 8008c26:	4628      	mov	r0, r5
 8008c28:	47b0      	blx	r6
 8008c2a:	1c43      	adds	r3, r0, #1
 8008c2c:	89a3      	ldrh	r3, [r4, #12]
 8008c2e:	d106      	bne.n	8008c3e <__sflush_r+0x66>
 8008c30:	6829      	ldr	r1, [r5, #0]
 8008c32:	291d      	cmp	r1, #29
 8008c34:	d82c      	bhi.n	8008c90 <__sflush_r+0xb8>
 8008c36:	4a2a      	ldr	r2, [pc, #168]	; (8008ce0 <__sflush_r+0x108>)
 8008c38:	40ca      	lsrs	r2, r1
 8008c3a:	07d6      	lsls	r6, r2, #31
 8008c3c:	d528      	bpl.n	8008c90 <__sflush_r+0xb8>
 8008c3e:	2200      	movs	r2, #0
 8008c40:	6062      	str	r2, [r4, #4]
 8008c42:	04d9      	lsls	r1, r3, #19
 8008c44:	6922      	ldr	r2, [r4, #16]
 8008c46:	6022      	str	r2, [r4, #0]
 8008c48:	d504      	bpl.n	8008c54 <__sflush_r+0x7c>
 8008c4a:	1c42      	adds	r2, r0, #1
 8008c4c:	d101      	bne.n	8008c52 <__sflush_r+0x7a>
 8008c4e:	682b      	ldr	r3, [r5, #0]
 8008c50:	b903      	cbnz	r3, 8008c54 <__sflush_r+0x7c>
 8008c52:	6560      	str	r0, [r4, #84]	; 0x54
 8008c54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c56:	602f      	str	r7, [r5, #0]
 8008c58:	2900      	cmp	r1, #0
 8008c5a:	d0ca      	beq.n	8008bf2 <__sflush_r+0x1a>
 8008c5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c60:	4299      	cmp	r1, r3
 8008c62:	d002      	beq.n	8008c6a <__sflush_r+0x92>
 8008c64:	4628      	mov	r0, r5
 8008c66:	f7fd fbbb 	bl	80063e0 <_free_r>
 8008c6a:	2000      	movs	r0, #0
 8008c6c:	6360      	str	r0, [r4, #52]	; 0x34
 8008c6e:	e7c1      	b.n	8008bf4 <__sflush_r+0x1c>
 8008c70:	6a21      	ldr	r1, [r4, #32]
 8008c72:	2301      	movs	r3, #1
 8008c74:	4628      	mov	r0, r5
 8008c76:	47b0      	blx	r6
 8008c78:	1c41      	adds	r1, r0, #1
 8008c7a:	d1c7      	bne.n	8008c0c <__sflush_r+0x34>
 8008c7c:	682b      	ldr	r3, [r5, #0]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d0c4      	beq.n	8008c0c <__sflush_r+0x34>
 8008c82:	2b1d      	cmp	r3, #29
 8008c84:	d001      	beq.n	8008c8a <__sflush_r+0xb2>
 8008c86:	2b16      	cmp	r3, #22
 8008c88:	d101      	bne.n	8008c8e <__sflush_r+0xb6>
 8008c8a:	602f      	str	r7, [r5, #0]
 8008c8c:	e7b1      	b.n	8008bf2 <__sflush_r+0x1a>
 8008c8e:	89a3      	ldrh	r3, [r4, #12]
 8008c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c94:	81a3      	strh	r3, [r4, #12]
 8008c96:	e7ad      	b.n	8008bf4 <__sflush_r+0x1c>
 8008c98:	690f      	ldr	r7, [r1, #16]
 8008c9a:	2f00      	cmp	r7, #0
 8008c9c:	d0a9      	beq.n	8008bf2 <__sflush_r+0x1a>
 8008c9e:	0793      	lsls	r3, r2, #30
 8008ca0:	680e      	ldr	r6, [r1, #0]
 8008ca2:	bf08      	it	eq
 8008ca4:	694b      	ldreq	r3, [r1, #20]
 8008ca6:	600f      	str	r7, [r1, #0]
 8008ca8:	bf18      	it	ne
 8008caa:	2300      	movne	r3, #0
 8008cac:	eba6 0807 	sub.w	r8, r6, r7
 8008cb0:	608b      	str	r3, [r1, #8]
 8008cb2:	f1b8 0f00 	cmp.w	r8, #0
 8008cb6:	dd9c      	ble.n	8008bf2 <__sflush_r+0x1a>
 8008cb8:	6a21      	ldr	r1, [r4, #32]
 8008cba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008cbc:	4643      	mov	r3, r8
 8008cbe:	463a      	mov	r2, r7
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	47b0      	blx	r6
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	dc06      	bgt.n	8008cd6 <__sflush_r+0xfe>
 8008cc8:	89a3      	ldrh	r3, [r4, #12]
 8008cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cce:	81a3      	strh	r3, [r4, #12]
 8008cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd4:	e78e      	b.n	8008bf4 <__sflush_r+0x1c>
 8008cd6:	4407      	add	r7, r0
 8008cd8:	eba8 0800 	sub.w	r8, r8, r0
 8008cdc:	e7e9      	b.n	8008cb2 <__sflush_r+0xda>
 8008cde:	bf00      	nop
 8008ce0:	20400001 	.word	0x20400001

08008ce4 <_fflush_r>:
 8008ce4:	b538      	push	{r3, r4, r5, lr}
 8008ce6:	690b      	ldr	r3, [r1, #16]
 8008ce8:	4605      	mov	r5, r0
 8008cea:	460c      	mov	r4, r1
 8008cec:	b913      	cbnz	r3, 8008cf4 <_fflush_r+0x10>
 8008cee:	2500      	movs	r5, #0
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	bd38      	pop	{r3, r4, r5, pc}
 8008cf4:	b118      	cbz	r0, 8008cfe <_fflush_r+0x1a>
 8008cf6:	6983      	ldr	r3, [r0, #24]
 8008cf8:	b90b      	cbnz	r3, 8008cfe <_fflush_r+0x1a>
 8008cfa:	f000 f887 	bl	8008e0c <__sinit>
 8008cfe:	4b14      	ldr	r3, [pc, #80]	; (8008d50 <_fflush_r+0x6c>)
 8008d00:	429c      	cmp	r4, r3
 8008d02:	d11b      	bne.n	8008d3c <_fflush_r+0x58>
 8008d04:	686c      	ldr	r4, [r5, #4]
 8008d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d0ef      	beq.n	8008cee <_fflush_r+0xa>
 8008d0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d10:	07d0      	lsls	r0, r2, #31
 8008d12:	d404      	bmi.n	8008d1e <_fflush_r+0x3a>
 8008d14:	0599      	lsls	r1, r3, #22
 8008d16:	d402      	bmi.n	8008d1e <_fflush_r+0x3a>
 8008d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d1a:	f7ff fd00 	bl	800871e <__retarget_lock_acquire_recursive>
 8008d1e:	4628      	mov	r0, r5
 8008d20:	4621      	mov	r1, r4
 8008d22:	f7ff ff59 	bl	8008bd8 <__sflush_r>
 8008d26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d28:	07da      	lsls	r2, r3, #31
 8008d2a:	4605      	mov	r5, r0
 8008d2c:	d4e0      	bmi.n	8008cf0 <_fflush_r+0xc>
 8008d2e:	89a3      	ldrh	r3, [r4, #12]
 8008d30:	059b      	lsls	r3, r3, #22
 8008d32:	d4dd      	bmi.n	8008cf0 <_fflush_r+0xc>
 8008d34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d36:	f7ff fcf3 	bl	8008720 <__retarget_lock_release_recursive>
 8008d3a:	e7d9      	b.n	8008cf0 <_fflush_r+0xc>
 8008d3c:	4b05      	ldr	r3, [pc, #20]	; (8008d54 <_fflush_r+0x70>)
 8008d3e:	429c      	cmp	r4, r3
 8008d40:	d101      	bne.n	8008d46 <_fflush_r+0x62>
 8008d42:	68ac      	ldr	r4, [r5, #8]
 8008d44:	e7df      	b.n	8008d06 <_fflush_r+0x22>
 8008d46:	4b04      	ldr	r3, [pc, #16]	; (8008d58 <_fflush_r+0x74>)
 8008d48:	429c      	cmp	r4, r3
 8008d4a:	bf08      	it	eq
 8008d4c:	68ec      	ldreq	r4, [r5, #12]
 8008d4e:	e7da      	b.n	8008d06 <_fflush_r+0x22>
 8008d50:	0800994c 	.word	0x0800994c
 8008d54:	0800996c 	.word	0x0800996c
 8008d58:	0800992c 	.word	0x0800992c

08008d5c <std>:
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	b510      	push	{r4, lr}
 8008d60:	4604      	mov	r4, r0
 8008d62:	e9c0 3300 	strd	r3, r3, [r0]
 8008d66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d6a:	6083      	str	r3, [r0, #8]
 8008d6c:	8181      	strh	r1, [r0, #12]
 8008d6e:	6643      	str	r3, [r0, #100]	; 0x64
 8008d70:	81c2      	strh	r2, [r0, #14]
 8008d72:	6183      	str	r3, [r0, #24]
 8008d74:	4619      	mov	r1, r3
 8008d76:	2208      	movs	r2, #8
 8008d78:	305c      	adds	r0, #92	; 0x5c
 8008d7a:	f7fd fb29 	bl	80063d0 <memset>
 8008d7e:	4b05      	ldr	r3, [pc, #20]	; (8008d94 <std+0x38>)
 8008d80:	6263      	str	r3, [r4, #36]	; 0x24
 8008d82:	4b05      	ldr	r3, [pc, #20]	; (8008d98 <std+0x3c>)
 8008d84:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d86:	4b05      	ldr	r3, [pc, #20]	; (8008d9c <std+0x40>)
 8008d88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d8a:	4b05      	ldr	r3, [pc, #20]	; (8008da0 <std+0x44>)
 8008d8c:	6224      	str	r4, [r4, #32]
 8008d8e:	6323      	str	r3, [r4, #48]	; 0x30
 8008d90:	bd10      	pop	{r4, pc}
 8008d92:	bf00      	nop
 8008d94:	08009011 	.word	0x08009011
 8008d98:	08009033 	.word	0x08009033
 8008d9c:	0800906b 	.word	0x0800906b
 8008da0:	0800908f 	.word	0x0800908f

08008da4 <_cleanup_r>:
 8008da4:	4901      	ldr	r1, [pc, #4]	; (8008dac <_cleanup_r+0x8>)
 8008da6:	f000 b8af 	b.w	8008f08 <_fwalk_reent>
 8008daa:	bf00      	nop
 8008dac:	08008ce5 	.word	0x08008ce5

08008db0 <__sfmoreglue>:
 8008db0:	b570      	push	{r4, r5, r6, lr}
 8008db2:	2268      	movs	r2, #104	; 0x68
 8008db4:	1e4d      	subs	r5, r1, #1
 8008db6:	4355      	muls	r5, r2
 8008db8:	460e      	mov	r6, r1
 8008dba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008dbe:	f7fd fb7b 	bl	80064b8 <_malloc_r>
 8008dc2:	4604      	mov	r4, r0
 8008dc4:	b140      	cbz	r0, 8008dd8 <__sfmoreglue+0x28>
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	e9c0 1600 	strd	r1, r6, [r0]
 8008dcc:	300c      	adds	r0, #12
 8008dce:	60a0      	str	r0, [r4, #8]
 8008dd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008dd4:	f7fd fafc 	bl	80063d0 <memset>
 8008dd8:	4620      	mov	r0, r4
 8008dda:	bd70      	pop	{r4, r5, r6, pc}

08008ddc <__sfp_lock_acquire>:
 8008ddc:	4801      	ldr	r0, [pc, #4]	; (8008de4 <__sfp_lock_acquire+0x8>)
 8008dde:	f7ff bc9e 	b.w	800871e <__retarget_lock_acquire_recursive>
 8008de2:	bf00      	nop
 8008de4:	2000086d 	.word	0x2000086d

08008de8 <__sfp_lock_release>:
 8008de8:	4801      	ldr	r0, [pc, #4]	; (8008df0 <__sfp_lock_release+0x8>)
 8008dea:	f7ff bc99 	b.w	8008720 <__retarget_lock_release_recursive>
 8008dee:	bf00      	nop
 8008df0:	2000086d 	.word	0x2000086d

08008df4 <__sinit_lock_acquire>:
 8008df4:	4801      	ldr	r0, [pc, #4]	; (8008dfc <__sinit_lock_acquire+0x8>)
 8008df6:	f7ff bc92 	b.w	800871e <__retarget_lock_acquire_recursive>
 8008dfa:	bf00      	nop
 8008dfc:	2000086e 	.word	0x2000086e

08008e00 <__sinit_lock_release>:
 8008e00:	4801      	ldr	r0, [pc, #4]	; (8008e08 <__sinit_lock_release+0x8>)
 8008e02:	f7ff bc8d 	b.w	8008720 <__retarget_lock_release_recursive>
 8008e06:	bf00      	nop
 8008e08:	2000086e 	.word	0x2000086e

08008e0c <__sinit>:
 8008e0c:	b510      	push	{r4, lr}
 8008e0e:	4604      	mov	r4, r0
 8008e10:	f7ff fff0 	bl	8008df4 <__sinit_lock_acquire>
 8008e14:	69a3      	ldr	r3, [r4, #24]
 8008e16:	b11b      	cbz	r3, 8008e20 <__sinit+0x14>
 8008e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e1c:	f7ff bff0 	b.w	8008e00 <__sinit_lock_release>
 8008e20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e24:	6523      	str	r3, [r4, #80]	; 0x50
 8008e26:	4b13      	ldr	r3, [pc, #76]	; (8008e74 <__sinit+0x68>)
 8008e28:	4a13      	ldr	r2, [pc, #76]	; (8008e78 <__sinit+0x6c>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e2e:	42a3      	cmp	r3, r4
 8008e30:	bf04      	itt	eq
 8008e32:	2301      	moveq	r3, #1
 8008e34:	61a3      	streq	r3, [r4, #24]
 8008e36:	4620      	mov	r0, r4
 8008e38:	f000 f820 	bl	8008e7c <__sfp>
 8008e3c:	6060      	str	r0, [r4, #4]
 8008e3e:	4620      	mov	r0, r4
 8008e40:	f000 f81c 	bl	8008e7c <__sfp>
 8008e44:	60a0      	str	r0, [r4, #8]
 8008e46:	4620      	mov	r0, r4
 8008e48:	f000 f818 	bl	8008e7c <__sfp>
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	60e0      	str	r0, [r4, #12]
 8008e50:	2104      	movs	r1, #4
 8008e52:	6860      	ldr	r0, [r4, #4]
 8008e54:	f7ff ff82 	bl	8008d5c <std>
 8008e58:	68a0      	ldr	r0, [r4, #8]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	2109      	movs	r1, #9
 8008e5e:	f7ff ff7d 	bl	8008d5c <std>
 8008e62:	68e0      	ldr	r0, [r4, #12]
 8008e64:	2202      	movs	r2, #2
 8008e66:	2112      	movs	r1, #18
 8008e68:	f7ff ff78 	bl	8008d5c <std>
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	61a3      	str	r3, [r4, #24]
 8008e70:	e7d2      	b.n	8008e18 <__sinit+0xc>
 8008e72:	bf00      	nop
 8008e74:	080095b0 	.word	0x080095b0
 8008e78:	08008da5 	.word	0x08008da5

08008e7c <__sfp>:
 8008e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e7e:	4607      	mov	r7, r0
 8008e80:	f7ff ffac 	bl	8008ddc <__sfp_lock_acquire>
 8008e84:	4b1e      	ldr	r3, [pc, #120]	; (8008f00 <__sfp+0x84>)
 8008e86:	681e      	ldr	r6, [r3, #0]
 8008e88:	69b3      	ldr	r3, [r6, #24]
 8008e8a:	b913      	cbnz	r3, 8008e92 <__sfp+0x16>
 8008e8c:	4630      	mov	r0, r6
 8008e8e:	f7ff ffbd 	bl	8008e0c <__sinit>
 8008e92:	3648      	adds	r6, #72	; 0x48
 8008e94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	d503      	bpl.n	8008ea4 <__sfp+0x28>
 8008e9c:	6833      	ldr	r3, [r6, #0]
 8008e9e:	b30b      	cbz	r3, 8008ee4 <__sfp+0x68>
 8008ea0:	6836      	ldr	r6, [r6, #0]
 8008ea2:	e7f7      	b.n	8008e94 <__sfp+0x18>
 8008ea4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ea8:	b9d5      	cbnz	r5, 8008ee0 <__sfp+0x64>
 8008eaa:	4b16      	ldr	r3, [pc, #88]	; (8008f04 <__sfp+0x88>)
 8008eac:	60e3      	str	r3, [r4, #12]
 8008eae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008eb2:	6665      	str	r5, [r4, #100]	; 0x64
 8008eb4:	f7ff fc32 	bl	800871c <__retarget_lock_init_recursive>
 8008eb8:	f7ff ff96 	bl	8008de8 <__sfp_lock_release>
 8008ebc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008ec0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008ec4:	6025      	str	r5, [r4, #0]
 8008ec6:	61a5      	str	r5, [r4, #24]
 8008ec8:	2208      	movs	r2, #8
 8008eca:	4629      	mov	r1, r5
 8008ecc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ed0:	f7fd fa7e 	bl	80063d0 <memset>
 8008ed4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ed8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008edc:	4620      	mov	r0, r4
 8008ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ee0:	3468      	adds	r4, #104	; 0x68
 8008ee2:	e7d9      	b.n	8008e98 <__sfp+0x1c>
 8008ee4:	2104      	movs	r1, #4
 8008ee6:	4638      	mov	r0, r7
 8008ee8:	f7ff ff62 	bl	8008db0 <__sfmoreglue>
 8008eec:	4604      	mov	r4, r0
 8008eee:	6030      	str	r0, [r6, #0]
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	d1d5      	bne.n	8008ea0 <__sfp+0x24>
 8008ef4:	f7ff ff78 	bl	8008de8 <__sfp_lock_release>
 8008ef8:	230c      	movs	r3, #12
 8008efa:	603b      	str	r3, [r7, #0]
 8008efc:	e7ee      	b.n	8008edc <__sfp+0x60>
 8008efe:	bf00      	nop
 8008f00:	080095b0 	.word	0x080095b0
 8008f04:	ffff0001 	.word	0xffff0001

08008f08 <_fwalk_reent>:
 8008f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f0c:	4606      	mov	r6, r0
 8008f0e:	4688      	mov	r8, r1
 8008f10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f14:	2700      	movs	r7, #0
 8008f16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f1a:	f1b9 0901 	subs.w	r9, r9, #1
 8008f1e:	d505      	bpl.n	8008f2c <_fwalk_reent+0x24>
 8008f20:	6824      	ldr	r4, [r4, #0]
 8008f22:	2c00      	cmp	r4, #0
 8008f24:	d1f7      	bne.n	8008f16 <_fwalk_reent+0xe>
 8008f26:	4638      	mov	r0, r7
 8008f28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f2c:	89ab      	ldrh	r3, [r5, #12]
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d907      	bls.n	8008f42 <_fwalk_reent+0x3a>
 8008f32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f36:	3301      	adds	r3, #1
 8008f38:	d003      	beq.n	8008f42 <_fwalk_reent+0x3a>
 8008f3a:	4629      	mov	r1, r5
 8008f3c:	4630      	mov	r0, r6
 8008f3e:	47c0      	blx	r8
 8008f40:	4307      	orrs	r7, r0
 8008f42:	3568      	adds	r5, #104	; 0x68
 8008f44:	e7e9      	b.n	8008f1a <_fwalk_reent+0x12>

08008f46 <__swhatbuf_r>:
 8008f46:	b570      	push	{r4, r5, r6, lr}
 8008f48:	460e      	mov	r6, r1
 8008f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f4e:	2900      	cmp	r1, #0
 8008f50:	b096      	sub	sp, #88	; 0x58
 8008f52:	4614      	mov	r4, r2
 8008f54:	461d      	mov	r5, r3
 8008f56:	da08      	bge.n	8008f6a <__swhatbuf_r+0x24>
 8008f58:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	602a      	str	r2, [r5, #0]
 8008f60:	061a      	lsls	r2, r3, #24
 8008f62:	d410      	bmi.n	8008f86 <__swhatbuf_r+0x40>
 8008f64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f68:	e00e      	b.n	8008f88 <__swhatbuf_r+0x42>
 8008f6a:	466a      	mov	r2, sp
 8008f6c:	f000 f8b6 	bl	80090dc <_fstat_r>
 8008f70:	2800      	cmp	r0, #0
 8008f72:	dbf1      	blt.n	8008f58 <__swhatbuf_r+0x12>
 8008f74:	9a01      	ldr	r2, [sp, #4]
 8008f76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f7e:	425a      	negs	r2, r3
 8008f80:	415a      	adcs	r2, r3
 8008f82:	602a      	str	r2, [r5, #0]
 8008f84:	e7ee      	b.n	8008f64 <__swhatbuf_r+0x1e>
 8008f86:	2340      	movs	r3, #64	; 0x40
 8008f88:	2000      	movs	r0, #0
 8008f8a:	6023      	str	r3, [r4, #0]
 8008f8c:	b016      	add	sp, #88	; 0x58
 8008f8e:	bd70      	pop	{r4, r5, r6, pc}

08008f90 <__smakebuf_r>:
 8008f90:	898b      	ldrh	r3, [r1, #12]
 8008f92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f94:	079d      	lsls	r5, r3, #30
 8008f96:	4606      	mov	r6, r0
 8008f98:	460c      	mov	r4, r1
 8008f9a:	d507      	bpl.n	8008fac <__smakebuf_r+0x1c>
 8008f9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008fa0:	6023      	str	r3, [r4, #0]
 8008fa2:	6123      	str	r3, [r4, #16]
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	6163      	str	r3, [r4, #20]
 8008fa8:	b002      	add	sp, #8
 8008faa:	bd70      	pop	{r4, r5, r6, pc}
 8008fac:	ab01      	add	r3, sp, #4
 8008fae:	466a      	mov	r2, sp
 8008fb0:	f7ff ffc9 	bl	8008f46 <__swhatbuf_r>
 8008fb4:	9900      	ldr	r1, [sp, #0]
 8008fb6:	4605      	mov	r5, r0
 8008fb8:	4630      	mov	r0, r6
 8008fba:	f7fd fa7d 	bl	80064b8 <_malloc_r>
 8008fbe:	b948      	cbnz	r0, 8008fd4 <__smakebuf_r+0x44>
 8008fc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fc4:	059a      	lsls	r2, r3, #22
 8008fc6:	d4ef      	bmi.n	8008fa8 <__smakebuf_r+0x18>
 8008fc8:	f023 0303 	bic.w	r3, r3, #3
 8008fcc:	f043 0302 	orr.w	r3, r3, #2
 8008fd0:	81a3      	strh	r3, [r4, #12]
 8008fd2:	e7e3      	b.n	8008f9c <__smakebuf_r+0xc>
 8008fd4:	4b0d      	ldr	r3, [pc, #52]	; (800900c <__smakebuf_r+0x7c>)
 8008fd6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008fd8:	89a3      	ldrh	r3, [r4, #12]
 8008fda:	6020      	str	r0, [r4, #0]
 8008fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fe0:	81a3      	strh	r3, [r4, #12]
 8008fe2:	9b00      	ldr	r3, [sp, #0]
 8008fe4:	6163      	str	r3, [r4, #20]
 8008fe6:	9b01      	ldr	r3, [sp, #4]
 8008fe8:	6120      	str	r0, [r4, #16]
 8008fea:	b15b      	cbz	r3, 8009004 <__smakebuf_r+0x74>
 8008fec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ff0:	4630      	mov	r0, r6
 8008ff2:	f000 f885 	bl	8009100 <_isatty_r>
 8008ff6:	b128      	cbz	r0, 8009004 <__smakebuf_r+0x74>
 8008ff8:	89a3      	ldrh	r3, [r4, #12]
 8008ffa:	f023 0303 	bic.w	r3, r3, #3
 8008ffe:	f043 0301 	orr.w	r3, r3, #1
 8009002:	81a3      	strh	r3, [r4, #12]
 8009004:	89a0      	ldrh	r0, [r4, #12]
 8009006:	4305      	orrs	r5, r0
 8009008:	81a5      	strh	r5, [r4, #12]
 800900a:	e7cd      	b.n	8008fa8 <__smakebuf_r+0x18>
 800900c:	08008da5 	.word	0x08008da5

08009010 <__sread>:
 8009010:	b510      	push	{r4, lr}
 8009012:	460c      	mov	r4, r1
 8009014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009018:	f000 f894 	bl	8009144 <_read_r>
 800901c:	2800      	cmp	r0, #0
 800901e:	bfab      	itete	ge
 8009020:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009022:	89a3      	ldrhlt	r3, [r4, #12]
 8009024:	181b      	addge	r3, r3, r0
 8009026:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800902a:	bfac      	ite	ge
 800902c:	6563      	strge	r3, [r4, #84]	; 0x54
 800902e:	81a3      	strhlt	r3, [r4, #12]
 8009030:	bd10      	pop	{r4, pc}

08009032 <__swrite>:
 8009032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009036:	461f      	mov	r7, r3
 8009038:	898b      	ldrh	r3, [r1, #12]
 800903a:	05db      	lsls	r3, r3, #23
 800903c:	4605      	mov	r5, r0
 800903e:	460c      	mov	r4, r1
 8009040:	4616      	mov	r6, r2
 8009042:	d505      	bpl.n	8009050 <__swrite+0x1e>
 8009044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009048:	2302      	movs	r3, #2
 800904a:	2200      	movs	r2, #0
 800904c:	f000 f868 	bl	8009120 <_lseek_r>
 8009050:	89a3      	ldrh	r3, [r4, #12]
 8009052:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009056:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800905a:	81a3      	strh	r3, [r4, #12]
 800905c:	4632      	mov	r2, r6
 800905e:	463b      	mov	r3, r7
 8009060:	4628      	mov	r0, r5
 8009062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009066:	f000 b817 	b.w	8009098 <_write_r>

0800906a <__sseek>:
 800906a:	b510      	push	{r4, lr}
 800906c:	460c      	mov	r4, r1
 800906e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009072:	f000 f855 	bl	8009120 <_lseek_r>
 8009076:	1c43      	adds	r3, r0, #1
 8009078:	89a3      	ldrh	r3, [r4, #12]
 800907a:	bf15      	itete	ne
 800907c:	6560      	strne	r0, [r4, #84]	; 0x54
 800907e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009082:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009086:	81a3      	strheq	r3, [r4, #12]
 8009088:	bf18      	it	ne
 800908a:	81a3      	strhne	r3, [r4, #12]
 800908c:	bd10      	pop	{r4, pc}

0800908e <__sclose>:
 800908e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009092:	f000 b813 	b.w	80090bc <_close_r>
	...

08009098 <_write_r>:
 8009098:	b538      	push	{r3, r4, r5, lr}
 800909a:	4d07      	ldr	r5, [pc, #28]	; (80090b8 <_write_r+0x20>)
 800909c:	4604      	mov	r4, r0
 800909e:	4608      	mov	r0, r1
 80090a0:	4611      	mov	r1, r2
 80090a2:	2200      	movs	r2, #0
 80090a4:	602a      	str	r2, [r5, #0]
 80090a6:	461a      	mov	r2, r3
 80090a8:	f000 f896 	bl	80091d8 <_write>
 80090ac:	1c43      	adds	r3, r0, #1
 80090ae:	d102      	bne.n	80090b6 <_write_r+0x1e>
 80090b0:	682b      	ldr	r3, [r5, #0]
 80090b2:	b103      	cbz	r3, 80090b6 <_write_r+0x1e>
 80090b4:	6023      	str	r3, [r4, #0]
 80090b6:	bd38      	pop	{r3, r4, r5, pc}
 80090b8:	20000868 	.word	0x20000868

080090bc <_close_r>:
 80090bc:	b538      	push	{r3, r4, r5, lr}
 80090be:	4d06      	ldr	r5, [pc, #24]	; (80090d8 <_close_r+0x1c>)
 80090c0:	2300      	movs	r3, #0
 80090c2:	4604      	mov	r4, r0
 80090c4:	4608      	mov	r0, r1
 80090c6:	602b      	str	r3, [r5, #0]
 80090c8:	f000 f84e 	bl	8009168 <_close>
 80090cc:	1c43      	adds	r3, r0, #1
 80090ce:	d102      	bne.n	80090d6 <_close_r+0x1a>
 80090d0:	682b      	ldr	r3, [r5, #0]
 80090d2:	b103      	cbz	r3, 80090d6 <_close_r+0x1a>
 80090d4:	6023      	str	r3, [r4, #0]
 80090d6:	bd38      	pop	{r3, r4, r5, pc}
 80090d8:	20000868 	.word	0x20000868

080090dc <_fstat_r>:
 80090dc:	b538      	push	{r3, r4, r5, lr}
 80090de:	4d07      	ldr	r5, [pc, #28]	; (80090fc <_fstat_r+0x20>)
 80090e0:	2300      	movs	r3, #0
 80090e2:	4604      	mov	r4, r0
 80090e4:	4608      	mov	r0, r1
 80090e6:	4611      	mov	r1, r2
 80090e8:	602b      	str	r3, [r5, #0]
 80090ea:	f000 f845 	bl	8009178 <_fstat>
 80090ee:	1c43      	adds	r3, r0, #1
 80090f0:	d102      	bne.n	80090f8 <_fstat_r+0x1c>
 80090f2:	682b      	ldr	r3, [r5, #0]
 80090f4:	b103      	cbz	r3, 80090f8 <_fstat_r+0x1c>
 80090f6:	6023      	str	r3, [r4, #0]
 80090f8:	bd38      	pop	{r3, r4, r5, pc}
 80090fa:	bf00      	nop
 80090fc:	20000868 	.word	0x20000868

08009100 <_isatty_r>:
 8009100:	b538      	push	{r3, r4, r5, lr}
 8009102:	4d06      	ldr	r5, [pc, #24]	; (800911c <_isatty_r+0x1c>)
 8009104:	2300      	movs	r3, #0
 8009106:	4604      	mov	r4, r0
 8009108:	4608      	mov	r0, r1
 800910a:	602b      	str	r3, [r5, #0]
 800910c:	f000 f844 	bl	8009198 <_isatty>
 8009110:	1c43      	adds	r3, r0, #1
 8009112:	d102      	bne.n	800911a <_isatty_r+0x1a>
 8009114:	682b      	ldr	r3, [r5, #0]
 8009116:	b103      	cbz	r3, 800911a <_isatty_r+0x1a>
 8009118:	6023      	str	r3, [r4, #0]
 800911a:	bd38      	pop	{r3, r4, r5, pc}
 800911c:	20000868 	.word	0x20000868

08009120 <_lseek_r>:
 8009120:	b538      	push	{r3, r4, r5, lr}
 8009122:	4d07      	ldr	r5, [pc, #28]	; (8009140 <_lseek_r+0x20>)
 8009124:	4604      	mov	r4, r0
 8009126:	4608      	mov	r0, r1
 8009128:	4611      	mov	r1, r2
 800912a:	2200      	movs	r2, #0
 800912c:	602a      	str	r2, [r5, #0]
 800912e:	461a      	mov	r2, r3
 8009130:	f000 f842 	bl	80091b8 <_lseek>
 8009134:	1c43      	adds	r3, r0, #1
 8009136:	d102      	bne.n	800913e <_lseek_r+0x1e>
 8009138:	682b      	ldr	r3, [r5, #0]
 800913a:	b103      	cbz	r3, 800913e <_lseek_r+0x1e>
 800913c:	6023      	str	r3, [r4, #0]
 800913e:	bd38      	pop	{r3, r4, r5, pc}
 8009140:	20000868 	.word	0x20000868

08009144 <_read_r>:
 8009144:	b538      	push	{r3, r4, r5, lr}
 8009146:	4d07      	ldr	r5, [pc, #28]	; (8009164 <_read_r+0x20>)
 8009148:	4604      	mov	r4, r0
 800914a:	4608      	mov	r0, r1
 800914c:	4611      	mov	r1, r2
 800914e:	2200      	movs	r2, #0
 8009150:	602a      	str	r2, [r5, #0]
 8009152:	461a      	mov	r2, r3
 8009154:	f000 f838 	bl	80091c8 <_read>
 8009158:	1c43      	adds	r3, r0, #1
 800915a:	d102      	bne.n	8009162 <_read_r+0x1e>
 800915c:	682b      	ldr	r3, [r5, #0]
 800915e:	b103      	cbz	r3, 8009162 <_read_r+0x1e>
 8009160:	6023      	str	r3, [r4, #0]
 8009162:	bd38      	pop	{r3, r4, r5, pc}
 8009164:	20000868 	.word	0x20000868

08009168 <_close>:
 8009168:	4b02      	ldr	r3, [pc, #8]	; (8009174 <_close+0xc>)
 800916a:	2258      	movs	r2, #88	; 0x58
 800916c:	601a      	str	r2, [r3, #0]
 800916e:	f04f 30ff 	mov.w	r0, #4294967295
 8009172:	4770      	bx	lr
 8009174:	20000868 	.word	0x20000868

08009178 <_fstat>:
 8009178:	4b02      	ldr	r3, [pc, #8]	; (8009184 <_fstat+0xc>)
 800917a:	2258      	movs	r2, #88	; 0x58
 800917c:	601a      	str	r2, [r3, #0]
 800917e:	f04f 30ff 	mov.w	r0, #4294967295
 8009182:	4770      	bx	lr
 8009184:	20000868 	.word	0x20000868

08009188 <_getpid>:
 8009188:	4b02      	ldr	r3, [pc, #8]	; (8009194 <_getpid+0xc>)
 800918a:	2258      	movs	r2, #88	; 0x58
 800918c:	601a      	str	r2, [r3, #0]
 800918e:	f04f 30ff 	mov.w	r0, #4294967295
 8009192:	4770      	bx	lr
 8009194:	20000868 	.word	0x20000868

08009198 <_isatty>:
 8009198:	4b02      	ldr	r3, [pc, #8]	; (80091a4 <_isatty+0xc>)
 800919a:	2258      	movs	r2, #88	; 0x58
 800919c:	601a      	str	r2, [r3, #0]
 800919e:	2000      	movs	r0, #0
 80091a0:	4770      	bx	lr
 80091a2:	bf00      	nop
 80091a4:	20000868 	.word	0x20000868

080091a8 <_kill>:
 80091a8:	4b02      	ldr	r3, [pc, #8]	; (80091b4 <_kill+0xc>)
 80091aa:	2258      	movs	r2, #88	; 0x58
 80091ac:	601a      	str	r2, [r3, #0]
 80091ae:	f04f 30ff 	mov.w	r0, #4294967295
 80091b2:	4770      	bx	lr
 80091b4:	20000868 	.word	0x20000868

080091b8 <_lseek>:
 80091b8:	4b02      	ldr	r3, [pc, #8]	; (80091c4 <_lseek+0xc>)
 80091ba:	2258      	movs	r2, #88	; 0x58
 80091bc:	601a      	str	r2, [r3, #0]
 80091be:	f04f 30ff 	mov.w	r0, #4294967295
 80091c2:	4770      	bx	lr
 80091c4:	20000868 	.word	0x20000868

080091c8 <_read>:
 80091c8:	4b02      	ldr	r3, [pc, #8]	; (80091d4 <_read+0xc>)
 80091ca:	2258      	movs	r2, #88	; 0x58
 80091cc:	601a      	str	r2, [r3, #0]
 80091ce:	f04f 30ff 	mov.w	r0, #4294967295
 80091d2:	4770      	bx	lr
 80091d4:	20000868 	.word	0x20000868

080091d8 <_write>:
 80091d8:	4b02      	ldr	r3, [pc, #8]	; (80091e4 <_write+0xc>)
 80091da:	2258      	movs	r2, #88	; 0x58
 80091dc:	601a      	str	r2, [r3, #0]
 80091de:	f04f 30ff 	mov.w	r0, #4294967295
 80091e2:	4770      	bx	lr
 80091e4:	20000868 	.word	0x20000868

080091e8 <_exit>:
 80091e8:	e7fe      	b.n	80091e8 <_exit>
	...

080091ec <_init>:
 80091ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ee:	bf00      	nop
 80091f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091f2:	bc08      	pop	{r3}
 80091f4:	469e      	mov	lr, r3
 80091f6:	4770      	bx	lr

080091f8 <_fini>:
 80091f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fa:	bf00      	nop
 80091fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091fe:	bc08      	pop	{r3}
 8009200:	469e      	mov	lr, r3
 8009202:	4770      	bx	lr
